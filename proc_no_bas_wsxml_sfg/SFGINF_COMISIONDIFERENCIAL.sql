USE SFGPRODU;
--  DDL for Package Body SFGINF_COMISIONDIFERENCIAL
--------------------------------------------------------

  /* PACKAGE BODY WSXML_SFG.SFGINF_COMISIONDIFERENCIAL */ 

IF OBJECT_ID('WSXML_SFG.SFGINF_COMISIONDIFERENCIAL_GetBaseReportData', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGINF_COMISIONDIFERENCIAL_GetBaseReportData;
GO

CREATE     PROCEDURE WSXML_SFG.SFGINF_COMISIONDIFERENCIAL_GetBaseReportData(@p_CODCICLOFACTURACIONPDV NUMERIC(22,0),
                              @p_CODLINEADENEGOCIO      NUMERIC(22,0),
                              @pg_CADENA                NVARCHAR(2000),
                              @pg_ALIADOESTRATEGICO     NVARCHAR(2000),
                             @pg_PRODUCTO              NVARCHAR(2000)) AS
    DECLARE @strPRODCOLUMNS VARCHAR(MAX) = '';
    DECLARE @strSQLINSTRUCT VARCHAR(MAX) = '';
    DECLARE @strTFROMCLAUSE VARCHAR(MAX) = '';
    DECLARE @strWHERECLAUSE VARCHAR(MAX) = '';
	DECLARE @sql NVARCHAR(MAX);
    
    DECLARE @lstCOLUMNNAMES TABLE (VALUE VARCHAR(300))

  BEGIN
    
    DECLARE tPRODUCT CURSOR FOR SELECT ID_PRODUCTO, CODIGOGTECHPRODUCTO, NOMPRODUCTO 
						FROM WSXML_SFG.PRODUCTO PRD
                     INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ON (PRD.CODTIPOPRODUCTO = TPR.ID_TIPOPRODUCTO)
                     WHERE TPR.CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO AND PRD.ACTIVE = 1
                       AND PRD.CODALIADOESTRATEGICO = CASE WHEN @pg_ALIADOESTRATEGICO = '-1' THEN PRD.CODALIADOESTRATEGICO ELSE WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO) END
                       AND PRD.ID_PRODUCTO = CASE WHEN @pg_PRODUCTO = '-1' THEN PRD.ID_PRODUCTO ELSE WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO) END
                     ORDER BY CAST(PRD.CODIGOGTECHPRODUCTO AS NUMERIC(38,0)); 
	OPEN tPRODUCT

	DECLARE @ID_PRODUCTO NUMERIC(38,0), @CODIGOGTECHPRODUCTO NUMERIC(38,0), @NOMPRODUCTO VARCHAR(255)

	FETCH NEXT FROM tPRODUCT INTO @ID_PRODUCTO, @CODIGOGTECHPRODUCTO, @NOMPRODUCTO
	 WHILE @@FETCH_STATUS=0
	 BEGIN
        DECLARE @thisCOLUMNNAME VARCHAR(50);
        DECLARE @existsINLIST NUMERIC(22,0) = 0;
      BEGIN
        SET @thisCOLUMNNAME = CONVERT(VARCHAR, '' + ISNULL(@CODIGOGTECHPRODUCTO, '') + '.' + ISNULL(CASE WHEN LEN(@NOMPRODUCTO) > 24 THEN dbo.INITCAP(SUBSTRING(@NOMPRODUCTO, 0, 24)) ELSE dbo.INITCAP(@NOMPRODUCTO) END, '') + '');
        IF (SELECT COUNT(*) FROM @lstCOLUMNNAMES) > 0 BEGIN
			
		  
          DECLARE ix CURSOR FOR SELECT VALUE FROM @lstCOLUMNNAMES
		  OPEN ix

		  DECLARE @ix_value VARCHAR(300)

		  FETCH NEXT FROM ix INTO @ix_value
		  WHILE (@@FETCH_STATUS = 0)
			BEGIN
            IF @ix_value = @thisCOLUMNNAME BEGIN
              SET @existsINLIST = 1;
            END 
          FETCH NEXT FROM ix INTO @ix_value
          END;
          CLOSE ix;
          DEALLOCATE ix;
        END 
        IF @existsINLIST = 0 BEGIN
          
          INSERT INTO @lstCOLUMNNAMES VALUES(@thisCOLUMNNAME)

          SET @strPRODCOLUMNS = ISNULL(@strPRODCOLUMNS, '') + ', MAX(CASE WHEN PLD.CODPRODUCTO = ' + ISNULL(@ID_PRODUCTO, '') + ' THEN RCM.NOMRANGOCOMISION ELSE NULL END) AS ' + ISNULL(@thisCOLUMNNAME, '');
        END 
      END;
    FETCH NEXT FROM tPRODUCT INTO @ID_PRODUCTO, @CODIGOGTECHPRODUCTO, @NOMPRODUCTO
    END;
    CLOSE tPRODUCT;
    DEALLOCATE tPRODUCT;

    SET @strSQLINSTRUCT = 'SELECT CAST(CODIGOAGRUPACIONGTECH AS NUMERIC(38,0)) AS CODIGO, CONVERT(VARCHAR,PLT.NOMPLANTILLAPRODUCTO) AS PLANTILLA, CONVERT(VARCHAR,AGR.NOMAGRUPACIONPUNTODEVENTA) AS CADENA';
    SET @strTFROMCLAUSE = 'FROM WSXML_SFG.PLANTILLAPRODUCTO PLT ' +
                      'INNER JOIN WSXML_SFG.AGRUPACIONPUNTODEVENTA AGR ON (AGR.ID_AGRUPACIONPUNTODEVENTA = PLT.CODAGRUPACIONPUNTODEVENTA) ' +
                      'LEFT OUTER JOIN WSXML_SFG.PLANTILLAPRODUCTODETALLE PLD ON (PLD.CODPLANTILLAPRODUCTO = PLT.ID_PLANTILLAPRODUCTO) ' +
                      'LEFT OUTER JOIN WSXML_SFG.RANGOCOMISION RCM ON (PLD.CODRANGOCOMISION = RCM.ID_RANGOCOMISION) ';
    SET @strWHERECLAUSE = 'WHERE PLT.CODLINEADENEGOCIO = ' + ISNULL(CONVERT(VARCHAR,@p_CODLINEADENEGOCIO), '') + ' ' +
                      'AND MASTERPLANTILLA = 0 ' +
                      'GROUP BY CODIGOAGRUPACIONGTECH, NOMAGRUPACIONPUNTODEVENTA, NOMPLANTILLAPRODUCTO ' +
                      'ORDER BY CODIGO ';
    SET @sql = 
      'SELECT 0 AS CODIGO, ''N/A'' AS PLANTILLA, ''ESTANDAR'' AS CADENA' + ISNULL(@strPRODCOLUMNS, '') + ' ' +
      'FROM WSXML_SFG.PLANTILLAPRODUCTO PLT ' +
      'LEFT OUTER JOIN WSXML_SFG.PLANTILLAPRODUCTODETALLE PLD ON (PLD.CODPLANTILLAPRODUCTO = PLT.ID_PLANTILLAPRODUCTO) ' +
      'LEFT OUTER JOIN WSXML_SFG.RANGOCOMISION RCM ON (PLD.CODRANGOCOMISION = RCM.ID_RANGOCOMISION) ' +
      'WHERE PLT.CODLINEADENEGOCIO = ' + ISNULL(CONVERT(VARCHAR,@p_CODLINEADENEGOCIO), '') + ' ' +
      'AND MASTERPLANTILLA = 1 ' +
      'UNION ' +
      ISNULL(@strSQLINSTRUCT, '') + ISNULL(@strPRODCOLUMNS, '') + ' ' + ISNULL(@strTFROMCLAUSE, '') + ISNULL(@strWHERECLAUSE, '');
    EXECUTE sp_executesql @sql;
  END;
  GO




IF OBJECT_ID('WSXML_SFG.SFGINF_COMISIONDIFERENCIAL_GetReportData', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGINF_COMISIONDIFERENCIAL_GetReportData;
GO

CREATE     PROCEDURE WSXML_SFG.SFGINF_COMISIONDIFERENCIAL_GetReportData(@p_CODCICLOFACTURACIONPDV NUMERIC(22,0),
                          @p_CODLINEADENEGOCIO      NUMERIC(22,0),
                          @pg_CADENA                NVARCHAR(2000),
                          @pg_ALIADOESTRATEGICO     NVARCHAR(2000),
                         @pg_PRODUCTO              NVARCHAR(2000)) AS
    DECLARE @strPRODCOLUMNS VARCHAR(MAX) = '';
    DECLARE @strSQLINSTRUCT VARCHAR(MAX) = '';
    DECLARE @strTFROMCLAUSE VARCHAR(MAX) = '';
    DECLARE @strWHERECLAUSE VARCHAR(MAX) = '';
    DECLARE @sql NVARCHAR(MAX);
    
    DECLARE @lstCOLUMNNAMES TABLE (VALUE VARCHAR(300))
  BEGIN
   
    DECLARE tPRODUCT CURSOR FOR SELECT ID_PRODUCTO, CODIGOGTECHPRODUCTO, NOMPRODUCTO FROM WSXML_SFG.PRODUCTO PRD
                     INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ON (PRD.CODTIPOPRODUCTO = TPR.ID_TIPOPRODUCTO)
                     WHERE TPR.CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO AND PRD.ACTIVE = 1
                       AND PRD.CODALIADOESTRATEGICO = CASE WHEN @pg_ALIADOESTRATEGICO = '-1' THEN PRD.CODALIADOESTRATEGICO ELSE WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO) END
                       AND PRD.ID_PRODUCTO = CASE WHEN @pg_PRODUCTO = '-1' THEN PRD.ID_PRODUCTO ELSE WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO) END
                     ORDER BY CAST(PRD.CODIGOGTECHPRODUCTO AS NUMERIC(38,0)); OPEN tPRODUCT;

DECLARE @tPRODUCT__ID_PRODUCTO NUMERIC(38,0), @tPRODUCT__CODIGOGTECHPRODUCTO  NUMERIC(38,0), @tPRODUCT__NOMPRODUCTO VARCHAR(255)

 FETCH NEXT FROM tPRODUCT INTO @tPRODUCT__ID_PRODUCTO, @tPRODUCT__CODIGOGTECHPRODUCTO, @tPRODUCT__NOMPRODUCTO
 WHILE @@FETCH_STATUS=0
 BEGIN
        DECLARE @thisCOLUMNNAME VARCHAR(50);
        DECLARE @existsINLIST NUMERIC(22,0) = 0;
      BEGIN
        SET @thisCOLUMNNAME = CONVERT(VARCHAR, '' + ISNULL(@tPRODUCT__CODIGOGTECHPRODUCTO, '') + '.' + ISNULL(CASE WHEN LEN(@tPRODUCT__NOMPRODUCTO) > 24 THEN dbo.INITCAP(SUBSTRING(@tPRODUCT__NOMPRODUCTO, 0, 24)) ELSE dbo.INITCAP(@tPRODUCT__NOMPRODUCTO) END, '') + '');
        IF (select count(*) from @lstCOLUMNNAMES) > 0 BEGIN
          DECLARE ix CURSOR FOR SELECT VALUE FROM @lstCOLUMNNAMES
		  OPEN ix

		  declare @ix__value VARCHAR(300)
		  FETCH NEXT FROM ix INTO @ix__value
        
			WHILE (@@FETCH_STATUS = 0)
			BEGIN
            IF @ix__value = @thisCOLUMNNAME BEGIN
              SET @existsINLIST = 1;
            END 
          FETCH NEXT FROM ix INTO @ix__value
          END;
          CLOSE ix;
          DEALLOCATE ix;
        END 

        IF @existsINLIST = 0 BEGIN
          INSERT INTO @lstCOLUMNNAMES VALUES (@thisCOLUMNNAME)
          SET @strPRODCOLUMNS = ISNULL(@strPRODCOLUMNS, '') + ', SUM(CASE WHEN PLD.CODPRODUCTO = ' + ISNULL(@tPRODUCT__ID_PRODUCTO, '') + ' THEN ISNULL(VPV.VALORCOMISION, 0) ELSE 0 END) AS ' + ISNULL(@thisCOLUMNNAME, '');
        END 
      END;
     FETCH NEXT FROM tPRODUCT INTO @tPRODUCT__ID_PRODUCTO, @tPRODUCT__CODIGOGTECHPRODUCTO, @tPRODUCT__NOMPRODUCTO
    END;
    CLOSE tPRODUCT;
    DEALLOCATE tPRODUCT;

    SET @strSQLINSTRUCT = 'SELECT CAST(AGR.CODIGOAGRUPACIONGTECH AS NUMERIC(38,0)) AS CODIGO, CONVERT(VARCHAR,PLT.NOMPLANTILLAPRODUCTO) AS PLANTILLA, CONVERT(VARCHAR,AGR.NOMAGRUPACIONPUNTODEVENTA) AS CADENA';
    SET @strTFROMCLAUSE = 'FROM WSXML_SFG.PLANTILLAPRODUCTO PLT ' +
                      'INNER JOIN WSXML_SFG.AGRUPACIONPUNTODEVENTA AGR ON (AGR.ID_AGRUPACIONPUNTODEVENTA = PLT.CODAGRUPACIONPUNTODEVENTA) ' +
                      'LEFT OUTER JOIN WSXML_SFG.PLANTILLAPRODUCTODETALLE PLD ON (PLD.CODPLANTILLAPRODUCTO = PLT.ID_PLANTILLAPRODUCTO) ' +
                      'LEFT OUTER JOIN WSXML_SFG.VW_SHOW_PDVFACTURACION VPV ON (VPV.ID_CICLOFACTURACIONPDV = ' + ISNULL(CONVERT(VARCHAR,@p_CODCICLOFACTURACIONPDV), '') + ' AND VPV.CODAGRUPACIONPUNTODEVENTA = PLT.CODAGRUPACIONPUNTODEVENTA AND VPV.ID_PRODUCTO = PLD.CODPRODUCTO) ';
    SET @strWHERECLAUSE = 'WHERE PLT.CODLINEADENEGOCIO = ' + ISNULL(CONVERT(VARCHAR,@p_CODLINEADENEGOCIO), '') + ' ' +
                      'AND MASTERPLANTILLA = 0 ' +
                      'GROUP BY AGR.CODIGOAGRUPACIONGTECH, AGR.NOMAGRUPACIONPUNTODEVENTA, NOMPLANTILLAPRODUCTO ' +
                      'ORDER BY CODIGO';
    SET @sql = 
      'SELECT 0 AS CODIGO, ''N/A'' AS PLANTILLA, ''ESTANDAR'' AS CADENA' + ISNULL(@strPRODCOLUMNS, '') + ' ' +
      'FROM WSXML_SFG.PLANTILLAPRODUCTO PLT ' +
      'LEFT OUTER JOIN WSXML_SFG.PLANTILLAPRODUCTODETALLE PLD ON (PLD.CODPLANTILLAPRODUCTO = PLT.ID_PLANTILLAPRODUCTO) ' +
      'LEFT OUTER JOIN WSXML_SFG.VW_SHOW_PDVFACTURACION VPV ON (VPV.ID_CICLOFACTURACIONPDV = ' + ISNULL(CONVERT(VARCHAR,@p_CODCICLOFACTURACIONPDV), '') + ' AND VPV.ID_PRODUCTO = PLD.CODPRODUCTO AND VPV.CODAGRUPACIONPUNTODEVENTA = WSXML_SFG.AGRUPACION_F(0)) ' +
      'WHERE PLT.CODLINEADENEGOCIO = ' + ISNULL(CONVERT(VARCHAR,@p_CODLINEADENEGOCIO), '') + ' ' +
      'AND MASTERPLANTILLA = 1 ' +
      'UNION ' +
      ISNULL(@strSQLINSTRUCT, '') + ISNULL(@strPRODCOLUMNS, '') + ' ' + ISNULL(@strTFROMCLAUSE, '') + ISNULL(@strWHERECLAUSE, '');
    EXECUTE sp_executesql @sql;
  END;


GO
