USE SFGPRODU;
--  DDL for Package Body SFGCICLOFACTURACIONPDV
--------------------------------------------------------

  /* PACKAGE BODY WSXML_SFG.SFGCICLOFACTURACIONPDV */ 

  IF OBJECT_ID('WSXML_SFG.SFGCICLOFACTURACIONPDV_AddRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGCICLOFACTURACIONPDV_AddRecord;
GO

CREATE     PROCEDURE WSXML_SFG.SFGCICLOFACTURACIONPDV_AddRecord(@p_FECHAEJECUCION             DATETIME,
                      @p_CODUSUARIOMODIFICACION     NUMERIC(22,0),
                      @p_ID_CICLOFACTURACIONPDV_out NUMERIC(22,0) OUT) AS
 BEGIN
    DECLARE @cCODSECUENCIA NUMERIC(22,0);
   
  SET NOCOUNT ON;
  
	BEGIN TRY
    -- Un ciclo diario
    SELECT @p_ID_CICLOFACTURACIONPDV_out = ID_CICLOFACTURACIONPDV FROM WSXML_SFG.CICLOFACTURACIONPDV
    WHERE CONVERT(DATETIME, CONVERT(DATE,FECHAEJECUCION)) = CONVERT(DATETIME, CONVERT(DATE,@p_FECHAEJECUCION))
      AND ACTIVE = 1;

	END TRY
	BEGIN CATCH
		BEGIN
		  SELECT @cCODSECUENCIA = ISNULL(MAX(SECUENCIA), 0) FROM WSXML_SFG.CICLOFACTURACIONPDV
		  WHERE ACTIVE = 1;
		  SET @cCODSECUENCIA = @cCODSECUENCIA + 1;
		  
		  IF @@ROWCOUNT = 0
				SELECT @cCODSECUENCIA = 1;
		END;
	END CATCH

    INSERT INTO WSXML_SFG.CICLOFACTURACIONPDV (FECHAEJECUCION,SECUENCIA,CODUSUARIOMODIFICACION)
    VALUES (@p_FECHAEJECUCION,@cCODSECUENCIA,@p_CODUSUARIOMODIFICACION);
    SET @p_ID_CICLOFACTURACIONPDV_out = SCOPE_IDENTITY();
  END;
GO

IF OBJECT_ID('WSXML_SFG.SFGCICLOFACTURACIONPDV_UpdateRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGCICLOFACTURACIONPDV_UpdateRecord;
GO

CREATE     PROCEDURE WSXML_SFG.SFGCICLOFACTURACIONPDV_UpdateRecord(@pk_ID_CICLOFACTURACIONPDV  NUMERIC(22,0),
                         @p_FECHAEJECUCION           DATETIME,
                         @p_CODUSUARIOMODIFICACION   NUMERIC(22,0),
                         @p_ACTIVE                   NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
    UPDATE WSXML_SFG.CICLOFACTURACIONPDV
       SET FECHAEJECUCION = @p_FECHAEJECUCION,
           CODUSUARIOMODIFICACION = @p_CODUSUARIOMODIFICACION,
           ACTIVE                 = @p_ACTIVE
     WHERE ID_CICLOFACTURACIONPDV = @pk_ID_CICLOFACTURACIONPDV;

    IF @@rowcount = 0 BEGIN
      RAISERROR('-20054 The record no longer exists.', 16, 1);
    END 
    IF @@rowcount > 1 BEGIN
      RAISERROR('-20053 Duplicate object instances.', 16, 1);
    END 
  END;
GO

IF OBJECT_ID('WSXML_SFG.SFGCICLOFACTURACIONPDV_GetRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGCICLOFACTURACIONPDV_GetRecord;
GO
CREATE     PROCEDURE WSXML_SFG.SFGCICLOFACTURACIONPDV_GetRecord(@pk_ID_CICLOFACTURACIONPDV NUMERIC(22,0)) AS
 BEGIN
    DECLARE @l_count INTEGER;
   
  SET NOCOUNT ON;

    SELECT @l_count = COUNT(*) FROM WSXML_SFG.CICLOFACTURACIONPDV
     WHERE ID_CICLOFACTURACIONPDV = @pk_ID_CICLOFACTURACIONPDV;

    IF @l_count = 0 BEGIN
      RAISERROR('-20054 The record no longer exists.', 16, 1);
    END 
    IF @l_count > 1 BEGIN
      RAISERROR('-20053 Duplicate object instances.', 16, 1);
    END 
	  
      SELECT ID_CICLOFACTURACIONPDV,
             FECHAEJECUCION,
             FECHAHORAMODIFICACION,
             CODUSUARIOMODIFICACION,
             ACTIVE
        FROM WSXML_SFG.CICLOFACTURACIONPDV
       WHERE ID_CICLOFACTURACIONPDV = @pk_ID_CICLOFACTURACIONPDV;
	 
  END;
GO

IF OBJECT_ID('WSXML_SFG.SFGCICLOFACTURACIONPDV_GetList', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGCICLOFACTURACIONPDV_GetList;
GO
CREATE     PROCEDURE WSXML_SFG.SFGCICLOFACTURACIONPDV_GetList(@p_active NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
	  
      SELECT ID_CICLOFACTURACIONPDV,
             FECHAEJECUCION,
             FECHAHORAMODIFICACION,
             CODUSUARIOMODIFICACION,
             SECUENCIA,
             ACTIVE
        FROM WSXML_SFG.CICLOFACTURACIONPDV
       WHERE ACTIVE = CASE WHEN @p_active = -1 THEN ACTIVE ELSE @p_active END
       ORDER BY SECUENCIA DESC;
	 
  END;
GO

IF OBJECT_ID('WSXML_SFG.SFGCICLOFACTURACIONPDV_GetCicloDateRangeFromID', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGCICLOFACTURACIONPDV_GetCicloDateRangeFromID;
GO

CREATE     PROCEDURE WSXML_SFG.SFGCICLOFACTURACIONPDV_GetCicloDateRangeFromID(@p_CODCICLOFACTURACIONPDV NUMERIC(22,0), @p_INIDATE_out DATETIME OUT, @p_ENDDATE_out DATETIME OUT) AS
  BEGIN
  SET NOCOUNT ON;
    SELECT @p_ENDDATE_out = FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ID_CICLOFACTURACIONPDV = @p_CODCICLOFACTURACIONPDV;
    BEGIN
		DECLARE @msglog VARCHAR(2000) 
		BEGIN TRY
		
			SELECT @p_INIDATE_out = FECHAEJECUCION 
			FROM WSXML_SFG.CICLOFACTURACIONPDV
			WHERE SECUENCIA + 1 = (
					SELECT SECUENCIA FROM WSXML_SFG.CICLOFACTURACIONPDV
					WHERE ID_CICLOFACTURACIONPDV = @p_CODCICLOFACTURACIONPDV)
			AND ACTIVE = 1;
			
			IF @@ROWCOUNT = 0 BEGIN
				SET @msglog = 'Cannot get execution date for previous cycle: Current: ' + ISNULL(@p_CODCICLOFACTURACIONPDV, '')
				EXEC WSXML_SFG.SFGTMPTRACE_TraceLog @msglog
			END 
		END TRY
		BEGIN CATCH
			SET @msglog = 'Cannot get execution date for previous cycle: Current: ' + ISNULL(@p_CODCICLOFACTURACIONPDV, '')
			EXEC WSXML_SFG.SFGTMPTRACE_TraceLog @msglog
		END CATCH
		SET @p_INIDATE_out = @p_ENDDATE_out - 7;
    END;

    SET @p_INIDATE_out = @p_INIDATE_out + 1;
  END;
GO


IF OBJECT_ID('WSXML_SFG.SFGCICLOFACTURACIONPDV_GetCicloDateRangeFromID_F', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFGCICLOFACTURACIONPDV_GetCicloDateRangeFromID_F;
GO

CREATE     FUNCTION WSXML_SFG.SFGCICLOFACTURACIONPDV_GetCicloDateRangeFromID_F(@p_CODCICLOFACTURACIONPDV NUMERIC(22,0))
	RETURNS @fechas TABLE (INIDATE DATETIME, ENDDATE DATETIME) AS
  BEGIN

    DECLARE @p_INIDATE_out DATETIME, @p_ENDDATE_out DATETIME

    SELECT @p_ENDDATE_out = FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ID_CICLOFACTURACIONPDV = @p_CODCICLOFACTURACIONPDV;
    BEGIN
		DECLARE @msglog VARCHAR(2000) 

		
			SELECT @p_INIDATE_out = FECHAEJECUCION 
			FROM WSXML_SFG.CICLOFACTURACIONPDV
			WHERE SECUENCIA + 1 = (
					SELECT SECUENCIA FROM WSXML_SFG.CICLOFACTURACIONPDV
					WHERE ID_CICLOFACTURACIONPDV = @p_CODCICLOFACTURACIONPDV)
			AND ACTIVE = 1;
		
		SET @p_INIDATE_out = @p_ENDDATE_out - 7;
    END;

    SET @p_INIDATE_out = @p_INIDATE_out + 1;

	INSERT INTO @fechas VALUES(@p_INIDATE_out, @p_ENDDATE_out)
	RETURN 
  END;
GO



IF OBJECT_ID('WSXML_SFG.SFGCICLOFACTURACIONPDV_ReadProcessFlag', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFGCICLOFACTURACIONPDV_ReadProcessFlag;
GO
CREATE FUNCTION WSXML_SFG.SFGCICLOFACTURACIONPDV_ReadProcessFlag() RETURNS NUMERIC(22,0) AS
 BEGIN
    DECLARE @countprocessflag NUMERIC(22,0) = 0;
   
    SELECT @countprocessflag = COUNT(1) FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE FLAGPROCESO = 1;
    RETURN @countprocessflag;
  END;
GO

IF OBJECT_ID('WSXML_SFG.SFGCICLOFACTURACIONPDV_MarkProcessFlag', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGCICLOFACTURACIONPDV_MarkProcessFlag;
GO

CREATE     PROCEDURE WSXML_SFG.SFGCICLOFACTURACIONPDV_MarkProcessFlag(@p_CODCICLOFACTURACIONPDV NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
    UPDATE WSXML_SFG.CICLOFACTURACIONPDV SET FLAGPROCESO = 1 WHERE ID_CICLOFACTURACIONPDV = @p_CODCICLOFACTURACIONPDV;
    --COMMIT;
  END;
GO

IF OBJECT_ID('WSXML_SFG.SFGCICLOFACTURACIONPDV_FreeProcessFlag', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGCICLOFACTURACIONPDV_FreeProcessFlag;
GO

CREATE  PROCEDURE WSXML_SFG.SFGCICLOFACTURACIONPDV_FreeProcessFlag(@p_CODCICLOFACTURACIONPDV NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
    UPDATE WSXML_SFG.CICLOFACTURACIONPDV SET FLAGPROCESO = 0 WHERE ID_CICLOFACTURACIONPDV = @p_CODCICLOFACTURACIONPDV;
    --COMMIT;
  END;
GO



IF OBJECT_ID('WSXML_SFG.SFGCICLOFACTURACIONPDV_GetTerminatedCycle', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGCICLOFACTURACIONPDV_GetTerminatedCycle;
GO

CREATE  PROCEDURE WSXML_SFG.SFGCICLOFACTURACIONPDV_GetTerminatedCycle(@p_FECHAEJECUCION DATETIME, @p_TERMINATED NUMERIC(22,0) OUT, @p_ERRORMESSAGE NVARCHAR(2000) OUT) AS
 BEGIN
    DECLARE @cCODCICLOFACTURACIONPDV NUMERIC(22,0);
    --DECLARE @UNBALANCEDCYCLE EXCEPTION;

	--DECLARE @p_ERRORMESSAGE VARCHAR(2000);
	--*DECLARE @p_TERMINATED INTEGER;
   
  SET NOCOUNT ON;
  BEGIN TRY
    IF WSXML_SFG.SFGCICLOFACTURACIONPDV_ReadProcessFlag() <> 0 BEGIN
      SET @p_TERMINATED = 0;
      SET @p_ERRORMESSAGE = 'Existe un ciclo de facturacion en curso';
      RETURN;
    END 
    --cCODCICLOFACTURACIONPDV := ULTIMO_CICLOFACTURACION(SYSDATE);
    BEGIN
		SELECT @cCODCICLOFACTURACIONPDV = ID_CICLOFACTURACIONPDV FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE FECHAEJECUCION = CONVERT(DATETIME, CONVERT(DATE,@p_FECHAEJECUCION)) AND ACTIVE = 1;
		IF @@ROWCOUNT = 0
		BEGIN
			-- Try previous date in case cycle lasted a day
			SELECT @cCODCICLOFACTURACIONPDV = ID_CICLOFACTURACIONPDV FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE FECHAEJECUCION = CONVERT(DATETIME, CONVERT(DATE,@p_FECHAEJECUCION - 1)) AND ACTIVE = 1;
			IF @@ROWCOUNT = 0
				BEGIN
					SELECT @cCODCICLOFACTURACIONPDV = ID_CICLOFACTURACIONPDV FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE FECHAEJECUCION = CONVERT(DATETIME, CONVERT(DATE,@p_FECHAEJECUCION - 2)) AND ACTIVE = 1;
					IF @@ROWCOUNT = 0 BEGIN
						SELECT @cCODCICLOFACTURACIONPDV = ID_CICLOFACTURACIONPDV FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE FECHAEJECUCION = CONVERT(DATETIME, CONVERT(DATE,@p_FECHAEJECUCION - 3)) AND ACTIVE = 1;

						IF @@ROWCOUNT = 0 BEGIN
							SET @p_TERMINATED = 0;
							SET @p_ERRORMESSAGE = 'No existe ciclo de facturacion para la fecha especificada';
							RETURN 0;
						END
					END

				END;
		END;

    END;

    -- Check for every LDN
    DECLARE tBALANCE CURSOR FOR SELECT /*+ push_pred(VWP_VALIDARFACTURACION) */
				ID_LINEADENEGOCIO,
				CANTIDADVENTAFACT    , CANTIDADVENTAPREF,
				VALORVENTAFACT       , VALORVENTAPREF,
				CANTIDADANULACIONFACT, CANTIDADANULACIONPREF,
				VALORANULACIONFACT   , VALORANULACIONPREF,
				VALORPREMIOPAGOFACT  , VALORPREMIOPAGOPREF
		 FROM WSXML_SFG.VWP_BALANCEFACTURACION WHERE ID_CICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV
		 ORDER BY ID_LINEADENEGOCIO; 
	OPEN tBALANCE;

	DECLARE @tBALANCEID__LINEADENEGOCIO NUMERIC(38,0),
				@tBALANCE__CANTIDADVENTAFACT  NUMERIC(38,0)    , @tBALANCE__CANTIDADVENTAPREF  NUMERIC(38,0),
				@tBALANCE__VALORVENTAFACT   FLOAT    , @tBALANCE__VALORVENTAPREF FLOAT,
				@tBALANCE__CANTIDADANULACIONFACT  NUMERIC(38,0), @tBALANCE__CANTIDADANULACIONPREF  NUMERIC(38,0),
				@tBALANCE__VALORANULACIONFACT  FLOAT , @tBALANCE__VALORANULACIONPREF FLOAT,
				@tBALANCE__VALORPREMIOPAGOFACT  FLOAT , @tBALANCE__VALORPREMIOPAGOPREF FLOAT
	
	
		
	 FETCH NEXT FROM tBALANCE INTO @tBALANCEID__LINEADENEGOCIO,
				@tBALANCE__CANTIDADVENTAFACT    , @tBALANCE__CANTIDADVENTAPREF,
				@tBALANCE__VALORVENTAFACT       , @tBALANCE__VALORVENTAPREF,
				@tBALANCE__CANTIDADANULACIONFACT, @tBALANCE__CANTIDADANULACIONPREF,
				@tBALANCE__VALORANULACIONFACT   , @tBALANCE__VALORANULACIONPREF,
				@tBALANCE__VALORPREMIOPAGOFACT  , @tBALANCE__VALORPREMIOPAGOPREF;

	 WHILE @@FETCH_STATUS=0
	 BEGIN
		IF @tBALANCE__CANTIDADVENTAFACT     <> @tBALANCE__CANTIDADVENTAPREF     OR
			 @tBALANCE__VALORVENTAFACT        <> @tBALANCE__VALORVENTAPREF        OR
			@tBALANCE__CANTIDADANULACIONFACT <> @tBALANCE__CANTIDADANULACIONPREF OR
			@tBALANCE__VALORANULACIONFACT    <> @tBALANCE__VALORANULACIONPREF    OR
			@tBALANCE__VALORPREMIOPAGOFACT   <> @tBALANCE__VALORPREMIOPAGOPREF   BEGIN
			SET @p_ERRORMESSAGE = 'No existe balance de valores en el ciclo para ' + ISNULL(WSXML_SFG.LINEADENEGOCIO_NOMBRE_F(tBALANCE.ID_LINEADENEGOCIO), '');
			-- RAISE UNBALANCEDCYCLE;
		END 
		FETCH NEXT FROM tBALANCE INTO @tBALANCEID__LINEADENEGOCIO,
				@tBALANCE__CANTIDADVENTAFACT    , @tBALANCE__CANTIDADVENTAPREF,
				@tBALANCE__VALORVENTAFACT       , @tBALANCE__VALORVENTAPREF,
				@tBALANCE__CANTIDADANULACIONFACT, @tBALANCE__CANTIDADANULACIONPREF,
				@tBALANCE__VALORANULACIONFACT   , @tBALANCE__VALORANULACIONPREF,
				@tBALANCE__VALORPREMIOPAGOFACT  , @tBALANCE__VALORPREMIOPAGOPREF;
	  END;

    CLOSE tBALANCE;
    DEALLOCATE tBALANCE;
    SET @p_TERMINATED = 1;
    SET @p_ERRORMESSAGE = 'El ciclo de facturacion ha terminado correctamente, y los valores han balanceado';
  END TRY
  BEGIN CATCH
	SET @p_TERMINATED = 0;
  END CATCH

END;
GO



 IF OBJECT_ID('WSXML_SFG.SFGCICLOFACTURACIONPDV_GetCicloInformationFromID', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGCICLOFACTURACIONPDV_GetCicloInformationFromID;
GO

CREATE     PROCEDURE WSXML_SFG.SFGCICLOFACTURACIONPDV_GetCicloInformationFromID(@p_CODCICLOFACTURACIONPDV NUMERIC(22,0)) AS
 BEGIN
    DECLARE @cPRVCICLOFACTURACIONDTE DATETIME;
   
  SET NOCOUNT ON;
    BEGIN
		BEGIN TRY
		  SELECT @cPRVCICLOFACTURACIONDTE = FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV
		  WHERE SECUENCIA + 1 = (SELECT SECUENCIA FROM WSXML_SFG.CICLOFACTURACIONPDV
								 WHERE ID_CICLOFACTURACIONPDV = @p_CODCICLOFACTURACIONPDV)
			AND ACTIVE = 1;
		END TRY
		BEGIN CATCH
			DECLARE @msglog VARCHAR(2000) = 'Cannot get execution date for previous cycle: Current: ' + ISNULL(@p_CODCICLOFACTURACIONPDV, '')
			EXEC WSXML_SFG.SFGTMPTRACE_TraceLog @msglog
		END CATCH
		SET @cPRVCICLOFACTURACIONDTE = NULL;
    END;
	
      SELECT ID_CICLOFACTURACIONPDV,
             SECUENCIA,
             WSXML_SFG.SFG_PACKAGE_GetWeekNumber(FECHAEJECUCION)     AS SEMANA,
             WSXML_SFG.SFG_PACKAGE_DateToShortString(ISNULL(@cPRVCICLOFACTURACIONDTE,CONVERT(DATETIME,FECHAEJECUCION) - 7) + 1)
                                                           AS FECHAINICIO,
             WSXML_SFG.SFG_PACKAGE_DateToShortString(FECHAEJECUCION) AS FECHAFIN,
             WSXML_SFG.SFG_PACKAGE_GetNumeroCDC(FECHAEJECUCION)      AS CDC
      FROM WSXML_SFG.CICLOFACTURACIONPDV
      WHERE ID_CICLOFACTURACIONPDV = @p_CODCICLOFACTURACIONPDV;
	
  END;
GO




IF OBJECT_ID('WSXML_SFG.SFGCICLOFACTURACIONPDV_GetCicloInformation', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGCICLOFACTURACIONPDV_GetCicloInformation;
GO

CREATE     PROCEDURE WSXML_SFG.SFGCICLOFACTURACIONPDV_GetCicloInformation(@p_SECUENCIA NUMERIC(22,0), @p_cur CURSOR VARYING  OUTPUT) AS
 BEGIN
    DECLARE @cCODCICLOFACTURACIONPDV NUMERIC(22,0);
    DECLARE @cPRVCICLOFACTURACIONDTE DATETIME;
   
  SET NOCOUNT ON;
    -- Get this billing cycle id
    BEGIN
		SELECT @cCODCICLOFACTURACIONPDV = ID_CICLOFACTURACIONPDV FROM WSXML_SFG.CICLOFACTURACIONPDV
		WHERE SECUENCIA = @p_SECUENCIA AND ACTIVE = 1;
		
		IF @@ROWCOUNT = 0
			SELECT  @cCODCICLOFACTURACIONPDV = WSXML_SFG.ULTIMO_CICLOFACTURACION(GETDATE());
    END;

    -- Last billing cycle id
    BEGIN
		SELECT @cPRVCICLOFACTURACIONDTE = FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV
		WHERE SECUENCIA + 1 = (
				SELECT SECUENCIA FROM WSXML_SFG.CICLOFACTURACIONPDV
				WHERE ID_CICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV
		)
        AND ACTIVE = 1;
		
		IF @@ROWCOUNT = 0 BEGIN
			DECLARE @msglog VARCHAR(2000) = 'Cannot get execution date for previous cycle: Current: ' + ISNULL(@cCODCICLOFACTURACIONPDV, '')
			EXEC WSXML_SFG.SFGTMPTRACE_TraceLog @msglog
		END
		  
		SELECT @cPRVCICLOFACTURACIONDTE = FORMAT(GETDATE(), 'YY');
    END;
	
      SELECT ID_CICLOFACTURACIONPDV,
             SECUENCIA,
             WSXML_SFG.SFG_PACKAGE_GetYearNumber(FECHAEJECUCION)             AS ANO,
             WSXML_SFG.SFG_PACKAGE_GetWeekNumber(FECHAEJECUCION)             AS SEMANA,
             WSXML_SFG.SFG_PACKAGE_DateToString(@cPRVCICLOFACTURACIONDTE + 1) AS FECHAINICIO,
             WSXML_SFG.SFG_PACKAGE_DateToString(FECHAEJECUCION)              AS FECHAFIN,
             WSXML_SFG.SFG_PACKAGE_GetNumeroCDC(FECHAEJECUCION)              AS CDC,
             WSXML_SFG.SFG_PACKAGE_DateToString(CONVERT(DATETIME,FECHAEJECUCION) + 2)          AS FECHACOBROINICIO,
             WSXML_SFG.SFG_PACKAGE_DateToString(CONVERT(DATETIME,FECHAEJECUCION) + 7)          AS FECHACOBROFIN,
             WSXML_SFG.SFG_PACKAGE_GetCycleSorteos(SECUENCIA)                AS SORTEOSTRING
      FROM WSXML_SFG.CICLOFACTURACIONPDV
      WHERE ID_CICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV;
	
  END;
GO
