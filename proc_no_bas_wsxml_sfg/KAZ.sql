USE SFGPRODU;
--  DDL for Package Body KAZ
--------------------------------------------------------

  /* PACKAGE BODY WSXML_SFG.KAZ */ 

  IF OBJECT_ID('WSXML_SFG.KAZ_ArchivosDeCiclo', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.KAZ_ArchivosDeCiclo;
GO
CREATE     PROCEDURE WSXML_SFG.KAZ_ArchivosDeCiclo(@p_SECUENCIA NUMERIC(22,0)) AS
 BEGIN
    DECLARE @cMAXSECUENCIAFACTURACION NUMERIC(22,0);
    DECLARE @cCODCICLOFACTURACIONPDV  NUMERIC(22,0);
    DECLARE @msg VARCHAR(2000)
  SET NOCOUNT ON;
    -- Obtencion de ciclo
    BEGIN
      IF @p_SECUENCIA = -1 BEGIN
        SELECT @cMAXSECUENCIAFACTURACION = MAX(SECUENCIA) FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ACTIVE = 1;
      END
      ELSE BEGIN
        SET @cMAXSECUENCIAFACTURACION = @p_SECUENCIA;
      END 
      SELECT @cCODCICLOFACTURACIONPDV = ID_CICLOFACTURACIONPDV FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE SECUENCIA = @cMAXSECUENCIAFACTURACION AND ACTIVE = 1;
		IF @@ROWCOUNT = 0
			SET @msg = '-20054 No existe el ciclo de facturacion No. ' + ISNULL(@p_SECUENCIA, '')
			RAISERROR(@msg, 16, 1);
		IF @@ROWCOUNT = 0 BEGIN
			SET @msg ='-20054 Hay mas de un ciclo de facturacion con el mismo codigo de secuencia. Este es un problema de consistencia de datos.'
			RAISERROR(@msg, 16, 1);
		END
    END;
      SELECT ID_ENTRADAARCHIVOCONTROL, TIPOARCHIVO, WSXML_SFG.SFG_PACKAGE_DateToString(FECHAARCHIVO) AS FECHAARCHIVO, WSXML_SFG.SFG_PACKAGE_GETNUMEROCDC(FECHAARCHIVO) AS CDC
      FROM WSXML_SFG.ENTRADAARCHIVOCONTROL WHERE CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV
      ORDER BY TIPOARCHIVO, FECHAARCHIVO;
  END
GO

  IF OBJECT_ID('WSXML_SFG.KAZ_PrefacturacionJuegos', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.KAZ_PrefacturacionJuegos;
GO
CREATE     PROCEDURE WSXML_SFG.KAZ_PrefacturacionJuegos(@pk_ID_ENTRADAARCHIVOCONTROL NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
      SELECT PRF.CODIGOAGRUPACIONGTECH   AS Chain,
             PRF.CODREGIMEN              AS Regimen,
             CD.CIUDADDANE               AS Ciudad,
             PRF.CODIGOGTECHPUNTODEVENTA AS POS,
             PRF.NUMEROTERMINAL          AS Term,
             PRF.CODIGOGTECHPRODUCTO     AS Prd,
             LDN.NOMLINEADENEGOCIO       AS LDN,
             PRD.NOMPRODUCTO             AS Product,
             ISNULL(PRF.IDENTIFICACION, '') + '-' + ISNULL(PRF.DIGITOVERIFICACION, '') AS NIT,
             NumIngresos                 AS CantidadIngresos,
             CASE WHEN IsComisionAnticipo = 0 THEN CONVERT(VARCHAR, RCM.NOMRANGOCOMISION) ELSE '0%' END AS Comision,
             CASE WHEN IsComisionAnticipo = 1 THEN CONVERT(VARCHAR, RCM.NOMRANGOCOMISION) ELSE '0%' END AS Anticipo,
             Ingresos                    AS Ingresos,
             NumAnulaciones              AS CantidadAnulaciones,
             Anulaciones                 AS Anulaciones,
             IngresosValidos             AS IngresosValidos,
             IvaProducto                 AS IvaProducto,
             IngresosBrutos              AS IngresosBrutos,
             Comision                    AS ComisionCalculada,
             ComisionAnticipo            AS AnticipoCalculado,
             IVAComision                 AS IVAComision,
             ComisionBruta               AS ComisionBruta,
             CASE WHEN PRF.CODLINEADENEGOCIO = 1 THEN ReteUVT ELSE ReteFuente END AS ReteFuente,
             ReteIVA                     AS ReteIVA,
             ReteICA                     AS ReteICA,
             ComisionNeta                AS ComisionNeta,
             PremiosPagados              AS PremiosPagados,
             IngresosValidos - ComisionNeta - PremiosPagados AS ValorAPagar
      FROM WSXML_SFG.VW_PREFACTURACION_DIARIA PRF
      INNER JOIN WSXML_SFG.CIUDAD CD                  ON (CD.ID_CIUDAD = PRF.CODCIUDAD)
      INNER JOIN WSXML_SFG.PRODUCTO PRD               ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO)
      INNER JOIN WSXML_SFG.LINEADENEGOCIO LDN         ON (LDN.ID_LINEADENEGOCIO = PRF.CODLINEADENEGOCIO)
      INNER JOIN WSXML_SFG.RANGOCOMISION RCM          ON (PRF.CODRANGOCOMISION = RCM.ID_RANGOCOMISION)
      WHERE PRF.ID_ENTRADAARCHIVOCONTROL = @pk_ID_ENTRADAARCHIVOCONTROL AND PRF.TIPOARCHIVO = 2
        AND PRF.CODLINEADENEGOCIO = 1
      ORDER BY CAST(PRF.CODIGOAGRUPACIONGTECH AS NUMERIC(38,0)), CAST(PRF.CODIGOGTECHPUNTODEVENTA AS NUMERIC(38,0)), CAST(PRF.CODIGOGTECHPRODUCTO AS NUMERIC(38,0));
  END;
GO

  IF OBJECT_ID('WSXML_SFG.KAZ_PrefacturacionCSPartOne', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.KAZ_PrefacturacionCSPartOne;
GO
CREATE     PROCEDURE WSXML_SFG.KAZ_PrefacturacionCSPartOne(@pk_ID_ENTRADAARCHIVOCONTROL NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
      SELECT PRF.CODIGOAGRUPACIONGTECH      AS Chain,
             PRF.CODREGIMEN                 AS Regimen,
             CD.CIUDADDANE                  AS Ciudad,
             PRF.CODIGOGTECHPUNTODEVENTA    AS POS,
             PRF.NUMEROTERMINAL             AS Term,
             PRF.CODIGOGTECHPRODUCTO        AS Prd,
             LDN.NOMLINEADENEGOCIO          AS LDN,
             PRD.NOMPRODUCTO                AS Product,
             ISNULL(PRF.IDENTIFICACION, '') + '-' + ISNULL(PRF.DIGITOVERIFICACION, '') AS NIT,
             NumIngresos                    AS CantidadIngresos,
             CONVERT(VARCHAR, WSXML_SFG.SFGCATEGORIAPAGO_GetComissionString(RCM.ID_RANGOCOMISION, PRF.CODCATEGORIAPAGO)) AS Comision,
             RCM.CODTIPOCOMISION            AS Tipo,
             IngresosValidos                AS IngresosValidos,
             Comision                       AS ComisionCalculada,
             IVAComision                    AS IVAComision,
             ComisionBruta                  AS ComisionBruta,
             CASE WHEN PRF.CODLINEADENEGOCIO = 1 THEN ReteUVT ELSE ReteFuente END AS ReteFuente,
             ReteIVA                        AS ReteIVA,
             ReteICA                        AS ReteICA,
             ComisionNeta                   AS ComisionNeta,
             IngresosValidos - ComisionNeta AS ValorAPagar
      FROM WSXML_SFG.VW_PREFACTURACION_DIARIA PRF
      INNER JOIN WSXML_SFG.CIUDAD CD                  ON (CD.ID_CIUDAD = PRF.CODCIUDAD)
      INNER JOIN WSXML_SFG.PRODUCTO PRD               ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO)
      INNER JOIN WSXML_SFG.LINEADENEGOCIO LDN         ON (LDN.ID_LINEADENEGOCIO = PRF.CODLINEADENEGOCIO)
      INNER JOIN WSXML_SFG.RANGOCOMISION RCM          ON (PRF.CODRANGOCOMISION = RCM.ID_RANGOCOMISION)
      WHERE PRF.ID_ENTRADAARCHIVOCONTROL = @pk_ID_ENTRADAARCHIVOCONTROL AND PRF.TIPOARCHIVO = 1
        AND PRF.CODLINEADENEGOCIO IN (2, 3)
        AND CAST(PRF.CODIGOGTECHPUNTODEVENTA AS NUMERIC(38,0)) <= 8460
      ORDER BY CAST(PRF.CODIGOAGRUPACIONGTECH AS NUMERIC(38,0)), CAST(PRF.CODIGOGTECHPUNTODEVENTA AS NUMERIC(38,0)), CAST(PRF.CODIGOGTECHPRODUCTO AS NUMERIC(38,0));
  END;
GO

  IF OBJECT_ID('WSXML_SFG.KAZ_PrefacturacionCSPartTwo', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.KAZ_PrefacturacionCSPartTwo;
GO
CREATE     PROCEDURE WSXML_SFG.KAZ_PrefacturacionCSPartTwo(@pk_ID_ENTRADAARCHIVOCONTROL NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
      SELECT PRF.CODIGOAGRUPACIONGTECH      AS Chain,
             PRF.CODREGIMEN                 AS Regimen,
             CD.CIUDADDANE                  AS Ciudad,
             PRF.CODIGOGTECHPUNTODEVENTA    AS POS,
             PRF.NUMEROTERMINAL             AS Term,
             PRF.CODIGOGTECHPRODUCTO        AS Prd,
             LDN.NOMLINEADENEGOCIO          AS LDN,
             PRD.NOMPRODUCTO                AS Product,
             ISNULL(PRF.IDENTIFICACION, '') + '-' + ISNULL(PRF.DIGITOVERIFICACION, '') AS NIT,
             NumIngresos                    AS CantidadIngresos,
             CONVERT(VARCHAR, WSXML_SFG.SFGCATEGORIAPAGO_GetComissionString(RCM.ID_RANGOCOMISION, PRF.CODCATEGORIAPAGO)) AS Comision,
             RCM.CODTIPOCOMISION            AS Tipo,
             IngresosValidos                AS IngresosValidos,
             Comision                       AS ComisionCalculada,
             IVAComision                    AS IVAComision,
             ComisionBruta                  AS ComisionBruta,
             CASE WHEN PRF.CODLINEADENEGOCIO = 1 THEN ReteUVT ELSE ReteFuente END AS ReteFuente,
             ReteIVA                        AS ReteIVA,
             ReteICA                        AS ReteICA,
             ComisionNeta                   AS ComisionNeta,
             IngresosValidos - ComisionNeta AS ValorAPagar
      FROM WSXML_SFG.VW_PREFACTURACION_DIARIA PRF
      INNER JOIN WSXML_SFG.CIUDAD CD                  ON (CD.ID_CIUDAD = PRF.CODCIUDAD)
      INNER JOIN PRODUCTO PRD               ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO)
      INNER JOIN WSXML_SFG.LINEADENEGOCIO LDN         ON (LDN.ID_LINEADENEGOCIO = PRF.CODLINEADENEGOCIO)
      INNER JOIN WSXML_SFG.RANGOCOMISION RCM          ON (PRF.CODRANGOCOMISION = RCM.ID_RANGOCOMISION)
      WHERE PRF.ID_ENTRADAARCHIVOCONTROL = @pk_ID_ENTRADAARCHIVOCONTROL AND PRF.TIPOARCHIVO = 1
        AND PRF.CODLINEADENEGOCIO IN (2, 3)
        AND CAST(PRF.CODIGOGTECHPUNTODEVENTA AS NUMERIC(38,0)) > 8460
      ORDER BY CAST(PRF.CODIGOAGRUPACIONGTECH AS NUMERIC(38,0)), CAST(PRF.CODIGOGTECHPUNTODEVENTA AS NUMERIC(38,0)), CAST(PRF.CODIGOGTECHPRODUCTO AS NUMERIC(38,0));
  END;
GO


  IF OBJECT_ID('WSXML_SFG.KAZ_FacturacionJuegos', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.KAZ_FacturacionJuegos;
GO
CREATE     PROCEDURE WSXML_SFG.KAZ_FacturacionJuegos(@pk_ID_CICLOFACTURACIONPDV NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
      SELECT AGR.CODIGOAGRUPACIONGTECH As Chain,
             PDV.CODREGIMEN AS Regimen,
             CD.CIUDADDANE as Ciudad,
             PDV.CODIGOGTECHPUNTODEVENTA AS POS,
             PDV.NUMEROTERMINAL AS Term,
             PRD.CODIGOGTECHPRODUCTO AS Prd,
             LDN.NOMLINEADENEGOCIO AS LDN,
             PRD.NOMPRODUCTO AS Product,
             ISNULL(IDENTIFICACION, '') + ISNULL(ISNULL(ISNULL(DIGITOVERIFICACION, '-' + ISNULL(DIGITOVERIFICACION, '')), ''), '') AS NIT,
             -- Valores
             CANTIDADVENTA AS CantidadIngresos,
             CASE WHEN COMISIONANTICIPO = 0 THEN CONVERT(VARCHAR, RCM.NOMRANGOCOMISION) ELSE '0%' END AS Comision,
             CASE WHEN COMISIONANTICIPO = 1 THEN CONVERT(VARCHAR, RCM.NOMRANGOCOMISION) ELSE '0%' END AS Anticipo,
             VALORVENTA AS Ingresos,
             CANTIDADANULACION AS CantidadAnulaciones,
             VALORANULACION AS Anulaciones,
             VALORVENTA - VALORANULACION AS IngresosValidos,
             IMPUESTO_IVA AS IvaProducto,
             VALORVENTABRUTA AS IngresosBrutos,
             CASE WHEN COMISIONANTICIPO = 0 THEN VALORCOMISION ELSE 0 END AS ComisionCalculada,
             CASE WHEN COMISIONANTICIPO = 1 THEN VALORCOMISION ELSE 0 END AS AnticipoCalculado,
             VATCOMISION AS IVAComision,
             VALORCOMISIONBRUTA AS ComisionBruta,
             VALORRETENCIONUVT AS ReteFuente,
             RETENCION_RETEIVA AS ReteIVA,
             RETENCION_RETEICA AS ReteICA,
             VALORCOMISIONNETA AS ComisionNeta,
             VALORPREMIOPAGO AS PremiosPagados,
             FACTURADOENCONTRAGTECH - FACTURADOAFAVORGTECH AS TotalAPagarGTECH,
             FACTURADOENCONTRAFIDUCIA - FACTURADOAFAVORFIDUCIA AS TotalAPagarFiducia
      FROM WSXML_SFG.VW_SHOW_PDVFACTURACION PRF
      INNER JOIN WSXML_SFG.PUNTODEVENTA PDV           ON (PRF.ID_PUNTODEVENTA = PDV.ID_PUNTODEVENTA)
      INNER JOIN WSXML_SFG.CIUDAD CD                  ON (CD.ID_CIUDAD = PDV.CODCIUDAD)
      INNER JOIN WSXML_SFG.AGRUPACIONPUNTODEVENTA AGR ON (AGR.ID_AGRUPACIONPUNTODEVENTA = PDV.CODAGRUPACIONPUNTODEVENTA)
      INNER JOIN WSXML_SFG.PRODUCTO PRD               ON (PRD.ID_PRODUCTO = PRF.ID_PRODUCTO)
      INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR           ON (TPR.ID_TIPOPRODUCTO = PRD.CODTIPOPRODUCTO)
      INNER JOIN WSXML_SFG.LINEADENEGOCIO LDN         ON (LDN.ID_LINEADENEGOCIO = TPR.CODLINEADENEGOCIO)
      INNER JOIN WSXML_SFG.RANGOCOMISION RCM          ON (PRF.CODRANGOCOMISION = RCM.ID_RANGOCOMISION)
      INNER JOIN WSXML_SFG.RANGOCOMISIONDETALLE RCD   ON (RCD.CODRANGOCOMISION = RCM.ID_RANGOCOMISION)
      WHERE PRF.ID_CICLOFACTURACIONPDV = @pk_ID_CICLOFACTURACIONPDV
        AND PRF.CODLINEADENEGOCIO = 1
      ORDER BY cast(AGR.CODIGOAGRUPACIONGTECH as numeric(38,0)), cast(PDV.CODIGOGTECHPUNTODEVENTA as numeric(38,0)), cast(CODIGOGTECHPRODUCTO as numeric(38,0));
  END;
GO
  

  
  IF OBJECT_ID('WSXML_SFG.KAZ_FacturacionCSPartOne', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.KAZ_FacturacionCSPartOne;
GO
CREATE     PROCEDURE WSXML_SFG.KAZ_FacturacionCSPartOne(@pk_ID_CICLOFACTURACIONPDV NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
      SELECT AGR.CODIGOAGRUPACIONGTECH As Chain,
             PDV.CODREGIMEN AS Regimen,
             CD.CIUDADDANE as Ciudad,
             PDV.CODIGOGTECHPUNTODEVENTA AS POS,
             PDV.NUMEROTERMINAL AS Term,
             PRD.CODIGOGTECHPRODUCTO AS Prd,
             LDN.NOMLINEADENEGOCIO AS LDN,
             PRD.NOMPRODUCTO AS Product,
             ISNULL(IDENTIFICACION, '') + ISNULL(ISNULL(ISNULL(DIGITOVERIFICACION, '-' + ISNULL(DIGITOVERIFICACION, '')), ''), '') AS NIT,
             -- Valores
             CANTIDADVENTA AS CantidadIngresos,
             CASE WHEN COMISIONANTICIPO = 0 THEN CONVERT(VARCHAR, WSXML_SFG.SFGCATEGORIAPAGO_GETCOMISSIONSTRING(RCM.ID_RANGOCOMISION, 0)) ELSE '0%' END AS Comision,
             RCM.CODTIPOCOMISION AS Tipo,
             VALORVENTA - VALORANULACION AS IngresosValidos,
             CASE WHEN COMISIONANTICIPO = 0 THEN VALORCOMISION ELSE 0 END AS ComisionCalculada,
             VATCOMISION AS IVAComision,
             VALORCOMISIONBRUTA AS ComisionBruta,
             RETENCION_RENTA AS ReteFuente,
             RETENCION_RETEIVA AS ReteIVA,
             RETENCION_RETEICA AS ReteICA,
             VALORCOMISIONNETA AS ComisionNeta,
             FACTURADOENCONTRAGTECH - FACTURADOAFAVORGTECH AS TotalAPagarGTECH
      FROM WSXML_SFG.VW_SHOW_PDVFACTURACION PRF
      INNER JOIN PUNTODEVENTA PDV           ON (PRF.ID_PUNTODEVENTA = PDV.ID_PUNTODEVENTA)
      INNER JOIN CIUDAD CD                  ON (CD.ID_CIUDAD = PDV.CODCIUDAD)
      INNER JOIN AGRUPACIONPUNTODEVENTA AGR ON (AGR.ID_AGRUPACIONPUNTODEVENTA = PDV.CODAGRUPACIONPUNTODEVENTA)
      INNER JOIN PRODUCTO PRD               ON (PRD.ID_PRODUCTO = PRF.ID_PRODUCTO)
      INNER JOIN TIPOPRODUCTO TPR           ON (TPR.ID_TIPOPRODUCTO = PRD.CODTIPOPRODUCTO)
      INNER JOIN LINEADENEGOCIO LDN         ON (LDN.ID_LINEADENEGOCIO = TPR.CODLINEADENEGOCIO)
      INNER JOIN RANGOCOMISION RCM          ON (PRF.CODRANGOCOMISION = RCM.ID_RANGOCOMISION)
      INNER JOIN RANGOCOMISIONDETALLE RCD   ON (RCD.CODRANGOCOMISION = RCM.ID_RANGOCOMISION)
      WHERE PRF.ID_CICLOFACTURACIONPDV = @pk_ID_CICLOFACTURACIONPDV
        AND PRF.CODLINEADENEGOCIO IN (2, 3)
        AND CAST(PRF.CODIGOGTECHPUNTODEVENTA AS NUMERIC(38,0)) <= 8460
      ORDER BY CAST(AGR.CODIGOAGRUPACIONGTECH AS NUMERIC(38,0)), CAST(PDV.CODIGOGTECHPUNTODEVENTA AS NUMERIC(38,0)), CAST(CODIGOGTECHPRODUCTO AS NUMERIC(38,0));
  END;
GO

  IF OBJECT_ID('WSXML_SFG.KAZ_FacturacionCSPartTwo', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.KAZ_FacturacionCSPartTwo;
GO

CREATE     PROCEDURE WSXML_SFG.KAZ_FacturacionCSPartTwo(@pk_ID_CICLOFACTURACIONPDV NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
      SELECT AGR.CODIGOAGRUPACIONGTECH As Chain,
             PDV.CODREGIMEN AS Regimen,
             CD.CIUDADDANE as Ciudad,
             PDV.CODIGOGTECHPUNTODEVENTA AS POS,
             PDV.NUMEROTERMINAL AS Term,
             PRD.CODIGOGTECHPRODUCTO AS Prd,
             LDN.NOMLINEADENEGOCIO AS LDN,
             PRD.NOMPRODUCTO AS Product,
             ISNULL(IDENTIFICACION, '') + ISNULL(ISNULL(ISNULL(DIGITOVERIFICACION, '-' + ISNULL(DIGITOVERIFICACION, '')), ''), '') AS NIT,
             -- Valores
             CANTIDADVENTA AS CantidadIngresos,
             CASE WHEN COMISIONANTICIPO = 0 THEN CONVERT(VARCHAR, WSXML_SFG.SFGCATEGORIAPAGO_GETCOMISSIONSTRING(RCM.ID_RANGOCOMISION, 0)) ELSE '0%' END AS Comision,
             RCM.CODTIPOCOMISION AS Tipo,
             VALORVENTA - VALORANULACION AS IngresosValidos,
             CASE WHEN COMISIONANTICIPO = 0 THEN VALORCOMISION ELSE 0 END AS ComisionCalculada,
             VATCOMISION AS IVAComision,
             VALORCOMISIONBRUTA AS ComisionBruta,
             RETENCION_RENTA AS ReteFuente,
             RETENCION_RETEIVA AS ReteIVA,
             RETENCION_RETEICA AS ReteICA,
             VALORCOMISIONNETA AS ComisionNeta,
             FACTURADOENCONTRAGTECH - FACTURADOAFAVORGTECH AS TotalAPagarGTECH
      FROM WSXML_SFG.VW_SHOW_PDVFACTURACION PRF
      INNER JOIN WSXML_SFG.PUNTODEVENTA PDV           ON (PRF.ID_PUNTODEVENTA = PDV.ID_PUNTODEVENTA)
      INNER JOIN WSXML_SFG.CIUDAD CD                  ON (CD.ID_CIUDAD = PDV.CODCIUDAD)
      INNER JOIN WSXML_SFG.AGRUPACIONPUNTODEVENTA AGR ON (AGR.ID_AGRUPACIONPUNTODEVENTA = PDV.CODAGRUPACIONPUNTODEVENTA)
      INNER JOIN WSXML_SFG.PRODUCTO PRD               ON (PRD.ID_PRODUCTO = PRF.ID_PRODUCTO)
      INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR           ON (TPR.ID_TIPOPRODUCTO = PRD.CODTIPOPRODUCTO)
      INNER JOIN WSXML_SFG.LINEADENEGOCIO LDN         ON (LDN.ID_LINEADENEGOCIO = TPR.CODLINEADENEGOCIO)
      INNER JOIN WSXML_SFG.RANGOCOMISION RCM          ON (PRF.CODRANGOCOMISION = RCM.ID_RANGOCOMISION)
      INNER JOIN WSXML_SFG.RANGOCOMISIONDETALLE RCD   ON (RCD.CODRANGOCOMISION = RCM.ID_RANGOCOMISION)
      WHERE PRF.ID_CICLOFACTURACIONPDV = @pk_ID_CICLOFACTURACIONPDV
        AND PRF.CODLINEADENEGOCIO IN (2, 3)
        AND CAST(PRF.CODIGOGTECHPUNTODEVENTA  AS NUMERIC(38,0)) > 8460
      ORDER BY CAST(AGR.CODIGOAGRUPACIONGTECH AS NUMERIC(38,0)), CAST(PDV.CODIGOGTECHPUNTODEVENTA  AS NUMERIC(38,0)), CAST(CODIGOGTECHPRODUCTO AS NUMERIC(38,0));
  END;
  GO
  
    IF OBJECT_ID('WSXML_SFG.KAZ_ReplaceRootPassword', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.KAZ_ReplaceRootPassword;
GO

CREATE     PROCEDURE WSXML_SFG.KAZ_ReplaceRootPassword(@user NUMERIC(22,0), @password VARCHAR(4000)) AS
  BEGIN
  SET NOCOUNT ON;
    UPDATE WSXML_SFG.USUARIOSISTEMA SET CONTRASENA = CONVERT(varbinary(MAX), @password) WHERE CODUSUARIO = system_user;
  END;
GO

  IF OBJECT_ID('WSXML_SFG.KAZ_GetRootPassword', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.KAZ_GetRootPassword;
GO

CREATE     PROCEDURE WSXML_SFG.KAZ_GetRootPassword(@user NUMERIC(22,0), @password VARCHAR(4000) OUT) AS
  BEGIN
  SET NOCOUNT ON;
    SELECT @password = CONVERT(VARCHAR(100), CONTRASENA) FROM WSXML_SFG.USUARIOSISTEMA WHERE CODUSUARIO = system_user;
  END;
GO

--DECLARE  @hexstring VARCHAR(2000)= 15;
--select CONVERT(varbinary(MAX), @hexstring)


--declare @hexbin VARCHAR(max) = 0x3135 ;
--SELECT CONVERT(VARCHAR(60), @hexbin);



  IF OBJECT_ID('WSXML_SFG.KAZ_UpdateNetworkItem', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.KAZ_UpdateNetworkItem;
GO

  CREATE PROCEDURE WSXML_SFG.KAZ_UpdateNetworkItem(@p_CODIGOGTECHPUNTODEVENTA   NVARCHAR(2000),
                              @p_NUMEROTERMINAL            NVARCHAR(2000),
                              @p_NOMPUNTODEVENTA           NVARCHAR(2000),
                              @p_CODCIUDAD                 NUMERIC(22,0),
                              @p_TELEFONO                  NVARCHAR(2000),
                              @p_DIRECCION                 NVARCHAR(2000),
                              @p_NUMEROLINEA               NVARCHAR(2000),
                              @p_NUMERODROP                NVARCHAR(2000),
                              @p_CODTIPOESTACION           NUMERIC(22,0),
                              @p_CODPUERTOTERMINAL         NUMERIC(22,0),
                              @p_CODTIPONEGOCIO            NUMERIC(22,0),
                              @p_CODRUTAPDV                NUMERIC(22,0),
                              @p_CODREDPDV                 NUMERIC(22,0),
                              @p_CODTIPOTERMINAL           NUMERIC(22,0),
                              @p_NOMBRENODO                NVARCHAR(2000),
                              @p_ADDRESSNODO               NVARCHAR(2000),
                              @p_CODREGIONAL               NUMERIC(22,0),
                              @p_PUERTOESTACION            NVARCHAR(2000),
                              @p_CODREGIMEN                NUMERIC(22,0),
                              @p_IDENTIFICACION            NUMERIC(22,0),
                              @p_DIGITOVERIFICACION        NUMERIC(22,0),
                              @p_CODUSUARIOMODIFICACION    NUMERIC(22,0),
                              @p_ACTIVE                    NUMERIC(22,0),
                              @p_NOMAGRUPACIONPUNTODEVENTA NVARCHAR(2000),
                              @p_CODIGOAGRUPACIONGTECH     NVARCHAR(2000),
                              @p_CODTIPOPUNTODEVENTA       NUMERIC(22,0),
                              @p_ISCABEZA                  NUMERIC(22,0),
                              @p_ID_PUNTODEVENTA_out       NUMERIC(22,0) OUT) AS
 BEGIN
    DECLARE @cCODRAZONSOCIAL            NUMERIC(22,0);
    DECLARE @cCODAGRUPACIONPUNTODEVENTA NUMERIC(22,0);
    DECLARE @cCODPUNTODEVENTA           NUMERIC(22,0);
   
  SET NOCOUNT ON;
    -- Obtain RAZONSOCIAL
    BEGIN
      SELECT @cCODRAZONSOCIAL = ID_RAZONSOCIAL FROM WSXML_SFG.RAZONSOCIAL
      WHERE IDENTIFICACION = @p_IDENTIFICACION;
		IF @@ROWCOUNT = 0 BEGIN
			DECLARE @thisrazonsocialid NUMERIC(22,0);
		  BEGIN
			--SELECT @thisrazonsocialid = RAZONSOCIAL_SEQ.NextVal;
			INSERT INTO WSXML_SFG.RAZONSOCIAL (--ID_RAZONSOCIAL,
									 CODIGOGTECHRAZONSOCIAL,
									 NOMRAZONSOCIAL,
									 IDENTIFICACION,
									 DIGITOVERIFICACION,
									 CODCIUDAD,
									 CODREGIMEN,
									 CODUSUARIOMODIFICACION)
			VALUES (--@thisrazonsocialid,
					@thisrazonsocialid * (-1),
					ISNULL(@p_IDENTIFICACION, '') + '-' + ISNULL(@p_DIGITOVERIFICACION, ''),
					@p_IDENTIFICACION,
					@p_DIGITOVERIFICACION,
					@p_CODCIUDAD,
					@p_CODREGIMEN,
					@p_CODUSUARIOMODIFICACION);
			SET @cCODRAZONSOCIAL = SCOPE_IDENTITY();
		END
      END;
    END;
    -- Obtain AGRUPACIONPUNTODEVENTA
    BEGIN
      SELECT @cCODAGRUPACIONPUNTODEVENTA = ID_AGRUPACIONPUNTODEVENTA FROM WSXML_SFG.AGRUPACIONPUNTODEVENTA
      WHERE CAST(CODIGOAGRUPACIONGTECH AS NUMERIC(38,0)) = CAST(@p_CODIGOAGRUPACIONGTECH AS NUMERIC(38,0));
      UPDATE WSXML_SFG.AGRUPACIONPUNTODEVENTA
         SET NOMAGRUPACIONPUNTODEVENTA = @p_NOMAGRUPACIONPUNTODEVENTA,
             CODTIPOPUNTODEVENTA       = @p_CODTIPOPUNTODEVENTA
       WHERE ID_AGRUPACIONPUNTODEVENTA = @cCODAGRUPACIONPUNTODEVENTA;
		IF @@ROWCOUNT = 0 BEGIN
		  INSERT INTO WSXML_SFG.AGRUPACIONPUNTODEVENTA (
											  NOMAGRUPACIONPUNTODEVENTA,
											  CODIGOAGRUPACIONGTECH,
											  CODTIPOPUNTODEVENTA,
											  CODUSUARIOMODIFICACION)
		  VALUES (
				  @p_NOMAGRUPACIONPUNTODEVENTA,
				  @p_CODIGOAGRUPACIONGTECH,
				  @p_CODTIPOPUNTODEVENTA,
				  @p_CODUSUARIOMODIFICACION);
		  SET @cCODAGRUPACIONPUNTODEVENTA = SCOPE_IDENTITY();
		END
    END;
    -- Insert PUNTODEVENTA Record
    BEGIN
      SELECT @cCODPUNTODEVENTA = ID_PUNTODEVENTA FROM WSXML_SFG.PUNTODEVENTA
      WHERE CAST(CODIGOGTECHPUNTODEVENTA AS NUMERIC(38,0)) = CAST(@p_CODIGOGTECHPUNTODEVENTA AS NUMERIC(38,0));
      UPDATE WSXML_SFG.PUNTODEVENTA
         SET NUMEROTERMINAL            = @p_NUMEROTERMINAL,
             NOMPUNTODEVENTA           = @p_NOMPUNTODEVENTA,
             CODCIUDAD                 = @p_CODCIUDAD,
             TELEFONO                  = @p_TELEFONO,
             DIRECCION                 = @p_DIRECCION,
             NUMEROLINEA               = @p_NUMEROLINEA,
             NUMERODROP                = @p_NUMERODROP,
             CODTIPOESTACION           = CASE WHEN @p_CODTIPOESTACION = 0 THEN NULL ELSE @p_CODTIPOESTACION END,
             CODPUERTOTERMINAL         = CASE WHEN @p_CODPUERTOTERMINAL = 0 THEN NULL ELSE @p_CODPUERTOTERMINAL END,
             CODTIPONEGOCIO            = CASE WHEN @p_CODTIPONEGOCIO = 0 THEN NULL ELSE @p_CODTIPONEGOCIO END,
             CODRUTAPDV                = CASE WHEN @p_CODRUTAPDV = 0 THEN NULL ELSE @p_CODRUTAPDV END,
             CODREDPDV                 = CASE WHEN @p_CODREDPDV = 0 THEN NULL ELSE @p_CODREDPDV END,
             CODTIPOTERMINAL           = CASE WHEN @p_CODTIPOTERMINAL = 0 THEN NULL ELSE @p_CODTIPOTERMINAL END,
             NOMBRENODO                = @p_NOMBRENODO,
             ADDRESSNODO               = @p_ADDRESSNODO,
             CODREGIONAL               = CASE WHEN @p_CODREGIONAL = 0 THEN NULL ELSE @p_CODREGIONAL END,
             PUERTOESTACION            = @p_PUERTOESTACION,
             CODREGIMEN                = @p_CODREGIMEN,
             CODAGRUPACIONPUNTODEVENTA = @cCODAGRUPACIONPUNTODEVENTA,
             IDENTIFICACION            = @p_IDENTIFICACION,
             DIGITOVERIFICACION        = @p_DIGITOVERIFICACION,
             CODRAZONSOCIAL            = @cCODRAZONSOCIAL,
             CODUSUARIOMODIFICACION    = @p_CODUSUARIOMODIFICACION,
             ACTIVE                    = @p_ACTIVE
      WHERE ID_PUNTODEVENTA = @cCODPUNTODEVENTA;
		IF @@ROWCOUNT = 0 BEGIN
      INSERT INTO WSXML_SFG.PUNTODEVENTA (
                                CODIGOGTECHPUNTODEVENTA,
                                NUMEROTERMINAL,
                                NOMPUNTODEVENTA,
                                CODCIUDAD,
                                TELEFONO,
                                DIRECCION,
                                NUMEROLINEA,
                                NUMERODROP,
                                CODTIPOESTACION,
                                CODPUERTOTERMINAL,
                                CODTIPONEGOCIO,
                                CODRUTAPDV,
                                CODREDPDV,
                                CODTIPOTERMINAL,
                                NOMBRENODO,
                                ADDRESSNODO,
                                CODREGIONAL,
                                PUERTOESTACION,
                                CODREGIMEN,
                                CODAGRUPACIONPUNTODEVENTA,
                                IDENTIFICACION,
                                DIGITOVERIFICACION,
                                CODRAZONSOCIAL,
                                CODUSUARIOMODIFICACION,
                                ACTIVE)
      VALUES (
              @p_CODIGOGTECHPUNTODEVENTA,
              @p_NUMEROTERMINAL,
              @p_NOMPUNTODEVENTA,
              @p_CODCIUDAD,
              @p_TELEFONO,
              @p_DIRECCION,
              @p_NUMEROLINEA,
              @p_NUMERODROP,
              CASE WHEN @p_CODTIPOESTACION = 0 THEN NULL ELSE @p_CODTIPOESTACION END,
              CASE WHEN @p_CODPUERTOTERMINAL = 0 THEN NULL ELSE @p_CODPUERTOTERMINAL END,
              CASE WHEN @p_CODTIPONEGOCIO = 0 THEN NULL ELSE @p_CODTIPONEGOCIO END,
              CASE WHEN @p_CODRUTAPDV = 0 THEN NULL ELSE @p_CODRUTAPDV END,
              CASE WHEN @p_CODREDPDV = 0 THEN NULL ELSE @p_CODREDPDV END,
              CASE WHEN @p_CODTIPOTERMINAL = 0 THEN NULL ELSE @p_CODTIPOTERMINAL END,
              @p_NOMBRENODO,
              @p_ADDRESSNODO,
              CASE WHEN @p_CODREGIONAL = 0 THEN NULL ELSE @p_CODREGIONAL END,
              @p_PUERTOESTACION,
              @p_CODREGIMEN,
              @cCODAGRUPACIONPUNTODEVENTA,
              @p_IDENTIFICACION,
              @p_DIGITOVERIFICACION,
              @cCODRAZONSOCIAL,
              @p_CODUSUARIOMODIFICACION,
              @p_ACTIVE);
      SET @cCODPUNTODEVENTA = SCOPE_IDENTITY();
	  END
    END;
    IF @p_ISCABEZA = 1 BEGIN
      UPDATE WSXML_SFG.AGRUPACIONPUNTODEVENTA SET CODPUNTODEVENTACABEZA = @cCODPUNTODEVENTA
      WHERE ID_AGRUPACIONPUNTODEVENTA = @cCODAGRUPACIONPUNTODEVENTA;
    END 
    SET @p_ID_PUNTODEVENTA_out = @cCODPUNTODEVENTA;
  END;
  
 GO
 
 
 
 
   IF OBJECT_ID('WSXML_SFG.KAZ_SCFileDropReferences', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.KAZ_SCFileDropReferences;
GO

  CREATE PROCEDURE WSXML_SFG.KAZ_SCFileDropReferences(@p_CODENTRADAARCHIVOCONTROL NUMERIC(22,0), @p_DROPPEDREFERENCECOUNT_out NUMERIC(22,0) OUT) AS
 BEGIN
    DECLARE @referencelist WSXML_SFG.LONGNUMBERARRAY;
    DECLARE @countrecords NUMERIC(22,0) = 0;
    DECLARE @waitnrecords NUMERIC(22,0) = 50;
   
  SET NOCOUNT ON;
	INSERT INTO  @referencelist
    SELECT ID_REGISTROFACTREFERENCIA 
    FROM WSXML_SFG.REGISTROFACTURACION
    INNER JOIN WSXML_SFG.REGISTROFACTREFERENCIA ON (CODREGISTROFACTURACION = ID_REGISTROFACTURACION)
    WHERE CODENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;

    IF @@ROWCOUNT > 0 BEGIN
      DECLARE ix CURSOR for SELECT IDVALUE FROM @referencelist
	  open ix

	  declare @ix__idvalue NUMERIC(38,0)
	  FETCH NEXT FROM ix INTO @ix__idvalue

	  WHILE (@@FETCH_STATUS = 0)
	  BEGIN
			DELETE FROM WSXML_SFG.REGISTROFACTREFERENCIA WHERE ID_REGISTROFACTREFERENCIA = @ix__idvalue
			SET @countrecords = @countrecords + 1;
			IF (@countrecords % @waitnrecords) = 0 BEGIN
			  COMMIT;
			END 
		FETCH NEXT FROM ix INTO @ix__idvalue
      END;

      CLOSE ix;
      DEALLOCATE ix;
    END 
    COMMIT;
    SET @p_DROPPEDREFERENCECOUNT_out = @countrecords;
  END;
GO

  /* Obtains the records for every deposit slip to be generated */
  IF OBJECT_ID('WSXML_SFG.KAZ_ReplicaCicloFacturacion', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.KAZ_ReplicaCicloFacturacion;
GO


  CREATE PROCEDURE WSXML_SFG.KAZ_ReplicaCicloFacturacion(@p_RETVALUE_out NUMERIC(22,0) OUT) AS
 BEGIN

    SET NOCOUNT ON;

    DECLARE @cCODCICLOFACTURACION    NUMERIC(22,0) = 971;
    DECLARE @cTODAY                  DATETIME = CONVERT(DATETIME, '03/01/2009', 103); -- Emula la fecha de facturacion, y es utilizado para efectos de algoritmo de referencia
    DECLARE @cCODUSUARIOMODIFICACION NUMERIC(22,0) = 1;
    DECLARE @cSECUENCIACICLO         NUMERIC(22,0) = 1;
    DECLARE @xLINEACONFIGURACION     WSXML_SFG.IDVALUE;

    DECLARE @cTOTALWARNINGS  NUMERIC(22,0) = 0;
    DECLARE @cTOTALREGISTROS NUMERIC(22,0) = 0;
    DECLARE @cCOUNTREGISTROS NUMERIC(22,0) = 0;
    DECLARE @cWAITREGISTROS  NUMERIC(22,0) = 10;
    DECLARE @cMAXWARNINGS    NUMERIC(22,0) = 50; -- Maximo numero de advertencias que puede generar antes de fallar completamente
    DECLARE @cPUNTOSDEVENTAFACTURACION WSXML_SFG.IDVALUENUMERIC--WSXML_SFG.PDVLDNFACTURACION;
    DECLARE @cDESCUENTOSCOMISION WSXML_SFG.REDDESCUENTOS;

	--DECLARE @cPDVLINEASDENEGOCIO WSXML_SFG.IDVALUENUMERIC

    -- El tipo PUNTOSVENTALINEASNEGOCIO es un arreglo de elementos (PUNTODEVENTA, ARREGLO DE LINEAS DE NEGOCIO)
    DECLARE @msg VARCHAR(2000);
    DECLARE @lstbillablefiles WSXML_SFG.NUMBERARRAY

    INSERT INTO @lstbillablefiles VALUES(27)

    INSERT INTO @lstbillablefiles VALUES(1)

    INSERT INTO @lstbillablefiles VALUES(28)
    
    INSERT INTO @lstbillablefiles VALUES(21)
    
    INSERT INTO @lstbillablefiles VALUES(29)
    
    INSERT INTO @lstbillablefiles VALUES(22)
    
    INSERT INTO @lstbillablefiles VALUES(30)
    
    INSERT INTO @lstbillablefiles VALUES(23)
    
    INSERT INTO @lstbillablefiles VALUES(31)
    
    INSERT INTO @lstbillablefiles VALUES(24)
    
    INSERT INTO @lstbillablefiles VALUES(32)
    
    INSERT INTO @lstbillablefiles VALUES(25)
    
    INSERT INTO @lstbillablefiles VALUES(33)
    
    INSERT INTO @lstbillablefiles VALUES(26)

	DECLARE @p_TIPOINFORMATIVO TINYINT,
		@p_TIPOERROR TINYINT,
		@p_TIPOADVERTENCIA TINYINT,
		@p_TIPOCUALQUIERA TINYINT,
		@p_PROCESONOTIFICACION TINYINT,
		@p_ESTADOABIERTA TINYINT,
		@p_ESTADOCERRADA TINYINT	
			  
	EXEC WSXML_SFG.SFGALERTA_CONSTANT
		@p_TIPOINFORMATIVO OUT,
		@p_TIPOERROR OUT,
		@p_TIPOADVERTENCIA OUT,
		@p_TIPOCUALQUIERA OUT,
		@p_PROCESONOTIFICACION OUT,
		@p_ESTADOABIERTA OUT,
		@p_ESTADOCERRADA OUT	

	DECLARE
			@p_REGISTRADA      			TINYINT,
			@p_INICIADA         		TINYINT,
			@p_FINALIZADAOK 			TINYINT,
			@p_FINALIZADAFALLO  		TINYINT,
			@p_ABORTADA  				TINYINT,
			@p_NOINICIADA  				TINYINT,
			@p_FINALIZADAADVERTENCIA  	TINYINT 

	EXEC WSXML_SFG.SFGESTADOTAREAEJECUTADA_CONSTANT
			@p_REGISTRADA      			 OUT,
			@p_INICIADA         		 OUT,
			@p_FINALIZADAOK 			 OUT,
			@p_FINALIZADAFALLO  		 OUT,
			@p_ABORTADA  				 OUT,
			@p_NOINICIADA  				 OUT,
			@p_FINALIZADAADVERTENCIA  	 OUT

BEGIN TRY

    -- Verificar flag de proceso para evitar dos ciclos simultaneos
    IF WSXML_SFG.SFGCICLOFACTURACIONPDV_ReadProcessFlag() > 0 BEGIN
      RAISERROR('-20090 No se pueden ejecutar dos ciclos de facturacion simultaneamente', 16, 1);
    END 


    -- Inicializar
    --SET @cPUNTOSDEVENTAFACTURACION = PUNTOSVENTALINEASNEGOCIO();

    -- Crear ciclo de facturacion
    INSERT INTO WSXML_SFG.CICLOFACTURACIONPDV (ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAEJECUCION, CODUSUARIOMODIFICACION)
    VALUES (@cCODCICLOFACTURACION, @cSECUENCIACICLO, @cTODAY, @cCODUSUARIOMODIFICACION);

    IF @cCODCICLOFACTURACION > 0 BEGIN
      -- Marcar los archivos que se estan facturando
      UPDATE WSXML_SFG.ENTRADAARCHIVOCONTROL
         SET FACTURADO = 1,
             CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACION
       WHERE ID_ENTRADAARCHIVOCONTROL IN (SELECT IDVALUE FROM @lstbillablefiles);
      COMMIT;

      -- Primero se obtiene los registros de FACTURACIONLINEADENEGOCIO que aplican hoy /* Optimized */
        DECLARE @cVERIFICACION VARCHAR(10) = 'TRUE';
        DECLARE cFACTURAHOY CURSOR LOCAL FOR
          SELECT ID_LINEADENEGOCIO AS CODLINEADENEGOCIO
            FROM WSXML_SFG.LINEADENEGOCIO
          WHERE ID_LINEADENEGOCIO IN (1, 2, 3);

		BEGIN
			OPEN cFACTURAHOY;
			DECLARE @cFACTURAHOY__CODLINEADENEGOCIO NUMERIC(38,0)

			FETCH NEXT FROM cFACTURAHOY INTO @cFACTURAHOY__CODLINEADENEGOCIO
			WHILE @@fetch_status=0
			BEGIN
				DECLARE @tmpPUNTOSDEVENTA WSXML_SFG.LONGNUMBERARRAY;
				BEGIN
					IF @cVERIFICACION = 'TRUE' BEGIN
					INSERT INTO @tmpPUNTOSDEVENTA
					SELECT CODPUNTODEVENTA
					FROM (SELECT CODPUNTODEVENTA FROM WSXML_SFG.REGISTROFACTURACION
						  WHERE CODENTRADAARCHIVOCONTROL IN (SELECT IDVALUE FROM @lstbillablefiles) GROUP BY CODPUNTODEVENTA
					)T

					IF @@ROWCOUNT > 0 BEGIN
						DECLARE tPDV CURSOR FOR SELECT IDVALUE FROM  @tmpPUNTOSDEVENTA
						--.FIRST..tmpPUNTOSDEVENTA.LAST LOOP
						DECLARE @tPDV__IDVALUE NUMERIC(38,0)
						FETCH NEXT FROM tPDV INTO @tPDV__IDVALUE
						
						WHILE @@fetch_status=0 BEGIN
					  -- Buscar que no exista
							DECLARE @cEXISTS NUMERIC(22,0) = -1;
							BEGIN 
								IF (SELECT COUNT(*) FROM @cPUNTOSDEVENTAFACTURACION) > 0 BEGIN
									DECLARE k CURSOR FOR SELECT ID AS CODPUNTODEVENTA, VALUE AS LINEASDENEGOCIO FROM @cPUNTOSDEVENTAFACTURACION
								
									DECLARE @k__CODPUNTODEVENTA NUMERIC(38,0), @k__LINEASDENEGOCIO VARCHAR(MAX)
									FETCH NEXT FROM K into @k__CODPUNTODEVENTA, @k__LINEASDENEGOCIO;
									WHILE @@fetch_status=0 BEGIN
										IF @k__CODPUNTODEVENTA = @tPDV__IDVALUE
											SET @cEXISTS = @k__CODPUNTODEVENTA;

										FETCH NEXT FROM K into @k__CODPUNTODEVENTA, @k__LINEASDENEGOCIO;
									END
									CLOSE k;
									DEALLOCATE k;

									IF @cEXISTS >= 0
										BREAK;
							

								END
								IF @cEXISTS < 0 BEGIN
								  INSERT INTO @cPUNTOSDEVENTAFACTURACION VALUES (@k__CODPUNTODEVENTA, @cFACTURAHOY__CODLINEADENEGOCIO)

								  --cPUNTOSDEVENTAFACTURACION(cPUNTOSDEVENTAFACTURACION.LAST) := PDVLDNFACTURACION(tmpPUNTOSDEVENTA(tPDV), NUMBERARRAY(tFACTLDN.CODLINEADENEGOCIO));
								END ELSE BEGIN
								
								UPDATE @cPUNTOSDEVENTAFACTURACION SET VALUE =  @cFACTURAHOY__CODLINEADENEGOCIO WHERE ID = @cEXISTS AND VALUE = @k__LINEASDENEGOCIO
							  	--cPUNTOSDEVENTAFACTURACION(cEXISTS).LINEASDENEGOCIO(cPUNTOSDEVENTAFACTURACION(cEXISTS).LINEASDENEGOCIO.LAST) := tFACTLDN.CODLINEADENEGOCIO;
								END
								SET @cTOTALREGISTROS = @cTOTALREGISTROS + 1;
							
							END;
							FETCH NEXT FROM tPDV INTO @tPDV__IDVALUE
						END
						CLOSE tPDV;
						DEALLOCATE tPDV;
                
					END
				END
				END;
				FETCH NEXT FROM cFACTURAHOY INTO @cFACTURAHOY__CODLINEADENEGOCIO
			END
        CLOSE cFACTURAHOY;
        DEALLOCATE cFACTURAHOY;

		IF (SELECT COUNT(*) FROM @cPUNTOSDEVENTAFACTURACION) = 0 BEGIN
			RAISERROR('-20054 No se pudo obtener la lista de puntos de venta a facturar', 16, 1);
		END
      END;

		  -- Configuraciones de descuentos de comision
		  BEGIN
				--SET @cDESCUENTOSCOMISION = SFGPUNTODEVENTADESCOMISION.GetRedDistribucionDescuentos;
				SET @msg = 'Descuentos de comision: ' + isnull(ERROR_MESSAGE ( ) , '')
				EXEC WSXML_SFG.SFGTMPTRACE_TraceLog @msg
				--SET @cDESCUENTOSCOMISION = REDDESCUENTOS();
		  END;
		  COMMIT;

		  -- Despues de obtener la lista, iterar
		  --IF cPUNTOSDEVENTAFACTURACION.COUNT > 0 BEGIN
		  IF (SELECT COUNT(*) FROM @cPUNTOSDEVENTAFACTURACION) > 0 BEGIN
				-- Obtener las lineas de negocio como indice y como ID, configuracion de egreso como value
				INSERT INTO @xLINEACONFIGURACION
				SELECT ID_LINEADENEGOCIO, LINEAEGRESO
				FROM (
					SELECT ID_LINEADENEGOCIO, LINEAEGRESO, ROW_NUMBER() OVER(ORDER BY ID_LINEADENEGOCIO) AS "Row Number"
					FROM WSXML_SFG.LINEADENEGOCIO 
					--ORDER BY ID_LINEADENEGOCIO
				) T

				IF @@ROWCOUNT <= 0 BEGIN
				RAISERROR('-20020 No se pudo obtener la configuracion de ingresos y egresos para las lineas de negocio', 16, 1);
				END 
				--DECLARE tPDVLDN CURSOR FOR SELECT ID, VALUE FROM @cPUNTOSDEVENTAFACTURACION
				DECLARE tPDVLDN CURSOR FOR SELECT DISTINCT ID AS CODPUNTODEVENTA/*, VALUE*/ FROM @cPUNTOSDEVENTAFACTURACION
				--.First..cPUNTOSDEVENTAFACTURACION.Last LOOP
				DECLARE @tPDVLDN__CODPUNTODEVENTA NUMERIC(38,0)
				FETCH NEXT FROM tPDVLDN INTO @tPDVLDN__CODPUNTODEVENTA			
				WHILE @@fetch_status=0 BEGIN

					DECLARE @xCODPUNTODEVENTA            NUMERIC(22,0) = @tPDVLDN__CODPUNTODEVENTA;
					DECLARE @xCODMAESTROFACTURATIRILLA   NUMERIC(38,0);
					DECLARE @cCODTIPOAGRUPACION          NUMERIC(38,0);
					DECLARE @cCODAGRUPACIONPUNTODEVENTA  NUMERIC(38,0);
					DECLARE @cListaReferencia            WSXML_SFG.REFERENCEBILLING;

            
					--SET @cListaReferencia = REFERENCEBILLINGLIST();
					EXEC WSXML_SFG.SFGMAESTROFACTURACIONTIRILLA_AddRecord @cCODCICLOFACTURACION, @xCODPUNTODEVENTA, @xCODMAESTROFACTURATIRILLA OUT
					-- Obtener Tipo Agrupamiento y Agrupacion
					SELECT @cCODTIPOAGRUPACION = CODTIPOPUNTODEVENTA, @cCODAGRUPACIONPUNTODEVENTA = ID_AGRUPACIONPUNTODEVENTA FROM WSXML_SFG.PUNTODEVENTA
					INNER JOIN WSXML_SFG.AGRUPACIONPUNTODEVENTA ON (CODAGRUPACIONPUNTODEVENTA = ID_AGRUPACIONPUNTODEVENTA)
					WHERE ID_PUNTODEVENTA = @xCODPUNTODEVENTA;

					-- Iterar a traves de las lineas de negocio que facturan este dia para el punto de venta
					DECLARE tLDN CURSOR FOR SELECT VALUE AS LINEASDENEGOCIO FROM @cPUNTOSDEVENTAFACTURACION  WHERE ID = @tPDVLDN__CODPUNTODEVENTA
						--cPUNTOSDEVENTAFACTURACION(tPDVLDN).LINEASDENEGOCIO.First..cPUNTOSDEVENTAFACTURACION(tPDVLDN).LINEASDENEGOCIO.Last WHILE 1=1 BEGIN
					OPEN tLDN
					DECLARE @tLDN__LINEASDENEGOCIO NUMERIC(38,0)
					FETCH NEXT FROM tLDN INTO @tLDN__LINEASDENEGOCIO
					WHILE @@fetch_status=0 BEGIN 
						BEGIN TRY
							/* COMMIT SECTION */
							DECLARE @xCODLINEADENEGOCIO NUMERIC(22,0) = @tLDN__LINEASDENEGOCIO;
							--DECLARE @xCODLINEADENEGOCIO NUMERIC(22,0) = cPUNTOSDEVENTAFACTURACION(tPDVLDN).LINEASDENEGOCIO(tLDN);

							DECLARE @cCODMAESTROFACTURACION  NUMERIC(38,0) = 0;
							DECLARE @cCOUNTFACTURABLES       NUMERIC(38,0) = 0;
							-- Obtiene la lista de registros a facturar una sola vez
							DECLARE @lstREGISTROSFACTURABLES WSXML_SFG.REGISTROFACTURABLE;
							DECLARE @lstREGISTROSAGRUPADOS   WSXML_SFG.IDVALUENUMERIC--WSXML_SFG.REGISTROSPRODUCTO;

							BEGIN
								BEGIN TRY

									BEGIN
										BEGIN TRY
											INSERT INTO @lstREGISTROSFACTURABLES 
											SELECT ID_REGISTROFACTURACION, CODPRODUCTO
												FROM WSXML_SFG.ENTRADAARCHIVOCONTROL CTR
												INNER JOIN WSXML_SFG.REGISTROFACTURACION REG ON (REG.CODENTRADAARCHIVOCONTROL = CTR.ID_ENTRADAARCHIVOCONTROL)
												INNER JOIN WSXML_SFG.PRODUCTO PRD ON (PRD.ID_PRODUCTO = REG.CODPRODUCTO)
												INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ON (TPR.ID_TIPOPRODUCTO = PRD.CODTIPOPRODUCTO)
												WHERE CTR.ID_ENTRADAARCHIVOCONTROL IN (SELECT IDVALUE FROM @lstbillablefiles)
												AND REG.CODPUNTODEVENTA   = @xCODPUNTODEVENTA
												AND TPR.CODLINEADENEGOCIO = @xCODLINEADENEGOCIO
												AND REG.FACTURADO         = 0;
										END TRY
										BEGIN CATCH
											SET @msg = '-20054 Error al obtener los identificadores de los registros facturados: ' + isnull(ERROR_MESSAGE ( ), '')
											RAISERROR(@msg, 16, 1);
										END CATCH
									END;

									-- No facturar si no hay registros facturables
									SET @cCOUNTFACTURABLES = (SELECT COUNT(*) FROM @lstREGISTROSFACTURABLES)
									IF @cCOUNTFACTURABLES > 0 BEGIN
										-- Agrupar la lista obtenida por producto
										--SET @lstREGISTROSAGRUPADOS = REGISTROSLINEADENEGOCIO();
										DECLARE reg CURSOR FOR SELECT ID_REGISTROFACTURACION, CODPRODUCTO FROM  @lstREGISTROSFACTURABLES
											--.First..lstREGISTROSFACTURABLES.Last LOOP
										DECLARE @reg__ID_REGISTROFACTURACION NUMERIC(38,0), 	@reg__CODPRODUCTO  NUMERIC(38,0)
										FETCH NEXT FROM reg INTO @reg__ID_REGISTROFACTURACION, 	@reg__CODPRODUCTO
						
										WHILE @@fetch_status=0 BEGIN

											DECLARE @regIDREGISTRO  NUMERIC(22,0) = @reg__ID_REGISTROFACTURACION;
											DECLARE @regCODPRODUCTO NUMERIC(38,0) = @reg__CODPRODUCTO
											DECLARE @prdFOUND NUMERIC(38,0) = 0;

											BEGIN
												-- Buscar
												IF (SELECT COUNT(*) FROM @lstREGISTROSAGRUPADOS) > 0 BEGIN
													--DECLARE @lstREGISTROSAGRUPADOS_lN
													DECLARE grup CURSOR FOR SELECT ID AS CODPRODUCTO, VALUE AS REGISTRO FROM @lstREGISTROSAGRUPADOS 
														--lstREGISTROSAGRUPADOS.First..lstREGISTROSAGRUPADOS.Last LOOP
														DECLARE @grup__CODPRODUCTO NUMERIC(38,0), 	@grup__REGISTRO NUMERIC(38,0)
														FETCH NEXT FROM grup INTO @grup__CODPRODUCTO, 	@grup__REGISTRO
						
														WHILE @@fetch_status=0 BEGIN
															IF @grup__CODPRODUCTO = @regCODPRODUCTO BEGIN
																--lstREGISTROSAGRUPADOS(grup).lstREGISTROS(lstREGISTROSAGRUPADOS(grup).lstREGISTROS.Count) := @regIDREGISTRO;
																INSERT INTO @lstREGISTROSAGRUPADOS VALUES (@grup__CODPRODUCTO, @regIDREGISTRO);
																SET @prdFOUND = 1;
																BREAK;
															END
															FETCH NEXT FROM grup INTO @grup__CODPRODUCTO, 	@grup__REGISTRO
														END
														CLOSE grup;
														DEALLOCATE grup;
								
													END 
												-- Si no se encontro
													IF @prdFOUND = 0 BEGIN
													DECLARE @lstREGISTROSNEWPRODUCTO WSXML_SFG.LONGNUMBERARRAY;
													BEGIN
														INSERT INTO @lstREGISTROSNEWPRODUCTO VALUES(@regIDREGISTRO)                          
														INSERT INTO @lstREGISTROSAGRUPADOS VALUES (@regCODPRODUCTO, @regIDREGISTRO);
													END;
													END 
											END;
											FETCH NEXT FROM reg INTO @reg__ID_REGISTROFACTURACION, 	@reg__CODPRODUCTO
										END;
										CLOSE reg;
										DEALLOCATE reg;

										-- Control de reintentos
										DECLARE @xLINEAEGRESO FLOAT = (SELECT VALUE FROM @xLINEACONFIGURACION WHERE ID = @xCODLINEADENEGOCIO)
										EXEC WSXML_SFG.KAZ_ReplicaFacturarPOSLDN 
														@cCODCICLOFACTURACION,
														xCODMAESTROFACTURATIRILLA,
														@xCODPUNTODEVENTA,
														cCODTIPOAGRUPACION,
														cCODAGRUPACIONPUNTODEVENTA,
														@xCODLINEADENEGOCIO,
														@cTODAY,
														@lstREGISTROSAGRUPADOS,
														@xLINEAEGRESO,
														@cCODUSUARIOMODIFICACION,
														@cCODMAESTROFACTURACION OUT
									END
									ELSE BEGIN
										EXEC WSXML_SFG.SFGTMPTRACE_TraceLog 'Not possible, man. Empty billing a registry?'
									END 

									-- Ingresar a la lista referenciada
									INSERT INTO @cListaReferencia VALUES (@xCODLINEADENEGOCIO, @cCODMAESTROFACTURACION);
									COMMIT;

									-- Actualizar la tarea
									SET @cCOUNTREGISTROS = @cCOUNTREGISTROS + 1;
									IF (@cCOUNTREGISTROS % @cWAITREGISTROS) = 0 OR @cCOUNTREGISTROS = @cTOTALREGISTROS BEGIN
										SET @msg = 'Replica update control ' + ISNULL(@cCOUNTREGISTROS, '') + ' from ' + ISNULL(@cTOTALREGISTROS, '')
										EXEC WSXML_SFG.SFGTMPTRACE_TraceLog @msg
									END
								END TRY
								BEGIN CATCH 
									-- Hubo un error al intentar procesar una entrada
									SET @msg = ERROR_MESSAGE ( )  ;
									SET @msg = 'No se pudo realizar la facturacion de ' + ISNULL(WSXML_SFG.LINEADENEGOCIO_NOMBRE_F(@xCODLINEADENEGOCIO), '') + ' para el punto de venta ' + ISNULL(WSXML_SFG.PUNTODEVENTA_CODIGO_F(@xCODPUNTODEVENTA), '') + ': ' + isnull(@msg, '');
									EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @p_TIPOADVERTENCIA, 'FACTURACION', @msg, @cCODUSUARIOMODIFICACION
									SET @cTOTALWARNINGS = @cTOTALWARNINGS + 1;
									COMMIT;
									IF @cTOTALWARNINGS >= @cMAXWARNINGS BEGIN
										RAISERROR('-20054 Se ha llegado al maximo numero de advertencias para el ciclo de facturacion', 16, 1);
									END 
								END CATCH
								
							END;
					
						END TRY
						BEGIN CATCH
								-- Hubo un error al intentar procesar una entrada
								SET @msg = 'No se pudo realizar la facturacion para el punto de venta ' + ISNULL(WSXML_SFG.PUNTODEVENTA_CODIGO_F(@xCODPUNTODEVENTA), '') + ': ' + isnull(ERROR_MESSAGE ( ) , '');
								EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @p_TIPOADVERTENCIA, 'FACTURACION', @msg, @cCODUSUARIOMODIFICACION
								SET @cTOTALWARNINGS = @cTOTALWARNINGS + 1;
								COMMIT;
								IF @cTOTALWARNINGS >= @cMAXWARNINGS BEGIN
									RAISERROR('-20054 Se ha llegado al maximo numero de advertencias para el ciclo de facturacion', 16, 1);
								END 
						END CATCH

						FETCH NEXT FROM tLDN INTO @tLDN__LINEASDENEGOCIO
					END;
					CLOSE tLDN;
					DEALLOCATE tLDN;

					FETCH NEXT FROM tPDVLDN INTO @tPDVLDN__CODPUNTODEVENTA		
				END
				CLOSE tPDVLDN;
				DEALLOCATE tPDVLDN; 
				EXEC WSXML_SFG.SFGCICLOFACTURACIONPDV_FreeProcessFlag @cCODCICLOFACTURACION	 

		  END ELSE BEGIN
			-- Se ejecuto un ciclo de facturacion que no tiene puntos de venta relevantes. Advertir
			SET @msg = 'Se ha ejecutado un ciclo de facturacion, pero no existen puntos de venta configurados para facturar en la fecha ' + ISNULL(dbo.to_char_date(@cTODAY, 'DD/MM/YYYY'), '')
			EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @p_TIPOADVERTENCIA, 'FACTURACION', @msg , @cCODUSUARIOMODIFICACION;
		  END

		  IF @cTOTALWARNINGS > 0 AND @cTOTALWARNINGS >= @cTOTALREGISTROS
			SET @p_RETVALUE_out = @p_FINALIZADAFALLO;
		  ELSE IF @cTOTALWARNINGS > 0 AND @cTOTALWARNINGS < @cTOTALREGISTROS BEGIN
			SET @p_RETVALUE_out = @p_FINALIZADAADVERTENCIA;
			DECLARE @endmsg NVARCHAR(2000);
			
			BEGIN

			  SELECT @endmsg = ISNULL(ISNULL(@msg, ': ') + isnull(@msg, ''), '.');
			  SET @msg = 'El ciclo de facturacion No. ' + ISNULL(@cSECUENCIACICLO, '') + ' ha finalizado correctamente. Sin embargo, ocurrieron algunos errores controlados' + isnull(@endmsg, '')
			  EXEC WSXML_SFG.SFGTMPTRACE_TraceLog @msg
			END;
      END ELSE BEGIN
        SET @p_RETVALUE_out = @p_FINALIZADAOK;
		SET @msg = 'El ciclo de facturacion No. ' + ISNULL(@cSECUENCIACICLO, '') + ' ha finalizado correctamente.'
        EXEC WSXML_SFG.SFGTMPTRACE_TraceLog @msg
	  END
      
    END
    ELSE BEGIN
      RAISERROR('-20054 Ocurrio un error al tratar de ingresar el registro de ciclo de facturacion', 16, 1);
    END 

END TRY
BEGIN CATCH
  
    IF @cCODCICLOFACTURACION > 0 BEGIN
      EXEC WSXML_SFG.SFGCICLOFACTURACIONPDV_FreeProcessFlag @cCODCICLOFACTURACION
    END 
    SET @msg = ERROR_MESSAGE ( ) ;
    EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @p_TIPOERROR, 'FACTURACION', @msg, @cCODUSUARIOMODIFICACION
	SET @msg = 'Error in replica cycle ' + isnull(@msg, '')
    EXEC WSXML_SFG.SFGTMPTRACE_TraceLog @msg
    SET @p_RETVALUE_out = @p_FINALIZADAFALLO
END CATCH
END;
GO



IF OBJECT_ID('WSXML_SFG.KAZ_RecalculateProductRevenue', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.KAZ_RecalculateProductRevenue;
GO

  CREATE PROCEDURE WSXML_SFG.KAZ_RecalculateProductRevenue(@p_PRODUCTCODE NVARCHAR(2000), @p_DATE DATETIME, @p_RETURNVALUE_out NUMERIC(22,0) OUT) AS
 BEGIN
    DECLARE @PRODUCTNAME VARCHAR(4000) /* Use -meta option PRODUCTO.NOMPRODUCTO%TYPE */;
    DECLARE @countrecords NUMERIC(22,0) = 0;
    DECLARE @waitnrecords NUMERIC(22,0) = 50;
	DECLARE @msg VARCHAR(2000)
   
  SET NOCOUNT ON;
    BEGIN
		BEGIN TRY
			SELECT @PRODUCTNAME = NOMPRODUCTO FROM WSXML_SFG.PRODUCTO WHERE CAST(CODIGOGTECHPRODUCTO AS NUMERIC(38,0)) = CAST(@p_PRODUCTCODE AS NUMERIC(38,0));
		END TRY
		BEGIN CATCH
			RAISERROR('-20054 No existe el producto', 16, 1);
		END CATCH
		
    END;
    DECLARE tfile CURSOR 
			FOR SELECT ID_ENTRADAARCHIVOCONTROL, FECHAARCHIVO, WSXML_SFG.SFG_PACKAGE_GETNUMEROCDC(FECHAARCHIVO) AS CDC, COUNT(1) 
			FROM WSXML_SFG.ENTRADAARCHIVOCONTROL
                  WHERE REVERSADO = 0 AND FECHAARCHIVO = @p_DATE
                  GROUP BY ID_ENTRADAARCHIVOCONTROL, FECHAARCHIVO
                  ORDER BY FECHAARCHIVO; OPEN tfile;

				  DECLARE @tfile__ID_ENTRADAARCHIVOCONTROL NUMERIC(38,0), @tfile__FECHAARCHIVO DATETIME
					, @tfile__CDC NUMERIC(38,0), @tfile__count NUMERIC(38,0)
					 FETCH NEXT FROM tfile INTO  @tfile__ID_ENTRADAARCHIVOCONTROL, @tfile__FECHAARCHIVO
										, @tfile__CDC, @tfile__count
					 WHILE @@FETCH_STATUS=0
					 BEGIN
        DECLARE @lstregistries WSXML_SFG.LONGNUMBERARRAY;
      BEGIN
		INSERT INTO @lstregistries
        SELECT ID_REGISTROFACTURACION  FROM REGISTROFACTURACION
        WHERE CODENTRADAARCHIVOCONTROL = @tfile__ID_ENTRADAARCHIVOCONTROL AND CODPRODUCTO = WSXML_SFG.PRODUCTO_F(@p_PRODUCTCODE) 
				AND CODTIPOREGISTRO IN (1, 2);
        IF @@ROWCOUNT > 0 BEGIN
          DECLARE ix CURSOR FOR SELECT IDVALUE FROM @lstregistries
			DECLARE @ix_IDVALUE NUMERIC(38,0)
		  FETCH NEXT FROM ix INTO @ix_IDVALUE
        
			WHILE (@@FETCH_STATUS = 0)
					BEGIN
					EXEC WSXML_SFG.SFGREGISTROREVENUE_CalcularRevenueRegistro @ix_IDVALUE
					SET @countrecords = @countrecords + 1;
					IF (@countrecords % @waitnrecords) = 0 BEGIN
						SET @msg  = (ISNULL(@tfile__CDC, '') + ' commit flag')
						EXEC WSXML_SFG.SFGTMPTRACE_TraceLog @msg ;
					  COMMIT;
					END 
				FETCH NEXT FROM ix INTO @ix_IDVALUE
			END;
          CLOSE ix;
          DEALLOCATE ix;
        END 
      END;
		SET @msg  = 'Recalculated product ' + ISNULL(@p_PRODUCTCODE, '') + ' (' + ISNULL(@PRODUCTNAME, '') + ') for CDC ' + ISNULL(@tfile__CDC, '')
		exec WSXML_SFG.SFGTMPTRACE_TraceLog @msg
      COMMIT;
     FETCH NEXT FROM tfile INTO  @tfile__ID_ENTRADAARCHIVOCONTROL, @tfile__FECHAARCHIVO
					, @tfile__CDC, @tfile__count
    END;
    CLOSE tfile;
    DEALLOCATE tfile;
    SET @p_RETURNVALUE_out = @countrecords;
  END;
GO


IF OBJECT_ID('WSXML_SFG.KAZ_NotificarCantidadPuntosDeVenta', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.KAZ_NotificarCantidadPuntosDeVenta;
GO


 CREATE PROCEDURE WSXML_SFG.KAZ_NotificarCantidadPuntosDeVenta(@p_ID_DETALLETAREAEJECUTADA NUMERIC(22,0),
                                         @p_FECHA                    DATETIME) 
AS
BEGIN
DECLARE @vCantidadPOS NUMERIC(22,0);
DECLARE @vMSM         VARCHAR(1000);
DECLARE @vValor       NUMERIC(22,0)--varchar(100);
DECLARE @vEmails      varchar(8000);
 
SET NOCOUNT ON;
  SELECT @vCantidadPOS = COUNT(DISTINCT(ID_PUNTODEVENTA)) 
  FROM WSXML_SFG.PUNTODEVENTA 
  WHERE ACTIVE = 1 ;
  
  SET @vMSM = 'Cantidad de puntos de venta en SFG : ' + ISNULL(CONVERT(VARCHAR, @vCantidadPOS), '');
  SET @vEmails='';
  
  declare cur_users cursor for  
			select usuario.email
            from WSXML_SFG.rolusuario  
				inner join WSXML_SFG.usuario on rolusuario.codusuario = usuario.id_usuario
                  where codrol in (181)
                  and usuario.active= 1;
	DECLARE @cur_users__email VARCHAR(2000)
  open cur_users;
  fetch NEXT FROM cur_users into @cur_users__email;
  while @@fetch_status=0
  begin
    SET @vEmails= ISNULL(@vEmails, '') + isnull(@cur_users__email, '') + ';';
  fetch NEXT FROM cur_users into @cur_users__email;
  end;
  close cur_users;
  deallocate cur_users;
  SET @vEmails= substring(@vEmails,1,len(@vEmails)-1);
 
  EXEC WSXML_SFG.SFGENVIOCORREO_AddCorreo NULL,@vEmails,@vMSM,@vMSM,NULL,1, @vValor OUT
END;  

GO





  IF OBJECT_ID('WSXML_SFG.KAZ_InsertTemplateForRule', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.KAZ_InsertTemplateForRule;
GO

CREATE     PROCEDURE WSXML_SFG.KAZ_InsertTemplateForRule(@p_NOMPLANTILLAPRODUCTO      NVARCHAR(2000),
                                  @p_CODCIUDAD                 NUMERIC(22,0),
                                  @p_CODAGRUPACIONPUNTODEVENTA NUMERIC(22,0),
                                  @p_CODREDPDV                 NUMERIC(22,0),
                                  @p_CODLINEADENEGOCIO         NUMERIC(22,0)) AS
 BEGIN
    DECLARE @lstPUNTOSASIGNACION WSXML_SFG.LONGNUMBERARRAY;
    DECLARE @msg VARCHAR(MAX);
    -- Constant Explicit
    DECLARE @thisMASTERPLANTILLA NUMERIC(22,0) = 0;         -- Is never a master
    DECLARE @thisCODUSUARIOMODIFICACION NUMERIC(22,0) = 1;  -- Master user
    DECLARE @p_ID_PLANTILLAPRODUCTO_out NUMERIC(22,0);
	DECLARE @FECHAHOY DATETIME = GETDATE();
   
  SET NOCOUNT ON;

  BEGIN TRY
    -- First insert into database. Remember, this works like a trigger
    EXEC WSXML_SFG.SFGWEBPLANTILLAPRODUCTO_AddRecord
						@p_NOMPLANTILLAPRODUCTO,
                                     @FECHAHOY,
                                      @thisCODUSUARIOMODIFICACION,
                                      1,
                                      @p_CODREDPDV,
                                      @p_CODCIUDAD,
                                      @p_CODAGRUPACIONPUNTODEVENTA,
                                      @p_CODLINEADENEGOCIO,
                                      @thisMASTERPLANTILLA,
                                      @p_ID_PLANTILLAPRODUCTO_out OUT
    -- Se cargan los puntos de venta: una igualdad en reglas significa que se transladan
    -- a la nueva plantilla y se envia una alerta
   
    IF @thisMASTERPLANTILLA = 0 AND (@p_CODCIUDAD IS NOT NULL OR @p_CODAGRUPACIONPUNTODEVENTA IS NOT NULL OR @p_CODREDPDV IS NOT NULL) BEGIN
      IF @p_CODCIUDAD IS NOT NULL AND @p_CODAGRUPACIONPUNTODEVENTA IS NOT NULL AND @p_CODREDPDV IS NOT NULL BEGIN
        -- Criterio 1. Ciudad, Cadena y Red: Se asigna a todos los que cumplan la regla
        INSERT  INTO @lstPUNTOSASIGNACION
		SELECT ID_PUNTODEVENTA  
		FROM WSXML_SFG.PUNTODEVENTA
        WHERE CODCIUDAD = @p_CODCIUDAD
        AND CODAGRUPACIONPUNTODEVENTA = @p_CODAGRUPACIONPUNTODEVENTA
        AND CODREDPDV = @p_CODREDPDV;
      END
      ELSE IF @p_CODAGRUPACIONPUNTODEVENTA IS NOT NULL AND @p_CODREDPDV IS NOT NULL BEGIN
        -- Criterio 2. Cadena y Red
		INSERT INTO @lstPUNTOSASIGNACION 
        SELECT ID_PUNTODEVENTA 
		FROM WSXML_SFG.PUNTODEVENTA
        WHERE CODAGRUPACIONPUNTODEVENTA = @p_CODAGRUPACIONPUNTODEVENTA
        AND CODREDPDV = @p_CODREDPDV;
      END
      ELSE IF @p_CODAGRUPACIONPUNTODEVENTA IS NOT NULL BEGIN
        -- Criterio 3. Cadena
        INSERT INTO @lstPUNTOSASIGNACION 
		SELECT ID_PUNTODEVENTA 
		FROM WSXML_SFG.PUNTODEVENTA
        WHERE CODAGRUPACIONPUNTODEVENTA = @p_CODAGRUPACIONPUNTODEVENTA;
      END
      ELSE IF @p_CODREDPDV IS NOT NULL BEGIN
        -- Criterio 4. Red
		INSERT INTO @lstPUNTOSASIGNACION
        SELECT ID_PUNTODEVENTA 
		FROM WSXML_SFG.PUNTODEVENTA
        WHERE CODREDPDV = @p_CODREDPDV;
      END 

      IF @@ROWCOUNT > 0 BEGIN
        DECLARE ix CURSOR FOR SELECT IDVALUE FROM @lstPUNTOSASIGNACION
		OPEN ix

		declare @ix__idvalue numeric(38,0)
		DECLARE @asgmnt_out NUMERIC(22,0);

		fetch next from ix into @ix__idvalue
		while @@fetch_status=0
		BEGIN
            
            DECLARE @cPUNTOASIGNACION NUMERIC(22,0) = @ix__idvalue;
			
			
				-- Desactivar
				EXEC WSXML_SFG.SFGPUNTODEVENTAPLANTILLA_DeactivateRecordByData @cPUNTOASIGNACION,@p_CODLINEADENEGOCIO,@thisCODUSUARIOMODIFICACION
				-- Insertar Registros
				EXEC WSXML_SFG.SFGPUNTODEVENTAPLANTILLA_AddRecord @cPUNTOASIGNACION,
												   @p_ID_PLANTILLAPRODUCTO_out,
												   NULL,
												   NULL,
												   NULL,
												   @thisCODUSUARIOMODIFICACION,
												   @asgmnt_out OUT
          
        fetch next from ix into @ix__idvalue
        END;
        CLOSE ix;
        DEALLOCATE ix;
      END 
    END 

	END TRY
	BEGIN CATCH
  
		SET @msg = ERROR_MESSAGE ( ) ;
		EXEC WSXML_SFG.SFGTMPTRACE_TraceLog_1 @msg, 'AUTOMATIC_TEMPLATE_ASSIGNATION'
	END CATCH
  END;
GO



  IF OBJECT_ID('WSXML_SFG.KAZ_GetSCFileBalanceInfo', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.KAZ_GetSCFileBalanceInfo;
GO



  CREATE PROCEDURE WSXML_SFG.KAZ_GetSCFileBalanceInfo(@p_cur varchar(8000)  OUTPUT) AS
  BEGIN
  SET NOCOUNT ON;
      SELECT CTR.ID_ENTRADAARCHIVOCONTROL                AS ID,
             WSXML_SFG.SFG_PACKAGE_GetNumeroCDC(CTR.FECHAARCHIVO)  AS CDC,
             CTR.FECHAARCHIVO                            AS FILEDATE,
             SUM(REG.NUMTRANSACCIONES)                   AS REGISTRYCOUNT,
             SUM(REG.VALORTRANSACCION)                   AS REGISTRYVALUE,
             SUM(ISNULL(RFR.REFERENCECOUNT, 0))             AS REFERENCECOUNT,
             SUM(ISNULL(RFR.REFERENCEVALUE, 0))             AS REFERENCEVALUE
      FROM WSXML_SFG.ENTRADAARCHIVOCONTROL CTR
      INNER JOIN WSXML_SFG.REGISTROFACTURACION REG ON (REG.CODENTRADAARCHIVOCONTROL = CTR.ID_ENTRADAARCHIVOCONTROL)
      LEFT OUTER JOIN (SELECT CODREGISTROFACTURACION, COUNT(*) AS REFERENCECOUNT, SUM(VALORTRANSACCION) AS REFERENCEVALUE
                       FROM WSXML_SFG.REGISTROFACTREFERENCIA
                       GROUP BY CODREGISTROFACTURACION) RFR ON (RFR.CODREGISTROFACTURACION = REG.ID_REGISTROFACTURACION)
      WHERE CTR.REVERSADO = 0 AND CTR.TIPOARCHIVO = 1 AND REG.CODTIPOREGISTRO = 1
      GROUP BY CTR.ID_ENTRADAARCHIVOCONTROL, CTR.FECHAARCHIVO
      ORDER BY CTR.FECHAARCHIVO;
  END;

  GO
  
  
  
  IF OBJECT_ID('WSXML_SFG.KAZ_GetNetwork', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.KAZ_GetNetwork;
GO



  CREATE PROCEDURE WSXML_SFG.KAZ_GetNetwork AS
  BEGIN
  SET NOCOUNT ON;
      SELECT PDV.CODIGOGTECHPUNTODEVENTA,
             PDV.NUMEROTERMINAL,
             PDV.NOMPUNTODEVENTA,
             PDV.CODCIUDAD,
             ISNULL(PDV.TELEFONO, ' ')         AS TELEFONO,
             ISNULL(PDV.DIRECCION, ' ')        AS DIRECCION,
             ISNULL(PDV.NUMEROLINEA, ' ')      AS NUMEROLINEA,
             ISNULL(PDV.NUMERODROP, ' ')       AS NUMERODROP,
             ISNULL(PDV.CODTIPOESTACION, 0)    AS CODTIPOESTACION,
             ISNULL(PDV.CODPUERTOTERMINAL, 0)  AS CODPUERTOTERMINAL,
             ISNULL(PDV.CODTIPONEGOCIO, 0)     AS CODTIPONEGOCIO,
             ISNULL(PDV.CODRUTAPDV, 0)         AS CODRUTAPDV,
             ISNULL(PDV.CODREDPDV, 0)          AS CODREDPDV,
             PDV.CUPOINICIAL,
             ISNULL(PDV.CODTIPOTERMINAL, 0)    AS CODTIPOTERMINAL,
             ISNULL(PDV.NOMBRENODO, ' ')       AS NOMBRENODO,
             ISNULL(PDV.ADDRESSNODO, ' ')      AS ADDRESSNODO,
             ISNULL(PDV.CODREGIONAL, 0)        AS CODREGIONAL,
             ISNULL(PDV.PUERTOESTACION, 0)     AS PUERTOESTACION,
             PDV.CODREGIMEN,
             PDV.IDENTIFICACION,
             ISNULL(PDV.DIGITOVERIFICACION, 0) AS DIGITOVERIFICACION,
             PDV.CODUSUARIOMODIFICACION,
             PDV.ACTIVE,
             AGR.NOMAGRUPACIONPUNTODEVENTA,
             AGR.CODIGOAGRUPACIONGTECH,
             AGR.CODTIPOPUNTODEVENTA,
             CASE WHEN AGR.CODPUNTODEVENTACABEZA = PDV.ID_PUNTODEVENTA THEN 1 ELSE 0 END AS CABEZA
      FROM WSXML_SFG.PUNTODEVENTA PDV
      INNER JOIN WSXML_SFG.AGRUPACIONPUNTODEVENTA AGR ON (PDV.CODAGRUPACIONPUNTODEVENTA = AGR.ID_AGRUPACIONPUNTODEVENTA);
  END;
GO
  
  
  
 
   /* Obtains the records for every deposit slip to be generated */
  IF OBJECT_ID('WSXML_SFG.KAZ_GetDepositSlipHeaders', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.KAZ_GetDepositSlipHeaders;
GO

CREATE     PROCEDURE WSXML_SFG.KAZ_GetDepositSlipHeaders(@p_SECUENCIACICLO NUMERIC(22,0), @p_PAGNUM NUMERIC(22,0)) AS
 BEGIN
	SET NOCOUNT ON;

    DECLARE @cMAXSECUENCIAFACTURACION NUMERIC(22,0);
    DECLARE @cCODCICLOFACTURACIONPDV NUMERIC(22,0);
    DECLARE @xBILLPAY NUMERIC(22,0) = 3; -- Linea de negocio Bill Payment
    DECLARE @xPREPAID NUMERIC(22,0) = 2; -- Linea de negocio Pines y Recargas
    DECLARE @xLOTTERY NUMERIC(22,0) = 1; -- Linea de negocio Juegos

    DECLARE @xBPAYMNT NUMERIC(22,0) = 8; -- Tipo de producto Bill Payment
    DECLARE @xDEPONLN NUMERIC(22,0) = 9; -- Tipo de producto Deposit Online
    DECLARE @xEVOUCHR NUMERIC(22,0) = 6; -- Tipo de producto EVoucher
    DECLARE @xERECHRG NUMERIC(22,0) = 7; -- Tipo de producto ERecharge

    DECLARE @xTAXRENTA NUMERIC(22,0) = 1; -- Retencion Tributaria RENTA
    DECLARE @xTAXICA   NUMERIC(22,0) = 2; -- Retencion Tributaria ICA
    DECLARE @xTAXIVA   NUMERIC(22,0) = 3; -- Retencion Tributaria IVA

    DECLARE @xPRODTX   NUMERIC(22,0) = 1; -- Impuesto IVA

    DECLARE @vBarcodeBillPayment VARCHAR(4000)  /* Use -meta option PARAMETRO.VALOR%TYPE */;
    DECLARE @vBarcodePrePaid VARCHAR(4000)      /* Use -meta option PARAMETRO.VALOR%TYPE */;
    DECLARE @vBarcodeGamesGTECH VARCHAR(4000)   /* Use -meta option PARAMETRO.VALOR%TYPE */;
    DECLARE @vBarcodeGamesFiducia VARCHAR(4000) /* Use -meta option PARAMETRO.VALOR%TYPE */;
    DECLARE @vLastBillingDate     DATETIME;

    DECLARE @cFILASXPAGINA NUMERIC(22,0) = 500;
    --cAGENTS_TBL SPLIT_TBL;
    DECLARE @cAGENTS_TBL WSXML_SFG.MEDIUMNUMBERARRAY;
    DECLARE @msg VARCHAR(2000);
   
	
	BEGIN TRY
     	DECLARE @p_TIPOINFORMATIVO TINYINT,
		@p_TIPOERROR TINYINT,
		@p_TIPOADVERTENCIA TINYINT,
		@p_TIPOCUALQUIERA TINYINT,
		@p_PROCESONOTIFICACION TINYINT,
		@p_ESTADOABIERTA TINYINT,
		@p_ESTADOCERRADA TINYINT	
			  
	EXEC WSXML_SFG.SFGALERTA_CONSTANT
		@p_TIPOINFORMATIVO OUT,
		@p_TIPOERROR OUT,
		@p_TIPOADVERTENCIA OUT,
		@p_TIPOCUALQUIERA OUT,
		@p_PROCESONOTIFICACION OUT,
		@p_ESTADOABIERTA OUT,
		@p_ESTADOCERRADA OUT

    BEGIN
		
		  IF @p_SECUENCIACICLO = -1 BEGIN
			SELECT @cMAXSECUENCIAFACTURACION = MAX(SECUENCIA) FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ACTIVE = 1;
		  END
		  ELSE BEGIN
			SET @cMAXSECUENCIAFACTURACION = @p_SECUENCIACICLO;
		  END 

		  SELECT @cCODCICLOFACTURACIONPDV = ID_CICLOFACTURACIONPDV FROM WSXML_SFG.CICLOFACTURACIONPDV
		  WHERE SECUENCIA = @cMAXSECUENCIAFACTURACION AND ACTIVE = 1;
			
		IF @@ROWCOUNT = 0 BEGIN
			SET @msg = '-20054 No existe el ciclo de facturacion No. ' + ISNULL(@p_SECUENCIACICLO, '')
			  RAISERROR(@msg, 16, 1);
		END
		
		IF @@ROWCOUNT > 1 BEGIN
			RAISERROR('-20054 Hay mas de un ciclo de facturacion con el mismo codigo de secuencia. Este es un problema de consistencia de datos.', 16, 1);		
		END
		  
    END;

    /* Ciclo de facturacion previo (SECUENCIA MENOR ACTIVA) */
    BEGIN
      SELECT @vLastBillingDate = ISNULL(CFPREV.FECHAEJECUCION, CONVERT(DATETIME, CONVERT(DATE,'01/01/2000')))
      FROM WSXML_SFG.CICLOFACTURACIONPDV CFPREV
      WHERE CFPREV.SECUENCIA = (@cMAXSECUENCIAFACTURACION - 1) AND CFPREV.ACTIVE = 1;

	  IF @@ROWCOUNT = 0 
		SELECT @vLastBillingDate = CONVERT(DATETIME, CONVERT(DATE,'01/01/2000'));
    END;

    EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'BarcodeBillPayment', @vBarcodeBillPayment OUT
    EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'BarcodePrePaid', @vBarcodePrePaid OUT
    EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'BarcodeGamesGTECH', @vBarcodeGamesGTECH OUT
    EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'BarcodeGamesFiducia', @vBarcodeGamesFiducia OUT

    -- Filas de pagina
    --SELECT PuntosDeVentaPaginados(cCODCICLOFACTURACIONPDV, p_PAGNUM, cFILASXPAGINA) INTO cAGENTS_TBL FROM DUAL;
    --SELECT @cAGENTS_TBL = WSXML_SFG.SFGXMLDEPOSITSLIP_PuntosDeVentaPaginadosLista(@cCODCICLOFACTURACIONPDV, @p_PAGNUM, @cFILASXPAGINA);

    -- Actualizar SLIPXML cada obtencion
    UPDATE WSXML_SFG.PUNTODEVENTA SET SLIPXML = SLIPXML + 1
    WHERE ID_PUNTODEVENTA IN (SELECT IDVALUE AS AGENT FROM WSXML_SFG.SFGXMLDEPOSITSLIP_PuntosDeVentaPaginadosLista(@cCODCICLOFACTURACIONPDV, @p_PAGNUM, @cFILASXPAGINA));

     SELECT @vLastBillingDate AS LASTBILLINGDATE,
             CFP.FECHAEJECUCION AS BILLINGDATE,
             AGR.CODIGOAGRUPACIONGTECH AS CHAINNUMBER,
             PDV.CODIGOGTECHPUNTODEVENTA AS POSNUMBER,
             PDV.NUMEROTERMINAL AS TERMINALNUMBER,
             MFT.ID_MAESTROFACTURACIONTIRILLA,

             -- Cualquiera de las referencias por linea de negocio.
             COALESCE(BILLPAYBILLING.REFERENCIAGTECH, PREPAIDBILLING.REFERENCIAGTECH, LOTTERYBILLING.REFERENCIAGTECH) AS REFERENCENUMBER,

             /* Bill Payment */
             CASE WHEN BILLPAYBILLING.ID_MAESTROFACTURACIONPDV IS NULL THEN 0 ELSE 1 END AS BILLPAYBILLING,
             BILLPAYBILLING.NUMEROCUENTA AS BILLPAYBANKACCOUNTNUMBER,
             @vBarcodeBillPayment AS BILLPAYBARCODE,

             ISNULL(BILLPAYBILLING.VALORVENTAx8, 0)               AS BILLPAYPRODTOTAMOU,
             ISNULL(BILLPAYBILLING.VALORVENTAx9, 0)               AS BILLPAYDEPONLPRODTOTAMOU,
             /* Bill Payment Comission Nodes */
             -- Comission
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xBILLPAY THEN ISNULL(BILLPAYBILLING.VALORCOMISIONx8, 0) ELSE 0 END AS BPNCMMIBILLPAYMN,
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xBILLPAY THEN ISNULL(PREPAIDBILLING.VALORCOMISIONx6, 0) ELSE 0 END AS BPNCMMIEVOUCHERS,
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xBILLPAY THEN ISNULL(PREPAIDBILLING.VALORCOMISIONx7, 0) ELSE 0 END AS BPNCMMIERECHARGE,
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xBILLPAY THEN ISNULL(BILLPAYBILLING.VALORCOMISIONx9, 0) ELSE 0 END AS BPNCMMIDEPONLINE,
             -- Sumatoria de comision calculada
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xBILLPAY
             THEN ISNULL(BILLPAYBILLING.VALORCOMISIONx8, 0) + ISNULL(BILLPAYBILLING.VALORCOMISIONx9, 0)
             ELSE 0 END
             +
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xBILLPAY
             THEN ISNULL(PREPAIDBILLING.VALORCOMISIONx6, 0) + ISNULL(PREPAIDBILLING.VALORCOMISIONx7, 0)
             ELSE 0 END
                                                               AS BPNCMMITOTCMMIWITHOUTVAT,
             -- Sumatoria del IVA de la comision
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xBILLPAY
             THEN ISNULL(BILLPAYBILLING.VATCOMISIONx8, 0) + ISNULL(BILLPAYBILLING.VATCOMISIONx9, 0)
             ELSE 0 END
             +
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xBILLPAY
             THEN ISNULL(PREPAIDBILLING.VATCOMISIONx6, 0) + ISNULL(PREPAIDBILLING.VATCOMISIONx7, 0)
             ELSE 0 END
                                                               AS BPNCMMIVATOFTHECMMI,
             -- Sumatoria de comision + IVA Comision
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xBILLPAY
             THEN ISNULL(BILLPAYBILLING.VALORCOMISIONBRUTAx8, 0) + ISNULL(BILLPAYBILLING.VALORCOMISIONBRUTAx9, 0)
             ELSE 0 END
             +
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xBILLPAY
             THEN ISNULL(PREPAIDBILLING.VALORCOMISIONBRUTAx6, 0) + ISNULL(PREPAIDBILLING.VALORCOMISIONBRUTAx7, 0)
             ELSE 0 END
                                                               AS BPNCMMITOTCMMIWITHVAT,
             -- Sumatoria de Comision Neta (Sin Impuestos)
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xBILLPAY
             THEN ISNULL(BILLPAYBILLING.VALORCOMISIONNETAx8, 0) + ISNULL(BILLPAYBILLING.VALORCOMISIONNETAx9, 0)
             ELSE 0 END
             +
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xBILLPAY
             THEN ISNULL(PREPAIDBILLING.VALORCOMISIONNETAx6, 0) + ISNULL(PREPAIDBILLING.VALORCOMISIONNETAx7, 0)
             ELSE 0 END
                                                               AS BPNCMMITOTCMMIWITHVATWITHOUT,
             -- ReteRenta
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xBILLPAY
             THEN ISNULL(BILLPAYBILLING.RETVALORx1, 0) ELSE 0 END
             +
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xBILLPAY
             THEN ISNULL(PREPAIDBILLING.RETVALORx1, 0) ELSE 0 END
                                                               AS BPNTAXRENTA,
             -- ReteICA
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xBILLPAY
             THEN ISNULL(BILLPAYBILLING.RETVALORx2, 0) ELSE 0 END
             +
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xBILLPAY
             THEN ISNULL(PREPAIDBILLING.RETVALORx2, 0) ELSE 0 END
                                                               AS BPNTAXICA,
             -- ReteIVA
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xBILLPAY
             THEN ISNULL(BILLPAYBILLING.RETVALORx3, 0) ELSE 0 END
             +
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xBILLPAY
             THEN ISNULL(PREPAIDBILLING.RETVALORx3, 0) ELSE 0 END
                                                               AS BPNTAXIVA,
             /* END Bill Payment Comission Nodes */
             ISNULL(BILLPAYBILLING.NUEVOSALDOGTECH -
                 BILLPAYBILLING.SALDOANTERIORGTECH, 0)         AS BILLPAYTOTQUANTITYOWED,
             ISNULL(BILLPAYBILLING.NUEVOSALDOGTECH, 0)            AS BILLPAYBILLDUTYACCOUNTBALANCE,

             /* PrePaid */
             CASE WHEN PREPAIDBILLING.ID_MAESTROFACTURACIONPDV IS NULL THEN 0 ELSE 1 END AS PREPAIDBILLING,
             PREPAIDBILLING.NUMEROCUENTA AS PRPBANKACCOUNTNUMBER,
             @vBarcodePrePaid AS PRPBARCODE,

             ISNULL(PREPAIDBILLING.VALORVENTAx6, 0) AS PRPEVOUCHERPRODTOTAMOU,
             ISNULL(PREPAIDBILLING.VALORVENTAx7, 0) AS PRPERECHARGEPRODTOTAMOU,

             /* PrePaid Comission Nodes */
             -- Comission
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xPREPAID THEN ISNULL(BILLPAYBILLING.VALORCOMISIONx8, 0) ELSE 0 END AS PRPCMMIBILLPAYMN,
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xPREPAID THEN ISNULL(PREPAIDBILLING.VALORCOMISIONx6, 0) ELSE 0 END AS PRPCMMIEVOUCHERS,
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xPREPAID THEN ISNULL(PREPAIDBILLING.VALORCOMISIONx7, 0) ELSE 0 END AS PRPCMMIERECHARGE,
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xPREPAID THEN ISNULL(BILLPAYBILLING.VALORCOMISIONx9, 0) ELSE 0 END AS PRPCMMIDEPONLINE,
             -- Sumatoria de comision calculada
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xPREPAID
             THEN ISNULL(BILLPAYBILLING.VALORCOMISIONx8, 0) + ISNULL(BILLPAYBILLING.VALORCOMISIONx9, 0)
             ELSE 0 END
             +
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xPREPAID
             THEN ISNULL(PREPAIDBILLING.VALORCOMISIONx6, 0) + ISNULL(PREPAIDBILLING.VALORCOMISIONx7, 0)
             ELSE 0 END
                                                               AS PRPCMMITOTCMMIWITHOUTVAT,
             -- Sumatoria del IVA de la comision
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xPREPAID
             THEN ISNULL(BILLPAYBILLING.VATCOMISIONx8, 0) + ISNULL(BILLPAYBILLING.VATCOMISIONx9, 0)
             ELSE 0 END
             +
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xPREPAID
             THEN ISNULL(PREPAIDBILLING.VATCOMISIONx6, 0) + ISNULL(PREPAIDBILLING.VATCOMISIONx7, 0)
             ELSE 0 END
                                                               AS PRPCMMIVATOFTHECMMI,
             -- Sumatoria de comision + IVA Comision
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xPREPAID
             THEN ISNULL(BILLPAYBILLING.VALORCOMISIONBRUTAx8, 0) + ISNULL(BILLPAYBILLING.VALORCOMISIONBRUTAx9, 0)
             ELSE 0 END
             +
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xPREPAID
             THEN ISNULL(PREPAIDBILLING.VALORCOMISIONBRUTAx6, 0) + ISNULL(PREPAIDBILLING.VALORCOMISIONBRUTAx7, 0)
             ELSE 0 END
                                                               AS PRPCMMITOTCMMIWITHVAT,
             -- Sumatoria de Comision Neta (Sin Impuestos)
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xPREPAID
             THEN ISNULL(BILLPAYBILLING.VALORCOMISIONNETAx8, 0) + ISNULL(BILLPAYBILLING.VALORCOMISIONNETAx9, 0)
             ELSE 0 END
             +
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xPREPAID
             THEN ISNULL(PREPAIDBILLING.VALORCOMISIONNETAx6, 0) + ISNULL(PREPAIDBILLING.VALORCOMISIONNETAx7, 0)
             ELSE 0 END
                                                               AS PRPCMMITOTCMMIWITHVATWITHOUT,
             -- ReteRenta
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xPREPAID
             THEN ISNULL(BILLPAYBILLING.RETVALORx1, 0) ELSE 0 END
             +
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xPREPAID
             THEN ISNULL(PREPAIDBILLING.RETVALORx1, 0) ELSE 0 END
                                                               AS PRPTAXRENTA,
             -- ReteICA
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xPREPAID
             THEN ISNULL(BILLPAYBILLING.RETVALORx2, 0) ELSE 0 END
             +
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xPREPAID
             THEN ISNULL(PREPAIDBILLING.RETVALORx2, 0) ELSE 0 END
                                                               AS PRPTAXICA,
             -- ReteIVA
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xPREPAID
             THEN ISNULL(BILLPAYBILLING.RETVALORx3, 0) ELSE 0 END
             +
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xPREPAID
             THEN ISNULL(PREPAIDBILLING.RETVALORx3, 0) ELSE 0 END
                                                               AS PRPTAXIVA,
             /* END PrePaid Comission Nodes */
             ISNULL(PREPAIDBILLING.NUEVOSALDOGTECH -
                 PREPAIDBILLING.SALDOANTERIORGTECH, 0)         AS PRPTOTQUANTITYOWED,
             ISNULL(PREPAIDBILLING.NUEVOSALDOGTECH, 0)            AS PRPCMMONDUTYACCOUNTBALANCE,

             /* Lottery */
             CASE WHEN LOTTERYBILLING.ID_MAESTROFACTURACIONPDV IS NULL THEN 0 ELSE 1 END AS LOTTERYBILLING,
             ISNULL(LOTTERYBILLING.SALDOANTERIORFIDUCIA, 0)         AS LOTTPENDINGBALANFIDUCIA,
             ISNULL(LOTTERYBILLING.SALDOANTERIORGTECH, 0)           AS LOTTPENDINGBALANGTECH,
             ISNULL(LOTTERYBILLING.SALDOANTERIORFIDUCIA +
                 LOTTERYBILLING.SALDOANTERIORGTECH, 0)           AS LOTTPREVIOUSBALANTOTAMOUNT,
             -- No existen ajustes en facturacion
             0                                                   AS LOTTADJUSTMENTS,
             ISNULL(LOTTERYBILLING.IMPVALORx1, 0)                   AS LOTTCONSOLIDATEDTAXIVA,
             ISNULL(LOTTERYBILLING.FACTURACIONGTECH, 0) +
             ISNULL(LOTTERYBILLING.FACTURACIONFIDUCIA, 0)           AS LOTTTOTCURRENTWEEK,
             ISNULL(LOTTERYBILLING.NUEVOSALDOFIDUCIA +
                 LOTTERYBILLING.NUEVOSALDOGTECH, 0)              AS LOTTTOTQUANTITYOWED,
             ISNULL(LOTTERYBILLING.NUEVOSALDOFIDUCIA, 0)            AS LOTTOWEDFIDUCIARY,
             ISNULL(LOTTERYBILLING.NUEVOSALDOGTECH, 0)              AS LOTTOWEDGTECH,
             ISNULL(LOTTERYBILLING.VALORCOMISION, 0)                AS LOTTGROSSCMMI,
             ISNULL(LOTTERYBILLING.UVTVALOR, 0)                     AS LOTTINCOMETAX,
             ISNULL(LOTTERYBILLING.RETVALORx2, 0)                   AS LOTTTAXINDUSTRYANDCMMERCE,
             0                                                   AS LOTTINSURANCEOWED,
             ISNULL(LOTTERYBILLING.VALORCOMISIONNETA, 0)            AS LOTTCMMIFINAL,

             LOTTERYBILLING.REFERENCIAGTECH                      AS LOTTGTEREFERENCENUMBERGTECH,
             @vBarcodeGamesGTECH                                  AS LOTTGTEBARCODEGTECH,
             LOTTERYBILLING.NUMEROCUENTAGTECH                    AS LOTTGTEBANKACCOUNTNUMBERGTECH,
             ISNULL(LOTTERYBILLING.NUEVOSALDOGTECH, 0)              AS LOTTGTEPREVIOUSBALANCEGTECH,   -- Increible, pero cierto: El valor a pagar se llama PreviousBalanceGTECH
             LOTTERYBILLING.REFERENCIAFIDUCIA                    AS LOTTFIDREFERENCENUMBERFID,
             @vBarcodeGamesFiducia                                AS LOTTFIDBARCODEFIDUCIA,
             LOTTERYBILLING.NUMEROCUENTAFIDUCIA                  AS LOTTFIDBANKACCOUNTNUMBERFID,
             ISNULL(LOTTERYBILLING.NUEVOSALDOFIDUCIA, 0)            AS LOTTFIDPREVIOUSBALANCEFID,     -- Increible, pero cierto: El valor a pagar se llama PreviousBalanceFiducia

             /* Informacion de control */
             PDV.ID_PUNTODEVENTA,
             AGR.ID_AGRUPACIONPUNTODEVENTA,
             AGR.CODTIPOPUNTODEVENTA,
             ISNULL(AGR.CODPUNTODEVENTACABEZA, 0) AS CODPUNTODEVENTACABEZA,
             ISNULL(PDV.SLIPXML, 0)               AS SLIPXML
      FROM (SELECT CODPUNTODEVENTA AS AGENT
            FROM (SELECT CODPUNTODEVENTA, ROW_NUMBER() OVER(ORDER BY CAST(CODIGOGTECHPUNTODEVENTA AS NUMERIC(38,0))) AS row_counter
                  FROM (
						SELECT CODPUNTODEVENTA, CODIGOGTECHPUNTODEVENTA FROM WSXML_SFG.MAESTROFACTURACIONTIRILLA
							INNER JOIN WSXML_SFG.PUNTODEVENTA ON (CODPUNTODEVENTA = ID_PUNTODEVENTA)
                        WHERE CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV
                        ) s
				) s
            WHERE row_counter > (@p_PAGNUM * @cFILASXPAGINA)
              AND row_counter <= ((@p_PAGNUM + 1) * @cFILASXPAGINA)) PAGED
      /* Puntos de venta inicialmente paginados */
      INNER JOIN WSXML_SFG.PUNTODEVENTA PDV ON (PDV.ID_PUNTODEVENTA = PAGED.AGENT)
      INNER JOIN WSXML_SFG.AGRUPACIONPUNTODEVENTA AGR ON (PDV.CODAGRUPACIONPUNTODEVENTA = AGR.ID_AGRUPACIONPUNTODEVENTA)
      INNER JOIN WSXML_SFG.CICLOFACTURACIONPDV CFP ON (CFP.ID_CICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV)
      INNER JOIN WSXML_SFG.MAESTROFACTURACIONTIRILLA MFT ON (MFT.CODCICLOFACTURACIONPDV = CFP.ID_CICLOFACTURACIONPDV
                                               AND MFT.CODPUNTODEVENTA = PDV.ID_PUNTODEVENTA)
      /* Facturacion de BillPayment */
      LEFT OUTER JOIN (SELECT /*+ index MAESTROFACTURACIONPDV GLOBALXML_MAESTROFACT_IX) */
                              MFPBILLPAY.ID_MAESTROFACTURACIONPDV     AS ID_MAESTROFACTURACIONPDV,
                              MFPBILLPAY.CODMAESTROFACTURACIONTIRILLA AS CODMAESTROFACTURACIONTIRILLA,
                              MFPBILLPAY.CODCICLOFACTURACIONPDV       AS CODCICLOFACTURACIONPDV,
                              MFPBILLPAY.CODPUNTODEVENTA              AS CODPUNTODEVENTA,

                              ISNULL(MFPBILLPAY.SALDOANTERIORENCONTRAGTECH -
                                  MFPBILLPAY.SALDOANTERIORAFAVORGTECH, 0)  AS SALDOANTERIORGTECH,
                              ISNULL(MFPxBP.FACTURADOGTECH, 0)                AS FACTURACIONGTECH,
                              ISNULL(MFPBILLPAY.NUEVOSALDOENCONTRAGTECH -
                                  MFPBILLPAY.NUEVOSALDOAFAVORGTECH, 0)     AS NUEVOSALDOGTECH,
                              MFCBILLPAY.REFERENCIAGTECH                   AS REFERENCIAGTECH,
                              CNTBILLPAY.NUMEROCUENTA                      AS NUMEROCUENTA,

                              ISNULL(MFPxBP.VALORVENTAxBP, 0)            AS VALORVENTAx8,
                              ISNULL(MFPxBP.VALORVENTANETAxBP, 0)        AS VALORVENTANETAx8,
                              ISNULL(MFPxBP.VALORCOMISIONxBP, 0)         AS VALORCOMISIONx8,
                              ISNULL(MFPxBP.VALORCOMISIONBRUTAxBP, 0)    AS VALORCOMISIONBRUTAx8,
                              ISNULL(MFPxBP.VALORCOMISIONNETAxBP, 0)     AS VALORCOMISIONNETAx8,
                              ISNULL(MFPxBP.IVACOMISIONxBP, 0)           AS VATCOMISIONx8,
                              ISNULL(MFPxBP.VALORVENTAxDO, 0)            AS VALORVENTAx9,
                              ISNULL(MFPxBP.VALORVENTANETAxDO, 0)        AS VALORVENTANETAx9,
                              ISNULL(MFPxBP.VALORCOMISIONxDO, 0)         AS VALORCOMISIONx9,
                              ISNULL(MFPxBP.VALORCOMISIONBRUTAxDO, 0)    AS VALORCOMISIONBRUTAx9,
                              ISNULL(MFPxBP.VALORCOMISIONNETAxDO, 0)     AS VALORCOMISIONNETAx9,
                              ISNULL(MFPxBP.IVACOMISIONxDO, 0)           AS VATCOMISIONx9,
                              ISNULL(RETBILLPAY.VALORRETENCIONx1, 0)     AS RETVALORx1,
                              ISNULL(RETBILLPAY.VALORRETENCIONx2, 0)     AS RETVALORx2,
                              ISNULL(RETBILLPAY.VALORRETENCIONx3, 0)     AS RETVALORx3,
                              MFPBILLPAY.CODLINEADENEGOCIODESCUENTO   AS DESCONTADA
                       FROM WSXML_SFG.MAESTROFACTURACIONPDV MFPBILLPAY
                       INNER JOIN WSXML_SFG.MAESTROFACTURACIONCOMPCONSIG MFCBILLPAY ON (MFCBILLPAY.ID_MAESTROFACTCOMPCONSIG = MFPBILLPAY.CODMAESTROFACTURACIONCOMPCONSI)
                       INNER JOIN WSXML_SFG.CUENTA CNTBILLPAY ON (CNTBILLPAY.ID_CUENTA = MFCBILLPAY.CODCUENTAPAGOGTECH)
                       -- Easily tradable for a redundant table
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONPDV GLOBALTIPO_DETALLEFACTPDV_IX) */
                                               DFPBILLPAY.CODMAESTROFACTURACIONPDV,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xBPAYMNT THEN DFPBILLPAY.VALORVENTA ELSE 0 END)         AS VALORVENTAxBP,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xBPAYMNT THEN DFPBILLPAY.VALORVENTANETA ELSE 0 END)     AS VALORVENTANETAxBP,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xBPAYMNT THEN DFPBILLPAY.VALORCOMISION ELSE 0 END)      AS VALORCOMISIONxBP,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xBPAYMNT THEN DFPBILLPAY.VALORCOMISIONBRUTA ELSE 0 END) AS VALORCOMISIONBRUTAxBP,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xBPAYMNT THEN DFPBILLPAY.VALORCOMISIONNETA ELSE 0 END)  AS VALORCOMISIONNETAxBP,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xBPAYMNT THEN DFPBILLPAY.IVACOMISION ELSE 0 END)        AS IVACOMISIONxBP,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xDEPONLN THEN DFPBILLPAY.VALORVENTA ELSE 0 END)         AS VALORVENTAxDO,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xDEPONLN THEN DFPBILLPAY.VALORVENTANETA ELSE 0 END)     AS VALORVENTANETAxDO,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xDEPONLN THEN DFPBILLPAY.VALORCOMISION ELSE 0 END)      AS VALORCOMISIONxDO,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xDEPONLN THEN DFPBILLPAY.VALORCOMISIONBRUTA ELSE 0 END) AS VALORCOMISIONBRUTAxDO,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xDEPONLN THEN DFPBILLPAY.VALORCOMISIONNETA ELSE 0 END)  AS VALORCOMISIONNETAxDO,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xDEPONLN THEN DFPBILLPAY.IVACOMISION ELSE 0 END)        AS IVACOMISIONxDO,
                                               SUM(DFPBILLPAY.NUEVOSALDOENCONTRAGTECH - DFPBILLPAY.NUEVOSALDOAFAVORGTECH)                         AS FACTURADOGTECH,
                                               SUM(DFPBILLPAY.NUEVOSALDOENCONTRAFIDUCIA - DFPBILLPAY.NUEVOSALDOAFAVORFIDUCIA)                     AS FACTURADOFIDUCIA
                                        FROM WSXML_SFG.DETALLEFACTURACIONPDV DFPBILLPAY
                                        GROUP BY DFPBILLPAY.CODMAESTROFACTURACIONPDV) MFPxBP ON (MFPxBP.CODMAESTROFACTURACIONPDV = MFPBILLPAY.ID_MAESTROFACTURACIONPDV)
                       -- End Easily tradable
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONRETENCION GLOBALBILL_DETALLEFACTRET_IX) */
                                               CODMAESTROFACTURACIONPDV,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXRENTA THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx1,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXICA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx2,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXIVA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx3
                                        FROM WSXML_SFG.DETALLEFACTURACIONRETENCION
                                        GROUP BY CODMAESTROFACTURACIONPDV) RETBILLPAY ON (RETBILLPAY.CODMAESTROFACTURACIONPDV = MFPBILLPAY.ID_MAESTROFACTURACIONPDV)
                       WHERE MFPBILLPAY.CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV
                         AND MFPBILLPAY.CODLINEADENEGOCIO = @xBILLPAY
                       ) BILLPAYBILLING ON (BILLPAYBILLING.CODCICLOFACTURACIONPDV = CFP.ID_CICLOFACTURACIONPDV
                                        AND BILLPAYBILLING.CODMAESTROFACTURACIONTIRILLA = MFT.ID_MAESTROFACTURACIONTIRILLA)
      /* Facturacion de PrePaid */
      LEFT OUTER JOIN (SELECT /*+ index MAESTROFACTURACIONPDV GLOBALXML_MAESTROFACT_IX) */
                              MFPPREPAID.ID_MAESTROFACTURACIONPDV     AS ID_MAESTROFACTURACIONPDV,
                              MFPPREPAID.CODMAESTROFACTURACIONTIRILLA AS CODMAESTROFACTURACIONTIRILLA,
                              MFPPREPAID.CODCICLOFACTURACIONPDV       AS CODCICLOFACTURACIONPDV,
                              MFPPREPAID.CODPUNTODEVENTA              AS CODPUNTODEVENTA,

                              ISNULL(MFPPREPAID.SALDOANTERIORENCONTRAGTECH -
                                  MFPPREPAID.SALDOANTERIORAFAVORGTECH, 0)     AS SALDOANTERIORGTECH,
                              ISNULL(MFPxPN.FACTURADOGTECH, 0)                   AS FACTURACIONGTECH,
                              ISNULL(MFPPREPAID.NUEVOSALDOENCONTRAGTECH -
                                  MFPPREPAID.NUEVOSALDOAFAVORGTECH, 0)        AS NUEVOSALDOGTECH,
                              MFCPREPAID.REFERENCIAGTECH                      AS REFERENCIAGTECH,
                              CNTPREPAID.NUMEROCUENTA                         AS NUMEROCUENTA,

                              ISNULL(MFPxPN.VALORVENTAxEV, 0)            AS VALORVENTAx6,
                              ISNULL(MFPxPN.VALORVENTANETAxEV, 0)        AS VALORVENTANETAx6,
                              ISNULL(MFPxPN.VALORCOMISIONxEV, 0)         AS VALORCOMISIONx6,
                              ISNULL(MFPxPN.VALORCOMISIONBRUTAxEV, 0)    AS VALORCOMISIONBRUTAx6,
                              ISNULL(MFPxPN.VALORCOMISIONNETAxEV, 0)     AS VALORCOMISIONNETAx6,
                              ISNULL(MFPxPN.IVACOMISIONxEV, 0)           AS VATCOMISIONx6,
                              ISNULL(MFPxPN.VALORVENTAxER, 0)            AS VALORVENTAx7,
                              ISNULL(MFPxPN.VALORVENTANETAxER, 0)        AS VALORVENTANETAx7,
                              ISNULL(MFPxPN.VALORCOMISIONxER, 0)         AS VALORCOMISIONx7,
                              ISNULL(MFPxPN.VALORCOMISIONBRUTAxER, 0)    AS VALORCOMISIONBRUTAx7,
                              ISNULL(MFPxPN.VALORCOMISIONNETAxER, 0)     AS VALORCOMISIONNETAx7,
                              ISNULL(MFPxPN.IVACOMISIONxER, 0)           AS VATCOMISIONx7,
                              ISNULL(RETPREPAID.VALORRETENCIONx1, 0)     AS RETVALORx1,
                              ISNULL(RETPREPAID.VALORRETENCIONx2, 0)     AS RETVALORx2,
                              ISNULL(RETPREPAID.VALORRETENCIONx3, 0)     AS RETVALORx3,
                              MFPPREPAID.CODLINEADENEGOCIODESCUENTO   AS DESCONTADA
                       FROM MAESTROFACTURACIONPDV MFPPREPAID
                       INNER JOIN MAESTROFACTURACIONCOMPCONSIG MFCPREPAID ON (MFCPREPAID.ID_MAESTROFACTCOMPCONSIG = MFPPREPAID.CODMAESTROFACTURACIONCOMPCONSI)
                       INNER JOIN CUENTA CNTPREPAID ON (CNTPREPAID.ID_CUENTA = MFCPREPAID.CODCUENTAPAGOGTECH)
                       -- Easily tradable for a redundant table
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONPDV GLOBALTIPO_DETALLEFACTPDV_IX) */
                                               DFPPREPAID.CODMAESTROFACTURACIONPDV,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xEVOUCHR THEN DFPPREPAID.VALORVENTA ELSE 0 END)         AS VALORVENTAxEV,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xEVOUCHR THEN DFPPREPAID.VALORVENTANETA ELSE 0 END)     AS VALORVENTANETAxEV,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xEVOUCHR THEN DFPPREPAID.VALORCOMISION ELSE 0 END)      AS VALORCOMISIONxEV,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xEVOUCHR THEN DFPPREPAID.VALORCOMISIONBRUTA ELSE 0 END) AS VALORCOMISIONBRUTAxEV,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xEVOUCHR THEN DFPPREPAID.VALORCOMISIONNETA ELSE 0 END)  AS VALORCOMISIONNETAxEV,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xEVOUCHR THEN DFPPREPAID.IVACOMISION ELSE 0 END)        AS IVACOMISIONxEV,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xERECHRG THEN DFPPREPAID.VALORVENTA ELSE 0 END)         AS VALORVENTAxER,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xERECHRG THEN DFPPREPAID.VALORVENTANETA ELSE 0 END)     AS VALORVENTANETAxER,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xERECHRG THEN DFPPREPAID.VALORCOMISION ELSE 0 END)      AS VALORCOMISIONxER,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xERECHRG THEN DFPPREPAID.VALORCOMISIONBRUTA ELSE 0 END) AS VALORCOMISIONBRUTAxER,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xERECHRG THEN DFPPREPAID.VALORCOMISIONNETA ELSE 0 END)  AS VALORCOMISIONNETAxER,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xERECHRG THEN DFPPREPAID.IVACOMISION ELSE 0 END)        AS IVACOMISIONxER,
                                               SUM(DFPPREPAID.NUEVOSALDOENCONTRAGTECH - DFPPREPAID.NUEVOSALDOAFAVORGTECH)                         AS FACTURADOGTECH,
                                               SUM(DFPPREPAID.NUEVOSALDOENCONTRAFIDUCIA - DFPPREPAID.NUEVOSALDOAFAVORFIDUCIA)                     AS FACTURADOFIDUCIA
                                        FROM DETALLEFACTURACIONPDV DFPPREPAID
                                        GROUP BY DFPPREPAID.CODMAESTROFACTURACIONPDV) MFPxPN ON (MFPxPN.CODMAESTROFACTURACIONPDV = MFPPREPAID.ID_MAESTROFACTURACIONPDV)
                       -- End Easily tradable
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONRETENCION GLOBALBILL_DETALLEFACTRET_IX) */
                                               CODMAESTROFACTURACIONPDV,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXRENTA THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx1,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXICA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx2,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXIVA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx3
                                        FROM WSXML_SFG.DETALLEFACTURACIONRETENCION
                                        GROUP BY CODMAESTROFACTURACIONPDV) RETPREPAID ON (RETPREPAID.CODMAESTROFACTURACIONPDV = MFPPREPAID.ID_MAESTROFACTURACIONPDV)
                       WHERE MFPPREPAID.CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV
                         AND MFPPREPAID.CODLINEADENEGOCIO = @xPREPAID
                       ) PREPAIDBILLING ON (PREPAIDBILLING.CODCICLOFACTURACIONPDV = CFP.ID_CICLOFACTURACIONPDV
                                        AND PREPAIDBILLING.CODMAESTROFACTURACIONTIRILLA = MFT.ID_MAESTROFACTURACIONTIRILLA)
      /* Facturacion de Lottery */
      LEFT OUTER JOIN (SELECT /*+ index MAESTROFACTURACIONPDV GLOBALXML_MAESTROFACT_IX) */
                              MFPLOTTERY.ID_MAESTROFACTURACIONPDV     AS ID_MAESTROFACTURACIONPDV,
                              MFPLOTTERY.CODMAESTROFACTURACIONTIRILLA AS CODMAESTROFACTURACIONTIRILLA,
                              MFPLOTTERY.CODCICLOFACTURACIONPDV       AS CODCICLOFACTURACIONPDV,
                              MFPLOTTERY.CODPUNTODEVENTA              AS CODPUNTODEVENTA,

                              ISNULL(MFPLOTTERY.SALDOANTERIORENCONTRAGTECH -
                                  MFPLOTTERY.SALDOANTERIORAFAVORGTECH, 0)     AS SALDOANTERIORGTECH,
                              ISNULL(MFPLOTTERY.SALDOANTERIORENCONTRAFIDUCIA -
                                  MFPLOTTERY.SALDOANTERIORAFAVORFIDUCIA, 0)   AS SALDOANTERIORFIDUCIA,
                              ISNULL(MFPLOTTERY.NUEVOSALDOENCONTRAGTECH -
                                  MFPLOTTERY.NUEVOSALDOAFAVORGTECH, 0)        AS NUEVOSALDOGTECH,
                              ISNULL(MFPLOTTERY.NUEVOSALDOENCONTRAFIDUCIA -
                                  MFPLOTTERY.NUEVOSALDOAFAVORFIDUCIA, 0)      AS NUEVOSALDOFIDUCIA,
                              MFCLOTTERY.REFERENCIAGTECH                      AS REFERENCIAGTECH,
                              MFCLOTTERY.REFERENCIAFIDUCIA                    AS REFERENCIAFIDUCIA,
                              CNTLOTTEGT.NUMEROCUENTA                         AS NUMEROCUENTAGTECH,
                              CNTLOTTEFD.NUMEROCUENTA                         AS NUMEROCUENTAFIDUCIA,

                              ISNULL(MFPxLT.VALORVENTA, 0)               AS VALORVENTA,
                              ISNULL(MFPxLT.VALORVENTANETA, 0)           AS VALORVENTANETA,
                              ISNULL(MFPxLT.VALORCOMISION, 0)            AS VALORCOMISION,
                              ISNULL(MFPxLT.VALORCOMISIONBRUTA, 0)       AS VALORCOMISIONBRUTA,
                              ISNULL(MFPxLT.VALORCOMISIONNETA, 0)        AS VALORCOMISIONNETA,
                              ISNULL(MFPxLT.IVACOMISION, 0)              AS VATCOMISION,
                              ISNULL(MFPxLT.FACTURACIONGTECH, 0)         AS FACTURACIONGTECH,
                              ISNULL(MFPxLT.FACTURACIONFIDUCIA, 0)       AS FACTURACIONFIDUCIA,
                              ISNULL(IMPLOTTERY.VALORIMPUESTOx1, 0)      AS IMPVALORx1,
                              ISNULL(RETLOTTERY.VALORRETENCIONx1, 0)     AS RETVALORx1,
                              ISNULL(RETLOTTERY.VALORRETENCIONx2, 0)     AS RETVALORx2,
                              ISNULL(RETLOTTERY.VALORRETENCIONx3, 0)     AS RETVALORx3,
                              ISNULL(UVTLOTTERY.VALORRETENCION, 0)       AS UVTVALOR,
                              MFPLOTTERY.CODLINEADENEGOCIODESCUENTO   AS DESCONTADA
                       FROM MAESTROFACTURACIONPDV MFPLOTTERY
                       INNER JOIN MAESTROFACTURACIONCOMPCONSIG MFCLOTTERY ON (MFCLOTTERY.ID_MAESTROFACTCOMPCONSIG = MFPLOTTERY.CODMAESTROFACTURACIONCOMPCONSI)
                       INNER JOIN CUENTA CNTLOTTEGT ON (CNTLOTTEGT.ID_CUENTA = MFCLOTTERY.CODCUENTAPAGOGTECH)
                       INNER JOIN CUENTA CNTLOTTEFD ON (CNTLOTTEFD.ID_CUENTA = MFCLOTTERY.CODCUENTAPAGOFIDUCIA)
                       -- Easily tradable for a redundant table
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONPDV XMLGENERACION_DFP_IX) */
                                               DFPLOTTERY.CODMAESTROFACTURACIONPDV,
                                               SUM(DFPLOTTERY.VALORVENTA)         AS VALORVENTA,
                                               SUM(DFPLOTTERY.VALORVENTANETA)     AS VALORVENTANETA,
                                               SUM(DFPLOTTERY.VALORCOMISION)      AS VALORCOMISION,
                                               SUM(DFPLOTTERY.VALORCOMISIONBRUTA) AS VALORCOMISIONBRUTA,
                                               SUM(DFPLOTTERY.VALORCOMISIONNETA)  AS VALORCOMISIONNETA,
                                               SUM(DFPLOTTERY.IVACOMISION)        AS IVACOMISION,
                                               SUM(DFPLOTTERY.NUEVOSALDOENCONTRAGTECH - DFPLOTTERY.NUEVOSALDOAFAVORGTECH)     AS FACTURACIONGTECH,
                                               SUM(DFPLOTTERY.NUEVOSALDOENCONTRAFIDUCIA - DFPLOTTERY.NUEVOSALDOAFAVORFIDUCIA) AS FACTURACIONFIDUCIA
                                        FROM WSXML_SFG.DETALLEFACTURACIONPDV DFPLOTTERY
                                        GROUP BY DFPLOTTERY.CODMAESTROFACTURACIONPDV) MFPxLT ON (MFPxLT.CODMAESTROFACTURACIONPDV = MFPLOTTERY.ID_MAESTROFACTURACIONPDV)
                       -- End Easily tradable
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONIMPUESTO GLOBALBILL_DETALLEFACTIMP_IX) */
                                               CODMAESTROFACTURACIONPDV,
                                               SUM(CASE WHEN CODIMPUESTO = @xPRODTX THEN VALORIMPUESTO ELSE 0 END) AS VALORIMPUESTOx1
                                        FROM WSXML_SFG.DETALLEFACTURACIONIMPUESTO
                                        GROUP BY CODMAESTROFACTURACIONPDV) IMPLOTTERY ON (IMPLOTTERY.CODMAESTROFACTURACIONPDV = MFPLOTTERY.ID_MAESTROFACTURACIONPDV)
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONRETENCION GLOBALBILL_DETALLEFACTRET_IX) */
                                               CODMAESTROFACTURACIONPDV,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXRENTA THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx1,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXICA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx2,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXIVA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx3
                                        FROM WSXML_SFG.DETALLEFACTURACIONRETENCION
                                        GROUP BY CODMAESTROFACTURACIONPDV) RETLOTTERY ON (RETLOTTERY.CODMAESTROFACTURACIONPDV = MFPLOTTERY.ID_MAESTROFACTURACIONPDV)
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONRETUVT GLOBALBILL_DETALLEFACTUVT_IX) */
                                               CODMAESTROFACTURACIONPDV,
                                               SUM(VALORRETENCION) AS VALORRETENCION
                                        FROM WSXML_SFG.DETALLEFACTURACIONRETUVT
                                        GROUP BY CODMAESTROFACTURACIONPDV) UVTLOTTERY ON (UVTLOTTERY.CODMAESTROFACTURACIONPDV = MFPLOTTERY.ID_MAESTROFACTURACIONPDV)
                       WHERE MFPLOTTERY.CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV
                         AND MFPLOTTERY.CODLINEADENEGOCIO = @xLOTTERY
                       ) LOTTERYBILLING ON (LOTTERYBILLING.CODCICLOFACTURACIONPDV = CFP.ID_CICLOFACTURACIONPDV
                                        AND LOTTERYBILLING.CODMAESTROFACTURACIONTIRILLA = MFT.ID_MAESTROFACTURACIONTIRILLA);

	 IF @@ROWCOUNT = 0 BEGIN
		SET @msg = 'No se pudo obtener la informacion de Deposit Slips: ' + isnull(ERROR_MESSAGE ( ) , '');
		EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @p_TIPOADVERTENCIA, 'GENERACIONXML', @msg, 1
	 END
	END TRY
	BEGIN CATCH
		SET @msg = 'No se pudo obtener la informacion de Deposit Slips: ' + isnull(ERROR_MESSAGE ( ) , '');
		EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @p_TIPOADVERTENCIA, 'GENERACIONXML', @msg, 1
	END CATCH
  END
GO



  /* Obtains the records for every deposit slip to be generated */
  IF OBJECT_ID('WSXML_SFG.KAZ_GetCustomBilling', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.KAZ_GetCustomBilling;
GO


  CREATE PROCEDURE WSXML_SFG.KAZ_GetCustomBilling(@p_MONTH NUMERIC(22,0)) AS
    DECLARE @FirstDate DATETIME;
    DECLARE @LastDate  DATETIME;
    DECLARE @lstdates TABLE(DATEARRAY DATETIME);
	DECLARE @sql VARCHAR(MAX)
    DECLARE @strMAXCOLMNVAL VARCHAR(2000) = '';
  BEGIN
	DECLARE  @currentDate DATETIME = CONVERT(DATETIME, CONVERT(DATE,('01/' + dbo.lpad_numeric2(@p_MONTH, 2, '0') + '/2009')))
    EXEC WSXML_SFG.SFG_PACKAGE_GetMonthRange @currentDate, @FirstDate OUT, @LastDate OUT

    set @currentdate = @FirstDate;
    WHILE @currentdate <= @LastDate 
	BEGIN
      INSERT INTO @lstdates VALUES(@currentdate)
      set @currentdate = @currentdate + 1;
    END;

    DECLARE ix CURSOR FOR SELECT DATEARRAY FROM @lstdates
	OPEN ix
	DECLARE @ix_datearray DATETIME
	FETCH NEXT FROM ix into @ix_datearray

	while @@fetch_status=0
	begin

		SET @strMAXCOLMNVAL = ISNULL(@strMAXCOLMNVAL, '') + ', SUM(CASE WHEN CDC = ' + WSXML_SFG.SFG_PACKAGE_GETNUMEROCDC(@ix_datearray) + ' THEN INGRESOSVALIDOS ELSE 0 END) AS "' + ISNULL(dbo.to_char_date(@ix_datearray, 'MM/DD/YYYY'), '') + '"';
		FETCH NEXT FROM ix into @ix_datearray
    END;
    CLOSE ix;
    DEALLOCATE ix;
    SET @sql = 
      'SELECT CODIGOGTECHPUNTODEVENTA, NUMEROTERMINAL ' + ISNULL(@strMAXCOLMNVAL, '') + ' ' +
      'FROM WSXML_SFG.VW_PREFACTURACION_DIARIA ' +
      'WHERE TIPOARCHIVO = 1 ' +
      '  AND CDC BETWEEN ' + ISNULL(WSXML_SFG.SFG_PACKAGE_GETNUMEROCDC(@FirstDate), '') + ' AND ' + ISNULL(WSXML_SFG.WSXML_SFG_SFG_PACKAGE_GETNUMEROCDC(@LastDate), '') + ' ' +
      '  AND CODLINEADENEGOCIO = 2 ' +
      '  AND NUMEROTERMINAL IN (' +
	25 + ',' +
109 + ',' +
158 + ',' +
225 + ',' +
347 + ',' +
370 + ',' +
719 + ',' +
795 + ',' +
1052 + ',' +
1169 + ',' +
1258 + ',' +
1560 + ',' +
1581 + ',' +
2063 + ',' +
2132 + ',' +
2197 + ',' +
2198 + ',' +
2221 + ',' +
2525 + ',' +
2628 + ',' +
2661 + ',' +
2675 + ',' +
2892 + ',' +
3022 + ',' +
3239 + ',' +
3489 + ',' +
3674 + ',' +
3817 + ',' +
3905 + ',' +
3919 + ',' +
4182 + ',' +
4722 + ',' +
4808 + ',' +
5623 + ',' +
5881 + ',' +
6258 + ',' +
6541 + ',' +
6693 + ',' +
6799 + ',' +
6961 + ',' +
7039 + ',' +
7105 + ',' +
7496 + ',' +
7501 + ',' +
7563 + ',' +
8370 + ',' +
8496 + ',' +
8546 + ',' +
8715 + ',' +
8812 + ',' +
8857 + ',' +
8888 + ',' +
8904 + ',' +
8974 + ',' +
8976 + ',' +
8992 + ',' +
9020 + ',' +
9031 + ',' +
9248 + ',' +
9278 + ',' +
9420 + ',' +
9429 + ',' +
9476 + ',' +
9481 + ',' +
9531 + ',' +
9586 + ',' +
9634 + ',' +
9639 + ',' +
9643 + ',' +
9746 + ',' +
9747 + ',' +
9753 + ',' +
9802 + ',' +
9822 + ',' +
9831 + ',' +
9856 + ',' +
9898 + ',' +
9927 + ',' +
9940 + ',' +
9995 +
      ')' +
      'GROUP BY CODIGOGTECHPUNTODEVENTA, NUMEROTERMINAL ' +
      'ORDER BY CODIGOGTECHPUNTODEVENTA ';
    EXECUTE sp_executesql @sql;
  END;

GO

  IF OBJECT_ID('WSXML_SFG.KAZ_FixReferenceCustomerInfo', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.KAZ_FixReferenceCustomerInfo;
GO


  CREATE PROCEDURE WSXML_SFG.KAZ_FixReferenceCustomerInfo(@p_CODREGISTROFACTURACION       NUMERIC(22,0),
                                     @p_NUMEROREFERENCIA             NUMERIC(22,0),
                                     @p_SUBAGENT                     NVARCHAR(2000),
                                     @p_RECEIPT                      NVARCHAR(2000),
                                     @p_SUSCRIBER                    NVARCHAR(2000),
                                     @p_ID_REGISTROFACTREFERENCI_out NUMERIC(22,0) OUT) AS
  BEGIN
  SET NOCOUNT ON;
    RAISERROR('-20054 Deprecated due to the use of incomplete field count', 16, 1);
    SELECT @p_ID_REGISTROFACTREFERENCI_out = ID_REGISTROFACTREFERENCIA FROM WSXML_SFG.REGISTROFACTREFERENCIA
    WHERE CODREGISTROFACTURACION = @p_CODREGISTROFACTURACION AND NUMEROREFERENCIA = @p_NUMEROREFERENCIA;
    UPDATE WSXML_SFG.REGISTROFACTREFERENCIA SET SUBAGENTE  = @p_SUBAGENT,
                                      RECIBO     = @p_RECEIPT,
                                      SUSCRIPTOR = @p_SUSCRIBER
    WHERE ID_REGISTROFACTREFERENCIA = @p_ID_REGISTROFACTREFERENCI_out;
  END;
GO





  IF OBJECT_ID('WSXML_SFG.KAZ_BulkCreateRuleSettingAdjstm', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.KAZ_BulkCreateRuleSettingAdjstm;
GO


  CREATE PROCEDURE WSXML_SFG.KAZ_BulkCreateRuleSettingAdjstm(@p_FECHAEVALUACIONREGISTROSFROM DATETIME,
                                        @p_FECHAEVALUACIONREGISTROSTO   DATETIME,
                                        @p_CODIGOGTECHPUNTODEVENTA      NVARCHAR(2000),
                                        @p_CODSERVICIO                  NUMERIC(22,0),
                                        @p_CODIGOGTECHCOMPANIA          NUMERIC(22,0),
                                        @p_FECHAINGRESOAJUSTE           DATETIME,
                                        @p_DESCRIPCION                  NVARCHAR(2000)) AS
 BEGIN
    DECLARE @lstregistries WSXML_SFG.LONGNUMBERARRAY;
    DECLARE @coutfinal NUMERIC(22,0);
    DECLARE @coutrvrse NUMERIC(22,0);
    DECLARE @xProperCompania NUMERIC(22,0);
   
  SET NOCOUNT ON;

	DECLARE  @VENTAFACT SMALLINT, @ANULACION SMALLINT, @FREETICKT SMALLINT, @PREMIOPAG SMALLINT, @RGSTOTROS SMALLINT ,@VENNOFACT SMALLINT 

  EXEC WSXML_SFG.SFGTIPOREGISTRO_CONSTANT 
                      @VENTAFACT OUT,
                      @ANULACION OUT,
					  @FREETICKT OUT,
					  @PREMIOPAG OUT,
					  @RGSTOTROS OUT,
					  @VENNOFACT OUT
	
	DECLARE @l_puentoventaf NUMERIC(38,0)
	EXEC WSXML_SFG.PUNTODEVENTA_F @p_CODIGOGTECHPUNTODEVENTA, @l_puentoventaf OUT
    SELECT @xProperCompania = CODCOMPANIA FROM WSXML_SFG.SERVICIO WHERE ID_SERVICIO = @p_CODSERVICIO;
    -- Obtener registros de la compania especificada, punto y servicio, entre las fechas
	INSERT INTO @lstregistries
    SELECT ID_REGISTROFACTURACION  
	FROM WSXML_SFG.ENTRADAARCHIVOCONTROL CTR
    INNER JOIN WSXML_SFG.REGISTROFACTURACION REG ON (REG.CODENTRADAARCHIVOCONTROL = ID_ENTRADAARCHIVOCONTROL)
    WHERE CTR.FECHAARCHIVO BETWEEN CONVERT(DATETIME, CONVERT(DATE,@p_FECHAEVALUACIONREGISTROSFROM))
                               AND CONVERT(DATETIME, CONVERT(DATE,@p_FECHAEVALUACIONREGISTROSTO))
      AND CTR.REVERSADO       = 0
      AND CTR.TIPOARCHIVO     = @p_CODSERVICIO
      AND REG.CODTIPOCONTRATOPDV = 3
      AND REG.CODTIPOREGISTRO = @VENTAFACT
      AND REG.CODPUNTODEVENTA = @l_puentoventaf
      AND REG.CODCOMPANIA     = WSXML_SFG.COMPANIA_F(@p_CODIGOGTECHCOMPANIA);
    IF @@ROWCOUNT > 0 BEGIN

      DECLARE ix CURSOR FOR SELECT IDVALUE FROM @lstregistries
	  OPEN ix
	  DECLARE @ix_idvalue numeric(38,0)
	  FETCH NEXT FROM ix INTO @ix_idvalue
        
        WHILE (@@FETCH_STATUS = 0)
        BEGIN

			EXEC WSXML_SFG.SFGAJUSTEFACTURACION_CreateRuleSettingAdjustment @p_FECHAINGRESOAJUSTE,
                                                         @p_DESCRIPCION,
                                                         @ix_idvalue,
                                                         @xProperCompania,
                                                         -1, -1, -1, -1, -1, -1, -1, 1,
                                                         @coutfinal OUT, @coutrvrse OUT
       FETCH NEXT FROM ix INTO @ix_idvalue
      END;
      CLOSE ix;
      DEALLOCATE ix;
    END 
  END;
GO


  IF OBJECT_ID('WSXML_SFG.KAZ_ReplicaFacturarPOSLDN', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.KAZ_ReplicaFacturarPOSLDN;
GO

  CREATE PROCEDURE WSXML_SFG.KAZ_ReplicaFacturarPOSLDN(@cCODCICLOFACTURACION           NUMERIC(22,0),
                                  @cCODMAESTROFACTURATIRILLA      NUMERIC(22,0),
                                  @xCODPUNTODEVENTA               NUMERIC(22,0),
                                  @cCODTIPOAGRUPACION             NUMERIC(22,0),
                                  @cCODAGRUPACIONPUNTODEVENTA     NUMERIC(22,0),
                                  @xCODLINEADENEGOCIO             NUMERIC(22,0),
                                  @cTODAY                         DATETIME,
                                  @lstREGISTROSLINEADENEGOCIO     WSXML_SFG.IDVALUENUMERIC READONLY,
                                  @xLINEAEGRESO                   INT,
                                  @cCODUSUARIOMODIFICACION        NUMERIC(22,0),
                                  @p_CODMAESTROFACTURACIONPDV_out NUMERIC(22,0) OUT) AS
 BEGIN 
	  SET NOCOUNT ON;
    DECLARE @cCODCOMPROBANTECONSIGNACION NUMERIC(22,0);
    DECLARE @cCODMAESTROFACTURACIONPDV   NUMERIC(22,0);
    DECLARE @msg NVARCHAR(2000);

			DECLARE @p_TIPOINFORMATIVO TINYINT,
		@p_TIPOERROR TINYINT,
		@p_TIPOADVERTENCIA TINYINT,
		@p_TIPOCUALQUIERA TINYINT,
		@p_PROCESONOTIFICACION TINYINT,
		@p_ESTADOABIERTA TINYINT,
		@p_ESTADOCERRADA TINYINT	

		EXEC WSXML_SFG.SFGALERTA_CONSTANT
		@p_TIPOINFORMATIVO OUT,
		@p_TIPOERROR OUT,
		@p_TIPOADVERTENCIA OUT,
		@p_TIPOCUALQUIERA OUT,
		@p_PROCESONOTIFICACION OUT,
		@p_ESTADOABIERTA OUT,
		@p_ESTADOCERRADA OUT	

   

    /**** DATOS NECESARIOS PARA REALIZAR LA FACTURACION *******************************/
    -- No se genera tirilla si ya existe el maestro de facturacion
    EXEC WSXML_SFG.SFGMAESTROFACTURACIONCOMPCONSI_GenerateBillingTicketData  @cCODCICLOFACTURACION,
                                                             @xCODPUNTODEVENTA,
                                                             @cCODTIPOAGRUPACION,
                                                             @cCODAGRUPACIONPUNTODEVENTA,
                                                             @xCODLINEADENEGOCIO,
                                                             @cTODAY,
                                                             @cCODUSUARIOMODIFICACION,
                                                             @cCODCOMPROBANTECONSIGNACION OUT

    /**** GENERACION DEL MAESTRO DE FACTURACION ***************************************/
    BEGIN	
		BEGIN TRY
			  EXEC WSXML_SFG.SFGMAESTROFACTURACIONPDV_AddRecord @cCODCICLOFACTURACION,
												 @cCODMAESTROFACTURATIRILLA,
												 @cCODCOMPROBANTECONSIGNACION,
												 @xCODLINEADENEGOCIO,
												 @xCODPUNTODEVENTA,
												 @cCODUSUARIOMODIFICACION,
												 @cCODMAESTROFACTURACIONPDV OUT
		END TRY
		BEGIN CATCH
		  SET @msg = '-20054 Error al crear el registro de facturacion de linea de negocio: ' + isnull(ERROR_MESSAGE ( ) , '');
		  RAISERROR(@msg, 16, 1);
	  END CATCH
    END;
    COMMIT;

    IF @cCODMAESTROFACTURACIONPDV > 0 BEGIN
      /**** REGISTROS DE FACTURACION PARA LA PAREJA PUNTODEVENTA LINEADENEGOCIO *********/
        DECLARE @xSUMHEADERVALORAPAGARGTECH   FLOAT = 0;
        DECLARE @xSUMHEADERVALORAPAGARFIDUCIA FLOAT = 0;
        DECLARE @xSUMHEADERTOTALCOMISION      FLOAT = 0;
      BEGIN
        -- Obtener facturacion desde los registros marcados
        DECLARE factprd CURSOR FOR 
		SELECT ID, COUNT(VALUE) AS COUNT_LINEASNEGOCIO 
		FROM @lstREGISTROSLINEADENEGOCIO 
		GROUP BY ID
		
		OPEN factprd
		DECLARE @factprd__CODPRODUCTO NUMERIC(38,0), @factprd__COUNT_LINEASNEGOCIO NUMERIC(38,0)
		
		FETCH NEXT FROM factprd INTO @factprd__CODPRODUCTO, @factprd__COUNT_LINEASNEGOCIO
		
		WHILE @@fetch_status=0 BEGIN
		--.First..lstREGISTROSLINEADENEGOCIO.Last LOOP
			
            DECLARE @cDETALLEFACTURACIONPDV NUMERIC(22,0);
            DECLARE @cMARKEDWITHDETAILID    NUMERIC(22,0) = 0;
            DECLARE @xCODPRODUCTO           NUMERIC(22,0) = @factprd__CODPRODUCTO --lstREGISTROSLINEADENEGOCIO(factprd).CODPRODUCTO;
            DECLARE @lstREGISTROSDETALLE    WSXML_SFG.LONGNUMBERARRAY;

			INSERT INTO @lstREGISTROSDETALLE
			SELECT VALUE FROM @lstREGISTROSLINEADENEGOCIO 
			WHERE ID  = @factprd__CODPRODUCTO--lstREGISTROSLINEADENEGOCIO(factprd).lstREGISTROS;
          BEGIN
              DECLARE @xNUMINGRESOS        NUMERIC(22,0) = 0;
              DECLARE @xINGRESOS           FLOAT  = 0;
              DECLARE @xNUMANULACIONES     NUMERIC(22,0) = 0;
              DECLARE @xANULACIONES        FLOAT  = 0;

              DECLARE @xVALORVENTABRUTA    FLOAT  = 0;

              DECLARE @xVALORCOMISION      FLOAT  = 0;
              DECLARE @xIVACOMISION        FLOAT  = 0;

              DECLARE @xVALORCOMISIONBRUTA FLOAT  = 0;
              DECLARE @xVALORCOMISIONNETA  FLOAT  = 0;
              DECLARE @xVALORVENTANETA     FLOAT  = 0;

              DECLARE @xNUMGRATUITO             NUMERIC(22,0) = 0;
              DECLARE @xGRATUITO                FLOAT  = 0;
              DECLARE @xNUMPREMIOSPAGADOS       NUMERIC(22,0) = 0;
              DECLARE @xPREMIOSPAGADOS          FLOAT  = 0;
              DECLARE @xRETENCIONPREMIOSPAGADOS FLOAT  = 0;

              -- Translation of rules if according to model
              DECLARE @xCOMISIONANTICIPO   NUMERIC(22,0);
              DECLARE @xCODRANGOCOMISION   NUMERIC(22,0);
              DECLARE @xCODTIPOCONTRATOPDV NUMERIC(22,0);
            BEGIN
              -- Valores de los registros (pareja codpuntodeventa, codproducto, SUMATORIA DE SIETE DIAS)
              SELECT @xNUMINGRESOS = SUM(CASE WHEN REG.CODTIPOREGISTRO = 1 THEN REG.NUMTRANSACCIONES ELSE 0 END),--          AS NUMINGRESOS,
                     @xINGRESOS = SUM(CASE WHEN REG.CODTIPOREGISTRO = 1 THEN REG.VALORTRANSACCION ELSE 0 END),--          AS INGRESOS,
                     @xNUMANULACIONES = SUM(CASE WHEN REG.CODTIPOREGISTRO = 2 THEN REG.NUMTRANSACCIONES ELSE 0 END),--          AS NUMANULACIONES,
                     @xANULACIONES = SUM(CASE WHEN REG.CODTIPOREGISTRO = 2 THEN REG.VALORTRANSACCION ELSE 0 END),--          AS ANULACIONES,
                     -- Venta Bruta
                     @xVALORVENTABRUTA = SUM(CASE WHEN REG.CODTIPOREGISTRO = 1 THEN REG.VALORVENTABRUTA
                              WHEN REG.CODTIPOREGISTRO = 2 THEN REG.VALORVENTABRUTA * (-1) ELSE 0 END),--    AS VALORVENTABRUTA,
                     -- Comision Calculada
                     @xVALORCOMISION = SUM(CASE WHEN REG.CODTIPOREGISTRO = 1 THEN REG.VALORCOMISION
                              WHEN REG.CODTIPOREGISTRO = 2 THEN REG.VALORCOMISION * (-1) ELSE 0 END),--      AS VALORCOMISION,
                     -- IVA de la Comision
                     @xIVACOMISION = SUM(CASE WHEN REG.CODTIPOREGISTRO = 1 THEN REG.IVACOMISION
                              WHEN REG.CODTIPOREGISTRO = 2 THEN REG.IVACOMISION * (-1) ELSE 0 END),--        AS IVACOMISION,
                     -- Comision Bruta
                     @xVALORCOMISIONBRUTA = SUM(CASE WHEN REG.CODTIPOREGISTRO = 1 THEN REG.VALORCOMISIONBRUTA
                              WHEN REG.CODTIPOREGISTRO = 2 THEN REG.VALORCOMISIONBRUTA * (-1) ELSE 0 END),-- AS VALORCOMISIONBRUTA,
                     -- Comision Neta
                     @xVALORCOMISIONNETA = SUM(CASE WHEN REG.CODTIPOREGISTRO = 1 THEN REG.VALORCOMISIONNETA
                              WHEN REG.CODTIPOREGISTRO = 2 THEN REG.VALORCOMISIONNETA * (-1) ELSE 0 END),--  AS VALORCOMISIONNETA,
                     -- Venta Neta
                     @xVALORVENTANETA = SUM(CASE WHEN REG.CODTIPOREGISTRO = 1 THEN REG.VALORVENTANETA
                              WHEN REG.CODTIPOREGISTRO = 2 THEN REG.VALORVENTANETA * (-1) ELSE 0 END),--     AS VALORVENTANETA,
                     -- Gratuito
                     @xNUMGRATUITO = SUM(CASE WHEN REG.CODTIPOREGISTRO = 3 THEN REG.NUMTRANSACCIONES ELSE 0 END),--          AS NUMGRATUITO,
                     @xGRATUITO = SUM(CASE WHEN REG.CODTIPOREGISTRO = 3 THEN REG.VALORTRANSACCION ELSE 0 END),--          AS GRATUITO,
                     -- Premios
                     @xNUMPREMIOSPAGADOS = SUM(CASE WHEN REG.CODTIPOREGISTRO = 4 THEN REG.NUMTRANSACCIONES ELSE 0 END),--          AS NUMPREMIOSPAGADOS,
                     @xPREMIOSPAGADOS = SUM(CASE WHEN REG.CODTIPOREGISTRO = 4 THEN REG.VALORTRANSACCION ELSE 0 END),--          AS PREMIOSPAGADOS,
                     @xRETENCIONPREMIOSPAGADOS = SUM(CASE WHEN REG.CODTIPOREGISTRO = 4 THEN REG.RETENCIONPREMIO ELSE 0 END),--           AS RETENCIONPREMIOSPAGADOS,
                     @xCOMISIONANTICIPO = MIN(COMISIONANTICIPO),
                     @xCODRANGOCOMISION = MIN(CODRANGOCOMISION),
                     @xCODTIPOCONTRATOPDV = MIN(CODTIPOCONTRATOPDV)
				FROM WSXML_SFG.REGISTROFACTURACION REG
				WHERE ID_REGISTROFACTURACION IN (SELECT * FROM @lstREGISTROSDETALLE);

              -- Solo crea el detalle si existen valores, para evitar lista de solo registros 5
              -- Ingresos: 0, Anulaciones: 0, Gratuitos: 0, PremioPago: 0
				IF @xNUMINGRESOS > 0 OR @xINGRESOS > 0 OR @xNUMANULACIONES > 0 OR @xANULACIONES > 0 OR @xNUMGRATUITO > 0 OR @xGRATUITO > 0 OR @xNUMPREMIOSPAGADOS > 0 OR @xPREMIOSPAGADOS > 0
                BEGIN
					BEGIN TRY
						EXEC WSXML_SFG.SFGDETALLEFACTURACIONPDV_CrearDetalle @cCODMAESTROFACTURACIONPDV,
															@xCODPRODUCTO,
															@xCOMISIONANTICIPO,
															@xCODRANGOCOMISION,
															@xCODTIPOCONTRATOPDV,
															@cCODUSUARIOMODIFICACION,
															@cDETALLEFACTURACIONPDV OUT
					END TRY
					BEGIN CATCH
						  SET @msg = '-20054 Error al crear el registro de facturacion del producto: ' + isnull(ERROR_MESSAGE ( ) , '')
						  RAISERROR(@msg, 16, 1);
					END CATCH
                END;

                IF @cDETALLEFACTURACIONPDV > 0 BEGIN
                  -- Obtener Tributario y actualizar todo
                    DECLARE @tmpmsg NVARCHAR(2000);
                    DECLARE @xSUMIMPUESTOS NUMERIC(22,0) = 0;
                    DECLARE @xSUMRETENCION NUMERIC(22,0) = 0;
                    DECLARE @cPRODUCTOVALORAPAGAR        FLOAT = 0;
                    DECLARE @cPRODUCTOVALORAPAGARGTECH   FLOAT = 0;
                    DECLARE @cPRODUCTOVALORAPAGARFIDUCIA FLOAT = 0;
                    DECLARE @cPORCENTAJEGTECH            NUMERIC(22,0) = 100;
                    DECLARE @cPORCENTAJEFIDUCIA          NUMERIC(22,0) = 0;

					BEGIN
                    /*-- Impuestos (Round level/One tax per product)---------------------------------*/
                    DECLARE tIMPUESTO CURSOR FOR SELECT CODIMPUESTO, CODPRODUCTOIMPUESTO,
                                             SUM(CASE WHEN CODTIPOREGISTRO = 1 THEN VALORIMPUESTO
                                                      WHEN CODTIPOREGISTRO = 2 THEN VALORIMPUESTO * (-1) ELSE 0 END)   AS VALORIMPUESTO
                                      FROM WSXML_SFG.IMPUESTOREGFACTURACION
                                      WHERE CODREGISTROFACTURACION IN (SELECT * FROM @lstREGISTROSDETALLE)
                                      GROUP BY CODIMPUESTO, CODPRODUCTOIMPUESTO; OPEN tIMPUESTO;
					 
					 DECLARE @tIMPUESTO__CODIMPUESTO NUMERIC(38,0), @tIMPUESTO__CODPRODUCTOIMPUESTO NUMERIC(38,0), @tIMPUESTO__VALORIMPUESTO  NUMERIC(38,0)
					 
					 FETCH tIMPUESTO INTO @tIMPUESTO__CODIMPUESTO, @tIMPUESTO__CODPRODUCTOIMPUESTO, @tIMPUESTO__VALORIMPUESTO
					 WHILE @@FETCH_STATUS=0
					 BEGIN
                        DECLARE @cDETALLEFACTURACIONIMPUESTO NUMERIC(22,0);
						  BEGIN
							BEGIN TRY
								EXEC WSXML_SFG.SFGDETALLEFACTURACIONIMPUESTO_CrearImpuesto @cCODMAESTROFACTURACIONPDV,
																			@cDETALLEFACTURACIONPDV,
																			@tIMPUESTO__CODIMPUESTO,
																			@tIMPUESTO__CODPRODUCTOIMPUESTO,
																			@tIMPUESTO__VALORIMPUESTO,
																			@cCODUSUARIOMODIFICACION,
																			@cDETALLEFACTURACIONIMPUESTO OUT
							   SET @xSUMIMPUESTOS = @xSUMIMPUESTOS + @tIMPUESTO__VALORIMPUESTO;
							END TRY
							BEGIN CATCH
								SET @tmpmsg = ERROR_MESSAGE ( ) ;
								RAISERROR('-20054 No se pudo ingresar el registro de impuesto sobre el producto', 16, 1);
							END CATCH
						  END;
						FETCH tIMPUESTO INTO @tIMPUESTO__CODIMPUESTO, @tIMPUESTO__CODPRODUCTOIMPUESTO, @tIMPUESTO__VALORIMPUESTO
                    END;
					 CLOSE tIMPUESTO;
                     DEALLOCATE tIMPUESTO;

                    /*-- Retenciones tributarias (Round level, one tax per product) -----------------*/
                    DECLARE tRETENCION CURSOR FOR SELECT CODRETENCIONTRIBUTARIA,
                                              SUM(CASE WHEN CODTIPOREGISTRO = 1 THEN VALORRETENCION
                                                       WHEN CODTIPOREGISTRO = 2 THEN VALORRETENCION * (-1) ELSE 0 END) AS VALORRETENCION
                                       FROM WSXML_SFG.RETENCIONREGFACTURACION
                                       WHERE CODREGISTROFACTURACION IN (SELECT * FROM @lstREGISTROSDETALLE) AND ACTIVE = 1
                                       GROUP BY CODRETENCIONTRIBUTARIA; OPEN tRETENCION;
						DECLARE @tRETENCION__CODRETENCIONTRIBUTARIA NUMERIC(38,0), @tRETENCION__VALORRETENCION FLOAT
						 FETCH NEXT FROM tRETENCION INTO @tRETENCION__CODRETENCIONTRIBUTARIA, @tRETENCION__VALORRETENCION
						 WHILE @@FETCH_STATUS=0
						 BEGIN
							DECLARE @cDETALLEFACTURACIONRETENCION NUMERIC(22,0);
							  BEGIN
								BEGIN TRY
									EXEC WSXML_SFG.SFGDETALLEFACTURACIONRETENCION_CrearRetencionTributaria @cCODMAESTROFACTURACIONPDV,
																							@cDETALLEFACTURACIONPDV,
																							@tRETENCION__CODRETENCIONTRIBUTARIA,
																							@tRETENCION__VALORRETENCION,
																							@cCODUSUARIOMODIFICACION,
																							@cDETALLEFACTURACIONRETENCION OUT
									SET @xSUMRETENCION = @xSUMRETENCION + @tRETENCION__VALORRETENCION;
								END TRY
								BEGIN CATCH
										SET @tmpmsg = ERROR_MESSAGE ( ) ;
										RAISERROR('-20054 No se pudo ingresar el registro de retencion sobre el producto', 16, 1);
								END CATCH
							END;
						FETCH NEXT FROM tRETENCION INTO @tRETENCION__CODRETENCIONTRIBUTARIA, @tRETENCION__VALORRETENCION
                    END;
						CLOSE tRETENCION;
						DEALLOCATE tRETENCION;

                    /*-- Retenciones UVT (Round level/One Tax per product)---------------------------*/
                    DECLARE tRETUVT CURSOR FOR SELECT CODRETENCIONUVT,
                                           SUM(CASE WHEN CODTIPOREGISTRO = 1 THEN VALORRETENCION
                                                    WHEN CODTIPOREGISTRO = 2 THEN VALORRETENCION * (-1) ELSE 0 END)    AS VALORRETENCION
                                    FROM WSXML_SFG.RETUVTREGFACTURACION
                                    WHERE CODREGISTROFACTURACION IN (SELECT * FROM @lstREGISTROSDETALLE) AND ACTIVE = 1
                                    GROUP BY CODRETENCIONUVT; OPEN tRETUVT;
						DECLARE @tRETUVT__CODRETENCIONUVT NUMERIC(38,0), @tRETUVT__VALORRETENCION FLOAT
					 FETCH NEXT FROM tRETUVT INTO @tRETUVT__CODRETENCIONUVT, @tRETUVT__VALORRETENCION
					 WHILE @@FETCH_STATUS=0
					 BEGIN
                        DECLARE @cDETALLEFACTURACIONRETUVT NUMERIC(22,0);
						BEGIN
							BEGIN TRY
								EXEC SFGDETALLEFACTURACIONRETUVT_CrearRetencionUVT @cCODMAESTROFACTURACIONPDV,
																		  @cDETALLEFACTURACIONPDV,
																		  @tRETUVT__CODRETENCIONUVT,
																		  @tRETUVT__VALORRETENCION,
																		  @cCODUSUARIOMODIFICACION,
																		  @cDETALLEFACTURACIONRETUVT OUT
								SET @xSUMRETENCION = @xSUMRETENCION + @tRETUVT__VALORRETENCION;

							END TRY
							BEGIN CATCH
								RAISERROR('-20054 No se pudo ingresar el registro de retencion UVT sobre el producto', 16, 1);
							END CATCH
						END
						FETCH NEXT FROM tRETUVT INTO @tRETUVT__CODRETENCIONUVT, @tRETUVT__VALORRETENCION
                    END;
                    CLOSE tRETUVT;
                    DEALLOCATE tRETUVT;

                    -- Actualizar Valores
                    BEGIN
						BEGIN TRY
						  -- Calcular valor a pagar y acumular para cabecera
						  SELECT @cPORCENTAJEGTECH = PORCENTAJEGTECH, @cPORCENTAJEFIDUCIA = PORCENTAJEFIDUCIA FROM WSXML_SFG.PRODUCTO WHERE ID_PRODUCTO = @xCODPRODUCTO;
						  /* VENTAS BUENAS - COMISION NETA - PREMIOS PAGOS (TOTALES) */
						  SET @cPRODUCTOVALORAPAGAR = ((CASE WHEN @xLINEAEGRESO = 1 THEN 0 ELSE @xINGRESOS - @xANULACIONES END) - @xVALORCOMISIONNETA - @xPREMIOSPAGADOS);

						  IF NOT ((@cPORCENTAJEGTECH + @cPORCENTAJEFIDUCIA) = 100) BEGIN
							SET @cPORCENTAJEGTECH = 100;
							SET @cPORCENTAJEFIDUCIA = 0;
							SET @msg = 'Se encontro configuracion incorrecta para valores de pertenencia del producto ' + ISNULL(WSXML_SFG.PRODUCTO_NOMBRE_F(@xCODPRODUCTO), '') + '. Se procedio con los valores por defecto (100 - 0)'
							EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @p_TIPOADVERTENCIA, 'FACTURACION', @msg , 1
						  END

						  IF @cPORCENTAJEFIDUCIA > 0 BEGIN
							SET @cPRODUCTOVALORAPAGARFIDUCIA = ROUND((@xVALORVENTABRUTA * (@cPORCENTAJEFIDUCIA / 100)) - @xPREMIOSPAGADOS,0);
							SET @cPRODUCTOVALORAPAGARGTECH = @cPRODUCTOVALORAPAGAR - @cPRODUCTOVALORAPAGARFIDUCIA;
						  END ELSE
							SET @cPRODUCTOVALORAPAGARGTECH = @cPRODUCTOVALORAPAGAR;
                      

						  SET @xSUMHEADERVALORAPAGARGTECH   = @xSUMHEADERVALORAPAGARGTECH   + @cPRODUCTOVALORAPAGARGTECH;
						  SET @xSUMHEADERVALORAPAGARFIDUCIA = @xSUMHEADERVALORAPAGARFIDUCIA + @cPRODUCTOVALORAPAGARFIDUCIA;

						  -- Actualizar valores.
						  EXEC WSXML_SFG.SFGDETALLEFACTURACIONPDV_ActualizarInformacion @cDETALLEFACTURACIONPDV,
																		 @xNUMINGRESOS,
																		 @xINGRESOS,
																		 @xNUMANULACIONES,
																		 @xANULACIONES,
																		 @xNUMGRATUITO,
																		 @xGRATUITO,
																		 @xNUMPREMIOSPAGADOS,
																		 @xPREMIOSPAGADOS,
																		 @xRETENCIONPREMIOSPAGADOS,
																		 @xVALORVENTABRUTA,
																		 @xVALORVENTANETA,
																		 @xVALORCOMISION,
																		 @xIVACOMISION,
																		 @xVALORCOMISIONBRUTA,
																		 @xVALORCOMISIONNETA,
																		 0,
																		 @cPRODUCTOVALORAPAGARGTECH,
																		 @cPRODUCTOVALORAPAGARFIDUCIA OUT

						END TRY
						BEGIN CATCH
						  RAISERROR('-20054 No se pudo actualizar el registro de ventas sobre el producto', 16, 1);
						END CATCH
                    END 

                    -- Marcar registros con el del detalle de facturacion
                    BEGIN
						  UPDATE WSXML_SFG.REGISTROFACTURACION
							 SET FACTURADO = 1,
								 CODDETALLEFACTURACIONPDV = @cDETALLEFACTURACIONPDV,
								 CODUSUARIOMODIFICACION = @cCODUSUARIOMODIFICACION,
								 FECHAHORAMODIFICACION  = GETDATE()
						   WHERE ID_REGISTROFACTURACION IN (SELECT * FROM @lstREGISTROSDETALLE);
						  SET @cMARKEDWITHDETAILID = 1;
							IF @@ROWCOUNT = 0
						  RAISERROR('-20054 No se pudo marcar los registros como procesados', 16, 1);
                    END;
                  
				  END 

				END ELSE BEGIN
                  SET @msg = ERROR_MESSAGE ( ) ;
                  RAISERROR('-20054 Error al crear el registro de facturacion del producto.', 16, 1);
                END

				-- Mark anyway, even if not linked
				IF @cMARKEDWITHDETAILID = 0
                BEGIN
					BEGIN TRY
					  UPDATE WSXML_SFG.REGISTROFACTURACION
						 SET FACTURADO = 1,
							 CODUSUARIOMODIFICACION = @cCODUSUARIOMODIFICACION,
							 FECHAHORAMODIFICACION  = GETDATE()
					   WHERE ID_REGISTROFACTURACION IN (SELECT * FROM @lstREGISTROSDETALLE);
					END TRY
					BEGIN CATCH
					  RAISERROR('-20054 No se pudo marcar los registros como procesados', 16, 1);
					END CATCH
                END;

				-- Aggregate comission to reduntant column
				SET @xSUMHEADERTOTALCOMISION = @xSUMHEADERTOTALCOMISION + @xVALORCOMISIONNETA;
              END
			END
              
          FETCH NEXT FROM factprd INTO @factprd__CODPRODUCTO, @factprd__COUNT_LINEASNEGOCIO

        END
        CLOSE factprd;
        DEALLOCATE factprd;

        -- Consolidar valores de cabecera
        DECLARE @cMAESTROANTERENCONTRAGTECH   FLOAT = 0;
        DECLARE @cMAESTROANTERENCONTRAFIDUCIA FLOAT = 0;
        DECLARE @cMAESTROANTERAFAVORGTECH     FLOAT = 0;
        DECLARE @cMAESTROANTERAFAVORFIDUCIA   FLOAT = 0;

        DECLARE @thisHEADERBILLINGGTECH       FLOAT = 0;
        DECLARE @thisHEADERBILLINGFIDUCIA     FLOAT = 0;

        DECLARE @cMAESTRONUEVOENCONTRAGTECH   FLOAT;
        DECLARE @cMAESTRONUEVOENCONTRAFIDUCIA FLOAT;
        DECLARE @cMAESTRONUEVOAFAVORGTECH     FLOAT;
        DECLARE @cMAESTRONUEVOAFAVORFIDUCIA   FLOAT;
        
		BEGIN
          -- Agregar facturacion actual
          SET @thisHEADERBILLINGGTECH   = (@cMAESTROANTERENCONTRAGTECH   - @cMAESTROANTERAFAVORGTECH)   + @xSUMHEADERVALORAPAGARGTECH;
          SET @thisHEADERBILLINGFIDUCIA = (@cMAESTROANTERENCONTRAFIDUCIA - @cMAESTROANTERAFAVORFIDUCIA) + @xSUMHEADERVALORAPAGARFIDUCIA;

          IF @thisHEADERBILLINGGTECH > 0 BEGIN -- Positive Billing
            SET @cMAESTRONUEVOENCONTRAGTECH = ABS(@thisHEADERBILLINGGTECH);
            SET @cMAESTRONUEVOAFAVORGTECH = 0;
          END
          ELSE BEGIN
            SET @cMAESTRONUEVOENCONTRAGTECH = 0;
            SET @cMAESTRONUEVOAFAVORGTECH = ABS(@thisHEADERBILLINGGTECH);
          END 

          IF @thisHEADERBILLINGFIDUCIA > 0 BEGIN  -- Positive Billing
            SET @cMAESTRONUEVOENCONTRAFIDUCIA = ABS(@thisHEADERBILLINGFIDUCIA);
            SET @cMAESTRONUEVOAFAVORFIDUCIA = 0;
          END
          ELSE BEGIN
            SET @cMAESTRONUEVOENCONTRAFIDUCIA = 0;
            SET @cMAESTRONUEVOAFAVORFIDUCIA = ABS(@thisHEADERBILLINGFIDUCIA);
          END 

          EXEC WSXML_SFG.SFGMAESTROFACTURACIONPDV_ActualizarValoresPago  @cCODMAESTROFACTURACIONPDV,
                                                         @cMAESTROANTERENCONTRAGTECH,
                                                         @cMAESTROANTERENCONTRAFIDUCIA,
                                                         @cMAESTROANTERAFAVORGTECH,
                                                         @cMAESTROANTERAFAVORFIDUCIA,
                                                         @cMAESTRONUEVOENCONTRAGTECH,
                                                         @cMAESTRONUEVOENCONTRAFIDUCIA,
                                                         @cMAESTRONUEVOAFAVORGTECH,
                                                         @cMAESTRONUEVOAFAVORFIDUCIA,
                                                         @xSUMHEADERTOTALCOMISION,
                                                         @cCODUSUARIOMODIFICACION
        END
      END
      SET @p_CODMAESTROFACTURACIONPDV_out = @cCODMAESTROFACTURACIONPDV;
    END ELSE BEGIN
      RAISERROR('-20054 Error al crear el registro de facturacion de linea de negocio.', 16, 1);
    END
  END
GO

  
  

  /* Obtains the records for every deposit slip to be generated */
IF OBJECT_ID('WSXML_SFG.KAZ_ReplicaCicloFacturacion', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.KAZ_ReplicaCicloFacturacion;
GO


  CREATE PROCEDURE WSXML_SFG.KAZ_ReplicaCicloFacturacion(@p_RETVALUE_out NUMERIC(22,0) OUT) AS
 BEGIN
    
	SET NOCOUNT ON;
  
    DECLARE @cCODCICLOFACTURACION    NUMERIC(22,0) = 971;
    DECLARE @cTODAY                  DATETIME = CONVERT(DATETIME, '03/01/2009', 103); -- Emula la fecha de facturacion, y es utilizado para efectos de algoritmo de referencia
    DECLARE @cCODUSUARIOMODIFICACION NUMERIC(22,0) = 1;
    DECLARE @cSECUENCIACICLO         NUMERIC(22,0) = 1;
    DECLARE @xLINEACONFIGURACION     WSXML_SFG.IDVALUE;

    DECLARE @cTOTALWARNINGS  NUMERIC(22,0) = 0;
    DECLARE @cTOTALREGISTROS NUMERIC(22,0) = 0;
    DECLARE @cCOUNTREGISTROS NUMERIC(22,0) = 0;
    DECLARE @cWAITREGISTROS  NUMERIC(22,0) = 10;
    DECLARE @cMAXWARNINGS    NUMERIC(22,0) = 50; -- Maximo numero de advertencias que puede generar antes de fallar completamente
    DECLARE @cPUNTOSDEVENTAFACTURACION WSXML_SFG.PDVLDNFACTURACION;
	DECLARE @cPDVLINEASDENEGOCIO WSXML_SFG.IDVALUENUMERIC
    DECLARE @cDESCUENTOSCOMISION WSXML_SFG.REDDESCUENTOS;

    -- El tipo PUNTOSVENTALINEASNEGOCIO es un arreglo de elementos (PUNTODEVENTA, ARREGLO DE LINEAS DE NEGOCIO)
    DECLARE @msg VARCHAR(2000);
	
    DECLARE @lstbillablefiles WSXML_SFG.NUMBERARRAY

    INSERT INTO @lstbillablefiles VALUES(27)
	
    INSERT INTO @lstbillablefiles VALUES(1)
    
    INSERT INTO @lstbillablefiles VALUES(28)
    
    INSERT INTO @lstbillablefiles VALUES(21)
    
    INSERT INTO @lstbillablefiles VALUES(29)
    
    INSERT INTO @lstbillablefiles VALUES(22)
    
    INSERT INTO @lstbillablefiles VALUES(30)
    
    INSERT INTO @lstbillablefiles VALUES(23)
    
    INSERT INTO @lstbillablefiles VALUES(31)
    
    INSERT INTO @lstbillablefiles VALUES(24)
    
    INSERT INTO @lstbillablefiles VALUES(32)
    
    INSERT INTO @lstbillablefiles VALUES(25)
    
    INSERT INTO @lstbillablefiles VALUES(33)
    
    INSERT INTO @lstbillablefiles VALUES(26)
    -- Verificar flag de proceso para evitar dos ciclos simultaneos
    IF WSXML_SFG.SFGCICLOFACTURACIONPDV_ReadProcessFlag() > 0 BEGIN
      RAISERROR('-20090 No se pueden ejecutar dos ciclos de facturacion simultaneamente', 16, 1);
    END 

		DECLARE @TIPOINFORMATIVO TINYINT,
		@TIPOERROR TINYINT,
		@TIPOADVERTENCIA TINYINT,
		@TIPOCUALQUIERA TINYINT,
		@PROCESONOTIFICACION TINYINT,
		@ESTADOABIERTA TINYINT,
		@ESTADOCERRADA TINYINT	
			  
	EXEC WSXML_SFG.SFGALERTA_CONSTANT
		@TIPOINFORMATIVO OUT,
		@TIPOERROR OUT,
		@TIPOADVERTENCIA OUT,
		@TIPOCUALQUIERA OUT,
		@PROCESONOTIFICACION OUT,
		@ESTADOABIERTA OUT,
		@ESTADOCERRADA OUT	

		DECLARE
			@REGISTRADA      			TINYINT,
			@INICIADA         		TINYINT,
			@FINALIZADAOK 			TINYINT,
			@FINALIZADAFALLO  		TINYINT,
			@ABORTADA  				TINYINT,
			@NOINICIADA  				TINYINT,
			@FINALIZADAADVERTENCIA  	TINYINT 

	EXEC WSXML_SFG.SFGESTADOTAREAEJECUTADA_CONSTANT
			@REGISTRADA      			 OUT,
			@INICIADA         		 OUT,
			@FINALIZADAOK 			 OUT,
			@FINALIZADAFALLO  		 OUT,
			@ABORTADA  				 OUT,
			@NOINICIADA  				 OUT,
			@FINALIZADAADVERTENCIA  	 OUT
    -- Inicializar
    --SET @cPUNTOSDEVENTAFACTURACION = PUNTOSVENTALINEASNEGOCIO();
 BEGIN TRY
    -- Crear ciclo de facturacion
    INSERT INTO WSXML_SFG.CICLOFACTURACIONPDV (ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAEJECUCION, CODUSUARIOMODIFICACION)
    VALUES (@cCODCICLOFACTURACION, @cSECUENCIACICLO, @cTODAY, @cCODUSUARIOMODIFICACION);

    IF @cCODCICLOFACTURACION > 0 BEGIN
      -- Marcar los archivos que se estan facturando
      UPDATE WSXML_SFG.ENTRADAARCHIVOCONTROL
         SET FACTURADO = 1,
             CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACION
       WHERE ID_ENTRADAARCHIVOCONTROL IN (SELECT IDVALUE FROM @lstbillablefiles);
      COMMIT;

      -- Primero se obtiene los registros de FACTURACIONLINEADENEGOCIO que aplican hoy /* Optimized */
        DECLARE @cVERIFICACION VARCHAR(10) = 'TRUE';
        DECLARE cFACTURAHOY CURSOR LOCAL FOR
          SELECT ID_LINEADENEGOCIO AS CODLINEADENEGOCIO
            FROM WSXML_SFG.LINEADENEGOCIO
          WHERE ID_LINEADENEGOCIO IN (1, 2, 3);

		BEGIN
			OPEN cFACTURAHOY;
			DECLARE @cFACTURAHOY__CODLINEADENEGOCIO NUMERIC(38,0)

			FETCH NEXT FROM cFACTURAHOY INTO @cFACTURAHOY__CODLINEADENEGOCIO
			WHILE @@fetch_status=0
			BEGIN
				DECLARE @tmpPUNTOSDEVENTA WSXML_SFG.LONGNUMBERARRAY;
				BEGIN
					IF @cVERIFICACION = 'TRUE' BEGIN
					INSERT INTO @tmpPUNTOSDEVENTA
					SELECT CODPUNTODEVENTA
					FROM (SELECT CODPUNTODEVENTA FROM WSXML_SFG.REGISTROFACTURACION
						  WHERE CODENTRADAARCHIVOCONTROL IN (SELECT IDVALUE FROM @lstbillablefiles) GROUP BY CODPUNTODEVENTA
					)T

					IF @@ROWCOUNT > 0 BEGIN
						DECLARE tPDV CURSOR FOR SELECT IDVALUE FROM  @tmpPUNTOSDEVENTA
						--.FIRST..tmpPUNTOSDEVENTA.LAST LOOP
						DECLARE @tPDV__IDVALUE NUMERIC(38,0)
						FETCH NEXT FROM tPDV INTO @tPDV__IDVALUE
						
						WHILE @@fetch_status=0 BEGIN
					  -- Buscar que no exista
							DECLARE @cEXISTS NUMERIC(22,0) = -1;
							BEGIN 
								IF (SELECT COUNT(*) FROM @cPUNTOSDEVENTAFACTURACION) > 0 BEGIN
									DECLARE k CURSOR FOR SELECT CODPUNTODEVENTA, LINEASDENEGOCIO FROM @cPUNTOSDEVENTAFACTURACION
								
									DECLARE @k__CODPUNTODEVENTA NUMERIC(38,0), @k__LINEASDENEGOCIO VARCHAR(MAX)
									FETCH NEXT FROM K into @k__CODPUNTODEVENTA, @k__LINEASDENEGOCIO;
									WHILE @@fetch_status=0 BEGIN
										IF @k__CODPUNTODEVENTA = @tPDV__IDVALUE
											SET @cEXISTS = @k__CODPUNTODEVENTA;

										FETCH NEXT FROM K into @k__CODPUNTODEVENTA, @k__LINEASDENEGOCIO;
									END
									CLOSE k;
									DEALLOCATE k;

									IF @cEXISTS >= 0
										BREAK;
							

								END
								IF @cEXISTS < 0 BEGIN
								  INSERT INTO @cPDVLINEASDENEGOCIO VALUES (@k__CODPUNTODEVENTA, @cFACTURAHOY__CODLINEADENEGOCIO)
								  --cPUNTOSDEVENTAFACTURACION(cPUNTOSDEVENTAFACTURACION.LAST) := PDVLDNFACTURACION(tmpPUNTOSDEVENTA(tPDV), NUMBERARRAY(tFACTLDN.CODLINEADENEGOCIO));
								END ELSE BEGIN
								
								UPDATE @cPDVLINEASDENEGOCIO SET VALUE =  @cFACTURAHOY__CODLINEADENEGOCIO WHERE ID = @cEXISTS AND VALUE = @k__LINEASDENEGOCIO
							  	--cPUNTOSDEVENTAFACTURACION(cEXISTS).LINEASDENEGOCIO(cPUNTOSDEVENTAFACTURACION(cEXISTS).LINEASDENEGOCIO.LAST) := tFACTLDN.CODLINEADENEGOCIO;
								END
								SET @cTOTALREGISTROS = @cTOTALREGISTROS + 1;
							
							END;
							FETCH NEXT FROM tPDV INTO @tPDV__IDVALUE
						END
						CLOSE tPDV;
						DEALLOCATE tPDV;
                
					END
				END
				END;
				FETCH NEXT FROM cFACTURAHOY INTO @cFACTURAHOY__CODLINEADENEGOCIO
			END
        CLOSE cFACTURAHOY;
        DEALLOCATE cFACTURAHOY;

		IF (SELECT COUNT(*) FROM @cPDVLINEASDENEGOCIO) = 0 BEGIN
			RAISERROR('-20054 No se pudo obtener la lista de puntos de venta a facturar', 16, 1);
		END
      END;

      -- Configuraciones de descuentos de comision
      BEGIN
			--SET @cDESCUENTOSCOMISION = SFGPUNTODEVENTADESCOMISION.GetRedDistribucionDescuentos;
			SET @msg = 'Descuentos de comision: ' + isnull(ERROR_MESSAGE ( ) , '')
			EXEC WSXML_SFG.SFGTMPTRACE_TraceLog @msg
			--SET @cDESCUENTOSCOMISION = REDDESCUENTOS();
      END;
      COMMIT;

      -- Despues de obtener la lista, iterar
      --IF cPUNTOSDEVENTAFACTURACION.COUNT > 0 BEGIN
	  IF (SELECT COUNT(*) FROM @cPDVLINEASDENEGOCIO) > 0 BEGIN
        -- Obtener las lineas de negocio como indice y como ID, configuracion de egreso como value
        INSERT INTO @xLINEACONFIGURACION
		SELECT ID_LINEADENEGOCIO, LINEAEGRESO
        FROM (
			SELECT ID_LINEADENEGOCIO, LINEAEGRESO, ROW_NUMBER() OVER(ORDER BY ID_LINEADENEGOCIO) AS RowNumber 
			FROM WSXML_SFG.LINEADENEGOCIO 
		) T

        IF @@ROWCOUNT <= 0 BEGIN
          RAISERROR('-20020 No se pudo obtener la configuracion de ingresos y egresos para las lineas de negocio', 16, 1);
        END 
        --DECLARE tPDVLDN CURSOR FOR SELECT ID, VALUE FROM @cPUNTOSDEVENTAFACTURACION
		DECLARE tPDVLDN CURSOR FOR SELECT DISTINCT ID AS CODPUNTODEVENTA, VALUE FROM @cPDVLINEASDENEGOCIO
		--.First..cPUNTOSDEVENTAFACTURACION.Last LOOP
		DECLARE @tPDVLDN__CODPUNTODEVENTA	 NUMERIC(38,0)
		FETCH NEXT FROM tPDVLDN INTO @tPDVLDN__CODPUNTODEVENTA			
		WHILE @@fetch_status=0 BEGIN
			DECLARE @xCODPUNTODEVENTA            NUMERIC(22,0) = @tPDVLDN__CODPUNTODEVENTA;
			DECLARE @xCODMAESTROFACTURATIRILLA   NUMERIC(38,0);
			DECLARE @cCODTIPOAGRUPACION          NUMERIC(38,0);
			DECLARE @cCODAGRUPACIONPUNTODEVENTA  NUMERIC(38,0);
			DECLARE @cListaReferencia            WSXML_SFG.REFERENCEBILLING;
			
			BEGIN
				BEGIN TRY
            
					--SET @cListaReferencia = REFERENCEBILLINGLIST();
					EXEC WSXML_SFG.SFGMAESTROFACTURACIONTIRILLA_AddRecord @cCODCICLOFACTURACION, @xCODPUNTODEVENTA, @xCODMAESTROFACTURATIRILLA OUT
					-- Obtener Tipo Agrupamiento y Agrupacion
					SELECT @cCODTIPOAGRUPACION = CODTIPOPUNTODEVENTA, @cCODAGRUPACIONPUNTODEVENTA = ID_AGRUPACIONPUNTODEVENTA FROM WSXML_SFG.PUNTODEVENTA
					INNER JOIN WSXML_SFG.AGRUPACIONPUNTODEVENTA ON (CODAGRUPACIONPUNTODEVENTA = ID_AGRUPACIONPUNTODEVENTA)
					WHERE ID_PUNTODEVENTA = @xCODPUNTODEVENTA;

					-- Iterar a traves de las lineas de negocio que facturan este dia para el punto de venta
					DECLARE tLDN CURSOR FOR SELECT VALUE AS LINEASDENEGOCIO FROM @cPDVLINEASDENEGOCIO  WHERE ID = @tPDVLDN__CODPUNTODEVENTA
					OPEN tLDN
					DECLARE @tPDVLDN__LINEASDENEGOCIO NUMERIC(38,0)
					FETCH NEXT FROM tLDN INTO @tPDVLDN__LINEASDENEGOCIO
					WHILE @@fetch_status=0 BEGIN
							--cPUNTOSDEVENTAFACTURACION(tPDVLDN).LINEASDENEGOCIO.First..cPUNTOSDEVENTAFACTURACION(tPDVLDN).LINEASDENEGOCIO.Last WHILE 1=1 BEGIN
					
							/* COMMIT SECTION */
							DECLARE @xCODLINEADENEGOCIO NUMERIC(22,0) = @tPDVLDN__LINEASDENEGOCIO;
							DECLARE @cCODMAESTROFACTURACION  NUMERIC(38,0) = 0;
							DECLARE @cCOUNTFACTURABLES       NUMERIC(38,0) = 0;
							-- Obtiene la lista de registros a facturar una sola vez
							DECLARE @lstREGISTROSFACTURABLES WSXML_SFG.REGISTROFACTURABLE;
							DECLARE @lstREGISTROSAGRUPADOS   WSXML_SFG.IDVALUENUMERIC

							BEGIN
								BEGIN TRY

									BEGIN
										BEGIN TRY
											INSERT INTO @lstREGISTROSFACTURABLES 
											SELECT ID_REGISTROFACTURACION, CODPRODUCTO
												FROM WSXML_SFG.ENTRADAARCHIVOCONTROL CTR
												INNER JOIN WSXML_SFG.REGISTROFACTURACION REG ON (REG.CODENTRADAARCHIVOCONTROL = CTR.ID_ENTRADAARCHIVOCONTROL)
												INNER JOIN WSXML_SFG.PRODUCTO PRD ON (PRD.ID_PRODUCTO = REG.CODPRODUCTO)
												INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ON (TPR.ID_TIPOPRODUCTO = PRD.CODTIPOPRODUCTO)
												WHERE CTR.ID_ENTRADAARCHIVOCONTROL IN (SELECT IDVALUE FROM @lstbillablefiles)
												AND REG.CODPUNTODEVENTA   = @xCODPUNTODEVENTA
												AND TPR.CODLINEADENEGOCIO = @xCODLINEADENEGOCIO
												AND REG.FACTURADO         = 0;
										END TRY
										BEGIN CATCH
											SET @msg = '-20054 Error al obtener los identificadores de los registros facturados: ' + isnull(ERROR_MESSAGE ( ), '')
											RAISERROR(@msg, 16, 1);
										END CATCH
									END;

									-- No facturar si no hay registros facturables
									SET @cCOUNTFACTURABLES = (SELECT COUNT(*) FROM @lstREGISTROSFACTURABLES)
									IF @cCOUNTFACTURABLES > 0 BEGIN
										-- Agrupar la lista obtenida por producto
										--SET @lstREGISTROSAGRUPADOS = REGISTROSLINEADENEGOCIO();
										DECLARE reg CURSOR FOR SELECT ID_REGISTROFACTURACION, CODPRODUCTO FROM  @lstREGISTROSFACTURABLES
											--.First..lstREGISTROSFACTURABLES.Last LOOP
										DECLARE @reg__ID_REGISTROFACTURACION NUMERIC(38,0), 	@reg__CODPRODUCTO  NUMERIC(38,0)
										FETCH NEXT FROM reg INTO @reg__ID_REGISTROFACTURACION, 	@reg__CODPRODUCTO
						
										WHILE @@fetch_status=0 BEGIN

											DECLARE @regIDREGISTRO  NUMERIC(22,0) = @reg__ID_REGISTROFACTURACION;
											DECLARE @regCODPRODUCTO NUMERIC(38,0) = @reg__CODPRODUCTO
											DECLARE @prdFOUND NUMERIC(38,0) = 0;

											BEGIN
												-- Buscar
											IF (SELECT COUNT(*) FROM @lstREGISTROSAGRUPADOS) > 0 BEGIN
															DECLARE grup CURSOR FOR SELECT ID AS CODPRODUCTO, VALUE AS IDREGISTRO FROM @lstREGISTROSAGRUPADOS--.First .. lstREGISTROSAGRUPADOS.Last 
															OPEN grup;
															DECLARE @grup__CODPRODUCTO NUMERIC(38,0), @grup__IDREGISTRO NUMERIC(38,0)
															FETCH NEXT FROM grup INTO @grup__CODPRODUCTO, @grup__IDREGISTRO;
															WHILE @@FETCH_STATUS=0
															BEGIN
															IF @grup__CODPRODUCTO = @regCODPRODUCTO BEGIN
																--lstREGISTROSAGRUPADOS(grup).lstREGISTROS(lstREGISTROSAGRUPADOS(grup).lstREGISTROS.Count) := @regIDREGISTRO;
																INSERT INTO @lstREGISTROSAGRUPADOS VALUES(@grup__CODPRODUCTO, @regIDREGISTRO);
											  
																SET @prdFOUND = 1;
																BREAK;
															END
											
															FETCH NEXT FROM grup INTO @grup__CODPRODUCTO, @grup__IDREGISTRO;
											
															END
															CLOSE grup;
															DEALLOCATE grup;
															--END WHILE 1=1 BEGIN;
											END
											-- Si no se encontro
											IF @prdFOUND = 0 BEGIN
											DECLARE @lstREGISTROSNEWPRODUCTO WSXML_SFG.LONGNUMBERARRAY;
										
											--lstREGISTROSAGRUPADOS(lstREGISTROSAGRUPADOS.Count) := REGISTROSPRODUCTO(regCODPRODUCTO,lstREGISTROSNEWPRODUCTO);
											INSERT INTO @lstREGISTROSAGRUPADOS VALUES (@regCODPRODUCTO, @regIDREGISTRO);
									  
										END 
											END;
											FETCH NEXT FROM reg INTO @reg__ID_REGISTROFACTURACION,@reg__CODPRODUCTO;
										END;
										CLOSE reg;
										DEALLOCATE reg;

										DECLARE @xLINEAEGRESO NUMERIC(38,0);
										SELECT @xLINEAEGRESO = VALUE FROM @xLINEACONFIGURACION WHERE ID = @xCODLINEADENEGOCIO;
										-- Control de reintentos
										EXEC WSXML_SFG.KAZ_ReplicaFacturarPOSLDN @cCODCICLOFACTURACION,
														xCODMAESTROFACTURATIRILLA,
														@xCODPUNTODEVENTA,
														@cCODTIPOAGRUPACION,
														@cCODAGRUPACIONPUNTODEVENTA,
														@xCODLINEADENEGOCIO,
														@cTODAY,
														@lstREGISTROSAGRUPADOS,
														@xLINEAEGRESO,
														@cCODUSUARIOMODIFICACION,
														@cCODMAESTROFACTURACION OUT
									END
									ELSE BEGIN
										EXEC WSXML_SFG.SFGTMPTRACE_TraceLog 'Not possible, man. Empty billing a registry?'
									END 

									-- Ingresar a la lista referenciada
									INSERT INTO @cListaReferencia VALUES (@xCODLINEADENEGOCIO, @cCODMAESTROFACTURACION);
									COMMIT;

									-- Actualizar la tarea
									SET @cCOUNTREGISTROS = @cCOUNTREGISTROS + 1;
									IF (@cCOUNTREGISTROS % @cWAITREGISTROS) = 0 OR @cCOUNTREGISTROS = @cTOTALREGISTROS BEGIN
										SET @msg = 'Replica update control ' + ISNULL(@cCOUNTREGISTROS, '') + ' from ' + ISNULL(@cTOTALREGISTROS, '')
										EXEC WSXML_SFG.SFGTMPTRACE_TraceLog @msg
									END 
								END TRY
								BEGIN CATCH
										-- Hubo un error al intentar procesar una entrada
							
										SET @msg = 'No se pudo realizar la facturacion de ' + ISNULL(WSXML_SFG.LINEADENEGOCIO_NOMBRE_F(@xCODLINEADENEGOCIO), '') + ' para el punto de venta ' + ISNULL(WSXML_SFG.PUNTODEVENTA_CODIGO_F(@xCODPUNTODEVENTA), '') + ': ' + isnull(ERROR_MESSAGE ( ), '');
										EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @TIPOADVERTENCIA, 'FACTURACION', @msg, @cCODUSUARIOMODIFICACION
										SET @cTOTALWARNINGS = @cTOTALWARNINGS + 1;
										COMMIT;
										IF @cTOTALWARNINGS >= @cMAXWARNINGS BEGIN
											RAISERROR('-20054 Se ha llegado al maximo numero de advertencias para el ciclo de facturacion', 16, 1);
										END 
								END CATCH
							END;

							FETCH NEXT FROM tLDN INTO @tPDVLDN__LINEASDENEGOCIO
					END;
					CLOSE tLDN;
					DEALLOCATE tLDN;

				END TRY
				BEGIN CATCH
						-- Hubo un error al intentar procesar una entrada
						SET @msg = 'No se pudo realizar la facturacion para el punto de venta ' + ISNULL(WSXML_SFG.PUNTODEVENTA_CODIGO_F(@xCODPUNTODEVENTA), '') + ': ' + isnull(ERROR_MESSAGE ( ) , '');
						EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @TIPOADVERTENCIA, 'FACTURACION', @msg, @cCODUSUARIOMODIFICACION
						SET @cTOTALWARNINGS = @cTOTALWARNINGS + 1;
						COMMIT;
						IF @cTOTALWARNINGS >= @cMAXWARNINGS BEGIN
							RAISERROR('-20054 Se ha llegado al maximo numero de advertencias para el ciclo de facturacion', 16, 1);
						END 
				END CATCH
			END
		  
			FETCH NEXT FROM tPDVLDN INTO @tPDVLDN__CODPUNTODEVENTA			
		END
		CLOSE tPDVLDN;
		DEALLOCATE tPDVLDN;
          
      END ELSE BEGIN
        -- Se ejecuto un ciclo de facturacion que no tiene puntos de venta relevantes. Advertir
		SET @msg = 'Se ha ejecutado un ciclo de facturacion, pero no existen puntos de venta configurados para facturar en la fecha ' + ISNULL(dbo.to_char_date(@cTODAY, 'DD/MM/YYYY'), '')
        EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @TIPOADVERTENCIA, 'FACTURACION', @msg , @cCODUSUARIOMODIFICACION;
      END

	  IF @cTOTALWARNINGS > 0 AND @cTOTALWARNINGS >= @cTOTALREGISTROS
        SET @p_RETVALUE_out = @FINALIZADAFALLO;
      ELSE IF @cTOTALWARNINGS > 0 AND @cTOTALWARNINGS < @cTOTALREGISTROS BEGIN
        SET @p_RETVALUE_out = @FINALIZADAADVERTENCIA;
          DECLARE @endmsg NVARCHAR(2000);
        BEGIN

          SELECT @endmsg = ISNULL(ISNULL(@msg, ': ') + isnull(@msg, ''), '.');
		  SET @msg = 'El ciclo de facturacion No. ' + ISNULL(@cSECUENCIACICLO, '') + ' ha finalizado correctamente. Sin embargo, ocurrieron algunos errores controlados' + isnull(@endmsg, '')
          EXEC WSXML_SFG.SFGTMPTRACE_TraceLog @msg
        END;
      END ELSE BEGIN
        SET @p_RETVALUE_out = @FINALIZADAOK;
		SET @msg = 'El ciclo de facturacion No. ' + ISNULL(@cSECUENCIACICLO, '') + ' ha finalizado correctamente.'
        EXEC WSXML_SFG.SFGTMPTRACE_TraceLog @msg
	  END
      
      EXEC WSXML_SFG.SFGCICLOFACTURACIONPDV_FreeProcessFlag @cCODCICLOFACTURACION

    END
    ELSE BEGIN
      RAISERROR('-20054 Ocurrio un error al tratar de ingresar el registro de ciclo de facturacion', 16, 1);
    END 

 END TRY
 BEGIN CATCH

    IF @cCODCICLOFACTURACION > 0 BEGIN
      EXEC WSXML_SFG.SFGCICLOFACTURACIONPDV_FreeProcessFlag @cCODCICLOFACTURACION
    END 
    SET @msg = ERROR_MESSAGE ( ) ;
    EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @TIPOERROR, 'FACTURACION', @msg, @cCODUSUARIOMODIFICACION
	SET @msg = 'Error in replica cycle ' + isnull(@msg, '')
    EXEC WSXML_SFG.SFGTMPTRACE_TraceLog @msg
    SET @p_RETVALUE_out = @FINALIZADAFALLO
 END CATCH

END;
GO

