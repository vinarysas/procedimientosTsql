USE SFGPRODU;
--  DDL for Package Body SFGCARGAINVENTARIOPRODUCTO
--------------------------------------------------------

  /* PACKAGE BODY WSXML_SFG.SFGCARGAINVENTARIOPRODUCTO */ 
 
 
  IF OBJECT_ID('WSXML_SFG.SFGCARGAINVENTARIOPRODUCTO_EstablecerSaldosInventario', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGCARGAINVENTARIOPRODUCTO_EstablecerSaldosInventario;
GO

CREATE     PROCEDURE WSXML_SFG.SFGCARGAINVENTARIOPRODUCTO_EstablecerSaldosInventario(@p_FECHAINVENTARIO DATETIME,
                                       @p_CODPRODUCTO     NUMERIC(22,0),
                                       @p_CANTIDAD        NUMERIC(22,0),
                                       @p_VALOR           FLOAT) AS
 BEGIN
    DECLARE @xConfigInventario NUMERIC(22,0);
    DECLARE @xInventarioConteo INT;
	DECLARE @msg VARCHAR(2000)
   
  SET NOCOUNT ON;
    /* Must be configured */
    BEGIN
		SELECT @xConfigInventario = ID_CONFIGPRODUCTOINVENTARIO FROM WSXML_SFG.CONFIGPRODUCTOINVENTARIO WHERE CODPRODUCTO = @p_CODPRODUCTO;
		
		IF @@ROWCOUNT = 0 BEGIN
			SET @msg = '-20067 No existe configuracion de inventario para el producto ' + ISNULL(CONVERT(VARCHAR,@p_CODPRODUCTO), '') 
			RAISERROR(@msg, 16, 1);
			RETURN 0;
		END
    END;
    /* Previous inventory records do not exist */
    BEGIN
      SELECT @xInventarioConteo = COUNT(1) FROM WSXML_SFG.INVENTARIOPRODUCTO WHERE CODPRODUCTO = @p_CODPRODUCTO AND CONVERT(DATETIME, CONVERT(DATE,FECHAINVENTARIO)) <= CONVERT(DATETIME, CONVERT(DATE,@p_FECHAINVENTARIO));
	  
	  IF @@ROWCOUNT > 0 BEGIN			
		  IF @xInventarioConteo > 0 BEGIN
			SET @msg = '-20075 No se puede establecer el inventario del producto ' + ISNULL(CONVERT(VARCHAR,@p_CODPRODUCTO), '') + ' debido a que ya se tiene informacion previa' 
			RAISERROR(@msg, 16, 1);
			RETURN 0;
		  END 
	  END
		
    END;
    INSERT INTO WSXML_SFG.INVENTARIOPRODUCTO ( CODPRODUCTO, FECHAINVENTARIO, CANTIDADSALDOINICIAL, VALORSALDOINICIAL)
    VALUES ( @p_CODPRODUCTO, CONVERT(DATETIME, CONVERT(DATE,@p_FECHAINVENTARIO)), @p_CANTIDAD, @p_VALOR);
  END;
GO



  IF OBJECT_ID('WSXML_SFG.SFGCARGAINVENTARIOPRODUCTO_ActualizarInventarioProducto', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGCARGAINVENTARIOPRODUCTO_ActualizarInventarioProducto;
GO

CREATE     PROCEDURE WSXML_SFG.SFGCARGAINVENTARIOPRODUCTO_ActualizarInventarioProducto(@p_FECHAINVENTARIO DATETIME, @p_CODPRODUCTO NUMERIC(22,0)) AS
 BEGIN
    DECLARE @xInventarioID         NUMERIC(22,0);
    DECLARE @xCantidadSaldoInicial NUMERIC(22,0);
    DECLARE @xValorSaldoInicial    FLOAT;
    DECLARE @xRevenueSaldoInicial  FLOAT;
    DECLARE @xCantidadVenta        NUMERIC(22,0);
    DECLARE @xValorVenta           FLOAT;
    DECLARE @xRevenueVenta         FLOAT;
    DECLARE @xConfiguracion        CHAR(1);
   
  SET NOCOUNT ON;
    SELECT @xConfiguracion = CONFIGURACION FROM WSXML_SFG.CONFIGPRODUCTOINVENTARIO WHERE CODPRODUCTO = @p_CODPRODUCTO;
	
	IF @@ROWCOUNT = 0 BEGIN
  
		  DECLARE @xCodigo VARCHAR(4000) /* Use -meta option PRODUCTO.CODIGOGTECHPRODUCTO%TYPE */;
		  DECLARE @xNombre VARCHAR(4000) /* Use -meta option PRODUCTO.NOMPRODUCTO%TYPE */;
		  DECLARE @msg VARCHAR(2000)
		BEGIN
		  SELECT @xCodigo = CODIGOGTECHPRODUCTO, @xNombre = NOMPRODUCTO FROM WSXML_SFG.PRODUCTO WHERE ID_PRODUCTO = @p_CODPRODUCTO;
		  SET @msg = '-20066 No se tiene informacion de inventario de producto para ' + ISNULL(@xCodigo, '') + ' - ' + ISNULL(@xNombre, '') + ' en la fecha ' + ISNULL(FORMAT(CONVERT(DATETIME, CONVERT(DATE,@p_FECHAINVENTARIO - 1)), 'dd/MM/yyyy'), '')
		  RAISERROR(@msg, 16, 1);
		  RETURN 0;
		END;
	END
	
    /* Get / Insert / Update */
    BEGIN
		SELECT @xInventarioID = ID_INVENTARIOPRODUCTO FROM WSXML_SFG.INVENTARIOPRODUCTO WHERE FECHAINVENTARIO = CONVERT(DATETIME, CONVERT(DATE,@p_FECHAINVENTARIO)) AND CODPRODUCTO = @p_CODPRODUCTO;
		
		IF @@ROWCOUNT = 0 BEGIN
			INSERT INTO WSXML_SFG.INVENTARIOPRODUCTO ( CODPRODUCTO, FECHAINVENTARIO, CANTIDADSALDOINICIAL, VALORSALDOINICIAL)
			VALUES ( @p_CODPRODUCTO, CONVERT(DATETIME, CONVERT(DATE,@p_FECHAINVENTARIO)), 0, 0); SET @xInventarioID = SCOPE_IDENTITY();
		END
    END;
    /* Asumir cargas, actualizar Saldos Iniciales y Ventas (actualizadas CONSIDERANDO ajustes) */
    BEGIN
		BEGIN TRY
		  SELECT @xCantidadVenta = ISNULL(SUM(CASE WHEN REG.CODTIPOREGISTRO = 1 THEN REG.NUMTRANSACCIONES
							  WHEN REG.CODTIPOREGISTRO = 2 THEN REG.NUMTRANSACCIONES * (-1) ELSE 0 END), 0),
				 @xValorVenta = ISNULL(SUM(CASE WHEN REG.CODTIPOREGISTRO = 1 THEN REG.VALORTRANSACCION
							  WHEN REG.CODTIPOREGISTRO = 2 THEN REG.VALORTRANSACCION * (-1) ELSE 0 END), 0),
				 @xRevenueVenta = ISNULL(SUM(CASE WHEN REG.CODTIPOREGISTRO IN (1, 3) THEN REV.REVENUETOTAL
							  WHEN REG.CODTIPOREGISTRO = 2       THEN REV.REVENUETOTAL * (-1) ELSE 0 END), 0)
		  FROM WSXML_SFG.ENTRADAARCHIVOCONTROL CTR
		  LEFT OUTER JOIN WSXML_SFG.REGISTROFACTURACION REG ON (REG.CODENTRADAARCHIVOCONTROL = CTR.ID_ENTRADAARCHIVOCONTROL AND REG.CODPRODUCTO            = @p_CODPRODUCTO)
		  LEFT OUTER JOIN WSXML_SFG.REGISTROREVENUE     REV ON (REV.CODENTRADAARCHIVOCONTROL = CTR.ID_ENTRADAARCHIVOCONTROL AND REV.CODREGISTROFACTURACION = REG.ID_REGISTROFACTURACION)
		  WHERE CTR.REVERSADO = 0
			AND CTR.FECHAARCHIVO = CONVERT(DATETIME, CONVERT(DATE,@p_FECHAINVENTARIO));
		  IF @xConfiguracion = 'V' BEGIN
			SET @xCantidadVenta = 0;
		  END 
		END TRY
		BEGIN CATCH
		  SET @xCantidadVenta = 0;
		  SET @xValorVenta    = 0;
		  SET @xRevenueVenta  = 0;
		END CATCH
    END;
    BEGIN
		BEGIN TRY
		SELECT @xCantidadSaldoInicial = CANTIDADSALDOFINAL, @xValorSaldoInicial = VALORSALDOFINAL FROM WSXML_SFG.INVENTARIOPRODUCTO
		WHERE FECHAINVENTARIO = CONVERT(DATETIME, CONVERT(DATE,@p_FECHAINVENTARIO - 1)) AND CODPRODUCTO = @p_CODPRODUCTO;
		IF @xCantidadSaldoInicial IS NOT NULL AND @xValorSaldoInicial IS NOT NULL BEGIN
        /* Revenue of said balance */
			DECLARE @xCommissionType NUMERIC(22,0);
			DECLARE @xPercentValue   FLOAT;
			DECLARE @xTranscnValue   FLOAT;

			BEGIN
				BEGIN TRY

				  SELECT @xCommissionType = RCM.CODTIPOCOMISION, @xPercentValue = RCD.VALORPORCENTUAL, @xTranscnValue = RCD.VALORTRANSACCIONAL
				  FROM WSXML_SFG.PRODUCTOCONTRATO PCT
				  LEFT OUTER JOIN WSXML_SFG.PRODCONTRATOHISTORICO PCH ON (PCH.CODPRODUCTOCONTRATO = PCT.ID_PRODUCTOCONTRATO AND PCH.FECHAINICIOVALIDEZ = CONVERT(DATETIME, CONVERT(DATE,@p_FECHAINVENTARIO)))
				  LEFT OUTER JOIN WSXML_SFG.RANGOCOMISION         RCM ON (RCM.ID_RANGOCOMISION    = COALESCE(PCH.CODRANGOCOMISION, PCT.CODRANGOCOMISION))
				  LEFT OUTER JOIN WSXML_SFG.RANGOCOMISIONDETALLE  RCD ON (RCD.CODRANGOCOMISION    = RCM.ID_RANGOCOMISION)
				  WHERE PCT.CODPRODUCTO = @p_CODPRODUCTO;
				  SET @xRevenueSaldoInicial = CASE WHEN @xCommissionType IN (1, 3) THEN (@xValorSaldoInicial * @xPercentValue) / 100 ELSE 0 END +
										  CASE WHEN @xCommissionType IN (2, 3) THEN (@xCantidadSaldoInicial * @xTranscnValue)    ELSE 0 END;
				END TRY
				BEGIN CATCH
					SET @xRevenueSaldoInicial = 0;
				END CATCH
			END;
		END 

		UPDATE WSXML_SFG.INVENTARIOPRODUCTO SET CANTIDADSALDOINICIAL = CASE WHEN @xCantidadSaldoInicial IS NULL THEN CANTIDADSALDOINICIAL ELSE @xCantidadSaldoInicial END,
                                    VALORSALDOINICIAL    = CASE WHEN @xValorSaldoInicial    IS NULL THEN VALORSALDOINICIAL    ELSE @xValorSaldoInicial    END,
                                    REVENUESALDOINICIAL  = CASE WHEN @xRevenueSaldoInicial  IS NULL THEN REVENUESALDOINICIAL  ELSE @xRevenueSaldoInicial  END,
                                    CANTIDADVENTAS       = @xCantidadVenta,
                                    VALORVENTAS          = @xValorVenta,
                                    REVENUEVENTAS        = @xRevenueVenta,
                                    REVENUESALDOFINAL    = REVENUESALDOINICIAL + REVENUEVENTAS - REVENUECARGAS
				WHERE ID_INVENTARIOPRODUCTO = @xInventarioID;
		END TRY
		BEGIN CATCH
		
			UPDATE WSXML_SFG.INVENTARIOPRODUCTO SET CANTIDADVENTAS       = @xCantidadVenta,
                                    VALORVENTAS          = @xValorVenta,
                                    REVENUEVENTAS        = @xRevenueVenta,
                                    REVENUESALDOFINAL    = REVENUESALDOINICIAL + REVENUEVENTAS - REVENUECARGAS
			WHERE ID_INVENTARIOPRODUCTO = @xInventarioID;
		END CATCH
    END;

  END;
GO

 IF OBJECT_ID('WSXML_SFG.SFGCARGAINVENTARIOPRODUCTO_ActualizarInventario', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGCARGAINVENTARIOPRODUCTO_ActualizarInventario;
GO

CREATE     PROCEDURE WSXML_SFG.SFGCARGAINVENTARIOPRODUCTO_ActualizarInventario(@p_FECHADESDE DATETIME, @p_FECHAHASTA DATETIME) AS
 BEGIN
    DECLARE @xStartDate   DATETIME = CONVERT(DATETIME, CONVERT(DATE,@p_FECHADESDE));
    DECLARE @xEndDate     DATETIME = CONVERT(DATETIME, CONVERT(DATE,@p_FECHAHASTA));
    DECLARE @xIterator    DATETIME = @xStartDate;
    DECLARE @xProductList WSXML_SFG.LONGNUMBERARRAY;
   
  SET NOCOUNT ON;
	INSERT INTO @xProductList
    SELECT CODPRODUCTO FROM WSXML_SFG.CONFIGPRODUCTOINVENTARIO ORDER BY CODPRODUCTO;
    IF (SELECT COUNT(*) FROM @xProductList) > 0 BEGIN
      WHILE @xIterator <= @xEndDate BEGIN
        DECLARE ipx CURSOR FOR SELECT IDVALUE FROM @xProductList
		OPEN ipx
		
		DECLARE @ipx_idvalue NUMERIC(38,0)
		FETCH NEXT FROM ipx INTO @ipx_idvalue
        
        WHILE (@@FETCH_STATUS = 0)
        BEGIN

			EXEC WSXML_SFG.SFGCARGAINVENTARIOPRODUCTO_ActualizarInventarioProducto @xIterator, @ipx_idvalue
			FETCH NEXT FROM ipx INTO @ipx_idvalue
        END;
        CLOSE ipx;
        DEALLOCATE ipx;
        SET @xIterator = CONVERT(DATETIME, CONVERT(DATE,@xIterator + 1));
      END;
    END 
  END;
GO


IF OBJECT_ID('WSXML_SFG.SFGCARGAINVENTARIOPRODUCTO_CrearCargaDeInventario', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGCARGAINVENTARIOPRODUCTO_CrearCargaDeInventario;
GO

CREATE     PROCEDURE WSXML_SFG.SFGCARGAINVENTARIOPRODUCTO_CrearCargaDeInventario(@p_FECHACARGA       DATETIME,
                                   @p_CODPRODUCTO      NUMERIC(22,0),
                                   @p_CANTIDAD         NUMERIC(22,0),
                                   @p_VALOR            FLOAT,
                                   @p_IDENTIFICADORINV VARCHAR(4000)) AS
 BEGIN
	SET NOCOUNT ON;

    DECLARE @xInventarioProducto   NUMERIC(22,0);
    DECLARE @xConfigInventario     NUMERIC(22,0);
    DECLARE @xVinculado            CHAR(1) = 'F';
    DECLARE @xOrdenDeCompraDetalle NUMERIC(22,0);
    DECLARE @xCargaInventarioProd  NUMERIC(22,0);
    DECLARE @xProcessTimeStamp     DATETIME  = GETDATE();
    DECLARE @xRevenueDetail        FLOAT = 0;
	DECLARE @msg VARCHAR(2000)
    
	BEGIN TRY

		/* Must be configured */
		BEGIN
		  SELECT @xConfigInventario = ID_CONFIGPRODUCTOINVENTARIO FROM WSXML_SFG.CONFIGPRODUCTOINVENTARIO WHERE CODPRODUCTO = @p_CODPRODUCTO;
    
			IF @@ROWCOUNT   = 0 BEGIN
				SET @msg = '-20067 No existe configuracion de inventario para el producto ' + ISNULL(CONVERT(VARCHAR,@p_CODPRODUCTO), '')
				RAISERROR(@msg , 16, 1);
			END
		END;
		/* Make sure unique identifier does not exist */
		  DECLARE @existingItem NUMERIC(22,0);
		BEGIN
		  SELECT @existingItem = ID_CARGAINVENTARIOPRODUCTO FROM WSXML_SFG.CARGAINVENTARIOPRODUCTO WHERE RTRIM(LTRIM(IDENTIFICADORINVENTARIO)) = RTRIM(LTRIM(@p_IDENTIFICADORINV));
		  
		  IF @@ROWCOUNT   > 0 BEGIN
			RAISERROR('-20068 La carga ya existe', 16, 1);
		  END		  
			
		END;
		/* Crear / Obtener registro INVENTARIOPRODUCTO */
		BEGIN
			SELECT @xInventarioProducto = ID_INVENTARIOPRODUCTO FROM WSXML_SFG.INVENTARIOPRODUCTO WHERE CODPRODUCTO = @p_CODPRODUCTO AND CONVERT(DATETIME, CONVERT(DATE,FECHAINVENTARIO)) = CONVERT(DATETIME, CONVERT(DATE,@p_FECHACARGA));
			DECLARE @rowcount NUMERIC(22,0) = @@ROWCOUNT;

			IF @rowcount   = 0 BEGIN
				DECLARE @xPreviousInventario   NUMERIC(22,0);
				DECLARE @xCantidadSaldoInicial NUMERIC(22,0) = 0;
				DECLARE @xValorSaldoInicial    FLOAT  = 0;
			  BEGIN
				BEGIN
					BEGIN TRY
					  SELECT @xPreviousInventario = ID_INVENTARIOPRODUCTO FROM WSXML_SFG.INVENTARIOPRODUCTO
					  WHERE CODPRODUCTO = @p_CODPRODUCTO AND FECHAINVENTARIO = (SELECT MAX(FECHAINVENTARIO) FROM WSXML_SFG.INVENTARIOPRODUCTO WHERE CODPRODUCTO = @p_CODPRODUCTO AND FECHAINVENTARIO <= CONVERT(DATETIME, CONVERT(DATE,@p_FECHACARGA)));
					  SELECT @xCantidadSaldoInicial = CANTIDADSALDOFINAL, @xValorSaldoInicial = VALORSALDOFINAL FROM WSXML_SFG.INVENTARIOPRODUCTO WHERE ID_INVENTARIOPRODUCTO = @xPreviousInventario;
					END TRY
					BEGIN CATCH
						SELECT NULL;
					END CATCH
				END;
				
				INSERT INTO WSXML_SFG.INVENTARIOPRODUCTO ( CODPRODUCTO, FECHAINVENTARIO, CANTIDADSALDOINICIAL, VALORSALDOINICIAL, CANTIDADCARGAS, VALORCARGAS)
				VALUES ( @p_CODPRODUCTO, CONVERT(DATETIME, CONVERT(DATE,@p_FECHACARGA)), @xCantidadSaldoInicial, @xValorSaldoInicial, @p_CANTIDAD, @p_VALOR);
				SET @xInventarioProducto = SCOPE_IDENTITY();
			  END;
			END

			IF @rowcount > 1 BEGIN
				SET @msg = '-20069 Existe un error de consistencia de registros para el producto ' + ISNULL(CONVERT(VARCHAR,@p_CODPRODUCTO), '') + ', fecha ' + ISNULL(FORMAT(CONVERT(DATETIME, CONVERT(DATE,@p_FECHACARGA)), 'dd/MM/yyyy'), '') 
				RAISERROR(@msg , 16, 1);
			END
			
			UPDATE WSXML_SFG.INVENTARIOPRODUCTO SET CANTIDADCARGAS = CANTIDADCARGAS + @p_CANTIDAD,
										VALORCARGAS    = VALORCARGAS    + @p_VALOR
			WHERE ID_INVENTARIOPRODUCTO = @xInventarioProducto;
		END;
		/* Revisar Vinculo */
		  DECLARE @possiblelinks WSXML_SFG.LONGNUMBERARRAY;
		  DECLARE @totaloclinked NUMERIC(22,0);
		  DECLARE @totalocdetail NUMERIC(22,0);
		BEGIN
			INSERT INTO @possiblelinks 
			SELECT ID_ORDENDECOMPRADETALLE 
			FROM WSXML_SFG.ORDENDECOMPRA ODC
				INNER JOIN WSXML_SFG.ORDENDECOMPRADETALLE OCD ON (OCD.CODORDENDECOMPRA = ODC.ID_ORDENDECOMPRA)
			WHERE ODC.ESTADOAPROBACION  = 'A'
				AND ODC.FECHAEMISION     <= @p_FECHACARGA
				AND OCD.CODPRODUCTO       = @p_CODPRODUCTO
				AND OCD.CANTIDAD          = @p_CANTIDAD
				AND OCD.VALOR             = @p_VALOR
				AND OCD.CARGADO           = 'F'
				AND ODC.Fechaemision <= @p_FECHACARGA /*rnino (12/2/2010): La fecha de la carga debe ser mayor o igual a la fecha de la orden de compra */
			ORDER BY ODC.FECHAEMISION, ODC.FECHAHORASOLICITUD;
      
		  IF (SELECT COUNT(*) FROM @possiblelinks) > 0 BEGIN

			DECLARE ipx CURSOR FOR SELECT IDVALUE FROM @possiblelinks
			OPEN ipx 

			declare @ipx_ID_ORDENDECOMPRADETALLE NUMERIC(38,0)

			FETCH NEXT FROM ipx INTO @ipx_ID_ORDENDECOMPRADETALLE

			WHILE (@@FETCH_STATUS = 0)
			BEGIN
        
				SET @xVinculado            = 'T';
				SET @xOrdenDeCompraDetalle = @ipx_ID_ORDENDECOMPRADETALLE

				SELECT @totalocdetail = COUNT(ID_ORDENDECOMPRADETALLE), @totaloclinked = SUM(CASE WHEN CARGADO = 'T' THEN 1 ELSE 0 END) FROM WSXML_SFG.ORDENDECOMPRADETALLE
				WHERE CODORDENDECOMPRA = (SELECT CODORDENDECOMPRA FROM WSXML_SFG.ORDENDECOMPRADETALLE WHERE ID_ORDENDECOMPRADETALLE = @xOrdenDeCompraDetalle);
		
				IF @totalocdetail <= @totaloclinked + 1 BEGIN
					  UPDATE WSXML_SFG.ORDENDECOMPRA SET RECIBIDO = 'T', FECHAHORARECIBIDO = @xProcessTimeStamp WHERE ID_ORDENDECOMPRA = (SELECT CODORDENDECOMPRA FROM WSXML_SFG.ORDENDECOMPRADETALLE WHERE ID_ORDENDECOMPRADETALLE = @xOrdenDeCompraDetalle);
				END
				ELSE BEGIN
					  UPDATE WSXML_SFG.ORDENDECOMPRA SET RECIBIDO = 'P', FECHAHORARECIBIDO = @xProcessTimeStamp WHERE ID_ORDENDECOMPRA = (SELECT CODORDENDECOMPRA FROM WSXML_SFG.ORDENDECOMPRADETALLE WHERE ID_ORDENDECOMPRADETALLE = @xOrdenDeCompraDetalle);
				END 


				FETCH NEXT FROM ipx INTO @ipx_ID_ORDENDECOMPRADETALLE
			END
        
			CLOSE ipx
			DEALLOCATE ipx 

		  END 
		END;
		/* Insertar Registro y Cross Check */
		INSERT INTO WSXML_SFG.CARGAINVENTARIOPRODUCTO ( CODINVENTARIOPRODUCTO, CANTIDAD, VALOR, IDENTIFICADORINVENTARIO, VINCULADO, CODORDENDECOMPRADETALLE)
		VALUES ( @xInventarioProducto, @p_CANTIDAD, @p_VALOR, RTRIM(LTRIM(@p_IDENTIFICADORINV)), @xVinculado, @xOrdenDeCompraDetalle);
		SET @xCargaInventarioProd = SCOPE_IDENTITY();
		IF @xVinculado = 'T' AND @xOrdenDeCompraDetalle IS NOT NULL BEGIN
		  UPDATE WSXML_SFG.ORDENDECOMPRADETALLE SET CARGADO                    = 'T',
										  FECHAHORACARGADO           = @xProcessTimeStamp,
										  CODCARGAINVENTARIOPRODUCTO = @xCargaInventarioProd
		  WHERE ID_ORDENDECOMPRADETALLE = @xOrdenDeCompraDetalle;
		  SELECT @xRevenueDetail = VALORDESCUENTO FROM WSXML_SFG.ORDENDECOMPRADETALLE WHERE ID_ORDENDECOMPRADETALLE = @xOrdenDeCompraDetalle;
		END
		ELSE BEGIN /* Retrieve and assign default */
			DECLARE @xTipoComision    NUMERIC(22,0);
			DECLARE @xValorPorcentual FLOAT = 0;
			DECLARE @xValorTransaccnl FLOAT = 0;
		  BEGIN
			BEGIN
			  SELECT @xValorPorcentual = VALORPORCENTUAL, @xValorTransaccnl = VALORTRANSACCIONAL FROM WSXML_SFG.PRODUCTOCONTRATO PCT
			  LEFT OUTER JOIN WSXML_SFG.PRODCONTRATOHISTORICO PCH ON (PCH.CODPRODUCTOCONTRATO = PCT.ID_PRODUCTOCONTRATO AND PCH.FECHAINICIOVALIDEZ = CONVERT(DATETIME, CONVERT(DATE,@p_FECHACARGA)))
			  LEFT OUTER JOIN WSXML_SFG.RANGOCOMISION         RCM ON (RCM.ID_RANGOCOMISION    = COALESCE(PCH.CODRANGOCOMISION, PCT.CODRANGOCOMISION))
			  LEFT OUTER JOIN WSXML_SFG.RANGOCOMISIONDETALLE  RCD ON (RCD.CODRANGOCOMISION    = RCM.ID_RANGOCOMISION)
			  WHERE PCT.CODPRODUCTO = @p_CODPRODUCTO;
			  IF @@ROWCOUNT   <= 1 BEGIN			
				SET @xRevenueDetail = CASE WHEN @xTipoComision IN (1, 3) THEN (@p_VALOR * @xValorPorcentual) / 100 ELSE 0 END +
							  CASE WHEN @xTipoComision IN (2, 3) THEN (@p_CANTIDAD * @xValorTransaccnl)    ELSE 0 END;
			  END;
			END
		  END;
		END 
		UPDATE WSXML_SFG.CARGAINVENTARIOPRODUCTO SET REVENUE = @xRevenueDetail WHERE ID_CARGAINVENTARIOPRODUCTO = @xCargaInventarioProd;
		UPDATE WSXML_SFG.INVENTARIOPRODUCTO SET REVENUECARGAS = REVENUECARGAS + @xRevenueDetail
		WHERE ID_INVENTARIOPRODUCTO = @xInventarioProducto;
	END TRY
	BEGIN CATCH
		RETURN 0;
	END CATCH
 END
 GO


IF OBJECT_ID('WSXML_SFG.SFGCARGAINVENTARIOPRODUCTO_RevisarReprocesarVinculo', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGCARGAINVENTARIOPRODUCTO_RevisarReprocesarVinculo;
GO

CREATE     PROCEDURE WSXML_SFG.SFGCARGAINVENTARIOPRODUCTO_RevisarReprocesarVinculo(@pk_ID_CARGAINVENTARIOPRODUCTO NUMERIC(22,0)) AS
 BEGIN
    DECLARE @xInventarioProducto   NUMERIC(22,0);
    DECLARE @xFechaInventario      DATETIME;
    DECLARE @xVinculado            CHAR(1);
    DECLARE @xOrdenDeCompraDetalle NUMERIC(22,0);
    DECLARE @xProducto             NUMERIC(22,0);
    DECLARE @xCantidad             NUMERIC(22,0);
    DECLARE @xValor                FLOAT;
    DECLARE @xProcessTimeStamp     DATETIME = GETDATE();
    DECLARE @xCurrentStatus        CHAR(1);
    DECLARE @xRevenueDetail        FLOAT = 0;
    DECLARE @xRevenueParent        FLOAT = 0;
   
  SET NOCOUNT ON;
    SELECT @xInventarioProducto = ID_INVENTARIOPRODUCTO, @xFechaInventario = FECHAINVENTARIO, @xProducto = CODPRODUCTO, @xCantidad = CANTIDAD, @xValor = VALOR, @xCurrentStatus = VINCULADO FROM WSXML_SFG.INVENTARIOPRODUCTO, WSXML_SFG.CARGAINVENTARIOPRODUCTO
    WHERE CODINVENTARIOPRODUCTO = ID_INVENTARIOPRODUCTO AND ID_CARGAINVENTARIOPRODUCTO = @pk_ID_CARGAINVENTARIOPRODUCTO;
    IF @xCurrentStatus <> 'F' BEGIN
      RAISERROR('-20020 La carga ya ha sido vinculada con una orden de compra', 16, 1);
    END 
    /* Revisar Vinculo */
      DECLARE @possiblelinks WSXML_SFG.LONGNUMBERARRAY;
      DECLARE @totaloclinked NUMERIC(22,0);
      DECLARE @totalocdetail NUMERIC(22,0);
    BEGIN
	  INSERT INTO @possiblelinks
      SELECT ID_ORDENDECOMPRADETALLE  
	  FROM WSXML_SFG.ORDENDECOMPRA ODC
		INNER JOIN WSXML_SFG.ORDENDECOMPRADETALLE OCD ON (OCD.CODORDENDECOMPRA = ODC.ID_ORDENDECOMPRA)
      WHERE ODC.ESTADOAPROBACION  = 'A'
        AND OCD.CODPRODUCTO       = @xProducto
        AND OCD.CANTIDAD          = @xCantidad
        AND OCD.VALOR             = @xValor
        AND OCD.CARGADO           = 'F'
        AND ODC.Fechaemision <= @xFechaInventario /*rnino (12/2/2010): La fecha de la carga debe ser mayor o igual a la fecha de la orden de compra */
      ORDER BY ODC.FECHAEMISION, ODC.FECHAHORASOLICITUD;

      IF (SELECT COUNT(*) FROM @possiblelinks) > 0 BEGIN

		
			DECLARE ipx CURSOR FOR SELECT IDVALUE FROM @possiblelinks
			OPEN ipx 

			declare @ipx_ID_ORDENDECOMPRADETALLE NUMERIC(38,0)

			FETCH NEXT FROM ipx INTO @ipx_ID_ORDENDECOMPRADETALLE

			WHILE (@@FETCH_STATUS = 0)
			BEGIN
        
		        SET @xVinculado            = 'T';

				SET @xOrdenDeCompraDetalle = @ipx_ID_ORDENDECOMPRADETALLE
				SELECT @totalocdetail = COUNT(ID_ORDENDECOMPRADETALLE), @totaloclinked = SUM(CASE WHEN CARGADO = 'T' THEN 1 ELSE 0 END) FROM WSXML_SFG.ORDENDECOMPRADETALLE
				WHERE CODORDENDECOMPRA = (SELECT CODORDENDECOMPRA FROM WSXML_SFG.ORDENDECOMPRADETALLE WHERE ID_ORDENDECOMPRADETALLE = @xOrdenDeCompraDetalle);
				IF @totalocdetail <= @totaloclinked + 1 BEGIN
				  UPDATE WSXML_SFG.ORDENDECOMPRA SET RECIBIDO = 'T', FECHAHORARECIBIDO = @xProcessTimeStamp WHERE ID_ORDENDECOMPRA = (SELECT CODORDENDECOMPRA FROM WSXML_SFG.ORDENDECOMPRADETALLE WHERE ID_ORDENDECOMPRADETALLE = @xOrdenDeCompraDetalle);
				END
				ELSE BEGIN
				  UPDATE WSXML_SFG.ORDENDECOMPRA SET RECIBIDO = 'P', FECHAHORARECIBIDO = @xProcessTimeStamp WHERE ID_ORDENDECOMPRA = (SELECT CODORDENDECOMPRA FROM WSXML_SFG.ORDENDECOMPRADETALLE WHERE ID_ORDENDECOMPRADETALLE = @xOrdenDeCompraDetalle);
				END 


				FETCH NEXT FROM ipx INTO @ipx_ID_ORDENDECOMPRADETALLE
			END
        
			CLOSE ipx
			DEALLOCATE ipx 

      END 
    END;
    /* Actualizar Registro y Cross Check */
    IF @xVinculado = 'T' AND @xOrdenDeCompraDetalle IS NOT NULL BEGIN
      UPDATE WSXML_SFG.CARGAINVENTARIOPRODUCTO SET VINCULADO = @xVinculado, CODORDENDECOMPRADETALLE = @xOrdenDeCompraDetalle
      WHERE ID_CARGAINVENTARIOPRODUCTO = @pk_ID_CARGAINVENTARIOPRODUCTO;
      UPDATE WSXML_SFG.ORDENDECOMPRADETALLE SET CARGADO = 'T', FECHAHORACARGADO = @xProcessTimeStamp, CODCARGAINVENTARIOPRODUCTO = @pk_ID_CARGAINVENTARIOPRODUCTO
      WHERE ID_ORDENDECOMPRADETALLE = @xOrdenDeCompraDetalle;
      SELECT @xRevenueDetail = VALORDESCUENTO FROM WSXML_SFG.ORDENDECOMPRADETALLE WHERE ID_ORDENDECOMPRADETALLE = @xOrdenDeCompraDetalle;
    END
    ELSE BEGIN /* Retrieve and assign default */
        DECLARE @xTipoComision    NUMERIC(22,0);
        DECLARE @xValorPorcentual FLOAT = 0;
        DECLARE @xValorTransaccnl FLOAT = 0;
      BEGIN
        BEGIN
          SELECT @xValorPorcentual = VALORPORCENTUAL, @xValorTransaccnl = VALORTRANSACCIONAL FROM WSXML_SFG.PRODUCTOCONTRATO PCT
          LEFT OUTER JOIN WSXML_SFG.PRODCONTRATOHISTORICO PCH ON (PCH.CODPRODUCTOCONTRATO = PCT.ID_PRODUCTOCONTRATO AND PCH.FECHAINICIOVALIDEZ = CONVERT(DATETIME, CONVERT(DATE,@xFechaInventario)))
          LEFT OUTER JOIN WSXML_SFG.RANGOCOMISION         RCM ON (RCM.ID_RANGOCOMISION    = COALESCE(PCH.CODRANGOCOMISION, PCT.CODRANGOCOMISION))
          LEFT OUTER JOIN WSXML_SFG.RANGOCOMISIONDETALLE  RCD ON (RCD.CODRANGOCOMISION    = RCM.ID_RANGOCOMISION)
          WHERE PCT.CODPRODUCTO = @xProducto;
		  IF @@ROWCOUNT  <= 1 BEGIN
			SET @xRevenueDetail = CASE WHEN @xTipoComision IN (1, 3) THEN (@xValor * @xValorPorcentual) / 100 ELSE 0 END +
				  CASE WHEN @xTipoComision IN (2, 3) THEN (@xCantidad * @xValorTransaccnl)    ELSE 0 END;
		  END
        END;
        
      END;
    END 
    UPDATE WSXML_SFG.CARGAINVENTARIOPRODUCTO SET REVENUE = @xRevenueDetail WHERE ID_CARGAINVENTARIOPRODUCTO = @pk_ID_CARGAINVENTARIOPRODUCTO;
    SELECT @xRevenueParent = SUM(REVENUE) FROM WSXML_SFG.CARGAINVENTARIOPRODUCTO WHERE CODINVENTARIOPRODUCTO = @xInventarioProducto;
    UPDATE WSXML_SFG.INVENTARIOPRODUCTO SET REVENUECARGAS = @xRevenueParent WHERE ID_INVENTARIOPRODUCTO = @xInventarioProducto;
  END;
GO
  
  
IF OBJECT_ID('WSXML_SFG.SFGCARGAINVENTARIOPRODUCTO_ObtenerConfiguracionProductos', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGCARGAINVENTARIOPRODUCTO_ObtenerConfiguracionProductos;
GO
CREATE     PROCEDURE WSXML_SFG.SFGCARGAINVENTARIOPRODUCTO_ObtenerConfiguracionProductos AS
  BEGIN
  SET NOCOUNT ON;
      SELECT PRD.ID_PRODUCTO,
             PRD.CODIGOGTECHPRODUCTO,
             PRD.NOMPRODUCTO,
             CPI.CONFIGURACION,
             CPI.DENOMINACION
      FROM WSXML_SFG.PRODUCTO PRD
      INNER JOIN WSXML_SFG.CONFIGPRODUCTOINVENTARIO CPI ON (CPI.CODPRODUCTO = PRD.ID_PRODUCTO);
  END;
GO
