USE SFGPRODU;
--  DDL for Package Body SFGSALDOINACTIVO
--------------------------------------------------------

  /* PACKAGE BODY WSXML_SFG.SFGSALDOINACTIVO */ 

  IF OBJECT_ID('WSXML_SFG.SFGSALDOINACTIVO_UpdateSaldoInactivo', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGSALDOINACTIVO_UpdateSaldoInactivo;
GO

CREATE     PROCEDURE WSXML_SFG.SFGSALDOINACTIVO_UpdateSaldoInactivo(@p_CODPUNTODEVENTA        NUMERIC(22,0),
                                @p_CODLINEADENEGOCIO      NUMERIC(22,0),
                                @p_CODCICLOFACTURACIONPDV NUMERIC(22,0),
                                @p_SALDOGTECH             FLOAT,
                                @P_SALDOFIDUCIA           FLOAT,
                                @p_ID_SALDOINACTIVO_out   NUMERIC(22,0) OUT) AS
 BEGIN
    DECLARE @xACTIVESTATUS NUMERIC(22,0);
   
  SET NOCOUNT ON;
    BEGIN
      SELECT @xACTIVESTATUS = ACTIVE FROM WSXML_SFG.PUNTODEVENTA WHERE ID_PUNTODEVENTA = @p_CODPUNTODEVENTA;
		IF @@ROWCOUNT = 0 BEGIN
			RAISERROR('-20090 El punto de venta no existe', 16, 1);
			RETURN 0;
		END
    END;
    IF @xACTIVESTATUS = 1 BEGIN
      RAISERROR('-20090 El punto de venta esta activo y por tanto su saldo no se puede trasladar', 16, 1);
	  RETURN 0;
    END 
    /* Verify Existence or Create Item */
    BEGIN
      SELECT @p_ID_SALDOINACTIVO_out = ID_SALDOINACTIVO FROM WSXML_SFG.SALDOINACTIVO
      WHERE CODPUNTODEVENTA = @p_CODPUNTODEVENTA AND CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO;
		IF @@ROWCOUNT = 0 
			BEGIN
		  INSERT INTO WSXML_SFG.SALDOINACTIVO (
									 CODPUNTODEVENTA,
									 CODLINEADENEGOCIO,
									 FECHAINACTIVO,
									 SALDOCONTRAGTECH,
									 SALDOAFAVORGTECH,
									 SALDOCONTRAFIDUCIA,
									 SALDOAFAVORFIDUCIA)
		  VALUES (
				  @p_CODPUNTODEVENTA,
				  @p_CODLINEADENEGOCIO,
				  GETDATE(), 0, 0, 0, 0);
		  SET @p_ID_SALDOINACTIVO_out = SCOPE_IDENTITY();
		END
    END;
    /* Update and relay */
      DECLARE @xCurrentSaldoGTECH   FLOAT = 0;
      DECLARE @xCurrentSaldoFiducia FLOAT = 0;
      DECLARE @xExistingSaldoCiclo  NUMERIC(22,0);
    BEGIN
      SELECT @xCurrentSaldoGTECH = SALDOCONTRAGTECH - SALDOAFAVORGTECH, @xCurrentSaldoFiducia = SALDOCONTRAFIDUCIA - SALDOAFAVORFIDUCIA
      FROM WSXML_SFG.SALDOINACTIVO WHERE ID_SALDOINACTIVO = @p_ID_SALDOINACTIVO_out;
      UPDATE WSXML_SFG.SALDOINACTIVO SET SALDOAFAVORGTECH   = CASE WHEN @p_SALDOGTECH   <= 0 THEN ABS(@p_SALDOGTECH)   ELSE 0 END,
                               SALDOAFAVORFIDUCIA = CASE WHEN @P_SALDOFIDUCIA <= 0 THEN ABS(@P_SALDOFIDUCIA) ELSE 0 END,
                               SALDOCONTRAGTECH   = CASE WHEN @p_SALDOGTECH   >  0 THEN ABS(@p_SALDOGTECH)   ELSE 0 END,
                               SALDOCONTRAFIDUCIA = CASE WHEN @P_SALDOFIDUCIA >  0 THEN ABS(@P_SALDOFIDUCIA) ELSE 0 END
      WHERE ID_SALDOINACTIVO = @p_ID_SALDOINACTIVO_out;
      BEGIN
			SELECT @xExistingSaldoCiclo = ID_SALDOINACTIVOFACTURACION FROM WSXML_SFG.SALDOINACTIVOFACTURACION
			WHERE CODSALDOINACTIVO = @p_ID_SALDOINACTIVO_out AND CODCICLOFACTURACIONPDV = @p_CODCICLOFACTURACIONPDV;
		  
			IF @@ROWCOUNT = 0 
			BEGIN
				INSERT INTO WSXML_SFG.SALDOINACTIVOFACTURACION ( CODSALDOINACTIVO, CODCICLOFACTURACIONPDV, VALORAPLICADOGTECH, VALORAPLICADOFIDUCIA)
				VALUES ( @p_ID_SALDOINACTIVO_out, @p_CODCICLOFACTURACIONPDV,
						@xCurrentSaldoGTECH - @p_SALDOGTECH, @xCurrentSaldoFiducia - @P_SALDOFIDUCIA);
				SET @xExistingSaldoCiclo = SCOPE_IDENTITY();
			END
      END;
    END;
  END;

GO

