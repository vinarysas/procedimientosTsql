USE SFGPRODU;
--  DDL for Package Body SFGTAREAEJECUTADA
--------------------------------------------------------

  /* PACKAGE BODY WSXML_SFG.SFGTAREAEJECUTADA */ 

  -- CREATES A NEW RECORD IN THE TAREAEJECUTADA TABLE
  IF OBJECT_ID('WSXML_SFG.SFGTAREAEJECUTADA_ADDRECORD', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGTAREAEJECUTADA_ADDRECORD;
GO

CREATE     PROCEDURE WSXML_SFG.SFGTAREAEJECUTADA_ADDRECORD(@P_ESTADO                 VARCHAR(4000),
                      @P_FECHAEJECUCION         DATETIME,
                      @P_CODUSUARIOMODIFICACION NUMERIC(22,0),
                      @P_CODTAREA               NUMERIC(22,0),
                      @P_ID_TAREAEJECUTADA_OUT  NUMERIC(22,0) OUT) AS
  BEGIN
  SET NOCOUNT ON;
    INSERT INTO WSXML_SFG.TAREAEJECUTADA
      (
       ESTADO,
       FECHAEJECUCION,
       CODUSUARIOMODIFICACION,
       CODTAREA)
    VALUES
      (
       @P_ESTADO,
       @P_FECHAEJECUCION,
       @P_CODUSUARIOMODIFICACION,
       @P_CODTAREA);
    SET @P_ID_TAREAEJECUTADA_OUT = SCOPE_IDENTITY();

  END;
GO

IF OBJECT_ID('WSXML_SFG.SFGTAREAEJECUTADA_RemoveExecution', 'P') IS NOT NULL
DROP PROCEDURE WSXML_SFG.SFGTAREAEJECUTADA_RemoveExecution;
GO

CREATE     PROCEDURE WSXML_SFG.SFGTAREAEJECUTADA_RemoveExecution(@pk_ID_TAREAEJECUTADA NUMERIC(22,0)) AS
 BEGIN
	SET NOCOUNT ON;
    DECLARE @xCurrentState NUMERIC(22,0);
   
   begin try
   
   DECLARE @p_REGISTRADA TINYINT ,@p_INICIADA  TINYINT ,@p_FINALIZADAOK TINYINT , @p_FINALIZADAFALLO TINYINT ,@p_ABORTADA TINYINT ,@p_NOINICIADA	TINYINT ,@p_FINALIZADAADVERTENCIA TINYINT 
  
   EXEC WSXML_SFG.SFGESTADOTAREAEJECUTADA_CONSTANT 
					@p_REGISTRADA      			OUT,
                    @p_INICIADA         		OUT,
                    @p_FINALIZADAOK 			OUT,
                    @p_FINALIZADAFALLO  		OUT,
					@p_ABORTADA  				OUT,
					@p_NOINICIADA  				OUT,
					@p_FINALIZADAADVERTENCIA  	OUT
  
    SELECT @xCurrentState = MAX(CODESTADOTAREA) FROM WSXML_SFG.ESTADOTAREAEJECUTADA WHERE CODTAREAEJECUTADA = @pk_ID_TAREAEJECUTADA AND ACTIVE = 1;
    --IF @xCurrentState IN (SFGESTADOTAREAEJECUTADA.FINALIZADAFALLO, SFGESTADOTAREAEJECUTADA.FINALIZADAADVERTENCIA, SFGESTADOTAREAEJECUTADA.ABORTADA) BEGIN
	IF @xCurrentState IN (@p_FINALIZADAFALLO, @p_FINALIZADAADVERTENCIA, @p_ABORTADA) BEGIN
      DELETE FROM WSXML_SFG.TAREAEJECUTADA WHERE ID_TAREAEJECUTADA = @pk_ID_TAREAEJECUTADA;
    END 
	END TRY
	BEGIN CATCH
	SELECT  NULL;
	END CATCH
  END;
GO

  -- UPDATES A RECORD IN THE TAREAEJECUTADA TABLE.
  IF OBJECT_ID('WSXML_SFG.SFGTAREAEJECUTADA_UPDATERECORD', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGTAREAEJECUTADA_UPDATERECORD;
GO

CREATE     PROCEDURE WSXML_SFG.SFGTAREAEJECUTADA_UPDATERECORD(@PK_ID_TAREAEJECUTADA     NUMERIC(22,0),
                         @P_ESTADO                 VARCHAR(4000),
                         @P_FECHAEJECUCION         DATETIME,
                         @P_CODUSUARIOMODIFICACION NUMERIC(22,0),
                         @P_ACTIVE                 NUMERIC(22,0),
                         @P_CODTAREA               NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
    -- UPDATE THE RECORD WITH THE PASSED PARAMETERS
    UPDATE WSXML_SFG.TAREAEJECUTADA
       SET ESTADO                 = @P_ESTADO,
           FECHAEJECUCION         = @P_FECHAEJECUCION,
           CODUSUARIOMODIFICACION = @P_CODUSUARIOMODIFICACION,
           ACTIVE                 = @P_ACTIVE,
           CODTAREA               = @P_CODTAREA
     WHERE ID_TAREAEJECUTADA = @PK_ID_TAREAEJECUTADA;

    -- MAKE SURE ONLY ONE RECORD IS AFFECTED
    IF @@ROWCOUNT = 0 BEGIN
      RAISERROR('-20054 THE RECORD NO LONGER EXISTS.', 16, 1);
    END 
    IF @@ROWCOUNT > 1 BEGIN
      RAISERROR('-20053 DUPLICATE OBJECT INSTANCES.', 16, 1);
    END 

  END;
GO

  -- DELETES A RECORD FROM THE TAREAEJECUTADA TABLE.

  -- DELETES THE SET OF ROWS FROM THE TAREAEJECUTADA TABLE
  -- THAT MATCH THE SPECIFIED SEARCH CRITERIA.
  -- RETURNS THE NUMBER OF ROWS DELETED AS AN OUTPUT PARAMETER.

  -- RETURNS A SPECIFIC RECORD FROM THE TAREAEJECUTADA TABLE.
  IF OBJECT_ID('WSXML_SFG.SFGTAREAEJECUTADA_GETRECORD', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGTAREAEJECUTADA_GETRECORD;
GO
CREATE     PROCEDURE WSXML_SFG.SFGTAREAEJECUTADA_GETRECORD(@PK_ID_TAREAEJECUTADA NUMERIC(22,0)) AS
 BEGIN
    DECLARE @L_COUNT INTEGER;
   
  SET NOCOUNT ON;

    -- GET THE ROWCOUNT FIRST AND MAKE SURE
    -- ONLY ONE ROW IS RETURNED
    SELECT @L_COUNT = COUNT(*)
      FROM WSXML_SFG.TAREAEJECUTADA
     WHERE ID_TAREAEJECUTADA = @PK_ID_TAREAEJECUTADA;

    IF @L_COUNT = 0 BEGIN
      RAISERROR('-20054 THE RECORD NO LONGER EXISTS.', 16, 1);
    END 

    IF @L_COUNT > 1 BEGIN
      RAISERROR('-20053 DUPLICATE OBJECT INSTANCES.', 16, 1);
    END 

    -- GET THE ROW FROM THE QUERY.  CHECKSUM VALUE WILL BE
    -- RETURNED ALONG THE ROW DATA TO SUPPORT CONCURRENCY.
      SELECT ID_TAREAEJECUTADA,
             TE.CODTAREA,
             T.NOMTAREA,
             TE.ESTADO,
             TE.FECHAEJECUCION,
             TE.FECHAHORAMODIFICACION,
             TE.CODUSUARIOMODIFICACION,
             TE.ACTIVE
      FROM WSXML_SFG.TAREAEJECUTADA TE
      LEFT OUTER JOIN TAREA T
        ON (T.ID_TAREA = TE.CODTAREA)
      WHERE ID_TAREAEJECUTADA = @PK_ID_TAREAEJECUTADA;
  END;
GO

  -- RETURNS A QUERY RESULTSET FROM TABLE TAREAEJECUTADA
  -- GIVEN THE SEARCH CRITERIA AND SORTING CONDITION.
  -- IT WILL RETURN A SUBSET OF THE DATA BASED
  -- ON THE CURRENT PAGE NUMBER AND BATCH SIZE.  TABLE JOINS CAN
  -- BE PERFORMED IF THE JOIN CLAUSE IS SPECIFIED.
  --
  -- IF THE RESULTSET IS NOT EMPTY, IT WILL RETURN:
  --    1) THE TOTAL NUMBER OF ROWS WHICH MATCH THE CONDITION;
  --    2) THE RESULTSET IN THE CURRENT PAGE
  -- IF NOTHING MATCHES THE SEARCH CONDITION, IT WILL RETURN:
  --    1) COUNT IS 0 ;
  --    2) EMPTY RESULTSET.
  IF OBJECT_ID('WSXML_SFG.SFGTAREAEJECUTADA_GETLIST', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGTAREAEJECUTADA_GETLIST;
GO
CREATE     PROCEDURE WSXML_SFG.SFGTAREAEJECUTADA_GETLIST(@P_ACTIVE NUMERIC(22,0)) AS

  BEGIN
  SET NOCOUNT ON;

    -- GET THE ROWS FROM THE QUERY.  CHECKSUM VALUE WILL BE
    -- RETURNED ALONG THE ROW DATA TO SUPPORT CONCURRENCY.
      SELECT ID_TAREAEJECUTADA,
             TE.CODTAREA,
             T.NOMTAREA,
             TE.ESTADO,
             TE.FECHAEJECUCION,
             TE.FECHAHORAMODIFICACION,
             TE.CODUSUARIOMODIFICACION,
             TE.ACTIVE
      FROM WSXML_SFG.TAREAEJECUTADA TE
      LEFT OUTER JOIN TAREA T
        ON (T.ID_TAREA = TE.CODTAREA)
      WHERE TE.ACTIVE = CASE WHEN @P_ACTIVE = -1 THEN TE.ACTIVE ELSE @P_ACTIVE END;

  END;
GO


IF OBJECT_ID('WSXML_SFG.SFGTAREAEJECUTADA_MonitorCompleteTask', 'P') IS NOT NULL
  DROP PROCEDURE "WSXML_SFG"."SFGTAREAEJECUTADA_MonitorCompleteTask";
GO

CREATE     PROCEDURE WSXML_SFG.SFGTAREAEJECUTADA_MonitorCompleteTask(@p_CODTAREAEJECUTADA NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
      SELECT CODTAREAEJECUTADA,
             ID_DETALLETAREAEJECUTADA,
             NOMESTADOTAREA,
             DURACION,
             PORCENT_AVANCE,
             IMAGEN,
             ID_DETALLETAREA
      FROM WSXML_SFG.VW_SHOW_DTLL_TAREA_EJECUTADA
      WHERE CODTAREAEJECUTADA = @p_CODTAREAEJECUTADA;
  END;
GO








