USE SFGPRODU;
--  DDL for Package Body SFGAUDITUSERLOGGING
--------------------------------------------------------

  /* PACKAGE BODY WSXML_SFG.SFGAUDITUSERLOGGING */ 
IF OBJECT_ID('WSXML_SFG.SFGAUDITUSERLOGGING_AuditLogIn', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGAUDITUSERLOGGING_AuditLogIn;
GO

CREATE     PROCEDURE WSXML_SFG.SFGAUDITUSERLOGGING_AuditLogIn(
	@p_CODUSUARIO NUMERIC(22,0), @p_DIRECCIONIP NVARCHAR(2000), @p_ID_AUDITUSERLOGGING_out NUMERIC(22,0) OUT) AS
  -- Guardar un registro de ingreso cuando fue exitoso
  BEGIN
  SET NOCOUNT ON;

    INSERT INTO WSXML_SFG.AUDITUSERLOGGING( CODUSUARIO, CODTIPOLOG, DIRECCIONIP)
    VALUES ( @p_CODUSUARIO, 1, @p_DIRECCIONIP);
    SET @p_ID_AUDITUSERLOGGING_out = SCOPE_IDENTITY();

  END;
GO


 IF OBJECT_ID('WSXML_SFG.SFGAUDITUSERLOGGING_AuditLogInByUsername', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGAUDITUSERLOGGING_AuditLogInByUsername;
GO

CREATE     PROCEDURE WSXML_SFG.SFGAUDITUSERLOGGING_AuditLogInByUsername(@p_USERNAME NVARCHAR(2000), @p_DIRECCIONIP NVARCHAR(2000), @p_ID_AUDITUSERLOGGING_out NUMERIC(22,0) OUT) AS
 BEGIN
	SET NOCOUNT ON;
  -- Guardar un registro de ingreso cuando fue exitoso
    DECLARE @cCODUSUARIO NUMERIC(22,0);
    DECLARE @message NVARCHAR(2000);
   
	BEGIN TRY 
		SET @p_ID_AUDITUSERLOGGING_out = 0;
		SELECT @cCODUSUARIO = ID_USUARIO FROM WSXML_SFG.USUARIO WHERE LOWER(NOMUSUARIO) = LOWER(@p_USERNAME);
		INSERT INTO WSXML_SFG.AUDITUSERLOGGING( CODUSUARIO, CODTIPOLOG, DIRECCIONIP)
		VALUES ( @cCODUSUARIO, 1, @p_DIRECCIONIP);
		SET @p_ID_AUDITUSERLOGGING_out = SCOPE_IDENTITY();
	END TRY
	BEGIN CATCH
		SET @message = 'Log Auditing (Success) failed for user ' + ISNULL(@p_USERNAME, '') + ' at ' + FORMAT(getdate(), 'MON DD/YY HH24:MI') + ': ' + isnull(ERROR_MESSAGE(), '');
		EXEC WSXML_SFG.SFGTMPTRACE_TraceLog @message
	END CATCH
  END;
GO

IF OBJECT_ID('WSXML_SFG.SFGAUDITUSERLOGGING_AuditLogOut', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGAUDITUSERLOGGING_AuditLogOut;
GO

CREATE     PROCEDURE WSXML_SFG.SFGAUDITUSERLOGGING_AuditLogOut(
	@p_CODUSUARIO NUMERIC(22,0), @p_DIRECCIONIP NVARCHAR(2000), @p_ID_AUDITUSERLOGGING_out NUMERIC(22,0) OUT) AS
  -- Guardar un registro de salida
  BEGIN
  SET NOCOUNT ON;

    INSERT INTO WSXML_SFG.AUDITUSERLOGGING( CODUSUARIO, CODTIPOLOG, DIRECCIONIP)
    VALUES ( @p_CODUSUARIO, 2, @p_DIRECCIONIP);
    SET @p_ID_AUDITUSERLOGGING_out = SCOPE_IDENTITY();

  END;
GO

IF OBJECT_ID('WSXML_SFG.SFGAUDITUSERLOGGING_AuditLogError', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGAUDITUSERLOGGING_AuditLogError;
GO

CREATE  PROCEDURE WSXML_SFG.SFGAUDITUSERLOGGING_AuditLogError(@p_USERNAME NVARCHAR(2000), @p_DIRECCIONIP NVARCHAR(2000), @p_ID_AUDITUSERLOGGING_out NUMERIC(22,0) OUT) AS
 BEGIN
  -- Guardar un registro de log no exitoso
    DECLARE @cCODUSUARIO NUMERIC(22,0);
    DECLARE @message NVARCHAR(2000);
   
  SET NOCOUNT ON;

	BEGIN TRY

		BEGIN
			BEGIN TRY
				SELECT @cCODUSUARIO = ID_USUARIO FROM WSXML_SFG.USUARIO WHERE LOWER(NOMUSUARIO) = LOWER(@p_USERNAME);
				IF @@ROWCOUNT = 0
					SET @cCODUSUARIO = 0;
			END TRY
			BEGIN CATCH
				SET @cCODUSUARIO = 0;
			END CATCH
		END

		IF @cCODUSUARIO > 0 BEGIN
		  INSERT INTO WSXML_SFG.AUDITUSERLOGGING( CODUSUARIO, CODTIPOLOG, DIRECCIONIP)
			VALUES ( @cCODUSUARIO, 3, @p_DIRECCIONIP);
		  SET @p_ID_AUDITUSERLOGGING_out = SCOPE_IDENTITY();
		END
		ELSE BEGIN
		  INSERT INTO WSXML_SFG.AUDITUSERLOGGING( USUARIOERROR, CODTIPOLOG, DIRECCIONIP)
		  VALUES ( @p_USERNAME, 3, @p_DIRECCIONIP);
		  SET @p_ID_AUDITUSERLOGGING_out = SCOPE_IDENTITY();
		END
	END TRY
	BEGIN CATCH
		SET @message = 'Log Auditing (Error) failed for user ' + ISNULL(@p_USERNAME, '') + ' at ' + FORMAT(getdate(), 'MON DD/YY HH24:MI') + ': ' + isnull(ERROR_MESSAGE(), '');
		EXEC WSXML_SFG.SFGTMPTRACE_TraceLog @message
	END CATCH
  END;
GO



IF OBJECT_ID('WSXML_SFG.SFGAUDITUSERLOGGING_GetList', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGAUDITUSERLOGGING_GetList;
GO
CREATE  PROCEDURE WSXML_SFG.SFGAUDITUSERLOGGING_GetList(@p_active NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
	  
      SELECT A.ID_AUDITUSERLOGGING,
             A.CODUSUARIO,
             U.NOMUSUARIO,
             U.EMAIL,
             A.CODTIPOLOG,
             T.NOMTIPOLOG,
             A.USUARIOERROR,
             A.DIRECCIONIP,
             A.FECHAHORAMODIFICACION,
             A.ACTIVE
      FROM WSXML_SFG.AUDITUSERLOGGING A
      LEFT OUTER JOIN WSXML_SFG.TIPOLOG T
        ON (T.ID_TIPOLOG = A.CODTIPOLOG)
      LEFT OUTER JOIN WSXML_SFG.USUARIO U
        ON (U.ID_USUARIO = A.CODUSUARIO)
      WHERE A.ACTIVE = CASE WHEN @p_active = -1 THEN A.ACTIVE ELSE @p_active END
      ORDER BY A.FECHAHORAMODIFICACION DESC;
	
  END;
GO

IF OBJECT_ID('WSXML_SFG.SFGAUDITUSERLOGGING_GetListParametros', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGAUDITUSERLOGGING_GetListParametros;
GO

CREATE  PROCEDURE WSXML_SFG.SFGAUDITUSERLOGGING_GetListParametros(@p_ACTIVE        NUMERIC(22,0),
                              @p_CODTIPOLOG    NUMERIC(22,0),
                              @p_USUARIO       NVARCHAR(2000),
                              @p_DIRECCIONIP   NVARCHAR(2000),
                              @p_FECHAINICIO   DATETIME,
                             @p_FECHAFIN      DATETIME
                                           ) AS
 BEGIN
    DECLARE @dFECHAINI DATETIME;
    DECLARE @dFECHAFIN DATETIME;
   
  SET NOCOUNT ON;

    -- Desde las 00:00 hasta las 23:59
    SELECT @dFECHAINI = CONVERT(DATETIME, CONVERT(DATE,@p_FECHAINICIO));
    SELECT @dFECHAFIN = (CONVERT(DATETIME, CONVERT(DATE,@p_FECHAFIN)) + 1) - (1/86400);
	  
      SELECT A.ID_AUDITUSERLOGGING,
             A.CODUSUARIO,
             U.NOMUSUARIO,
             U.EMAIL,
             A.CODTIPOLOG,
             T.NOMTIPOLOG,
             A.USUARIOERROR,
             A.DIRECCIONIP,
             A.FECHAHORAMODIFICACION,
             A.ACTIVE
      FROM WSXML_SFG.AUDITUSERLOGGING A
      LEFT OUTER JOIN WSXML_SFG.TIPOLOG T
        ON (T.ID_TIPOLOG = A.CODTIPOLOG)
      LEFT OUTER JOIN WSXML_SFG.USUARIO U
        ON (U.ID_USUARIO = A.CODUSUARIO)
      WHERE A.CODTIPOLOG = CASE WHEN @p_CODTIPOLOG = -1 THEN A.CODTIPOLOG ELSE @p_CODTIPOLOG END
        AND (U.NOMUSUARIO LIKE '%' + ISNULL(@p_USUARIO, '') + '%' OR A.USUARIOERROR LIKE '%' + ISNULL(@p_USUARIO, '') + '%')
        AND A.DIRECCIONIP = CASE WHEN @p_DIRECCIONIP = '-1' THEN A.DIRECCIONIP ELSE @p_DIRECCIONIP END
        AND A.FECHAHORAMODIFICACION BETWEEN @dFECHAINI AND @dFECHAFIN
        AND A.ACTIVE = CASE WHEN @p_ACTIVE = -1 THEN A.ACTIVE ELSE @p_ACTIVE END
      ORDER BY A.FECHAHORAMODIFICACION DESC;
	
  END
GO

IF OBJECT_ID('WSXML_SFG.SFGAUDITUSERLOGGING_GetTiposLog', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGAUDITUSERLOGGING_GetTiposLog;
GO
CREATE  PROCEDURE WSXML_SFG.SFGAUDITUSERLOGGING_GetTiposLog(@p_active NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
	  
      SELECT ID_TIPOLOG, NOMTIPOLOG, ACTIVE
      FROM WSXML_SFG.TIPOLOG
      WHERE ACTIVE = CASE WHEN @p_active = -1 THEN ACTIVE ELSE @p_active END;
	
  END;

