USE SFGPRODU;
--  DDL for Package Body SFGRETENCIONUVT
--------------------------------------------------------

  /* PACKAGE BODY WSXML_SFG.SFGRETENCIONUVT */ 

  IF OBJECT_ID('WSXML_SFG.SFGRETENCIONUVT_AddRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGRETENCIONUVT_AddRecord;
GO

CREATE     PROCEDURE WSXML_SFG.SFGRETENCIONUVT_AddRecord(@p_VALORUVT               NUMERIC(22,0),
                      @p_VECES                  NUMERIC(22,0),
                      @p_CODLINEADENEGOCIO      NUMERIC(22,0),
                      @p_VALOR                  NUMERIC(22,0),
                      @p_CODUSUARIOMODIFICACION NUMERIC(22,0),
                      @p_ID_RETENCIONUVT_out    NUMERIC(22,0) OUT) AS
 BEGIN
    DECLARE @pcount NUMERIC(22,0);
   
  SET NOCOUNT ON;
    -- Si ya esxiste una retencion con ese producto, desactivar
    SELECT @pcount = COUNT(1) FROM WSXML_SFG.RETENCIONUVT
     WHERE CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO AND ACTIVE = 1;

    IF @pcount > 0 BEGIN
      UPDATE WSXML_SFG.RETENCIONUVT SET ACTIVE = 0
       WHERE CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO AND ACTIVE = 1;
    END 

    INSERT INTO WSXML_SFG.RETENCIONUVT (
                              VALORUVT,
                              VECES,
                              CODLINEADENEGOCIO,
                              VALOR,
                              CODUSUARIOMODIFICACION)
    VALUES (
            @p_VALORUVT,
            @p_VECES,
            @p_CODLINEADENEGOCIO,
            @p_VALOR,
            @p_CODUSUARIOMODIFICACION);
    SET @p_ID_RETENCIONUVT_out = SCOPE_IDENTITY();

  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGRETENCIONUVT_UpdateRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGRETENCIONUVT_UpdateRecord;
GO

CREATE     PROCEDURE WSXML_SFG.SFGRETENCIONUVT_UpdateRecord(@pk_ID_RETENCIONUVT       NUMERIC(22,0),
                         @p_VALORUVT               NUMERIC(22,0),
                         @p_VECES                  NUMERIC(22,0),
                         @p_CODLINEADENEGOCIO            NUMERIC(22,0),
                         @p_VALOR                  NUMERIC(22,0),
                         @p_CODUSUARIOMODIFICACION NUMERIC(22,0),
                         @p_ACTIVE                 NUMERIC(22,0)) AS
 BEGIN
    DECLARE @pcount NUMERIC(22,0);
   
  SET NOCOUNT ON;

    -- Si ya esxiste una retencion con ese producto, desactivar
    SELECT @pcount = COUNT(1) FROM WSXML_SFG.RETENCIONUVT
     WHERE CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO
       AND ID_RETENCIONUVT = @pk_ID_RETENCIONUVT
       AND ACTIVE = 1;

    IF @pcount > 0 BEGIN
      UPDATE WSXML_SFG.RETENCIONUVT SET ACTIVE = 0
       WHERE CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO
         AND ID_RETENCIONUVT = @pk_ID_RETENCIONUVT
         AND ACTIVE = 1;
    END 

    UPDATE WSXML_SFG.RETENCIONUVT
       SET VALORUVT               = @p_VALORUVT,
           VECES                  = @p_VECES,
           CODLINEADENEGOCIO      = @p_CODLINEADENEGOCIO,
           VALOR                  = @p_VALOR,
           CODUSUARIOMODIFICACION = @p_CODUSUARIOMODIFICACION,
           FECHAHORAMODIFICACION  = GETDATE(),
           ACTIVE                 = @p_ACTIVE
     WHERE ID_RETENCIONUVT        = @pk_ID_RETENCIONUVT;

    IF @@rowcount = 0 BEGIN
      RAISERROR('-20054 The record no longer exists.', 16, 1);
    END 
    IF @@rowcount > 1 BEGIN
      RAISERROR('-20053 Duplicate object instances.', 16, 1);
    END 

  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGRETENCIONUVT_DeactivateRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGRETENCIONUVT_DeactivateRecord;
GO

CREATE     PROCEDURE WSXML_SFG.SFGRETENCIONUVT_DeactivateRecord(@pk_ID_RETENCIONUVT NUMERIC(22,0), @p_CODUSUARIOMODIFICACION NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;

    UPDATE WSXML_SFG.RETENCIONUVT
       SET CODUSUARIOMODIFICACION = @p_CODUSUARIOMODIFICACION,
           FECHAHORAMODIFICACION  = GETDATE(),
           ACTIVE                 = 0
     WHERE ID_RETENCIONUVT        = @pk_ID_RETENCIONUVT;

    IF @@rowcount = 0 BEGIN
      RAISERROR('-20054 The record no longer exists.', 16, 1);
    END 
    IF @@rowcount > 1 BEGIN
      RAISERROR('-20053 Duplicate object instances.', 16, 1);
    END 

  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGRETENCIONUVT_GetRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGRETENCIONUVT_GetRecord;
GO
CREATE     PROCEDURE WSXML_SFG.SFGRETENCIONUVT_GetRecord(@pk_ID_RETENCIONUVT NUMERIC(22,0)) AS
 BEGIN
    DECLARE @l_count INTEGER;
   
  SET NOCOUNT ON;

    SELECT @l_count = count(*) FROM WSXML_SFG.RETENCIONUVT
     WHERE ID_RETENCIONUVT = @pk_ID_RETENCIONUVT;

    IF @l_count = 0 BEGIN
      RAISERROR('-20054 The record no longer exists.', 16, 1);
    END 

    IF @l_count > 1 BEGIN
      RAISERROR('-20053 Duplicate object instances.', 16, 1);
    END 

      SELECT R.ID_RETENCIONUVT,
             R.VALORUVT,
             R.VECES,
             R.CODLINEADENEGOCIO,
             P.NOMPRODUCTO,
             P.CODTIPOPRODUCTO,
             T.NOMTIPOPRODUCTO,
             R.VALOR,
             R.FECHAHORAMODIFICACION,
             R.CODUSUARIOMODIFICACION,
             R.ACTIVE
        FROM WSXML_SFG.RETENCIONUVT R
       LEFT OUTER JOIN WSXML_SFG.PRODUCTO P
         ON (P.ID_PRODUCTO = R.CODLINEADENEGOCIO)
       LEFT OUTER JOIN TIPOPRODUCTO T
         ON (T.ID_TIPOPRODUCTO = P.CODTIPOPRODUCTO)
       WHERE ID_RETENCIONUVT = @pk_ID_RETENCIONUVT;
  END;
GO

-- Ajustado
  IF OBJECT_ID('WSXML_SFG.SFGRETENCIONUVT_GetList', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGRETENCIONUVT_GetList;
GO
CREATE     PROCEDURE WSXML_SFG.SFGRETENCIONUVT_GetList(@p_active NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
      SELECT R.ID_RETENCIONUVT,
             R.VALORUVT,
             R.VECES,
             R.CODLINEADENEGOCIO,
             P.NOMPRODUCTO,
             P.CODTIPOPRODUCTO,
             T.NOMTIPOPRODUCTO,
             R.VALOR,
             R.FECHAHORAMODIFICACION,
             R.CODUSUARIOMODIFICACION,
             R.ACTIVE
        FROM WSXML_SFG.RETENCIONUVT R
       LEFT OUTER JOIN WSXML_SFG.PRODUCTO P
         ON (P.ID_PRODUCTO = R.CODLINEADENEGOCIO)
       LEFT OUTER JOIN WSXML_SFG.TIPOPRODUCTO T
         ON (T.ID_TIPOPRODUCTO = P.CODTIPOPRODUCTO)
       WHERE R.ACTIVE = CASE WHEN @p_active = -1 THEN R.ACTIVE ELSE @p_active END;
  END;
GO


 
  IF OBJECT_ID('WSXML_SFG.SFGRETENCIONUVT_CalcularRetencionesUVT', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGRETENCIONUVT_CalcularRetencionesUVT;
GO

CREATE     PROCEDURE WSXML_SFG.SFGRETENCIONUVT_CalcularRetencionesUVT(@p_FECHAARCHIVO DATETIME, @p_CODDETALLETAREAEJECUTADA NUMERIC(22,0), @p_RETVALUE_out NUMERIC(22,0) OUT) AS
 BEGIN



	  SET NOCOUNT ON;
    -- Cursor que obtiene todas las entradas de RegistroFacturacion no consideradas por un ciclo de facturacion
    -- que tienen comisiones > 0 que contemplan retenciones uvt no consideradas ya

    /* CURSOR PARA AGRUPACION POR NIT */

		  DECLARE @VENTAFACT SMALLINT,
        @ANULACION SMALLINT,
		@FREETICKT SMALLINT,
		@PREMIOPAG SMALLINT,
		@RGSTOTROS SMALLINT,
		@VENNOFACT SMALLINT 

	  EXEC WSXML_SFG.SFGTIPOREGISTRO_CONSTANT
						@VENTAFACT OUT,
						@ANULACION OUT,
						@FREETICKT OUT,
						@PREMIOPAG OUT,
						@RGSTOTROS OUT,
						@VENNOFACT OUT

		DECLARE @p_ADMINISTRACION SMALLINT,
		  @p_ARRIENDO       SMALLINT,
		  @p_COLABORACION   SMALLINT,
		  @p_CONCESION      SMALLINT

		EXEC WSXML_SFG.SFGTIPOCONTRATOPDV_CONSTANT 
		  @p_ADMINISTRACION OUT,
		  @p_ARRIENDO       OUT,
		  @p_COLABORACION   OUT,
		  @p_CONCESION      OUT

	DECLARE
		@p_REGISTRADA      			TINYINT,
		@p_INICIADA         		TINYINT,
		@p_FINALIZADAOK 			TINYINT,
		@p_FINALIZADAFALLO  		TINYINT,
		@p_ABORTADA  				TINYINT,
		@p_NOINICIADA  				TINYINT,
		@p_FINALIZADAADVERTENCIA	TINYINT

	EXEC WSXML_SFG.SFGESTADOTAREAEJECUTADA_CONSTANT
				@p_REGISTRADA      			 OUT,
				@p_INICIADA         		 OUT,
				@p_FINALIZADAOK 			 OUT,
				@p_FINALIZADAFALLO  		 OUT,
				@p_ABORTADA  				 OUT,
				@p_NOINICIADA  				 OUT,
				@p_FINALIZADAADVERTENCIA  	 OUT

	DECLARE @p_TIPOINFORMATIVO TINYINT,
		@p_TIPOERROR TINYINT,
		@p_TIPOADVERTENCIA TINYINT,
		@p_TIPOCUALQUIERA TINYINT,
		@p_PROCESONOTIFICACION TINYINT,
		@p_ESTADOABIERTA TINYINT,
		@p_ESTADOCERRADA TINYINT	
			  
	EXEC WSXML_SFG.SFGALERTA_CONSTANT
		@p_TIPOINFORMATIVO OUT,
		@p_TIPOERROR OUT,
		@p_TIPOADVERTENCIA OUT,
		@p_TIPOCUALQUIERA OUT,
		@p_PROCESONOTIFICACION OUT,
		@p_ESTADOABIERTA OUT,
		@p_ESTADOCERRADA OUT	
  BEGIN TRY

    DECLARE cPRODUCTONITXDIA CURSOR LOCAL FOR
      SELECT ARC.ID_ENTRADAARCHIVOCONTROL, REG.IDENTIFICACION,
             UVT.CODLINEADENEGOCIO, UVT.ID_RETENCIONUVT, UVT.VALORUVT, UVT.VECES, UVT.VALOR,
             SUM(CASE WHEN REG.CODTIPOREGISTRO = @VENTAFACT AND REG.COMISIONANTICIPO = 0 THEN REG.VALORCOMISIONNOREDONDEADO
                      WHEN REG.CODTIPOREGISTRO = @ANULACION AND REG.COMISIONANTICIPO = 0 THEN (-1) * REG.VALORCOMISIONNOREDONDEADO ELSE 0 END) TOTALCOMISION
      FROM WSXML_SFG.ENTRADAARCHIVOCONTROL ARC
      INNER JOIN WSXML_SFG.REGISTROFACTURACION REG ON (REG.CODENTRADAARCHIVOCONTROL = ARC.ID_ENTRADAARCHIVOCONTROL)
      INNER JOIN WSXML_SFG.PRODUCTO            PRD ON (PRD.ID_PRODUCTO              = REG.CODPRODUCTO)
      INNER JOIN WSXML_SFG.TIPOPRODUCTO        TPR ON (TPR.ID_TIPOPRODUCTO          = PRD.CODTIPOPRODUCTO)
      INNER JOIN WSXML_SFG.RETENCIONUVT        UVT ON (UVT.CODLINEADENEGOCIO        = TPR.CODLINEADENEGOCIO
                                         AND UVT.ACTIVE                   = 1)
      INNER JOIN RETENCIONUVTREGIMEN URG ON (URG.CODRETENCIONUVT          = UVT.ID_RETENCIONUVT
                                         AND URG.CODCOMPANIA              = PRD.CODCOMPANIA
                                         AND URG.CODREGIMEN               = REG.CODREGIMEN
                                         AND URG.ACTIVE                   = 1)
      WHERE ARC.UVTCALCULADO = 0 -- El cargue no ha sido verificado por UVT
        AND ARC.FECHAARCHIVO = CASE WHEN CONVERT(DATETIME, CONVERT(DATE,@p_FECHAARCHIVO)) = CONVERT(DATETIME, CONVERT(DATE,GETDATE())) THEN ARC.FECHAARCHIVO ELSE CONVERT(DATETIME, CONVERT(DATE,@p_FECHAARCHIVO)) END
        AND REG.CODTIPOCONTRATOPDV IN (@p_ADMINISTRACION, @p_ARRIENDO)
      GROUP BY ARC.ID_ENTRADAARCHIVOCONTROL, REG.IDENTIFICACION,
               UVT.CODLINEADENEGOCIO, UVT.ID_RETENCIONUVT, UVT.VALORUVT, UVT.VECES, UVT.VALOR;
    /* CURSOR PARA AGRUPACION POR CADENA PARA CADENAS */
    DECLARE cPRODUCTOCADENAXDIA CURSOR LOCAL FOR
      SELECT ARC.ID_ENTRADAARCHIVOCONTROL, REG.CODAGRUPACIONPUNTODEVENTA,
             UVT.CODLINEADENEGOCIO, UVT.ID_RETENCIONUVT, UVT.VALORUVT, UVT.VECES, UVT.VALOR,
             SUM(CASE WHEN REG.CODTIPOREGISTRO = @VENTAFACT AND REG.COMISIONANTICIPO = 0 THEN REG.VALORCOMISIONNOREDONDEADO
                      WHEN REG.CODTIPOREGISTRO = @ANULACION AND REG.COMISIONANTICIPO = 0 THEN (-1) * REG.VALORCOMISIONNOREDONDEADO ELSE 0 END) TOTALCOMISION
      FROM WSXML_SFG.ENTRADAARCHIVOCONTROL ARC
      INNER JOIN WSXML_SFG.REGISTROFACTURACION REG ON (REG.CODENTRADAARCHIVOCONTROL = ARC.ID_ENTRADAARCHIVOCONTROL)
      INNER JOIN WSXML_SFG.PRODUCTO            PRD ON (PRD.ID_PRODUCTO              = REG.CODPRODUCTO)
      INNER JOIN WSXML_SFG.TIPOPRODUCTO        TPR ON (TPR.ID_TIPOPRODUCTO          = PRD.CODTIPOPRODUCTO)
      INNER JOIN WSXML_SFG.RETENCIONUVT        UVT ON (UVT.CODLINEADENEGOCIO        = TPR.CODLINEADENEGOCIO
                                         AND UVT.ACTIVE                   = 1)
      INNER JOIN WSXML_SFG.RETENCIONUVTREGIMEN URG ON (URG.CODRETENCIONUVT          = UVT.ID_RETENCIONUVT
                                         AND URG.CODCOMPANIA              = PRD.CODCOMPANIA
                                         AND URG.CODREGIMEN               = REG.CODREGIMEN
                                         AND URG.ACTIVE                   = 1)
      WHERE ARC.UVTCALCULADO = 0   -- El cargue no ha sido verificado por UVT
        AND ARC.FECHAARCHIVO = CASE WHEN CONVERT(DATETIME, CONVERT(DATE,@p_FECHAARCHIVO)) = CONVERT(DATETIME, CONVERT(DATE,GETDATE())) THEN ARC.FECHAARCHIVO ELSE CONVERT(DATETIME, CONVERT(DATE,@p_FECHAARCHIVO)) END
        AND REG.CODTIPOCONTRATOPDV IN (@p_ADMINISTRACION, @p_ARRIENDO)
        AND REG.CODAGRUPACIONPUNTODEVENTA <> WSXML_SFG.AGRUPACION_F(0)
      GROUP BY ARC.ID_ENTRADAARCHIVOCONTROL, REG.CODAGRUPACIONPUNTODEVENTA,
               UVT.CODLINEADENEGOCIO, UVT.ID_RETENCIONUVT, UVT.VALORUVT, UVT.VECES, UVT.VALOR;
    /* CURSOR PARA AGRUPACION POR CADENA PARA INDEPENDIENTES */
    DECLARE cPRODUCTOCADENAINDEPXDIA CURSOR LOCAL FOR
      SELECT ARC.ID_ENTRADAARCHIVOCONTROL, REG.CODPUNTODEVENTA,
             UVT.CODLINEADENEGOCIO, UVT.ID_RETENCIONUVT, UVT.VALORUVT, UVT.VECES, UVT.VALOR,
             SUM(CASE WHEN REG.CODTIPOREGISTRO = @VENTAFACT AND REG.COMISIONANTICIPO = 0 THEN REG.VALORCOMISIONNOREDONDEADO
                      WHEN REG.CODTIPOREGISTRO = @ANULACION AND REG.COMISIONANTICIPO = 0 THEN (-1) * REG.VALORCOMISIONNOREDONDEADO ELSE 0 END) TOTALCOMISION
      FROM WSXML_SFG.ENTRADAARCHIVOCONTROL ARC
      INNER JOIN WSXML_SFG.REGISTROFACTURACION REG ON (REG.CODENTRADAARCHIVOCONTROL = ARC.ID_ENTRADAARCHIVOCONTROL)
      INNER JOIN WSXML_SFG.PRODUCTO            PRD ON (PRD.ID_PRODUCTO              = REG.CODPRODUCTO)
      INNER JOIN WSXML_SFG.TIPOPRODUCTO        TPR ON (TPR.ID_TIPOPRODUCTO          = PRD.CODTIPOPRODUCTO)
      INNER JOIN WSXML_SFG.RETENCIONUVT        UVT ON (UVT.CODLINEADENEGOCIO        = TPR.CODLINEADENEGOCIO
                                         AND UVT.ACTIVE                   = 1)
      INNER JOIN RETENCIONUVTREGIMEN URG ON (URG.CODRETENCIONUVT          = UVT.ID_RETENCIONUVT
                                         AND URG.CODCOMPANIA              = PRD.CODCOMPANIA
                                         AND URG.CODREGIMEN               = REG.CODREGIMEN
                                         AND URG.ACTIVE                   = 1)
      WHERE ARC.UVTCALCULADO = 0   -- El cargue no ha sido verificado por UVT
        AND REG.CODTIPOCONTRATOPDV IN (@p_ADMINISTRACION, @p_ARRIENDO)
        AND ARC.FECHAARCHIVO = CASE WHEN CONVERT(DATETIME, CONVERT(DATE,@p_FECHAARCHIVO)) = CONVERT(DATETIME, CONVERT(DATE,GETDATE())) THEN ARC.FECHAARCHIVO ELSE CONVERT(DATETIME, CONVERT(DATE,@p_FECHAARCHIVO)) END
        AND REG.CODAGRUPACIONPUNTODEVENTA = WSXML_SFG.AGRUPACION_F(0)
      GROUP BY ARC.ID_ENTRADAARCHIVOCONTROL, REG.CODPUNTODEVENTA,
             UVT.CODLINEADENEGOCIO, UVT.ID_RETENCIONUVT, UVT.VALORUVT, UVT.VECES, UVT.VALOR;

    DECLARE @cCODUSUARIOMODIFICACION NUMERIC(22,0) = 1;
    DECLARE @cCOUNTWARNINGS NUMERIC(22,0) = 0;
    DECLARE @cMAXERWARNINGS NUMERIC(22,0) = 10;
    DECLARE @msg VARCHAR(2000);

    DECLARE @cTOTALREGISTROS NUMERIC(22,0) = 0;
    DECLARE @cCOUNTREGISTROS NUMERIC(22,0) = 0;
    DECLARE @cWAITNREGISTROS NUMERIC(22,0) = 5;
    DECLARE @lstARCHIVOSACTUALIZADOS WSXML_SFG.LONGNUMBERARRAY;
    DECLARE @msgARCHIVOSACTUALIZADOS NVARCHAR(2000);
    DECLARE @RetencionUVTxNIT NUMERIC(22,0) = 0;
   

    --SET @lstARCHIVOSACTUALIZADOS = LONGNUMBERARRAY();
    -- PROGRESS BAR: Calcular el numero de registros tentativo a iterar
    SELECT @cTOTALREGISTROS = COUNT(1) FROM WSXML_SFG.ENTRADAARCHIVOCONTROL ARC
		INNER JOIN WSXML_SFG.REGISTROFACTURACION REG ON (REG.CODENTRADAARCHIVOCONTROL = ARC.ID_ENTRADAARCHIVOCONTROL)
    WHERE ARC.UVTCALCULADO = 0
      AND ARC.FECHAARCHIVO = CASE WHEN CONVERT(DATETIME, CONVERT(DATE,@p_FECHAARCHIVO)) = CONVERT(DATETIME, CONVERT(DATE,GETDATE())) THEN ARC.FECHAARCHIVO ELSE CONVERT(DATETIME, CONVERT(DATE,@p_FECHAARCHIVO)) END;


    EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_SetTotalRecords @p_CODDETALLETAREAEJECUTADA, @cTOTALREGISTROS
    BEGIN -- Calcular de acuerdo a parametro RetencionUVTxNIT
	
		BEGIN TRY	
			EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'RetencionUVTxNIT', @RetencionUVTxNIT OUT
		END TRY
		BEGIN CATCH
			SET @RetencionUVTxNIT = 0;
		END CATCH
	END;

	DECLARE @lnARCHIVOCONTRL NUMERIC(22,0)
    DECLARE @lnCODAGRUPACION NUMERIC(22,0)
    DECLARE @lnCODLINEADENEG NUMERIC(22,0)
    DECLARE @cTOTALRETENCION FLOAT;
    DECLARE @cSUMRETENCIONES FLOAT;
    DECLARE @cUNITRETENCION  FLOAT; -- Unidad de retencion calculada (decimal) para distribuir la comision UVT de acuerdo a la comision individual
    DECLARE @lstREGISTROS WSXML_SFG.LONGNUMBERARRAY;
    DECLARE @cntREGISTROS NUMERIC(22,0);

	DECLARE @fileexists NUMERIC(38,0)

	DECLARE @cTHISREGCOMISN FLOAT = 0;
    DECLARE @cTHISRETENCION FLOAT = 0;
    DECLARE @cCODRETUVTREGFACTURACION NUMERIC(22,0);


    IF @RetencionUVTxNIT = 1 BEGIN
    /* CALCULO POR NIT */
      DECLARE tPRODUCTONITXDIA CURSOR FOR  
				SELECT ARC.ID_ENTRADAARCHIVOCONTROL, REG.IDENTIFICACION,
					 UVT.CODLINEADENEGOCIO, UVT.ID_RETENCIONUVT, UVT.VALORUVT, UVT.VECES, UVT.VALOR,
					 SUM(CASE WHEN REG.CODTIPOREGISTRO = @VENTAFACT AND REG.COMISIONANTICIPO = 0 THEN REG.VALORCOMISIONNOREDONDEADO
							  WHEN REG.CODTIPOREGISTRO = @ANULACION AND REG.COMISIONANTICIPO = 0 THEN (-1) * REG.VALORCOMISIONNOREDONDEADO ELSE 0 END) TOTALCOMISION
				  FROM WSXML_SFG.ENTRADAARCHIVOCONTROL ARC
				  INNER JOIN WSXML_SFG.REGISTROFACTURACION REG ON (REG.CODENTRADAARCHIVOCONTROL = ARC.ID_ENTRADAARCHIVOCONTROL)
				  INNER JOIN WSXML_SFG.PRODUCTO            PRD ON (PRD.ID_PRODUCTO              = REG.CODPRODUCTO)
				  INNER JOIN WSXML_SFG.TIPOPRODUCTO        TPR ON (TPR.ID_TIPOPRODUCTO          = PRD.CODTIPOPRODUCTO)
				  INNER JOIN WSXML_SFG.RETENCIONUVT        UVT ON (UVT.CODLINEADENEGOCIO        = TPR.CODLINEADENEGOCIO
													 AND UVT.ACTIVE                   = 1)
				  INNER JOIN RETENCIONUVTREGIMEN URG ON (URG.CODRETENCIONUVT          = UVT.ID_RETENCIONUVT
													 AND URG.CODCOMPANIA              = PRD.CODCOMPANIA
													 AND URG.CODREGIMEN               = REG.CODREGIMEN
													 AND URG.ACTIVE                   = 1)
				  WHERE ARC.UVTCALCULADO = 0 -- El cargue no ha sido verificado por UVT
					AND ARC.FECHAARCHIVO = CASE WHEN CONVERT(DATETIME, CONVERT(DATE,@p_FECHAARCHIVO)) = CONVERT(DATETIME, CONVERT(DATE,GETDATE())) THEN ARC.FECHAARCHIVO ELSE CONVERT(DATETIME, CONVERT(DATE,@p_FECHAARCHIVO)) END
					AND REG.CODTIPOCONTRATOPDV IN (@p_ADMINISTRACION, @p_ARRIENDO)
				  GROUP BY ARC.ID_ENTRADAARCHIVOCONTROL, REG.IDENTIFICACION,
						   UVT.CODLINEADENEGOCIO, UVT.ID_RETENCIONUVT, UVT.VALORUVT, UVT.VECES, UVT.VALOR;
	  OPEN tPRODUCTONITXDIA;
	  DECLARE @tPRODUCTONITXDIA__ID_ENTRADAARCHIVOCONTROL NUMERIC(38,0), @tPRODUCTONITXDIA__IDENTIFICACION NUMERIC(38,0), 
			@tPRODUCTONITXDIA__CODLINEADENEGOCIO NUMERIC(38,0), @tPRODUCTONITXDIA__ID_RETENCIONUVT  NUMERIC(38,0), 
			@tPRODUCTONITXDIA__VALORUVT FLOAT,  @tPRODUCTONITXDIA__VECES NUMERIC(38,0), 
			@tPRODUCTONITXDIA__VALOR FLOAT, @tPRODUCTONITXDIA__TOTALCOMISION FLOAT
	 
	 FETCH tPRODUCTONITXDIA INTO @tPRODUCTONITXDIA__ID_ENTRADAARCHIVOCONTROL, @tPRODUCTONITXDIA__IDENTIFICACION, 
			@tPRODUCTONITXDIA__CODLINEADENEGOCIO, @tPRODUCTONITXDIA__ID_RETENCIONUVT, 
			@tPRODUCTONITXDIA__VALORUVT,  @tPRODUCTONITXDIA__VECES, 
			@tPRODUCTONITXDIA__VALOR, @tPRODUCTONITXDIA__TOTALCOMISION
	 WHILE @@FETCH_STATUS=0
	 BEGIN

		
          SET @lnARCHIVOCONTRL = @tPRODUCTONITXDIA__ID_ENTRADAARCHIVOCONTROL;
          DECLARE @lnIDENTIFICACIN NUMERIC(22,0) = @tPRODUCTONITXDIA__IDENTIFICACION;
          SET @lnCODLINEADENEG = @tPRODUCTONITXDIA__CODLINEADENEGOCIO;
		  
		  BEGIN
			BEGIN TRY
				  -- Volver a verificar que la comision diaria es mayor a la base
					IF @tPRODUCTONITXDIA__TOTALCOMISION > (@tPRODUCTONITXDIA__VALORUVT * @tPRODUCTONITXDIA__VECES) BEGIN
					SET @cTOTALRETENCION = ((@tPRODUCTONITXDIA__TOTALCOMISION * @tPRODUCTONITXDIA__VALOR) / 100);
					-- Distribuir la retencion entre los elementos del registro pertinentes
					SET @cSUMRETENCIONES = 0;
					SET @cUNITRETENCION = (@cTOTALRETENCION / @tPRODUCTONITXDIA__TOTALCOMISION);

					-- Obtener la lista de registros a registrar
					DECLARE @lstREGISTROS_REGCOMISINO WSXML_SFG.REGISTROCOMISION
					INSERT INTO @lstREGISTROS_REGCOMISINO
					SELECT ID_REGISTROFACTURACION, 
							CASE 
								WHEN CODTIPOREGISTRO = @VENTAFACT THEN VALORCOMISIONNOREDONDEADO 
								WHEN CODTIPOREGISTRO = @ANULACION THEN (-1) * VALORCOMISIONNOREDONDEADO ELSE 0 END
					FROM WSXML_SFG.REGISTROFACTURACION REG
					INNER JOIN WSXML_SFG.PRODUCTO     PRD ON (PRD.ID_PRODUCTO     = REG.CODPRODUCTO)
					INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ON (TPR.ID_TIPOPRODUCTO = PRD.CODTIPOPRODUCTO)
					WHERE CODENTRADAARCHIVOCONTROL = @lnARCHIVOCONTRL
					  AND TPR.CODLINEADENEGOCIO    = @lnCODLINEADENEG
					  AND REG.IDENTIFICACION       = @lnIDENTIFICACIN
					  AND COMISIONANTICIPO         = 0;

					IF @@ROWCOUNT > 0 BEGIN
					  DECLARE ixREGISTRO CURSOR FOR SELECT * FROM  @lstREGISTROS_REGCOMISINO
					  OPEN ixREGISTRO

					  DECLARE @ixREGISTRO__ID_REGISTROFACTURACION NUMERIC(38,0), @ixREGISTRO__VALORCOMISION FLOAT
					  FETCH NEXT  FROM ixREGISTRO INTO @ixREGISTRO__ID_REGISTROFACTURACION, @ixREGISTRO__VALORCOMISION

						WHILE (@@FETCH_STATUS = 0)
						BEGIN
							SET  @cTHISREGCOMISN = @ixREGISTRO__VALORCOMISION
							SET @cTHISRETENCION  = 0;
							
							BEGIN
							  IF @cTHISREGCOMISN <> 0 BEGIN
									SET @cTHISRETENCION = ROUND(@cTHISREGCOMISN * @cUNITRETENCION,0);
									DECLARE @l_CODTIPOREGISTRO NUMERIC(38,0) = CASE WHEN @cTHISREGCOMISN >= 0
																   THEN @VENTAFACT
																   ELSE @ANULACION END

									EXEC WSXML_SFG.SFGRETUVTREGFACTURACION_AddRecord 
															@tPRODUCTONITXDIA__ID_RETENCIONUVT,
															  @lnARCHIVOCONTRL,
															  @ixREGISTRO__ID_REGISTROFACTURACION,
															  @l_CODTIPOREGISTRO,
															  @cTHISRETENCION,
															  @RetencionUVTxNIT,
															  @cCODUSUARIOMODIFICACION,
															  @cCODRETUVTREGFACTURACION OUT
									IF @cCODRETUVTREGFACTURACION > 0 BEGIN
							  SET @cSUMRETENCIONES = @cSUMRETENCIONES + @cTHISRETENCION;
							  -- Restar de la comision
								EXEC WSXML_SFG.SFGREGISTROFACTURACION_RetencionSobreComision 
																			@ixREGISTRO__ID_REGISTROFACTURACION,
																			cTHISRETENCION,
																			@cCODUSUARIOMODIFICACION
							END 

									-- Actualizar la tarea
									SET @cCOUNTREGISTROS = @cCOUNTREGISTROS + 1;
									IF (@cCOUNTREGISTROS % @cWAITNREGISTROS) = 0 BEGIN
								EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA, @cCOUNTREGISTROS
							  COMMIT;
							END 
								END 
							END;

							FETCH NEXT  FROM ixREGISTRO INTO @ixREGISTRO__ID_REGISTROFACTURACION, @ixREGISTRO__VALORCOMISION
						END;

						CLOSE ixREGISTRO;
						DEALLOCATE ixREGISTRO;
					 END 

					-- /* INSERCION NO DUPLICADA EN LISTA DE ARCHIVOS ACTUALIZADOS */
					--CASE WHEN NOT lstARCHIVOSACTUALIZADOS.Exists(@tPRODUCTONITXDIA__ID_ENTRADAARCHIVOCONTROL) THEN
					IF (SELECT COUNT(*) FROM @lstARCHIVOSACTUALIZADOS WHERE IDVALUE = @tPRODUCTONITXDIA__ID_ENTRADAARCHIVOCONTROL) = 0 BEGIN
						SET @fileexists = 0;
						BEGIN
							BEGIN TRY
					
								IF (SELECT COUNT(*) FROM @lstARCHIVOSACTUALIZADOS) > 0 BEGIN
									DECLARE ix CURSOR FOR SELECT IDVALUE FROM @lstARCHIVOSACTUALIZADOS
									OPEN ix
					
									DECLARE @ix__IDVALUE NUMERIC(38,0)
									FETCH NEXT FROM ix INTO @ix__IDVALUE
        
									WHILE (@@FETCH_STATUS = 0)
									BEGIN
										IF @ix__IDVALUE = @tPRODUCTONITXDIA__ID_ENTRADAARCHIVOCONTROL BEGIN
										  SET @fileexists = 1;
										END 
										FETCH NEXT FROM ix INTO @ix__IDVALUE
									END;
									CLOSE ix;
									DEALLOCATE ix;
								END 
								IF @fileexists = 0 BEGIN
									INSERT INTO @lstARCHIVOSACTUALIZADOS VALUES(@tPRODUCTONITXDIA__ID_ENTRADAARCHIVOCONTROL)
								END 
							END TRY
							BEGIN CATCH
								SELECT NULL;
							END CATCH
						END;

						COMMIT;
					END 
				  ELSE
					-- Obtener el numero de registros que habria iterado y actualizar tarea
					SELECT @cntREGISTROS = COUNT(1) FROM WSXML_SFG.REGISTROFACTURACION REG
					INNER JOIN WSXML_SFG.PRODUCTO     PRD ON (PRD.ID_PRODUCTO     = REG.CODPRODUCTO)
					INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ON (TPR.ID_TIPOPRODUCTO = PRD.CODTIPOPRODUCTO)
					WHERE CODENTRADAARCHIVOCONTROL = @lnARCHIVOCONTRL
					  AND CODTIPOREGISTRO          = @VENTAFACT
					  AND TPR.CODLINEADENEGOCIO    = @lnCODLINEADENEG
					  AND REG.IDENTIFICACION       = @lnIDENTIFICACIN
					  AND COMISIONANTICIPO = 0;

					IF @cntREGISTROS > 0 BEGIN
						SET @cCOUNTREGISTROS = @cCOUNTREGISTROS + @cntREGISTROS;
						EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA, @cCOUNTREGISTROS
						COMMIT;
					END 
				   END
			END TRY
			BEGIN CATCH
					
					  SET @msg = ERROR_MESSAGE ( ) ;
					  SELECT @msg = ('No se pudo calcular la retencion UVT sobre las comisiones del NIT No. ' + ISNULL(@tPRODUCTONITXDIA__IDENTIFICACION, '') + ' para la linea de negocio ' + ISNULL(WSXML_SFG.LINEADENEGOCIO_NOMBRE_F(@tPRODUCTONITXDIA__CODLINEADENEGOCIO), '') + ': ' + isnull(@msg, ''));
					  EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @p_TIPOADVERTENCIA, 'CALCULORETENCIONUVT', @msg, @cCODUSUARIOMODIFICACION
					  SET @cCOUNTWARNINGS = @cCOUNTWARNINGS + 1;
					  IF @cCOUNTWARNINGS >= @cMAXERWARNINGS BEGIN
						RAISERROR('-20054 Se ha alcanzado el maximo numero de advertencias para el proceso', 16, 1);
					  END 
			 END CATCH
          END
		  FETCH tPRODUCTONITXDIA INTO @tPRODUCTONITXDIA__ID_ENTRADAARCHIVOCONTROL, @tPRODUCTONITXDIA__IDENTIFICACION, 
			@tPRODUCTONITXDIA__CODLINEADENEGOCIO, @tPRODUCTONITXDIA__ID_RETENCIONUVT, 
			@tPRODUCTONITXDIA__VALORUVT,  @tPRODUCTONITXDIA__VECES, 
			@tPRODUCTONITXDIA__VALOR, @tPRODUCTONITXDIA__TOTALCOMISION
	  END;
     CLOSE tPRODUCTONITXDIA;
     DEALLOCATE tPRODUCTONITXDIA;
      
    END 
	ELSE IF @RetencionUVTxNIT = 0 BEGIN
		/* CALCULO DE RETENCION X CADENA PARA CADENAS */
		DECLARE tPRODUCTOCADENAXDIA CURSOR FOR 
			SELECT ARC.ID_ENTRADAARCHIVOCONTROL, REG.CODAGRUPACIONPUNTODEVENTA,
					 UVT.CODLINEADENEGOCIO, UVT.ID_RETENCIONUVT, UVT.VALORUVT, UVT.VECES, UVT.VALOR,
					 SUM(CASE WHEN REG.CODTIPOREGISTRO = @VENTAFACT AND REG.COMISIONANTICIPO = 0 THEN REG.VALORCOMISIONNOREDONDEADO
							  WHEN REG.CODTIPOREGISTRO = @ANULACION AND REG.COMISIONANTICIPO = 0 THEN (-1) * REG.VALORCOMISIONNOREDONDEADO ELSE 0 END) TOTALCOMISION
			  FROM WSXML_SFG.ENTRADAARCHIVOCONTROL ARC
			  INNER JOIN WSXML_SFG.REGISTROFACTURACION REG ON (REG.CODENTRADAARCHIVOCONTROL = ARC.ID_ENTRADAARCHIVOCONTROL)
			  INNER JOIN WSXML_SFG.PRODUCTO            PRD ON (PRD.ID_PRODUCTO              = REG.CODPRODUCTO)
			  INNER JOIN WSXML_SFG.TIPOPRODUCTO        TPR ON (TPR.ID_TIPOPRODUCTO          = PRD.CODTIPOPRODUCTO)
			  INNER JOIN WSXML_SFG.RETENCIONUVT        UVT ON (UVT.CODLINEADENEGOCIO        = TPR.CODLINEADENEGOCIO
												 AND UVT.ACTIVE                   = 1)
			  INNER JOIN WSXML_SFG.RETENCIONUVTREGIMEN URG ON (URG.CODRETENCIONUVT          = UVT.ID_RETENCIONUVT
												 AND URG.CODCOMPANIA              = PRD.CODCOMPANIA
												 AND URG.CODREGIMEN               = REG.CODREGIMEN
												 AND URG.ACTIVE                   = 1)
			  WHERE ARC.UVTCALCULADO = 0   -- El cargue no ha sido verificado por UVT
				AND ARC.FECHAARCHIVO = CASE WHEN CONVERT(DATETIME, CONVERT(DATE,@p_FECHAARCHIVO)) = CONVERT(DATETIME, CONVERT(DATE,GETDATE())) THEN ARC.FECHAARCHIVO ELSE CONVERT(DATETIME, CONVERT(DATE,@p_FECHAARCHIVO)) END
				AND REG.CODTIPOCONTRATOPDV IN (@p_ADMINISTRACION, @p_ARRIENDO)
				AND REG.CODAGRUPACIONPUNTODEVENTA <> WSXML_SFG.AGRUPACION_F(0)
			  GROUP BY ARC.ID_ENTRADAARCHIVOCONTROL, REG.CODAGRUPACIONPUNTODEVENTA,
               UVT.CODLINEADENEGOCIO, UVT.ID_RETENCIONUVT, UVT.VALORUVT, UVT.VECES, UVT.VALOR;
		OPEN tPRODUCTOCADENAXDIA;

		DECLARE @tPRODUCTOCADENAXDIA__ID_ENTRADAARCHIVOCONTROL NUMERIC(38,0), @tPRODUCTOCADENAXDIA__CODAGRUPACIONPUNTODEVENTA NUMERIC(38,0), 
			@tPRODUCTOCADENAXDIA__CODLINEADENEGOCIO NUMERIC(38,0), @tPRODUCTOCADENAXDIA__ID_RETENCIONUVT  NUMERIC(38,0), 
			@tPRODUCTOCADENAXDIA__VALORUVT FLOAT,  @tPRODUCTOCADENAXDIA__VECES NUMERIC(38,0), 
			@tPRODUCTOCADENAXDIA__VALOR FLOAT, @tPRODUCTOCADENAXDIA__TOTALCOMISION FLOAT
	 
		FETCH tPRODUCTOCADENAXDIA INTO @tPRODUCTOCADENAXDIA__ID_ENTRADAARCHIVOCONTROL, @tPRODUCTOCADENAXDIA__CODAGRUPACIONPUNTODEVENTA, 
			@tPRODUCTOCADENAXDIA__CODLINEADENEGOCIO, @tPRODUCTOCADENAXDIA__ID_RETENCIONUVT, 
			@tPRODUCTOCADENAXDIA__VALORUVT,  @tPRODUCTOCADENAXDIA__VECES, 
			@tPRODUCTOCADENAXDIA__VALOR, @tPRODUCTOCADENAXDIA__TOTALCOMISION


			WHILE @@FETCH_STATUS=0
			BEGIN
				BEGIN TRY
					SET @lnARCHIVOCONTRL = @tPRODUCTOCADENAXDIA__ID_ENTRADAARCHIVOCONTROL;
					SET @lnCODAGRUPACION = @tPRODUCTOCADENAXDIA__CODAGRUPACIONPUNTODEVENTA;
					SET @lnCODLINEADENEG = @tPRODUCTOCADENAXDIA__CODLINEADENEGOCIO;

					  BEGIN
					  -- /* Verificar que la comision diaria es mayor a la base */
						IF @tPRODUCTOCADENAXDIA__TOTALCOMISION > (@tPRODUCTOCADENAXDIA__VALORUVT * @tPRODUCTOCADENAXDIA__VECES) BEGIN
							SET @cTOTALRETENCION = ((@tPRODUCTOCADENAXDIA__TOTALCOMISION * @tPRODUCTOCADENAXDIA__VALOR) / 100);
							SET @cSUMRETENCIONES = 0;
							SET @cUNITRETENCION = (@cTOTALRETENCION / @tPRODUCTOCADENAXDIA__TOTALCOMISION);
							-- /* Obtener la lista de registros a registrar X CADENA y distribuir retencion */
							INSERT INTO @lstREGISTROS 
							SELECT ID_REGISTROFACTURACION 
							FROM WSXML_SFG.REGISTROFACTURACION REG
							INNER JOIN WSXML_SFG.PUNTODEVENTA PDV ON (REG.CODPUNTODEVENTA = PDV.ID_PUNTODEVENTA)
							INNER JOIN WSXML_SFG.PRODUCTO PRD ON (PRD.ID_PRODUCTO = REG.CODPRODUCTO)
							INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ON (TPR.ID_TIPOPRODUCTO = PRD.CODTIPOPRODUCTO)
							WHERE CODENTRADAARCHIVOCONTROL      = @lnARCHIVOCONTRL
							  AND CODTIPOREGISTRO               = @VENTAFACT
							  AND TPR.CODLINEADENEGOCIO         = @lnCODLINEADENEG
							  AND PDV.CODAGRUPACIONPUNTODEVENTA = @lnCODAGRUPACION
							  AND COMISIONANTICIPO = 0;

							IF @@ROWCOUNT > 0 BEGIN
								DECLARE ixREGISTRO CURSOR FOR SELECT IDVALUE FROM @lstREGISTROS
								OPEN ixREGISTRO

								DECLARE @ixREGISTRO__IDVALUE NUMERIC(38,0)

								FETCH NEXT FROM ixREGISTRO INTO @ixREGISTRO__IDVALUE
        
								WHILE (@@FETCH_STATUS = 0)
								BEGIN
						
									BEGIN
					  
										SELECT @cTHISREGCOMISN = VALORCOMISIONNOREDONDEADO FROM WSXML_SFG.REGISTROFACTURACION
										WHERE ID_REGISTROFACTURACION = @ixREGISTRO__IDVALUE;
							
										IF @cTHISREGCOMISN > 0 BEGIN
											SET @cTHISRETENCION = ROUND(@cTHISREGCOMISN * @cUNITRETENCION,0);
											EXEC WSXML_SFG.SFGRETUVTREGFACTURACION_AddRecord		
																	  @tPRODUCTOCADENAXDIA__ID_RETENCIONUVT,
																	  @lnARCHIVOCONTRL,
																	  @ixREGISTRO__IDVALUE,
																	  @VENTAFACT,
																	  @cTHISRETENCION,
																	  @RetencionUVTxNIT,
																	  @cCODUSUARIOMODIFICACION,
																	  @cCODRETUVTREGFACTURACION OUT

											IF @cCODRETUVTREGFACTURACION > 0 BEGIN
											SET @cSUMRETENCIONES = @cSUMRETENCIONES + @cTHISRETENCION;
											-- Restar de la comision
											EXEC WSXML_SFG.SFGREGISTROFACTURACION_RetencionSobreComision 
																				@ixREGISTRO__IDVALUE,
																				@cTHISRETENCION,
																				@cCODUSUARIOMODIFICACION
										END 

											-- Actualizar la tarea
											SET @cCOUNTREGISTROS = @cCOUNTREGISTROS + 1;
											IF (@cCOUNTREGISTROS % @cWAITNREGISTROS) = 0 BEGIN
										  EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA, @cCOUNTREGISTROS
										  COMMIT;
										END 
										END 
									END;

									FETCH NEXT FROM ixREGISTRO INTO @ixREGISTRO__IDVALUE
								END;

								CLOSE ixREGISTRO;
								DEALLOCATE ixREGISTRO;
							END 

							-- /* INSERCION NO DUPLICADA EN LISTA DE ARCHIVOS ACTUALIZADOS */
				
							IF (SELECT COUNT(*) FROM @lstARCHIVOSACTUALIZADOS WHERE IDVALUE = @tPRODUCTOCADENAXDIA__ID_ENTRADAARCHIVOCONTROL) = 0 BEGIN
								SET @fileexists = 0;
								BEGIN
									BEGIN TRY
					
										IF (SELECT COUNT(*) FROM @lstARCHIVOSACTUALIZADOS) > 0 BEGIN
										DECLARE ix2 CURSOR FOR SELECT IDVALUE FROM @lstARCHIVOSACTUALIZADOS
										OPEN ix2

										DECLARE @ix2__IDVALUE NUMERIC(38,0)
										FETCH NEXT FROM ix2 INTO @ix2__IDVALUE
        
										WHILE (@@FETCH_STATUS = 0)
										BEGIN
											IF @ix2__IDVALUE = @tPRODUCTOCADENAXDIA__ID_ENTRADAARCHIVOCONTROL BEGIN
												SET @fileexists = 1;
											END 
											FETCH NEXT FROM ix2 INTO @ix2__IDVALUE
										END;

										CLOSE ix;
										DEALLOCATE ix;
									END 

										IF @fileexists = 0 BEGIN
											INSERT INTO @lstARCHIVOSACTUALIZADOS VALUES (@tPRODUCTOCADENAXDIA__ID_ENTRADAARCHIVOCONTROL)
										END 
									END TRY
									BEGIN CATCH
										SELECT NULL;
									END CATCH
                
								END;

								COMMIT;
							END 
						END
						ELSE BEGIN
							-- Obtener el numero de registros que habria iterado y actualizar tarea
							SELECT @cntREGISTROS = COUNT(1) FROM WSXML_SFG.REGISTROFACTURACION REG
							INNER JOIN WSXML_SFG.PUNTODEVENTA PDV ON (REG.CODPUNTODEVENTA = PDV.ID_PUNTODEVENTA)
							INNER JOIN WSXML_SFG.PRODUCTO PRD ON (PRD.ID_PRODUCTO = REG.CODPRODUCTO)
							INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ON (TPR.ID_TIPOPRODUCTO = PRD.CODTIPOPRODUCTO)
							WHERE CODENTRADAARCHIVOCONTROL      = @lnARCHIVOCONTRL
							  AND CODTIPOREGISTRO               = @VENTAFACT
							  AND TPR.CODLINEADENEGOCIO         = @lnCODLINEADENEG
							  AND PDV.CODAGRUPACIONPUNTODEVENTA = @lnCODAGRUPACION
							  AND COMISIONANTICIPO = 0;

							IF @cntREGISTROS > 0 BEGIN
							  SET @cCOUNTREGISTROS = @cCOUNTREGISTROS + @cntREGISTROS;
							  EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA, @cCOUNTREGISTROS
							  COMMIT;
							END 
						END
					 END

				END TRY
				BEGIN CATCH
						SET @msg = ERROR_MESSAGE ( ) ;
						SET @msg = 'No se pudo calcular la retencion UVT sobre las comisiones de la cadena No. ' + ISNULL(@tPRODUCTOCADENAXDIA__CODAGRUPACIONPUNTODEVENTA, '') + ' para el producto ' + ISNULL(WSXML_SFG.LINEADENEGOCIO_NOMBRE_F(@tPRODUCTOCADENAXDIA__CODLINEADENEGOCIO), '') + ': ' + isnull(@msg, '');
						EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @p_TIPOADVERTENCIA, 'CALCULORETENCIONUVT', @msg, @cCODUSUARIOMODIFICACION
						SET @cCOUNTWARNINGS = @cCOUNTWARNINGS + 1;
						IF @cCOUNTWARNINGS >= @cMAXERWARNINGS BEGIN
							RAISERROR('-20054 Se ha alcanzado el maximo numero de advertencias para el proceso', 16, 1);
						END 
				END CATCH
				
				
				FETCH tPRODUCTOCADENAXDIA INTO @tPRODUCTOCADENAXDIA__ID_ENTRADAARCHIVOCONTROL, @tPRODUCTOCADENAXDIA__CODAGRUPACIONPUNTODEVENTA, 
					@tPRODUCTOCADENAXDIA__CODLINEADENEGOCIO, @tPRODUCTOCADENAXDIA__ID_RETENCIONUVT, 
					@tPRODUCTOCADENAXDIA__VALORUVT,  @tPRODUCTOCADENAXDIA__VECES, 
					@tPRODUCTOCADENAXDIA__VALOR, @tPRODUCTOCADENAXDIA__TOTALCOMISION
			END;

	        CLOSE tPRODUCTOCADENAXDIA;
		    DEALLOCATE tPRODUCTOCADENAXDIA;
	END;

	/* CALCULO DE RETENCION X CADENA PARA INDEPENDIENTES */
	DECLARE tPRODUCTOCADENAINDEPXDIA CURSOR FOR 
		  SELECT ARC.ID_ENTRADAARCHIVOCONTROL, REG.CODPUNTODEVENTA,
				 UVT.CODLINEADENEGOCIO, UVT.ID_RETENCIONUVT, UVT.VALORUVT, UVT.VECES, UVT.VALOR,
				 SUM(CASE WHEN REG.CODTIPOREGISTRO = @VENTAFACT AND REG.COMISIONANTICIPO = 0 THEN REG.VALORCOMISIONNOREDONDEADO
						  WHEN REG.CODTIPOREGISTRO = @ANULACION AND REG.COMISIONANTICIPO = 0 THEN (-1) * REG.VALORCOMISIONNOREDONDEADO ELSE 0 END) TOTALCOMISION
		  FROM WSXML_SFG.ENTRADAARCHIVOCONTROL ARC
		  INNER JOIN WSXML_SFG.REGISTROFACTURACION REG ON (REG.CODENTRADAARCHIVOCONTROL = ARC.ID_ENTRADAARCHIVOCONTROL)
		  INNER JOIN WSXML_SFG.PRODUCTO            PRD ON (PRD.ID_PRODUCTO              = REG.CODPRODUCTO)
		  INNER JOIN WSXML_SFG.TIPOPRODUCTO        TPR ON (TPR.ID_TIPOPRODUCTO          = PRD.CODTIPOPRODUCTO)
		  INNER JOIN WSXML_SFG.RETENCIONUVT        UVT ON (UVT.CODLINEADENEGOCIO        = TPR.CODLINEADENEGOCIO
											 AND UVT.ACTIVE                   = 1)
		  INNER JOIN WSXML_SFG.RETENCIONUVTREGIMEN URG ON (URG.CODRETENCIONUVT          = UVT.ID_RETENCIONUVT
											 AND URG.CODCOMPANIA              = PRD.CODCOMPANIA
											 AND URG.CODREGIMEN               = REG.CODREGIMEN
											 AND URG.ACTIVE                   = 1)
		  WHERE ARC.UVTCALCULADO = 0   -- El cargue no ha sido verificado por UVT
			AND REG.CODTIPOCONTRATOPDV IN (@p_ADMINISTRACION, @p_ARRIENDO)
			AND ARC.FECHAARCHIVO = CASE WHEN CONVERT(DATETIME, CONVERT(DATE,@p_FECHAARCHIVO)) = CONVERT(DATETIME, CONVERT(DATE,GETDATE())) THEN ARC.FECHAARCHIVO ELSE CONVERT(DATETIME, CONVERT(DATE,@p_FECHAARCHIVO)) END
			AND REG.CODAGRUPACIONPUNTODEVENTA = WSXML_SFG.AGRUPACION_F(0)
		  GROUP BY ARC.ID_ENTRADAARCHIVOCONTROL, REG.CODPUNTODEVENTA,
				 UVT.CODLINEADENEGOCIO, UVT.ID_RETENCIONUVT, UVT.VALORUVT, UVT.VECES, UVT.VALOR;

	OPEN tPRODUCTOCADENAINDEPXDIA;

	DECLARE @tPRODUCTOCADENAINDEPXDIA__ID_ENTRADAARCHIVOCONTROL NUMERIC(38,0), @tPRODUCTOCADENAINDEPXDIA__CODPUNTODEVENTA NUMERIC(38,0), 
			@tPRODUCTOCADENAINDEPXDIA__CODLINEADENEGOCIO NUMERIC(38,0), @tPRODUCTOCADENAINDEPXDIA__ID_RETENCIONUVT  NUMERIC(38,0), 
			@tPRODUCTOCADENAINDEPXDIA__VALORUVT FLOAT,  @tPRODUCTOCADENAINDEPXDIA__VECES NUMERIC(38,0), 
			@tPRODUCTOCADENAINDEPXDIA__VALOR FLOAT, @tPRODUCTOCADENAINDEPXDIA__TOTALCOMISION FLOAT


	FETCH NEXT FROM tPRODUCTOCADENAINDEPXDIA INTO  @tPRODUCTOCADENAINDEPXDIA__ID_ENTRADAARCHIVOCONTROL, @tPRODUCTOCADENAINDEPXDIA__CODPUNTODEVENTA, 
			@tPRODUCTOCADENAINDEPXDIA__CODLINEADENEGOCIO, @tPRODUCTOCADENAINDEPXDIA__ID_RETENCIONUVT, 
			@tPRODUCTOCADENAINDEPXDIA__VALORUVT,  @tPRODUCTOCADENAINDEPXDIA__VECES, 
			@tPRODUCTOCADENAINDEPXDIA__VALOR, @tPRODUCTOCADENAINDEPXDIA__TOTALCOMISION;

	WHILE @@FETCH_STATUS=0
	BEGIN
          SET @lnARCHIVOCONTRL = @tPRODUCTOCADENAINDEPXDIA__ID_ENTRADAARCHIVOCONTROL;
          DECLARE @lnCODPUNTOVENTA NUMERIC(38,0) = @tPRODUCTOCADENAINDEPXDIA__CODPUNTODEVENTA;
          SET @lnCODLINEADENEG = @tPRODUCTOCADENAINDEPXDIA__CODLINEADENEGOCIO;
          
		
				
				-- /* Verificar que la comision diaria es mayor a la base */
				IF @tPRODUCTOCADENAINDEPXDIA__TOTALCOMISION > (@tPRODUCTOCADENAINDEPXDIA__VALORUVT * @tPRODUCTOCADENAINDEPXDIA__VECES) 
				BEGIN

				BEGIN TRY
					SET @cTOTALRETENCION = ((@tPRODUCTOCADENAINDEPXDIA__TOTALCOMISION * @tPRODUCTOCADENAINDEPXDIA__VALOR) / 100);
					SET @cSUMRETENCIONES = 0;
					SET @cUNITRETENCION = (@cTOTALRETENCION / @tPRODUCTOCADENAINDEPXDIA__TOTALCOMISION);
					-- /* Obtener la lista de registros a registrar X CADENA y distribuir retencion */
					INSERT INTO @lstREGISTROS
					SELECT ID_REGISTROFACTURACION FROM WSXML_SFG.REGISTROFACTURACION REG
					INNER JOIN WSXML_SFG.PRODUCTO PRD ON (PRD.ID_PRODUCTO = REG.CODPRODUCTO)
					INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ON (TPR.ID_TIPOPRODUCTO = PRD.CODTIPOPRODUCTO)
					WHERE CODENTRADAARCHIVOCONTROL      = @lnARCHIVOCONTRL
						AND CODTIPOREGISTRO               = @VENTAFACT
						AND TPR.CODLINEADENEGOCIO         = @lnCODLINEADENEG
						AND CODPUNTODEVENTA               = @lnCODPUNTOVENTA
						AND COMISIONANTICIPO = 0;
					IF @@ROWCOUNT > 0 BEGIN
						DECLARE ixREGISTRO2 CURSOR FOR SELECT IDVALUE FROM @lstREGISTROS
						OPEN ixREGISTRO2
						DECLARE @ixREGISTRO2__IDVALUE NUMERIC(38,0)
						FETCH NEXT FROM ixREGISTRO2 INTO @ixREGISTRO2__IDVALUE
        
						WHILE (@@FETCH_STATUS = 0)
						BEGIN

			  
							SET @cTHISREGCOMISN = 0;
							SET @cTHISRETENCION = 0;
                  
							BEGIN
								SELECT @cTHISREGCOMISN = VALORCOMISIONNOREDONDEADO FROM WSXML_SFG.REGISTROFACTURACION
								WHERE ID_REGISTROFACTURACION = @ixREGISTRO__IDVALUE;
								IF @cTHISREGCOMISN > 0 BEGIN
									SET @cTHISRETENCION = ROUND(@cTHISREGCOMISN * @cUNITRETENCION,0);
									EXEC WSXML_SFG.SFGRETUVTREGFACTURACION_AddRecord @tPRODUCTOCADENAINDEPXDIA__ID_RETENCIONUVT,
																@lnARCHIVOCONTRL,
																@ixREGISTRO__IDVALUE,
																@VENTAFACT,
																@cTHISRETENCION,
																@RetencionUVTxNIT,
																@cCODUSUARIOMODIFICACION,
																@cCODRETUVTREGFACTURACION OUT
									IF @cCODRETUVTREGFACTURACION > 0 BEGIN
									SET @cSUMRETENCIONES = @cSUMRETENCIONES + @cTHISRETENCION;
									-- Restar de la comision
									EXEC WSXML_SFG.SFGREGISTROFACTURACION_RetencionSobreComision
													@ixREGISTRO__IDVALUE,
													@cTHISRETENCION,
													@cCODUSUARIOMODIFICACION
								END 

									-- Actualizar la tarea
									SET @cCOUNTREGISTROS = @cCOUNTREGISTROS + 1;
									IF (@cCOUNTREGISTROS % @cWAITNREGISTROS) = 0 BEGIN
								EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA, @cCOUNTREGISTROS
								COMMIT;
							END 
								END 
							END;

							FETCH NEXT FROM ixREGISTRO2 INTO @ixREGISTRO2__IDVALUE
						END;

						CLOSE ixREGISTRO2;
						DEALLOCATE ixREGISTRO2;
					END 
					-- /* INSERCION NO DUPLICADA EN LISTA DE ARCHIVOS ACTUALIZADOS */

					IF (SELECT COUNT(*) FROM @lstARCHIVOSACTUALIZADOS WHERE IDVALUE = @tPRODUCTOCADENAINDEPXDIA__ID_ENTRADAARCHIVOCONTROL) = 0 BEGIN
              
						SET @fileexists = 0;
						BEGIN
							BEGIN TRY

								IF (SELECT COUNT(*) FROM @lstARCHIVOSACTUALIZADOS) > 0 BEGIN
								DECLARE ix2 CURSOR FOR SELECT IDVALUE FROM @lstARCHIVOSACTUALIZADOS
					
								OPEN ix2
								DECLARE @ix2_IDVALUE NUMERIC(38,0)
								FETCH NEXT FROM ix2 INTO @ix2_IDVALUE
        
								WHILE (@@FETCH_STATUS = 0)
								BEGIN
									IF @ix2_IDVALUE = @tPRODUCTOCADENAINDEPXDIA__ID_ENTRADAARCHIVOCONTROL BEGIN
										SET @fileexists = 1;
									END 
									FETCH NEXT FROM ix2 INTO @ix2_IDVALUE

								END;

								CLOSE ix2;
								DEALLOCATE ix2;
							END 
								IF @fileexists = 0 BEGIN
									INSERT INTO @lstARCHIVOSACTUALIZADOS VALUES(@tPRODUCTOCADENAINDEPXDIA__ID_ENTRADAARCHIVOCONTROL)
								END 
							END TRY
							BEGIN CATCH
								SELECT NULL;
							END CATCH

							COMMIT;
						END 
					END
					ELSE BEGIN
						-- Obtener el numero de registros que habria iterado y actualizar tarea
						SELECT @cntREGISTROS = COUNT(1) FROM WSXML_SFG.REGISTROFACTURACION REG
						INNER JOIN  WSXML_SFG.PUNTODEVENTA PDV ON (REG.CODPUNTODEVENTA = PDV.ID_PUNTODEVENTA)
						INNER JOIN  WSXML_SFG.PRODUCTO PRD ON (PRD.ID_PRODUCTO = REG.CODPRODUCTO)
						INNER JOIN  WSXML_SFG.TIPOPRODUCTO TPR ON (TPR.ID_TIPOPRODUCTO = PRD.CODTIPOPRODUCTO)
						WHERE CODENTRADAARCHIVOCONTROL      = @lnARCHIVOCONTRL
							AND CODTIPOREGISTRO               = @VENTAFACT
							AND TPR.CODLINEADENEGOCIO         = @lnCODLINEADENEG
							AND CODPUNTODEVENTA               = @lnCODPUNTOVENTA
							AND COMISIONANTICIPO = 0;
						IF @cntREGISTROS > 0 BEGIN
							SET @cCOUNTREGISTROS = @cCOUNTREGISTROS + @cntREGISTROS;
							EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA, @cCOUNTREGISTROS
							COMMIT;
						END 
					END
        
				END TRY
				BEGIN CATCH
					
					SET @msg = ERROR_MESSAGE ( ) ;
					SET @msg = 'No se pudo calcular la retencion UVT sobre las comisiones del punto de venta No. ' + ISNULL(WSXML_SFG.PUNTODEVENTA_CODIGO_F(@tPRODUCTOCADENAINDEPXDIA__CODPUNTODEVENTA), '') + ' para el producto ' + ISNULL(WSXML_SFG.LINEADENEGOCIO_NOMBRE_F(@tPRODUCTOCADENAINDEPXDIA__CODLINEADENEGOCIO), '') + ': ' + isnull(@msg, '');
					EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @p_TIPOADVERTENCIA, 'CALCULORETENCIONUVT', @msg, @cCODUSUARIOMODIFICACION
					SET @cCOUNTWARNINGS = @cCOUNTWARNINGS + 1;
					IF @cCOUNTWARNINGS >= @cMAXERWARNINGS BEGIN
					RAISERROR('-20054 Se ha alcanzado el maximo numero de advertencias para el proceso', 16, 1);
					END
				END CATCH
			END
			FETCH NEXT FROM tPRODUCTOCADENAINDEPXDIA INTO  @tPRODUCTOCADENAINDEPXDIA__ID_ENTRADAARCHIVOCONTROL, @tPRODUCTOCADENAINDEPXDIA__CODPUNTODEVENTA, 
			@tPRODUCTOCADENAINDEPXDIA__CODLINEADENEGOCIO, @tPRODUCTOCADENAINDEPXDIA__ID_RETENCIONUVT, 
			@tPRODUCTOCADENAINDEPXDIA__VALORUVT,  @tPRODUCTOCADENAINDEPXDIA__VECES, 
			@tPRODUCTOCADENAINDEPXDIA__VALOR, @tPRODUCTOCADENAINDEPXDIA__TOTALCOMISION;
        END;

    CLOSE tPRODUCTOCADENAINDEPXDIA;
    DEALLOCATE tPRODUCTOCADENAINDEPXDIA;



    -- Componer mensaje de archivos actualizados
    IF (SELECT COUNT(*) FROM @lstARCHIVOSACTUALIZADOS) > 0 BEGIN
      SET @msgARCHIVOSACTUALIZADOS = ': ';
      DECLARE ix3 CURSOR FOR SELECT IDVALUE FROM @lstARCHIVOSACTUALIZADOS
	  DECLARE @ix3__IDVALUE NUMERIC(38,0)
	  FETCH NEXT FROM ix3 INTO @ix3__IDVALUE
      
	  DECLARE @CONTADOR INT = 1
        WHILE (@@FETCH_STATUS = 0)
        BEGIN
			IF @CONTADOR <= 10 BEGIN  -- MAX TEN FILES IN MESSAGE
				DECLARE @tmpCDC NUMERIC(22,0);
				DECLARE @tmpTAR NUMERIC(22,0);
				DECLARE @tmpFILE VARCHAR(100);
			  BEGIN
				BEGIN TRY
					SELECT @tmpTAR = TIPOARCHIVO, @tmpCDC = WSXML_SFG.SFGENTRADAARCHIVOCONTROL_GetCDCNumberByID(ID_ENTRADAARCHIVOCONTROL)
					FROM WSXML_SFG.ENTRADAARCHIVOCONTROL
					WHERE ID_ENTRADAARCHIVOCONTROL = @ix3__IDVALUE
					SET @tmpFILE = (ISNULL(CONVERT(VARCHAR, CASE WHEN @tmpTAR = 1 THEN 'Serv.Comerciales' ELSE 'Juegos' END), '') + ' ' + ISNULL(CONVERT(VARCHAR, @tmpCDC), ''));
					SET @msgARCHIVOSACTUALIZADOS = ISNULL(@msgARCHIVOSACTUALIZADOS, '') + ISNULL(@tmpFILE, '');
					--IF @CONTADOR < lstARCHIVOSACTUALIZADOS.Last BEGIN
					--	SET @msgARCHIVOSACTUALIZADOS = ISNULL(@msgARCHIVOSACTUALIZADOS, '') + ', ';
					--END
				END TRY
				BEGIN CATCH 
					SELECT NULL;
				END CATCH
			  END;

			END 
			SET @CONTADOR = @CONTADOR + 1
			FETCH NEXT FROM ix3 INTO @ix3__IDVALUE
		END;

		CLOSE ix3;
		DEALLOCATE ix3;
    END
    -- Contar el numero de warnings
    IF @cCOUNTWARNINGS > 0 BEGIN
      BEGIN
		BEGIN TRY
			IF (SELECT COUNT(*) FROM @lstARCHIVOSACTUALIZADOS) > 1 BEGIN
			  SET @msg = 'Se han calculado las retenciones UVT para los archivos' + ISNULL(@msgARCHIVOSACTUALIZADOS, '') + '. Sin embargo, algunas retenciones no se pudieron registrar';
			END
			ELSE IF (SELECT COUNT(*) FROM @lstARCHIVOSACTUALIZADOS) = 1 BEGIN
			  SET @msg = 'Se han calculado las retenciones UVT para el archivo' + ISNULL(@msgARCHIVOSACTUALIZADOS, '') + '. Sin embargo, algunas retenciones no se pudieron registrar';
			END
			ELSE BEGIN
			  SET @msg = 'Se han calculado las retenciones UVT para la fecha. Sin embargo, algunas retenciones no se pudieron registrar';
			END 
		END TRY
		BEGIN CATCH
			SET @msg = 'Se han calculado las retenciones UVT para la fecha. Sin embargo, algunas retenciones no se pudieron registrar';
		END CATCH
      END;

      EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_FinalizeExecution @p_CODDETALLETAREAEJECUTADA, @msg
      SET @p_RETVALUE_out = @p_FINALIZADAADVERTENCIA;
    END ELSE BEGIN
      -- Actualizar archivos. No se encontraron mas entradas validas
      UPDATE WSXML_SFG.ENTRADAARCHIVOCONTROL SET UVTCALCULADO = 1
       WHERE FECHAARCHIVO = CASE WHEN CONVERT(DATETIME, CONVERT(DATE,@p_FECHAARCHIVO)) = CONVERT(DATETIME, CONVERT(DATE,GETDATE())) THEN FECHAARCHIVO ELSE CONVERT(DATETIME, CONVERT(DATE,@p_FECHAARCHIVO)) END;

      BEGIN
		BEGIN TRY
			IF (SELECT COUNT(*) FROM @lstARCHIVOSACTUALIZADOS) > 1 BEGIN
			  SET @msg = 'Se han calculado las retenciones UVT para los archivos' + ISNULL(@msgARCHIVOSACTUALIZADOS, '') + '.';
			END
			ELSE IF (SELECT COUNT(*) FROM @lstARCHIVOSACTUALIZADOS) = 1 BEGIN
			  SET @msg = 'Se han calculado las retenciones UVT para el archivo' + ISNULL(@msgARCHIVOSACTUALIZADOS, '') + '.';
			END
			ELSE BEGIN
			  SET @msg = 'Se han calculado las retenciones UVT para la fecha.';
			END 
      
		END TRY
		BEGIN CATCH
			SET @msg = 'Se han calculado las retenciones UVT para la fecha.';
		END CATCH
      END;

	  EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_FinalizeExecution @p_CODDETALLETAREAEJECUTADA, @msg
      SET @p_RETVALUE_out = @p_FINALIZADAOK
    END

  END TRY
  BEGIN CATCH
		SET @msg = 'No se pudo finalizar el calculo de retenciones UVT: ' + isnull(ERROR_MESSAGE ( ) , '')
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_FinalizeExecution @p_CODDETALLETAREAEJECUTADA, @msg
		SET @p_RETVALUE_out = @p_FINALIZADAFALLO;
  END CATCH
END;
GO
