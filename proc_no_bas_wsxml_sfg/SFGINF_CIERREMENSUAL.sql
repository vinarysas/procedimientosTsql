USE SFGPRODU;
--  DDL for Package Body SFGINF_CIERREMENSUAL
--------------------------------------------------------

  /* PACKAGE BODY WSXML_SFG.SFGINF_CIERREMENSUAL */ 

  /* Configuracion mensual facturacion de cierre */
  IF OBJECT_ID('WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyHeaders', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyHeaders;
GO

CREATE     PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyHeaders(@p_CODCICLOFACTURACIONPDV NUMERIC(22,0)) AS
 BEGIN
    DECLARE @sFECHACCLO DATETIME;
    DECLARE @sFECHAFRST DATETIME;
    DECLARE @sFECHALAST DATETIME;
    DECLARE @xFECHAFRST DATETIME;
    DECLARE @xFECHASCND DATETIME;
    DECLARE @xFECHALAST DATETIME;
    DECLARE @lstCICLOSFACTURACION WSXML_SFG.CICLOINFO;
   
  SET NOCOUNT ON;
    SELECT @sFECHACCLO = FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ID_CICLOFACTURACIONPDV = @p_CODCICLOFACTURACIONPDV;
    /* Reporte a partir de prefacturacion + facturacion. Obtener fechas de mes a partir del ciclo seleccionado */
    --WSXML_SFG.SFG_PACKAGE_GetMonthRange(@sFECHACCLO, @sFECHAFRST, @sFECHALAST);
    /* Obtener identificadores de ciclos abarcados por el rango de fechas */
    INSERT INTO @lstCICLOSFACTURACION
	SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAEJECUCION
    FROM (
		SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, NULL AS FECHAINICIO, FECHAEJECUCION 
		FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ACTIVE = 1
		--AND	CONVERT(DATETIME, CONVERT(VARCHAR(7), FECHAEJECUCION, 120) + '-01') = CONVERT(DATETIME, CONVERT(VARCHAR(7), @sFECHACCLO, 120) + '-01') 
		--ORDER BY SECUENCIA
	) T
	
	IF @@ROWCOUNT = 0
      RAISERROR('-20085 No existen ciclos de facturacion a la fecha estipulada', 16, 1);
    
    /* Sobreescribir fechas para cada ciclo, y obtener fechas generales de lista */
    DECLARE ix CURSOR FOR SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAFIN FROM @lstCICLOSFACTURACION 
		OPEN ix
		
        DECLARE @iniDATE DATETIME;
        DECLARE @endDATE DATETIME;
		
		DECLARE @l_ID_CICLOFACTURACIONPDV numeric(38,0), @l_SECUENCIA numeric(38,0), @l_FECHAINICIO datetime, @l_FECHAFIN datetime
		FETCH NEXT FROM ix INTO @l_ID_CICLOFACTURACIONPDV, @l_SECUENCIA, @l_FECHAINICIO, @l_FECHAFIN
        
        WHILE (@@FETCH_STATUS = 0)
			BEGIN
				EXEC WSXML_SFG.SFGCICLOFACTURACIONPDV_GetCicloDateRangeFromID @l_ID_CICLOFACTURACIONPDV, @iniDATE out, @endDATE out

			/*IF ix = lstCICLOSFACTURACION.First BEGIN
			  SET @xFECHAFRST = @iniDATE;
			  SET @xFECHASCND = @endDATE;
			END 
			IF ix = lstCICLOSFACTURACION.Last BEGIN
			  SET @xFECHALAST = @endDATE;
			END */
		FETCH NEXT FROM ix INTO @l_ID_CICLOFACTURACIONPDV, @l_SECUENCIA, @l_FECHAINICIO, @l_FECHAFIN
        END

    CLOSE ix;
    DEALLOCATE ix;
	
    /* Los encabezados de este reporte son: 1 por ciclo dentro de la lista + 2 de corte de mes */
    IF @xFECHAFRST < @sFECHAFRST AND @xFECHALAST < @sFECHALAST BEGIN
        SELECT 1 AS ORDEN,
               WSXML_SFG.SFG_PACKAGE_StringShortRangoDeFechas(@sFECHAFRST, @xFECHASCND)                 AS NOMBRE,
               'SFGINF_CIERREMENSUAL.GetOpeningData'                                   AS PROCEDURENAME,
               /*lstCICLOSFACTURACION(lstCICLOSFACTURACION.First).ID_CICLOFACTURACIONPDV*/ NULL AS ID_CICLOFACTURACIONPDV
        UNION
        SELECT SECUENCIA AS ORDEN,
               '(' + ISNULL(WSXML_SFG.SFG_PACKAGE_GetYearNumber(FECHAFIN), '') + '-' + ISNULL(WSXML_SFG.SFG_PACKAGE_GetWeekNumber(FECHAFIN), '') + ') ' +
               ISNULL(WSXML_SFG.SFG_PACKAGE_StringShortRangoDeFechas(FECHAINICIO, FECHAFIN), '') AS NOMBRE,
               'SFGINF_CIERREMENSUAL.GetWeeklyData'                   AS PROCEDURENAME,
               ID_CICLOFACTURACIONPDV                                 AS ID_CICLOFACTURACIONPDV
        FROM @lstCICLOSFACTURACION
        UNION
        SELECT 999999999 AS ORDEN,
               WSXML_SFG.SFG_PACKAGE_StringShortRangoDeFechas(@xFECHALAST + 1, @sFECHALAST)             AS NOMBRE,
               'WSXML_SFG.SFGINF_CIERREMENSUAL_GetClosureData'                                   AS PROCEDURENAME,
               /*lstCICLOSFACTURACION(lstCICLOSFACTURACION.Last).ID_CICLOFACTURACIONPDV*/ NULL  AS ID_CICLOFACTURACIONPDV
        ORDER BY ORDEN DESC;
    END
    ELSE IF @xFECHAFRST < @sFECHAFRST AND @xFECHALAST = @sFECHALAST BEGIN
        SELECT 1 AS ORDEN,
               SFG_PACKAGE.StringShortRangoDeFechas(@sFECHAFRST, @xFECHASCND)                 AS NOMBRE,
               'SFGINF_CIERREMENSUAL.GetOpeningData'                                     AS PROCEDURENAME,
               /*lstCICLOSFACTURACION(lstCICLOSFACTURACION.First).ID_CICLOFACTURACIONPDV*/ NULL AS ID_CICLOFACTURACIONPDV
        UNION
        SELECT SECUENCIA AS ORDEN,
               '(' + ISNULL(SFG_PACKAGE.GetYearNumber(FECHAFIN), '') + '-' + ISNULL(SFG_PACKAGE.GetWeekNumber(FECHAFIN), '') + ') ' +
               ISNULL(SFG_PACKAGE.StringShortRangoDeFechas(FECHAINICIO, FECHAFIN), '') AS NOMBRE,
               'SFGINF_CIERREMENSUAL.GetWeeklyData'                   AS PROCEDURENAME,
               ID_CICLOFACTURACIONPDV                                 AS ID_CICLOFACTURACIONPDV
        FROM @lstCICLOSFACTURACION
        ORDER BY ORDEN DESC;
    END
    ELSE IF @xFECHAFRST = @sFECHAFRST AND @xFECHALAST < @sFECHALAST BEGIN
        SELECT SECUENCIA AS ORDEN,
               '(' + ISNULL(SFG_PACKAGE.GetYearNumber(FECHAFIN), '') + '-' + ISNULL(SFG_PACKAGE.GetWeekNumber(FECHAFIN), '') + ') ' +
               ISNULL(SFG_PACKAGE.StringShortRangoDeFechas(FECHAINICIO, FECHAFIN), '') AS NOMBRE,
               'SFGINF_CIERREMENSUAL.GetWeeklyData'                   AS PROCEDURENAME,
               ID_CICLOFACTURACIONPDV                                 AS ID_CICLOFACTURACIONPDV
        FROM @lstCICLOSFACTURACION
        UNION
        SELECT 999999999 AS ORDEN,
               SFG_PACKAGE.StringShortRangoDeFechas(@xFECHALAST + 1, @sFECHALAST)             AS NOMBRE,
               'SFGINF_CIERREMENSUAL.GetClosureData'                                   AS PROCEDURENAME,
               /*lstCICLOSFACTURACION(lstCICLOSFACTURACION.Last).ID_CICLOFACTURACIONPDV*/ NULL  AS ID_CICLOFACTURACIONPDV
        ORDER BY ORDEN DESC;
    END
    ELSE BEGIN
        SELECT SECUENCIA AS ORDEN,
               '(' + ISNULL(SFG_PACKAGE.GetYearNumber(FECHAFIN), '') + '-' + ISNULL(SFG_PACKAGE.GetWeekNumber(FECHAFIN), '') + ') ' +
               ISNULL(SFG_PACKAGE.StringShortRangoDeFechas(FECHAINICIO, FECHAFIN), '') AS NOMBRE,
               'SFGINF_CIERREMENSUAL.GetWeeklyData'                   AS PROCEDURENAME,
               ID_CICLOFACTURACIONPDV                                 AS ID_CICLOFACTURACIONPDV
        FROM @lstCICLOSFACTURACION
        ORDER BY ORDEN DESC;
    END 
  END;
GO

  /* Valores de prefacturacion desde la fecha del ciclo seleccionado hasta el inicio del mes */
 
  /* Valores de prefacturacion desde la fecha del ciclo seleccionado hasta el inicio del mes */
  IF OBJECT_ID('WSXML_SFG.SFGINF_CIERREMENSUAL_GetOpeningData', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetOpeningData;
GO

CREATE     PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetOpeningData(@p_CODCICLOFACTURACIONPDV NUMERIC(22,0),
                           @p_CODLINEADENEGOCIO      NUMERIC(22,0),
                           @pg_CADENA                NVARCHAR(2000),
                           @pg_ALIADOESTRATEGICO     NVARCHAR(2000),
                          @pg_PRODUCTO              NVARCHAR(2000)
                           ) AS
 BEGIN
    DECLARE @sFECHACCLO DATETIME;
    DECLARE @sFECHAFRST DATETIME;
    DECLARE @sFECHALAST DATETIME;
   
  SET NOCOUNT ON;
      
    SELECT @sFECHACCLO = FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ID_CICLOFACTURACIONPDV = @p_CODCICLOFACTURACIONPDV;
		EXEC WSXML_SFG.SFG_PACKAGE_GetMonthRange @sFECHACCLO, @sFECHAFRST OUT, @sFECHALAST OUT
         
	  SELECT TPR.NOMTIPOPRODUCTO       AS TIPOPRODUCTO,
             AGP.NOMAGRUPACIONPRODUCTO AS PRODUCTO,
             SUM(ISNULL(NUMINGRESOS - NUMANULACIONES, 0)) AS CANTIDADVENTASBUENAS,
             SUM(ISNULL(INGRESOS - ANULACIONES, 0))       AS VALORVENTASBUENAS,
             -- Valores redondeados
             SUM(ISNULL(IVAPRODUCTO, 0))                  AS IVAPRODUCTO,
             SUM(ISNULL(INGRESOSBRUTOS, 0))               AS INGRESOSBRUTOS,
             SUM(ISNULL(COMISION, 0))                     AS COMISION,
             SUM(ISNULL(IVACOMISION, 0))                  AS IVACOMISION,
             SUM(ISNULL(COMISIONBRUTA, 0))                AS COMISIONBRUTA,
             SUM(ISNULL(RETEUVT + RETEFUENTE, 0))         AS RETEFUENTE,
             SUM(ISNULL(RETEIVA, 0))                      AS RETEIVA,
             SUM(ISNULL(RETEICA, 0))                      AS RETEICA,
             SUM(ISNULL(RETECREE, 0))                      AS RETECREE,
             SUM(ISNULL(COMISIONNETA, 0))                 AS COMISIONNETA,
             SUM(ISNULL(PREMIOSPAGADOS, 0))               AS PREMIOSPAGADOS,

             CASE WHEN PRD.PORCENTAJEFIDUCIA > 0 THEN
             SUM(ISNULL(INGRESOSVALIDOS - COMISIONNETA - PREMIOSPAGADOS, 0)) -
             ROUND(SUM((ISNULL(INGRESOSBRUTOS, 0) * (PRD.PORCENTAJEFIDUCIA / 100)) - ISNULL(PREMIOSPAGADOS, 0)),0)
             ELSE SUM(ISNULL(INGRESOSVALIDOS - COMISIONNETA - PREMIOSPAGADOS, 0)) END AS TOTALAPAGARGTECH,

             CASE WHEN PRD.PORCENTAJEFIDUCIA > 0 THEN
             ROUND(SUM((ISNULL(INGRESOSBRUTOS, 0) * (PRD.PORCENTAJEFIDUCIA / 100)) - ISNULL(PREMIOSPAGADOS, 0)),0)
             ELSE 0 END                                                            AS TOTALAPAGARFIDUCIA
      FROM WSXML_SFG.TIPOPRODUCTO TPR
      INNER JOIN WSXML_SFG.AGRUPACIONPRODUCTO AGP     ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO)
      INNER JOIN WSXML_SFG.PRODUCTO PRD               ON (AGP.ID_AGRUPACIONPRODUCTO = PRD.CODAGRUPACIONPRODUCTO)
      -- Anidacion de emulacion redondeo
      LEFT OUTER JOIN (SELECT CODPUNTODEVENTA, CODPRODUCTO,
                              ROUND(SUM(NUMINGRESOS),0)                 AS NUMINGRESOS,
                              ROUND(SUM(NUMANULACIONES),0)              AS NUMANULACIONES,
                              ROUND(SUM(INGRESOS),0)                    AS INGRESOS,
                              ROUND(SUM(ANULACIONES),0)                 AS ANULACIONES,
                              ROUND(SUM(INGRESOSVALIDOS),0)             AS INGRESOSVALIDOS,
                              ROUND(SUM(IVAPRODUCTO),0)                 AS IVAPRODUCTO,
                              ROUND(SUM(INGRESOSBRUTOS),0)              AS INGRESOSBRUTOS,
                              ROUND(SUM(COMISION + COMISIONANTICIPO),0) AS COMISION,
                              ROUND(SUM(IVACOMISION),0)                 AS IVACOMISION,
                              ROUND(SUM(COMISIONBRUTA),0)               AS COMISIONBRUTA,
                              ROUND(SUM(RETEUVT),0)                     AS RETEUVT,
                              ROUND(SUM(RETEFUENTE),0)                  AS RETEFUENTE,
                              ROUND(SUM(RETEIVA),0)                     AS RETEIVA,
                              ROUND(SUM(RETEICA),0)                     AS RETEICA,
                              ROUND(SUM(RETECREE),0)                    AS RETECREE,
                              ROUND(SUM(COMISIONNETA),0)                AS COMISIONNETA,
                              ROUND(SUM(PREMIOSPAGADOS),0)              AS PREMIOSPAGADOS
                       FROM WSXML_SFG.VW_PREFACTURACION_DIARIA
                       WHERE FECHAARCHIVO BETWEEN @sFECHAFRST AND @sFECHACCLO
                         AND CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO
                       GROUP BY CODPUNTODEVENTA, CODPRODUCTO) PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO)
      WHERE TPR.CODLINEADENEGOCIO    = @p_CODLINEADENEGOCIO
        AND PRD.CODALIADOESTRATEGICO = CASE WHEN @pg_ALIADOESTRATEGICO = '-1' THEN PRD.CODALIADOESTRATEGICO ELSE WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO) END
        AND PRD.ID_PRODUCTO          = CASE WHEN @pg_PRODUCTO = '-1' THEN PRD.ID_PRODUCTO ELSE WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO) END
        /* NULL Filters */
        AND @pg_CADENA = @pg_CADENA
      GROUP BY TPR.NOMTIPOPRODUCTO, AGP.CODTIPOPRODUCTO, AGP.NOMAGRUPACIONPRODUCTO, PRD.PORCENTAJEFIDUCIA
      ORDER BY AGP.CODTIPOPRODUCTO, AGP.NOMAGRUPACIONPRODUCTO;
	
  END;
GO

  /* Valores de prefacturacion desde la fecha del ciclo seleccionado hasta el fin del mes */
IF OBJECT_ID('WSXML_SFG.SFGINF_CIERREMENSUAL_GetClosureData', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetClosureData;
GO

CREATE     PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetClosureData(@p_CODCICLOFACTURACIONPDV NUMERIC(22,0),
                           @p_CODLINEADENEGOCIO      NUMERIC(22,0),
                           @pg_CADENA                NVARCHAR(2000),
                           @pg_ALIADOESTRATEGICO     NVARCHAR(2000),
                          @pg_PRODUCTO              NVARCHAR(2000)
                           ) AS
 BEGIN
    DECLARE @sFECHACCLO DATETIME;
    DECLARE @sFECHAFRST DATETIME;
    DECLARE @sFECHALAST DATETIME;
   
  SET NOCOUNT ON;
    SELECT @sFECHACCLO = FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ID_CICLOFACTURACIONPDV = @p_CODCICLOFACTURACIONPDV;
    EXEC WSXML_SFG.SFG_PACKAGE_GetMonthRange @sFECHACCLO, @sFECHAFRST OUT, @sFECHALAST OUT
	      
      SELECT TPR.NOMTIPOPRODUCTO       AS TIPOPRODUCTO,
             AGP.NOMAGRUPACIONPRODUCTO AS PRODUCTO,
             round(SUM(ISNULL(NUMINGRESOS - NUMANULACIONES, 0)),19) AS CANTIDADVENTASBUENAS,
             round(SUM(ISNULL(INGRESOS - ANULACIONES, 0)),19)       AS VALORVENTASBUENAS,
             round(SUM(ISNULL(IVAPRODUCTO, 0)),19)                  AS IVAPRODUCTO,
             round(SUM(ISNULL(INGRESOSBRUTOS, 0)),19)               AS INGRESOSBRUTOS,
             round(SUM(ISNULL(COMISION, 0)),19)                     AS COMISION,
             round(SUM(ISNULL(IVACOMISION, 0)),19)                  AS IVACOMISION,
             round(SUM(ISNULL(COMISIONBRUTA, 0)),19)                AS COMISIONBRUTA,
             round(SUM(ISNULL(RETEUVT + RETEFUENTE, 0)),19)         AS RETEFUENTE,
             round(SUM(ISNULL(RETEIVA, 0)),19)                      AS RETEIVA,
             round(SUM(ISNULL(RETEICA, 0)),19)                      AS RETEICA,
             round(SUM(ISNULL(RETECREE, 0)),19)                      AS RETECREE,
             round(SUM(ISNULL(COMISIONNETA, 0)),19)                 AS COMISIONNETA,
             round(SUM(ISNULL(PREMIOSPAGADOS, 0)),19)               AS PREMIOSPAGADOS,

             CASE WHEN PRD.PORCENTAJEFIDUCIA > 0 THEN
             round(SUM(ISNULL(INGRESOSVALIDOS - COMISIONNETA - PREMIOSPAGADOS, 0)) -
             ROUND(SUM((ISNULL(INGRESOSBRUTOS, 0) * (PRD.PORCENTAJEFIDUCIA / 100)) - ISNULL(PREMIOSPAGADOS, 0)),0),19)
             ELSE round(SUM(ISNULL(INGRESOSVALIDOS - COMISIONNETA - PREMIOSPAGADOS, 0)),19) END AS TOTALAPAGARGTECH,

             CASE WHEN PRD.PORCENTAJEFIDUCIA > 0 THEN
             round(ROUND(SUM((ISNULL(INGRESOSBRUTOS, 0) * (PRD.PORCENTAJEFIDUCIA / 100)) - ISNULL(PREMIOSPAGADOS, 0)),0),19)
             ELSE 0 END                                                            AS TOTALAPAGARFIDUCIA
      FROM WSXML_SFG.TIPOPRODUCTO TPR
      INNER JOIN WSXML_SFG.AGRUPACIONPRODUCTO AGP     ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO)
      INNER JOIN WSXML_SFG.PRODUCTO PRD               ON (AGP.ID_AGRUPACIONPRODUCTO = PRD.CODAGRUPACIONPRODUCTO)
      LEFT OUTER JOIN (SELECT CODPUNTODEVENTA, CODPRODUCTO,
                              ROUND(SUM(NUMINGRESOS),0)                 AS NUMINGRESOS,
                              ROUND(SUM(NUMANULACIONES),0)              AS NUMANULACIONES,
                              ROUND(SUM(INGRESOS),0)                    AS INGRESOS,
                              ROUND(SUM(ANULACIONES),0)                 AS ANULACIONES,
                              ROUND(SUM(INGRESOSVALIDOS),0)             AS INGRESOSVALIDOS,
                              ROUND(SUM(IVAPRODUCTO),0)                 AS IVAPRODUCTO,
                              ROUND(SUM(INGRESOSBRUTOS),0)              AS INGRESOSBRUTOS,
                              ROUND(SUM(COMISION + COMISIONANTICIPO),0) AS COMISION,
                              ROUND(SUM(IVACOMISION),0)                 AS IVACOMISION,
                              ROUND(SUM(COMISIONBRUTA),0)               AS COMISIONBRUTA,
                              ROUND(SUM(RETEUVT),0)                     AS RETEUVT,
                              ROUND(SUM(RETEFUENTE),0)                  AS RETEFUENTE,
                              ROUND(SUM(RETEIVA),0)                     AS RETEIVA,
                              ROUND(SUM(RETEICA),0)                     AS RETEICA,
                              ROUND(SUM(RETECREE),0)                    AS RETECREE,
                              ROUND(SUM(COMISIONNETA),0)                AS COMISIONNETA,
                              ROUND(SUM(PREMIOSPAGADOS),0)              AS PREMIOSPAGADOS
                       FROM WSXML_SFG.VW_PREFACTURACION_DIARIA
                       WHERE FECHAARCHIVO BETWEEN @sFECHACCLO + 1 AND @sFECHALAST
                         AND CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO
                       GROUP BY CODPUNTODEVENTA, CODPRODUCTO) PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO)
      WHERE TPR.CODLINEADENEGOCIO    = @p_CODLINEADENEGOCIO
        AND PRD.CODALIADOESTRATEGICO = CASE WHEN @pg_ALIADOESTRATEGICO = '-1' THEN PRD.CODALIADOESTRATEGICO ELSE WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO) END
        AND PRD.ID_PRODUCTO          = CASE WHEN @pg_PRODUCTO = '-1' THEN PRD.ID_PRODUCTO ELSE WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO) END
        /* NULL Filters */
        AND @pg_CADENA = @pg_CADENA
      GROUP BY TPR.NOMTIPOPRODUCTO, AGP.CODTIPOPRODUCTO, AGP.NOMAGRUPACIONPRODUCTO, PRD.PORCENTAJEFIDUCIA
      ORDER BY AGP.CODTIPOPRODUCTO, AGP.NOMAGRUPACIONPRODUCTO;
	
  END;
GO

  /* Valores de Facturacion para cuadre semanal */
  IF OBJECT_ID('WSXML_SFG.SFGINF_CIERREMENSUAL_GetWeeklyData', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetWeeklyData;
GO

CREATE     PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetWeeklyData(@p_CODCICLOFACTURACIONPDV NUMERIC(22,0),
                          @p_CODLINEADENEGOCIO      NUMERIC(22,0),
                          @pg_CADENA                NVARCHAR(2000),
                          @pg_ALIADOESTRATEGICO     NVARCHAR(2000),
                         @pg_PRODUCTO              NVARCHAR(2000)) AS
  BEGIN
  SET NOCOUNT ON;
      SELECT TPR.NOMTIPOPRODUCTO       AS TIPOPRODUCTO,
             AGP.NOMAGRUPACIONPRODUCTO AS PRODUCTO,
             round(SUM(ISNULL(CANTIDADVENTA - CANTIDADANULACION, 0)),19)   AS CANTIDADVENTASBUENAS,
             round(SUM(ISNULL(VALORVENTA - VALORANULACION, 0)),19)         AS VALORVENTASBUENAS,
             round(SUM(ISNULL(IMPUESTO_IVA, 0)),19)                        AS IVAPRODUCTO,
             round(SUM(ISNULL(DESCUENTOS, 0)),19)                     AS DESCUENTOS,
             round(SUM(ISNULL(VALORVENTABRUTA, 0)),19)                     AS INGRESOSBRUTOS,
             round(SUM(ISNULL(VALORCOMISION, 0)),19)                       AS COMISION,
             round(SUM(ISNULL(VATCOMISION, 0)),19)                         AS IVACOMISION,
             round(SUM(ISNULL(VALORCOMISIONBRUTA, 0)),19)                  AS COMISIONBRUTA,
             round(SUM(ISNULL(RETENCION_RENTA, 0)),19)                     AS RETEFUENTE,
             -- En VW_SHOW_PDVFACTURACION y VW_SHOW_LDNFACTURACION, RETERENTA INCLUYE UVT
             round(SUM(ISNULL(RETENCION_RETEIVA, 0)),19)                   AS RETEIVA,
             round(SUM(ISNULL(RETENCION_RETEICA, 0)),19)                   AS RETEICA,
             round(SUM(ISNULL(RETENCION_RETECREE, 0)),19)                   AS RETECREE,
             round(SUM(ISNULL(VALORCOMISIONNETA, 0)),19)                   AS COMISIONNETA,
             round(SUM(ISNULL(VALORPREMIOPAGO, 0)),19)                     AS PREMIOSPAGADOS,
             round(SUM(ISNULL(FACTURADOENCONTRAGTECH - FACTURADOAFAVORGTECH, 0)),19)     AS TOTALAPAGARGTECH,
             round(SUM(ISNULL(FACTURADOENCONTRAFIDUCIA - FACTURADOAFAVORFIDUCIA, 0)),19) AS TOTALAPAGARFIDUCIA
      FROM WSXML_SFG.TIPOPRODUCTO TPR
      INNER JOIN WSXML_SFG.AGRUPACIONPRODUCTO AGP          ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO)
      INNER JOIN WSXML_SFG.PRODUCTO PRD                    ON (AGP.ID_AGRUPACIONPRODUCTO = PRD.CODAGRUPACIONPRODUCTO)
      LEFT OUTER JOIN WSXML_SFG.VW_SHOW_PRDFACTURACION PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO AND PRF.ID_CICLOFACTURACIONPDV = @p_CODCICLOFACTURACIONPDV)
      WHERE TPR.CODLINEADENEGOCIO    = @p_CODLINEADENEGOCIO
        AND PRD.CODALIADOESTRATEGICO = CASE WHEN @pg_ALIADOESTRATEGICO = '-1' THEN PRD.CODALIADOESTRATEGICO ELSE WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO) END
        AND PRD.ID_PRODUCTO          = CASE WHEN @pg_PRODUCTO = '-1' THEN PRD.ID_PRODUCTO ELSE WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO) END
        /* NULL Filters */
        AND @pg_CADENA = @pg_CADENA
      GROUP BY TPR.NOMTIPOPRODUCTO, AGP.CODTIPOPRODUCTO, AGP.NOMAGRUPACIONPRODUCTO
      ORDER BY AGP.CODTIPOPRODUCTO, AGP.NOMAGRUPACIONPRODUCTO;
  END;
GO


IF EXISTS (
    SELECT * FROM sys.objects WHERE OBJECT_NAME(object_id) = N'SFGINF_CIERREMENSUAL_GetCiclosFacturacionList'
    AND type IN (N'FN', N'IF', N'TF')
)
    DROP FUNCTION WSXML_SFG.SFGINF_CIERREMENSUAL_GetCiclosFacturacionList
GO



CREATE     FUNCTION WSXML_SFG.SFGINF_CIERREMENSUAL_GetCiclosFacturacionList(@p_STRDATE VARCHAR(4000)) RETURNS 
 @lstCICLOSFACTURACION 
TABLE (
	 ID_CICLOFACTURACIONPDV NUMERIC(38,0), 
	 SECUENCIA NUMERIC(38,0), 
	 FECHAINICIO DATETIME, 
	 FECHAFIN DATETIME
)  AS
 BEGIN
    DECLARE @sFECHAFRST DATETIME;
    DECLARE @sFECHALAST DATETIME;
    DECLARE @xFECHAFRST DATETIME;
    DECLARE @xFECHASCND DATETIME;
    DECLARE @xFECHALAST DATETIME;
    --DECLARE @lstCICLOSFACTURACION WSXML_SFG.CICLOINFO;
    DECLARE @p_DATE DATETIME = WSXML_SFG.SFG_PACKAGE_StringToDate(@p_STRDATE);
   
    EXEC SFG_PACKAGE_GetMonthRange @p_DATE, @sFECHAFRST OUT, @sFECHALAST OUT
    /* Obtener identificadores de ciclos abarcados por el rango de fechas (correospondientes al mes del ciclo solicitado) */
    INSERT INTO @lstCICLOSFACTURACION
	SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAEJECUCION
    FROM (
		SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, NULL AS FECHAINICIO, FECHAEJECUCION,
			ROW_NUMBER() OVER(ORDER BY SECUENCIA ASC) ISD_ROW_NUMBER 
		FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ACTIVE = 1 AND CONVERT(DATETIME, CONVERT(VARCHAR(7), FECHAEJECUCION, 120) + '-01') = CONVERT(DATETIME, CONVERT(VARCHAR(7), @p_DATE, 120) + '-01') 
		--ORDER BY SECUENCIA
		) T
    --IF @@ROWCOUNT = 0 BEGIN
    --  RAISERROR('-20085 No existen ciclos de facturacion a la fecha estipulada',16,1);
    --END 
    /* Sobreescribir fechas para cada ciclo, y obtener fechas generales de lista */
    DECLARE ix CURSOR FOR 
		SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAFIN 
		FROM @lstCICLOSFACTURACION

		OPEN ix

		DECLARE @ix__ID_CICLOFACTURACIONPDV NUMERIC(38,0), @ix__SECUENCIA NUMERIC(38,0), @ix__FECHAINICIO DATETIME, @ix__FECHAFIN DATETIME

        DECLARE @iniDATE DATETIME;
        DECLARE @endDATE DATETIME;
		FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN
		
		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			--lstCICLOSFACTURACION(ix)SET @.FECHAINICIO = @iniDATE;
			--lstCICLOSFACTURACION(ix)SET @.FECHAFIN    = @endDATE;
			/*IF ix = lstCICLOSFACTURACION.First BEGIN
			  SET @xFECHAFRST = @iniDATE;
			  SET @xFECHASCND = @endDATE;
			END 
			IF ix = lstCICLOSFACTURACION.Last BEGIN
			  SET @xFECHALAST = @endDATE;
			END */
			FETCH NEXT FROM ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN
		END;
    
		CLOSE ix;
		DEALLOCATE ix;
    RETURN
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataTrnsccnes', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataTrnsccnes;
GO

CREATE     PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataTrnsccnes(
											@p_CODCICLOFACTURACIONPDV NUMERIC(22,0),
                                            @p_CODLINEADENEGOCIO      NUMERIC(22,0),
                                            @pg_CADENA                NVARCHAR(2000),
                                            @pg_ALIADOESTRATEGICO     NVARCHAR(2000),
                                            @pg_PRODUCTO              NVARCHAR(2000)) AS
  BEGIN										   
    DECLARE @sFECHACCLO DATETIME;
    DECLARE @sFECHAFRST DATETIME;
    DECLARE @sFECHALAST DATETIME;
    DECLARE @xFECHAFRST DATETIME;
    DECLARE @xFECHASCND DATETIME;
    DECLARE @xFECHALAST DATETIME;
    DECLARE @lstPRODUCTOSCOLUMNAS TABLE(COLUMNNAMES VARCHAR(50))
    
    DECLARE @lstCICLOSFACTURACION WSXML_SFG.CICLOINFO;
    DECLARE @strPRODCOLUMNSBILL VARCHAR(2000) = '';
    DECLARE @strPRODCOLUMNSPREB VARCHAR(2000) = '';

	DECLARE @sql NVARCHAR(MAX)

    SELECT @sFECHACCLO = FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ID_CICLOFACTURACIONPDV = @p_CODCICLOFACTURACIONPDV;
    /* Reporte a partir de prefacturacion + facturacion. Obtener fechas de mes a partir del ciclo seleccionado */
    EXEC WSXML_SFG.SFG_PACKAGE_GetMonthRange @sFECHACCLO, @sFECHAFRST OUT, @sFECHALAST OUT
    /* Obtener identificadores de ciclos abarcados por el rango de fechas (correospondientes al mes del ciclo solicitado) */
    INSERT INTO @lstCICLOSFACTURACION
	SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAEJECUCION
    FROM (SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, NULL AS FECHAINICIO, FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ACTIVE = 1 AND CONVERT(DATETIME, CONVERT(VARCHAR(7), FECHAEJECUCION, 120) + '-01') = CONVERT(DATETIME, CONVERT(VARCHAR(7), @sFECHACCLO, 120) + '-01'))T-- ORDER BY SECUENCIA);
    IF @@ROWCOUNT = 0 BEGIN
      RAISERROR('-20085 No existen ciclos de facturación a la fecha estipulada', 16, 1);
    END 
    /* Sobreescribir fechas para cada ciclo, y obtener fechas generales de lista */
    DECLARE ix CURSOR FOR 
		SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAFIN 
		FROM @lstCICLOSFACTURACION

		OPEN ix

		DECLARE @_ultimaFila NUMERIC(38,0) = @@CURSOR_ROWS

		DECLARE @ix__ID_CICLOFACTURACIONPDV NUMERIC(38,0), @ix__SECUENCIA NUMERIC(38,0), @ix__FECHAINICIO DATETIME, @ix__FECHAFIN DATETIME
		DECLARE @ix__ID_CICLOFACTURACIONPDV_FIRST NUMERIC(38,0), @ix__SECUENCIA_FIRST NUMERIC(38,0), @ix__FECHAINICIO_FIRST DATETIME, @ix__FECHAFIN_FIRST DATETIME

        DECLARE @iniDATE DATETIME;
        DECLARE @endDATE DATETIME;
		FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN

		SET @ix__ID_CICLOFACTURACIONPDV_FIRST = @ix__ID_CICLOFACTURACIONPDV
		SET @ix__SECUENCIA_FIRST = @ix__SECUENCIA
		SET @ix__FECHAINICIO_FIRST = @ix__FECHAINICIO
		SET @ix__FECHAFIN_FIRST= @ix__FECHAFIN
		
		DECLARE @_fila INT = 1;
		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			EXEC WSXML_SFG.SFGCICLOFACTURACIONPDV_GetCicloDateRangeFromID @ix__ID_CICLOFACTURACIONPDV, @iniDATE OUT, @endDATE OUT
			SET @ix__FECHAINICIO = @iniDATE;
			SET @ix__FECHAFIN    = @endDATE;

			IF @_fila = 1 BEGIN
			--IF ix = lstCICLOSFACTURACION.First BEGIN
			  SET @xFECHAFRST = @iniDATE;
			  SET @xFECHASCND = @endDATE;
			END 
			--IF ix = lstCICLOSFACTURACION.Last BEGIN
			IF @_fila = @_ultimaFila BEGIN
			  SET @xFECHALAST = @endDATE;
			END

			SET @_fila = @_fila + 1
			FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN
		END;
		CLOSE ix;
		DEALLOCATE ix;
    
	/* Obtener lista de productos */
    --SET @lstPRODUCTOSCOLUMNAS = COLUMNNAMES();
    DECLARE tPRODUCT CURSOR FOR 
			SELECT ID_AGRUPACIONPRODUCTO, AGR.NOMAGRUPACIONPRODUCTO FROM WSXML_SFG.AGRUPACIONPRODUCTO AGR
				INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ON (AGR.CODTIPOPRODUCTO = TPR.ID_TIPOPRODUCTO)
            WHERE TPR.CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO ORDER BY NOMAGRUPACIONPRODUCTO; 
	OPEN tPRODUCT;
	DECLARE @tPRODUCT__ID_AGRUPACIONPRODUCTO NUMERIC(38,0), @tPRODUCT__NOMAGRUPACIONPRODUCTO VARCHAR(255)
	FETCH tPRODUCT INTO @tPRODUCT__ID_AGRUPACIONPRODUCTO, @tPRODUCT__NOMAGRUPACIONPRODUCTO
	 WHILE @@FETCH_STATUS=0
	 BEGIN
        DECLARE @thisCOLUMNNAME VARCHAR(50);
        DECLARE @existsINLIST NUMERIC(22,0) = 0;
      BEGIN
        SET @thisCOLUMNNAME = CONVERT(VARCHAR, '"' + ISNULL(CASE WHEN LEN(@tPRODUCT__NOMAGRUPACIONPRODUCTO) > 30 THEN SUBSTRING(@tPRODUCT__NOMAGRUPACIONPRODUCTO, 0, 30) ELSE @tPRODUCT__NOMAGRUPACIONPRODUCTO END, '') + '"');
        IF (SELECT COUNT(*) FROM @lstPRODUCTOSCOLUMNAS) > 0 BEGIN
			DECLARE ix2 CURSOR FOR SELECT COLUMNNAMES FROM @lstPRODUCTOSCOLUMNAS
			OPEN ix2
			DECLARE @ix2__IDVALUE NUMERIC(38,0)
			FETCH ix2 INTO @ix2__IDVALUE
			 WHILE @@FETCH_STATUS=0
			 BEGIN
				IF @ix2__IDVALUE = @thisCOLUMNNAME BEGIN
					SET @existsINLIST = 1;
				END 
				FETCH ix2 INTO @ix2__IDVALUE
			END;
			CLOSE ix2;
			DEALLOCATE ix2;
        END 
        IF @existsINLIST = 0 BEGIN
          INSERT INTO @lstPRODUCTOSCOLUMNAS VALUES( @thisCOLUMNNAME )
          SET @strPRODCOLUMNSBILL = ISNULL(@strPRODCOLUMNSBILL, '') + ', SUM(CASE WHEN AGP.ID = ' + CONVERT(VARCHAR,@tPRODUCT__ID_AGRUPACIONPRODUCTO) + ' THEN ISNULL(VALOR, 0) ELSE 0 END) AS ' + ISNULL(@thisCOLUMNNAME, '') + ' ';
          SET @strPRODCOLUMNSPREB = ISNULL(@strPRODCOLUMNSPREB, '') + ', SUM(CASE WHEN AGP.ID = ' + CONVERT(VARCHAR,@tPRODUCT__ID_AGRUPACIONPRODUCTO) + ' THEN ISNULL(VALOR, 0) ELSE 0 END) AS ' + ISNULL(@thisCOLUMNNAME, '') + ' ';
        END 
      END;
    FETCH tPRODUCT INTO @tPRODUCT__ID_AGRUPACIONPRODUCTO, @tPRODUCT__NOMAGRUPACIONPRODUCTO
    END;
    CLOSE tPRODUCT;
    DEALLOCATE tPRODUCT;
    /* Abrir el cursor con los datos */
    SET @sql = 

      'SELECT CLI.ID_CICLOFACTURACIONPDV ' +              'AS IDCICLO, ' +
             'CLI.SECUENCIA ' +                           'AS ORDEN, ' +
             'WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CLI.FECHAFIN) ' + 'AS SEMANA, ' +
             'WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CLI.FECHAFIN) ' + 'AS SEMANA1, ' +
             'WSXML_SFG.SFG_PACKAGE_GetYearNumber(CLI.FECHAFIN) ' + 'AS YEARNUMBER, ' +
             'CLI.FECHAINICIO ' +                         'AS FECHAINICIO, ' + ' ' +
             'CLI.FECHAFIN ' +                            'AS FECHAFIN ' + @strPRODCOLUMNSBILL +
      'FROM WSXML_SFG.SFGINF_CIERREMENSUAL_GetCiclosFacturacionList(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHACCLO) + ''') CLI ' +
      'INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ' +                       'ON (1 = 1) ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +          'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                           'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT ID_CICLOFACTURACIONPDV, CODPRODUCTO, CANTIDADVENTA - CANTIDADANULACION AS VALOR ' +
                       'FROM WSXML_SFG.VW_SHOW_PRDFACTURACION) PRF ' + 'ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO AND PRF.ID_CICLOFACTURACIONPDV = CLI.ID_CICLOFACTURACIONPDV) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                   + ' ' END +
      'GROUP BY CLI.ID_CICLOFACTURACIONPDV, CLI.SECUENCIA, CLI.FECHAINICIO, CLI.FECHAFIN ' +

      -- Condition for initial segment that the initial dates do not match
      
		CASE WHEN @xFECHAFRST = @sFECHAFRST THEN ' ' ELSE 'UNION ' +
			'SELECT ' + @ix__ID_CICLOFACTURACIONPDV_FIRST + '													AS IDCICLO,'+
              '-1                                                                                               AS ORDEN, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(@ix__FECHAFIN_FIRST)) +				              '			AS SEMANA, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(@ix__FECHAFIN_FIRST)) +	             ' AS SEMANA1, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetYearNumber(@ix__FECHAFIN_FIRST)) +              '  AS YEARNUMBER, ' +
              'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHAFRST) + ''') ' +                   ' AS FECHAINICIO, ' +
              'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@ix__FECHAFIN_FIRST) + ''') ' + 'AS FECHAFIN ' + @strPRODCOLUMNSPREB + ' ' +
      'FROM WSXML_SFG.TIPOPRODUCTO TPR ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +         'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                          'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT CODPUNTODEVENTA, CODPRODUCTO, ROUND(SUM(NUMINGRESOS - NUMANULACIONES)) AS VALOR ' +
                       'FROM VW_PREFACTURACION_DIARIA ' +
                       'WHERE FECHAARCHIVO BETWEEN WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHAFRST) + ''') AND WSXML_SFG.SFG_PACKAGE_StringToDate(''' + @ix__FECHAFIN + ''') ' +
                         'AND CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
                       'GROUP BY CODPUNTODEVENTA, CODPRODUCTO) PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' +CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                   + ' ' END +
      'GROUP BY TPR.CODLINEADENEGOCIO ' END +

	  -- FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN

      -- Condition for final segment that the final dates are not the same
      CASE WHEN @xFECHALAST = @sFECHALAST THEN ' ' ELSE
      'UNION ' +
      'SELECT ' + CONVERT(VARCHAR,@ix__ID_CICLOFACTURACIONPDV)  +               ' AS IDCICLO, ' +
              '999999999' +                                                                                        ' AS ORDEN, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS SEMANA, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS SEMANA1, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetYearNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS YEARNUMBER, ' +
             'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(CONVERT(DATETIME,@ix__FECHAFIN) + 1) + ''') ' + 'AS FECHAINICIO, ' +
             'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHALAST) + ''') ' +                                                   'AS FECHAFIN ' + @strPRODCOLUMNSPREB + ' ' +
      'FROM WSXML_SFG.TIPOPRODUCTO TPR ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +         'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                          'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT CODPUNTODEVENTA, CODPRODUCTO, ROUND(SUM(NUMINGRESOS - NUMANULACIONES)) AS VALOR ' +
                       'FROM WSXML_SFG.VW_PREFACTURACION_DIARIA ' +
                       'WHERE FECHAARCHIVO BETWEEN WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(CONVERT(DATETIME,@ix__FECHAFIN) + 1) + ''') AND WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHALAST) + ''') ' +
                         'AND CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
                       'GROUP BY CODPUNTODEVENTA, CODPRODUCTO) PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                  + ' ' END +
      'GROUP BY TPR.CODLINEADENEGOCIO ' END +

      'ORDER BY ORDEN';
	  --PRINT @sql
	  EXECUTE sp_executesql @sql
  END;
GO

--EXEC WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataTrnsccnes  1, 1, '1A', '1B', '1C'

 
   IF OBJECT_ID('WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataVentasBns', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataVentasBns;
GO


  CREATE PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataVentasBns(@p_CODCICLOFACTURACIONPDV NUMERIC(22,0),
                                           @p_CODLINEADENEGOCIO      NUMERIC(22,0),
                                           @pg_CADENA                NVARCHAR(2000),
                                           @pg_ALIADOESTRATEGICO     NVARCHAR(2000),
                                           @pg_PRODUCTO              NVARCHAR(2000)) AS
  BEGIN										   
    DECLARE @sFECHACCLO DATETIME;
    DECLARE @sFECHAFRST DATETIME;
    DECLARE @sFECHALAST DATETIME;
    DECLARE @xFECHAFRST DATETIME;
    DECLARE @xFECHASCND DATETIME;
    DECLARE @xFECHALAST DATETIME;
    DECLARE @lstPRODUCTOSCOLUMNAS TABLE (COLUMNNAMES VARCHAR(50));

    DECLARE @lstCICLOSFACTURACION WSXML_SFG.CICLOINFO;
    DECLARE @strPRODCOLUMNSBILL VARCHAR(2000) = '';
    DECLARE @strPRODCOLUMNSPREB VARCHAR(2000) = '';

	DECLARE @sql NVARCHAR(MAX)

    SELECT @sFECHACCLO = FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ID_CICLOFACTURACIONPDV = @p_CODCICLOFACTURACIONPDV;
    /* Reporte a partir de prefacturacion + facturacion. Obtener fechas de mes a partir del ciclo seleccionado */
    EXEC WSXML_SFG.SFG_PACKAGE_GetMonthRange @sFECHACCLO, @sFECHAFRST OUT, @sFECHALAST OUT
    /* Obtener identificadores de ciclos abarcados por el rango de fechas (correospondientes al mes del ciclo solicitado) */
    INSERT INTO @lstCICLOSFACTURACION
	SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAEJECUCION 
    FROM (SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, NULL AS FECHAINICIO, FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ACTIVE = 1 AND CONVERT(DATETIME, CONVERT(VARCHAR(7), FECHAEJECUCION, 120) + '-01') = CONVERT(DATETIME, CONVERT(VARCHAR(7), @sFECHACCLO, 120) + '-01'))t -- ORDER BY SECUENCIA);
    IF @@ROWCOUNT = 0 BEGIN
      RAISERROR('-20085 No existen ciclos de facturacion a la fecha estipulada', 16, 1);
    END 
    /* Sobreescribir fechas para cada ciclo, y obtener fechas generales de lista */
   DECLARE ix CURSOR FOR 
		SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAFIN 
		FROM @lstCICLOSFACTURACION

		OPEN ix

		DECLARE @_ultimaFila NUMERIC(38,0) = @@CURSOR_ROWS

		DECLARE @ix__ID_CICLOFACTURACIONPDV NUMERIC(38,0), @ix__SECUENCIA NUMERIC(38,0), @ix__FECHAINICIO DATETIME, @ix__FECHAFIN DATETIME
		DECLARE @ix__ID_CICLOFACTURACIONPDV_FIRST NUMERIC(38,0), @ix__SECUENCIA_FIRST NUMERIC(38,0), @ix__FECHAINICIO_FIRST DATETIME, @ix__FECHAFIN_FIRST DATETIME

        DECLARE @iniDATE DATETIME;
        DECLARE @endDATE DATETIME;
		FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN

		SET @ix__ID_CICLOFACTURACIONPDV_FIRST = @ix__ID_CICLOFACTURACIONPDV
		SET @ix__SECUENCIA_FIRST = @ix__SECUENCIA
		SET @ix__FECHAINICIO_FIRST = @ix__FECHAINICIO
		SET @ix__FECHAFIN_FIRST= @ix__FECHAFIN
		
		DECLARE @_fila INT = 1;
		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			EXEC WSXML_SFG.SFGCICLOFACTURACIONPDV_GetCicloDateRangeFromID @ix__ID_CICLOFACTURACIONPDV, @iniDATE OUT, @endDATE OUT
			SET @ix__FECHAINICIO = @iniDATE;
			SET @ix__FECHAFIN    = @endDATE;

			IF @_fila = 1 BEGIN
			--IF ix = lstCICLOSFACTURACION.First BEGIN
			  SET @xFECHAFRST = @iniDATE;
			  SET @xFECHASCND = @endDATE;
			END 
			--IF ix = lstCICLOSFACTURACION.Last BEGIN
			IF @_fila = @_ultimaFila BEGIN
			  SET @xFECHALAST = @endDATE;
			END

			SET @_fila = @_fila + 1
			FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN
		END;
		CLOSE ix;
		DEALLOCATE ix;
    /* Obtener lista de productos */
    DECLARE tPRODUCT CURSOR FOR 
			SELECT ID_AGRUPACIONPRODUCTO, AGR.NOMAGRUPACIONPRODUCTO FROM WSXML_SFG.AGRUPACIONPRODUCTO AGR
				INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ON (AGR.CODTIPOPRODUCTO = TPR.ID_TIPOPRODUCTO)
            WHERE TPR.CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO ORDER BY NOMAGRUPACIONPRODUCTO; 
	OPEN tPRODUCT;
	DECLARE @tPRODUCT__ID_AGRUPACIONPRODUCTO NUMERIC(38,0), @tPRODUCT__NOMAGRUPACIONPRODUCTO VARCHAR(255)
	FETCH tPRODUCT INTO @tPRODUCT__ID_AGRUPACIONPRODUCTO, @tPRODUCT__NOMAGRUPACIONPRODUCTO
	 WHILE @@FETCH_STATUS=0
	 BEGIN
        DECLARE @thisCOLUMNNAME VARCHAR(50);
        DECLARE @existsINLIST NUMERIC(22,0) = 0;
      BEGIN
        SET @thisCOLUMNNAME = CONVERT(VARCHAR, '"' + ISNULL(CASE WHEN LEN(@tPRODUCT__NOMAGRUPACIONPRODUCTO) > 30 THEN SUBSTRING(@tPRODUCT__NOMAGRUPACIONPRODUCTO, 0, 30) ELSE @tPRODUCT__NOMAGRUPACIONPRODUCTO END, '') + '"');
        IF (SELECT COUNT(*) FROM @lstPRODUCTOSCOLUMNAS) > 0 BEGIN
			DECLARE ix2 CURSOR FOR SELECT COLUMNNAMES FROM @lstPRODUCTOSCOLUMNAS
			OPEN ix2
			DECLARE @ix2__IDVALUE NUMERIC(38,0)
			FETCH ix2 INTO @ix2__IDVALUE
			 WHILE @@FETCH_STATUS=0
			 BEGIN
				IF @ix2__IDVALUE = @thisCOLUMNNAME BEGIN
					SET @existsINLIST = 1;
				END 
				FETCH ix2 INTO @ix2__IDVALUE
			END;
			CLOSE ix2;
			DEALLOCATE ix2;
        END 
        IF @existsINLIST = 0 BEGIN
          INSERT INTO @lstPRODUCTOSCOLUMNAS VALUES( @thisCOLUMNNAME )
          SET @strPRODCOLUMNSBILL = ISNULL(@strPRODCOLUMNSBILL, '') + ', SUM(CASE WHEN AGP.ID = ' + CONVERT(VARCHAR,@tPRODUCT__ID_AGRUPACIONPRODUCTO) + ' THEN ISNULL(VALOR, 0) ELSE 0 END) AS ' + ISNULL(@thisCOLUMNNAME, '') + ' ';
          SET @strPRODCOLUMNSPREB = ISNULL(@strPRODCOLUMNSPREB, '') + ', SUM(CASE WHEN AGP.ID = ' + CONVERT(VARCHAR,@tPRODUCT__ID_AGRUPACIONPRODUCTO) + ' THEN ISNULL(VALOR, 0) ELSE 0 END) AS ' + ISNULL(@thisCOLUMNNAME, '') + ' ';
        END 
      END;
    FETCH tPRODUCT INTO @tPRODUCT__ID_AGRUPACIONPRODUCTO, @tPRODUCT__NOMAGRUPACIONPRODUCTO
    END;
    CLOSE tPRODUCT;
    DEALLOCATE tPRODUCT;
    /* Abrir el cursor con los datos */
        SET @sql = 

      'SELECT CLI.ID_CICLOFACTURACIONPDV ' +              'AS IDCICLO, ' +
             'CLI.SECUENCIA ' +                           'AS ORDEN, ' +
             'WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CLI.FECHAFIN) ' + 'AS SEMANA, ' +
             'WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CLI.FECHAFIN) ' + 'AS SEMANA1, ' +
             'WSXML_SFG.SFG_PACKAGE_GetYearNumber(CLI.FECHAFIN) ' + 'AS YEARNUMBER, ' +
             'CLI.FECHAINICIO ' +                         'AS FECHAINICIO, ' + ' ' +
             'CLI.FECHAFIN ' +                            'AS FECHAFIN ' + @strPRODCOLUMNSBILL +
      'FROM WSXML_SFG.SFGINF_CIERREMENSUAL_GetCiclosFacturacionList(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHACCLO) + ''') CLI ' +
      'INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ' +                       'ON (1 = 1) ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +          'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                           'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT ID_CICLOFACTURACIONPDV, CODPRODUCTO, VALORVENTA - VALORANULACION AS VALOR ' +
                       'FROM WSXML_SFG.VW_SHOW_PRDFACTURACION) PRF ' + 'ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO AND PRF.ID_CICLOFACTURACIONPDV = CLI.ID_CICLOFACTURACIONPDV) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                   + ' ' END +
      'GROUP BY CLI.ID_CICLOFACTURACIONPDV, CLI.SECUENCIA, CLI.FECHAINICIO, CLI.FECHAFIN ' +

      -- Condition for initial segment that the initial dates do not match
      
		CASE WHEN @xFECHAFRST = @sFECHAFRST THEN ' ' ELSE 'UNION ' +
			'SELECT ' + @ix__ID_CICLOFACTURACIONPDV_FIRST + '													AS IDCICLO,'+
              '-1                                                                                               AS ORDEN, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(@ix__FECHAFIN_FIRST)) +				              '			AS SEMANA, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(@ix__FECHAFIN_FIRST)) +	             ' AS SEMANA1, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetYearNumber(@ix__FECHAFIN_FIRST)) +              '  AS YEARNUMBER, ' +
              'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHAFRST) + ''') ' +                   ' AS FECHAINICIO, ' +
              'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@ix__FECHAFIN_FIRST) + ''') ' + 'AS FECHAFIN ' + @strPRODCOLUMNSPREB + ' ' +
      'FROM WSXML_SFG.TIPOPRODUCTO TPR ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +         'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                          'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT CODPUNTODEVENTA, CODPRODUCTO, ROUND(SUM(NUMINGRESOS - NUMANULACIONES),0) AS VALOR ' +
                       'FROM WSXML_SFG.VW_PREFACTURACION_DIARIA ' +
                       'WHERE FECHAARCHIVO BETWEEN WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHAFRST) + ''') AND WSXML_SFG.SFG_PACKAGE_StringToDate(''' + @ix__FECHAFIN + ''') ' +
                         'AND CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
                       'GROUP BY CODPUNTODEVENTA, CODPRODUCTO) PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' +CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                   + ' ' END +
      'GROUP BY TPR.CODLINEADENEGOCIO ' END +

	  -- FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN

      -- Condition for final segment that the final dates are not the same
      CASE WHEN @xFECHALAST = @sFECHALAST THEN ' ' ELSE
      'UNION ' +
      'SELECT ' + CONVERT(VARCHAR,@ix__ID_CICLOFACTURACIONPDV)  +               ' AS IDCICLO, ' +
              '999999999' +                                                                                        ' AS ORDEN, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS SEMANA, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS SEMANA1, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetYearNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS YEARNUMBER, ' +
             'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(CONVERT(DATETIME,@ix__FECHAFIN) + 1) + ''') ' + 'AS FECHAINICIO, ' +
             'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHALAST) + ''') ' +                                                   'AS FECHAFIN ' + @strPRODCOLUMNSPREB + ' ' +
      'FROM WSXML_SFG.TIPOPRODUCTO TPR ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +         'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                          'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT CODPUNTODEVENTA, CODPRODUCTO, ROUND(SUM(NUMINGRESOS - NUMANULACIONES),0) AS VALOR ' +
                       'FROM WSXML_SFG.VW_PREFACTURACION_DIARIA ' +
                       'WHERE FECHAARCHIVO BETWEEN WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(CONVERT(DATETIME,@ix__FECHAFIN) + 1) + ''') AND WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHALAST) + ''') ' +
                         'AND CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
                       'GROUP BY CODPUNTODEVENTA, CODPRODUCTO) PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                  + ' ' END +
      'GROUP BY TPR.CODLINEADENEGOCIO ' END +

      'ORDER BY ORDEN';
	  --PRINT @sql
	  EXECUTE sp_executesql @sql
END
   

GO


  IF OBJECT_ID('WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataVntasBrts', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataVntasBrts;
GO

  CREATE PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataVntasBrts(@p_CODCICLOFACTURACIONPDV NUMERIC(22,0),
                                           @p_CODLINEADENEGOCIO      NUMERIC(22,0),
                                           @pg_CADENA                NVARCHAR(2000),
                                           @pg_ALIADOESTRATEGICO     NVARCHAR(2000),
                                           @pg_PRODUCTO              NVARCHAR(2000)) AS
  BEGIN										   
    DECLARE @sFECHACCLO DATETIME;
    DECLARE @sFECHAFRST DATETIME;
    DECLARE @sFECHALAST DATETIME;
    DECLARE @xFECHAFRST DATETIME;
    DECLARE @xFECHASCND DATETIME;
    DECLARE @xFECHALAST DATETIME;
    DECLARE @lstPRODUCTOSCOLUMNAS TABLE (COLUMNNAMES VARCHAR(50));

    DECLARE @lstCICLOSFACTURACION WSXML_SFG.CICLOINFO;
    DECLARE @strPRODCOLUMNSBILL VARCHAR(2000) = '';
    DECLARE @strPRODCOLUMNSPREB VARCHAR(2000) = '';

	DECLARE @sql NVARCHAR(MAX)

    SELECT @sFECHACCLO = FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ID_CICLOFACTURACIONPDV = @p_CODCICLOFACTURACIONPDV;
    /* Reporte a partir de prefacturacion + facturacion. Obtener fechas de mes a partir del ciclo seleccionado */
    EXEC WSXML_SFG.SFG_PACKAGE_GetMonthRange @sFECHACCLO, @sFECHAFRST OUT, @sFECHALAST OUT
    /* Obtener identificadores de ciclos abarcados por el rango de fechas (correospondientes al mes del ciclo solicitado) */
    INSERT INTO @lstCICLOSFACTURACION
	SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAEJECUCION 
    FROM (SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, NULL AS FECHAINICIO, FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ACTIVE = 1 AND CONVERT(DATETIME, CONVERT(VARCHAR(7), FECHAEJECUCION, 120) + '-01') = CONVERT(DATETIME, CONVERT(VARCHAR(7), @sFECHACCLO, 120) + '-01'))t -- ORDER BY SECUENCIA);
    IF @@ROWCOUNT = 0 BEGIN
      RAISERROR('-20085 No existen ciclos de facturacion a la fecha estipulada', 16, 1);
    END 
    /* Sobreescribir fechas para cada ciclo, y obtener fechas generales de lista */
   DECLARE ix CURSOR FOR 
		SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAFIN 
		FROM @lstCICLOSFACTURACION

		OPEN ix

		DECLARE @_ultimaFila NUMERIC(38,0) = @@CURSOR_ROWS

		DECLARE @ix__ID_CICLOFACTURACIONPDV NUMERIC(38,0), @ix__SECUENCIA NUMERIC(38,0), @ix__FECHAINICIO DATETIME, @ix__FECHAFIN DATETIME
		DECLARE @ix__ID_CICLOFACTURACIONPDV_FIRST NUMERIC(38,0), @ix__SECUENCIA_FIRST NUMERIC(38,0), @ix__FECHAINICIO_FIRST DATETIME, @ix__FECHAFIN_FIRST DATETIME

        DECLARE @iniDATE DATETIME;
        DECLARE @endDATE DATETIME;
		FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN

		SET @ix__ID_CICLOFACTURACIONPDV_FIRST = @ix__ID_CICLOFACTURACIONPDV
		SET @ix__SECUENCIA_FIRST = @ix__SECUENCIA
		SET @ix__FECHAINICIO_FIRST = @ix__FECHAINICIO
		SET @ix__FECHAFIN_FIRST= @ix__FECHAFIN
		
		DECLARE @_fila INT = 1;
		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			EXEC WSXML_SFG.SFGCICLOFACTURACIONPDV_GetCicloDateRangeFromID @ix__ID_CICLOFACTURACIONPDV, @iniDATE OUT, @endDATE OUT
			SET @ix__FECHAINICIO = @iniDATE;
			SET @ix__FECHAFIN    = @endDATE;

			IF @_fila = 1 BEGIN
			--IF ix = lstCICLOSFACTURACION.First BEGIN
			  SET @xFECHAFRST = @iniDATE;
			  SET @xFECHASCND = @endDATE;
			END 
			--IF ix = lstCICLOSFACTURACION.Last BEGIN
			IF @_fila = @_ultimaFila BEGIN
			  SET @xFECHALAST = @endDATE;
			END

			SET @_fila = @_fila + 1
			FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN
		END;
		CLOSE ix;
		DEALLOCATE ix;
    /* Obtener lista de productos */
    DECLARE tPRODUCT CURSOR FOR 
			SELECT ID_AGRUPACIONPRODUCTO, AGR.NOMAGRUPACIONPRODUCTO FROM WSXML_SFG.AGRUPACIONPRODUCTO AGR
				INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ON (AGR.CODTIPOPRODUCTO = TPR.ID_TIPOPRODUCTO)
            WHERE TPR.CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO ORDER BY NOMAGRUPACIONPRODUCTO; 
	OPEN tPRODUCT;
	DECLARE @tPRODUCT__ID_AGRUPACIONPRODUCTO NUMERIC(38,0), @tPRODUCT__NOMAGRUPACIONPRODUCTO VARCHAR(255)
	FETCH tPRODUCT INTO @tPRODUCT__ID_AGRUPACIONPRODUCTO, @tPRODUCT__NOMAGRUPACIONPRODUCTO
	 WHILE @@FETCH_STATUS=0
	 BEGIN
        DECLARE @thisCOLUMNNAME VARCHAR(50);
        DECLARE @existsINLIST NUMERIC(22,0) = 0;
      BEGIN
        SET @thisCOLUMNNAME = CONVERT(VARCHAR, '"' + ISNULL(CASE WHEN LEN(@tPRODUCT__NOMAGRUPACIONPRODUCTO) > 30 THEN SUBSTRING(@tPRODUCT__NOMAGRUPACIONPRODUCTO, 0, 30) ELSE @tPRODUCT__NOMAGRUPACIONPRODUCTO END, '') + '"');
        IF (SELECT COUNT(*) FROM @lstPRODUCTOSCOLUMNAS) > 0 BEGIN
			DECLARE ix2 CURSOR FOR SELECT COLUMNNAMES FROM @lstPRODUCTOSCOLUMNAS
			OPEN ix2
			DECLARE @ix2__IDVALUE NUMERIC(38,0)
			FETCH ix2 INTO @ix2__IDVALUE
			 WHILE @@FETCH_STATUS=0
			 BEGIN
				IF @ix2__IDVALUE = @thisCOLUMNNAME BEGIN
					SET @existsINLIST = 1;
				END 
				FETCH ix2 INTO @ix2__IDVALUE
			END;
			CLOSE ix2;
			DEALLOCATE ix2;
        END 
        IF @existsINLIST = 0 BEGIN
          INSERT INTO @lstPRODUCTOSCOLUMNAS VALUES( @thisCOLUMNNAME )
          SET @strPRODCOLUMNSBILL = ISNULL(@strPRODCOLUMNSBILL, '') + ', SUM(CASE WHEN AGP.ID = ' + CONVERT(VARCHAR,@tPRODUCT__ID_AGRUPACIONPRODUCTO) + ' THEN ISNULL(VALOR, 0) ELSE 0 END) AS ' + ISNULL(@thisCOLUMNNAME, '') + ' ';
          SET @strPRODCOLUMNSPREB = ISNULL(@strPRODCOLUMNSPREB, '') + ', SUM(CASE WHEN AGP.ID = ' + CONVERT(VARCHAR,@tPRODUCT__ID_AGRUPACIONPRODUCTO) + ' THEN ISNULL(VALOR, 0) ELSE 0 END) AS ' + ISNULL(@thisCOLUMNNAME, '') + ' ';
        END 
      END;
    FETCH tPRODUCT INTO @tPRODUCT__ID_AGRUPACIONPRODUCTO, @tPRODUCT__NOMAGRUPACIONPRODUCTO
    END;
    CLOSE tPRODUCT;
    DEALLOCATE tPRODUCT;
    /* Abrir el cursor con los datos */
        SET @sql = 

      'SELECT CLI.ID_CICLOFACTURACIONPDV ' +              'AS IDCICLO, ' +
             'CLI.SECUENCIA ' +                           'AS ORDEN, ' +
             'WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CLI.FECHAFIN) ' + 'AS SEMANA, ' +
             'WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CLI.FECHAFIN) ' + 'AS SEMANA1, ' +
             'WSXML_SFG.SFG_PACKAGE_GetYearNumber(CLI.FECHAFIN) ' + 'AS YEARNUMBER, ' +
             'CLI.FECHAINICIO ' +                         'AS FECHAINICIO, ' + ' ' +
             'CLI.FECHAFIN ' +                            'AS FECHAFIN ' + @strPRODCOLUMNSBILL +
      'FROM WSXML_SFG.SFGINF_CIERREMENSUAL_GetCiclosFacturacionList(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHACCLO) + ''') CLI ' +
      'INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ' +                       'ON (1 = 1) ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +          'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                           'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT ID_CICLOFACTURACIONPDV, CODPRODUCTO, VALORVENTABRUTA AS VALOR ' +
                       'FROM WSXML_SFG.VW_SHOW_PRDFACTURACION) PRF ' + 'ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO AND PRF.ID_CICLOFACTURACIONPDV = CLI.ID_CICLOFACTURACIONPDV) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                   + ' ' END +
      'GROUP BY CLI.ID_CICLOFACTURACIONPDV, CLI.SECUENCIA, CLI.FECHAINICIO, CLI.FECHAFIN ' +

      -- Condition for initial segment that the initial dates do not match
      
		CASE WHEN @xFECHAFRST = @sFECHAFRST THEN ' ' ELSE 'UNION ' +
			'SELECT ' + @ix__ID_CICLOFACTURACIONPDV_FIRST + '													AS IDCICLO,'+
              '-1                                                                                               AS ORDEN, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(@ix__FECHAFIN_FIRST)) +				              '			AS SEMANA, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(@ix__FECHAFIN_FIRST)) +	             ' AS SEMANA1, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetYearNumber(@ix__FECHAFIN_FIRST)) +              '  AS YEARNUMBER, ' +
              'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHAFRST) + ''') ' +                   ' AS FECHAINICIO, ' +
              'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@ix__FECHAFIN_FIRST) + ''') ' + 'AS FECHAFIN ' + @strPRODCOLUMNSPREB + ' ' +
      'FROM WSXML_SFG.TIPOPRODUCTO TPR ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +         'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                          'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT CODPUNTODEVENTA, CODPRODUCTO, ROUND(SUM(INGRESOSBRUTOS),0) AS VALOR ' +
                       'FROM VW_PREFACTURACION_DIARIA ' +
                       'WHERE FECHAARCHIVO BETWEEN WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHAFRST) + ''') AND WSXML_SFG.SFG_PACKAGE_StringToDate(''' + @ix__FECHAFIN + ''') ' +
                         'AND CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
                       'GROUP BY CODPUNTODEVENTA, CODPRODUCTO) PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' +CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                   + ' ' END +
      'GROUP BY TPR.CODLINEADENEGOCIO ' END +

	  -- FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN

      -- Condition for final segment that the final dates are not the same
      CASE WHEN @xFECHALAST = @sFECHALAST THEN ' ' ELSE
      'UNION ' +
      'SELECT ' + CONVERT(VARCHAR,@ix__ID_CICLOFACTURACIONPDV)  +               ' AS IDCICLO, ' +
              '999999999' +                                                                                        ' AS ORDEN, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS SEMANA, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS SEMANA1, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetYearNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS YEARNUMBER, ' +
             'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(CONVERT(DATETIME,@ix__FECHAFIN) + 1) + ''') ' + 'AS FECHAINICIO, ' +
             'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHALAST) + ''') ' +                                                   'AS FECHAFIN ' + @strPRODCOLUMNSPREB + ' ' +
      'FROM WSXML_SFG.TIPOPRODUCTO TPR ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +         'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                          'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT CODPUNTODEVENTA, CODPRODUCTO, ROUND(SUM(INGRESOSBRUTOS),0) AS VALOR ' +
                       'FROM WSXML_SFG.VW_PREFACTURACION_DIARIA ' +
                       'WHERE FECHAARCHIVO BETWEEN WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(CONVERT(DATETIME,@ix__FECHAFIN) + 1) + ''') AND WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHALAST) + ''') ' +
                         'AND CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
                       'GROUP BY CODPUNTODEVENTA, CODPRODUCTO) PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                  + ' ' END +
      'GROUP BY TPR.CODLINEADENEGOCIO ' END +

      'ORDER BY ORDEN';
	  --PRINT @sql
	  EXECUTE sp_executesql @sql

  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataComisionC', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataComisionC;
GO


CREATE     PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataComisionC(@p_CODCICLOFACTURACIONPDV NUMERIC(22,0),
                                           @p_CODLINEADENEGOCIO      NUMERIC(22,0),
                                           @pg_CADENA                NVARCHAR(2000),
                                           @pg_ALIADOESTRATEGICO     NVARCHAR(2000),
                                          @pg_PRODUCTO              NVARCHAR(2000)) AS
  BEGIN
     DECLARE @sFECHACCLO DATETIME;
    DECLARE @sFECHAFRST DATETIME;
    DECLARE @sFECHALAST DATETIME;
    DECLARE @xFECHAFRST DATETIME;
    DECLARE @xFECHASCND DATETIME;
    DECLARE @xFECHALAST DATETIME;
    DECLARE @lstPRODUCTOSCOLUMNAS TABLE (COLUMNNAMES VARCHAR(50));

    DECLARE @lstCICLOSFACTURACION WSXML_SFG.CICLOINFO;
    DECLARE @strPRODCOLUMNSBILL VARCHAR(2000) = '';
    DECLARE @strPRODCOLUMNSPREB VARCHAR(2000) = '';

	DECLARE @sql NVARCHAR(MAX)

    SELECT @sFECHACCLO = FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ID_CICLOFACTURACIONPDV = @p_CODCICLOFACTURACIONPDV;
    /* Reporte a partir de prefacturacion + facturacion. Obtener fechas de mes a partir del ciclo seleccionado */
    EXEC WSXML_SFG.SFG_PACKAGE_GetMonthRange @sFECHACCLO, @sFECHAFRST OUT, @sFECHALAST OUT
    /* Obtener identificadores de ciclos abarcados por el rango de fechas (correospondientes al mes del ciclo solicitado) */
    INSERT INTO @lstCICLOSFACTURACION
	SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAEJECUCION 
    FROM (SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, NULL AS FECHAINICIO, FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ACTIVE = 1 AND CONVERT(DATETIME, CONVERT(VARCHAR(7), FECHAEJECUCION, 120) + '-01') = CONVERT(DATETIME, CONVERT(VARCHAR(7), @sFECHACCLO, 120) + '-01'))t -- ORDER BY SECUENCIA);
    IF @@ROWCOUNT = 0 BEGIN
      RAISERROR('-20085 No existen ciclos de facturacion a la fecha estipulada', 16, 1);
    END 
    /* Sobreescribir fechas para cada ciclo, y obtener fechas generales de lista */
   DECLARE ix CURSOR FOR 
		SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAFIN 
		FROM @lstCICLOSFACTURACION

		OPEN ix

		DECLARE @_ultimaFila NUMERIC(38,0) = @@CURSOR_ROWS

		DECLARE @ix__ID_CICLOFACTURACIONPDV NUMERIC(38,0), @ix__SECUENCIA NUMERIC(38,0), @ix__FECHAINICIO DATETIME, @ix__FECHAFIN DATETIME
		DECLARE @ix__ID_CICLOFACTURACIONPDV_FIRST NUMERIC(38,0), @ix__SECUENCIA_FIRST NUMERIC(38,0), @ix__FECHAINICIO_FIRST DATETIME, @ix__FECHAFIN_FIRST DATETIME

        DECLARE @iniDATE DATETIME;
        DECLARE @endDATE DATETIME;
		FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN

		SET @ix__ID_CICLOFACTURACIONPDV_FIRST = @ix__ID_CICLOFACTURACIONPDV
		SET @ix__SECUENCIA_FIRST = @ix__SECUENCIA
		SET @ix__FECHAINICIO_FIRST = @ix__FECHAINICIO
		SET @ix__FECHAFIN_FIRST= @ix__FECHAFIN
		
		DECLARE @_fila INT = 1;
		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			EXEC WSXML_SFG.SFGCICLOFACTURACIONPDV_GetCicloDateRangeFromID @ix__ID_CICLOFACTURACIONPDV, @iniDATE OUT, @endDATE OUT
			SET @ix__FECHAINICIO = @iniDATE;
			SET @ix__FECHAFIN    = @endDATE;

			IF @_fila = 1 BEGIN
			--IF ix = lstCICLOSFACTURACION.First BEGIN
			  SET @xFECHAFRST = @iniDATE;
			  SET @xFECHASCND = @endDATE;
			END 
			--IF ix = lstCICLOSFACTURACION.Last BEGIN
			IF @_fila = @_ultimaFila BEGIN
			  SET @xFECHALAST = @endDATE;
			END

			SET @_fila = @_fila + 1
			FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN
		END;
		CLOSE ix;
		DEALLOCATE ix;
    /* Obtener lista de productos */
    DECLARE tPRODUCT CURSOR FOR 
			SELECT ID_AGRUPACIONPRODUCTO, AGR.NOMAGRUPACIONPRODUCTO FROM WSXML_SFG.AGRUPACIONPRODUCTO AGR
				INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ON (AGR.CODTIPOPRODUCTO = TPR.ID_TIPOPRODUCTO)
            WHERE TPR.CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO ORDER BY NOMAGRUPACIONPRODUCTO; 
	OPEN tPRODUCT;
	DECLARE @tPRODUCT__ID_AGRUPACIONPRODUCTO NUMERIC(38,0), @tPRODUCT__NOMAGRUPACIONPRODUCTO VARCHAR(255)
	FETCH tPRODUCT INTO @tPRODUCT__ID_AGRUPACIONPRODUCTO, @tPRODUCT__NOMAGRUPACIONPRODUCTO
	 WHILE @@FETCH_STATUS=0
	 BEGIN
        DECLARE @thisCOLUMNNAME VARCHAR(50);
        DECLARE @existsINLIST NUMERIC(22,0) = 0;
      BEGIN
        SET @thisCOLUMNNAME = CONVERT(VARCHAR, '"' + ISNULL(CASE WHEN LEN(@tPRODUCT__NOMAGRUPACIONPRODUCTO) > 30 THEN SUBSTRING(@tPRODUCT__NOMAGRUPACIONPRODUCTO, 0, 30) ELSE @tPRODUCT__NOMAGRUPACIONPRODUCTO END, '') + '"');
        IF (SELECT COUNT(*) FROM @lstPRODUCTOSCOLUMNAS) > 0 BEGIN
			DECLARE ix2 CURSOR FOR SELECT COLUMNNAMES FROM @lstPRODUCTOSCOLUMNAS
			OPEN ix2
			DECLARE @ix2__IDVALUE NUMERIC(38,0)
			FETCH ix2 INTO @ix2__IDVALUE
			 WHILE @@FETCH_STATUS=0
			 BEGIN
				IF @ix2__IDVALUE = @thisCOLUMNNAME BEGIN
					SET @existsINLIST = 1;
				END 
				FETCH ix2 INTO @ix2__IDVALUE
			END;
			CLOSE ix2;
			DEALLOCATE ix2;
        END 
        IF @existsINLIST = 0 BEGIN
          INSERT INTO @lstPRODUCTOSCOLUMNAS VALUES( @thisCOLUMNNAME )
          SET @strPRODCOLUMNSBILL = ISNULL(@strPRODCOLUMNSBILL, '') + ', SUM(CASE WHEN AGP.ID = ' + CONVERT(VARCHAR,@tPRODUCT__ID_AGRUPACIONPRODUCTO) + ' THEN ISNULL(VALOR, 0) ELSE 0 END) AS ' + ISNULL(@thisCOLUMNNAME, '') + ' ';
          SET @strPRODCOLUMNSPREB = ISNULL(@strPRODCOLUMNSPREB, '') + ', SUM(CASE WHEN AGP.ID = ' + CONVERT(VARCHAR,@tPRODUCT__ID_AGRUPACIONPRODUCTO) + ' THEN ISNULL(VALOR, 0) ELSE 0 END) AS ' + ISNULL(@thisCOLUMNNAME, '') + ' ';
        END 
      END;
    FETCH tPRODUCT INTO @tPRODUCT__ID_AGRUPACIONPRODUCTO, @tPRODUCT__NOMAGRUPACIONPRODUCTO
    END;
    CLOSE tPRODUCT;
    DEALLOCATE tPRODUCT;
    /* Abrir el cursor con los datos */
        SET @sql = 

      'SELECT CLI.ID_CICLOFACTURACIONPDV ' +              'AS IDCICLO, ' +
             'CLI.SECUENCIA ' +                           'AS ORDEN, ' +
             'WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CLI.FECHAFIN) ' + 'AS SEMANA, ' +
             'WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CLI.FECHAFIN) ' + 'AS SEMANA1, ' +
             'WSXML_SFG.SFG_PACKAGE_GetYearNumber(CLI.FECHAFIN) ' + 'AS YEARNUMBER, ' +
             'CLI.FECHAINICIO ' +                         'AS FECHAINICIO, ' + ' ' +
             'CLI.FECHAFIN ' +                            'AS FECHAFIN ' + @strPRODCOLUMNSBILL +
      'FROM WSXML_SFG.SFGINF_CIERREMENSUAL_GetCiclosFacturacionList(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHACCLO) + ''') CLI ' +
      'INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ' +                       'ON (1 = 1) ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +          'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                           'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT ID_CICLOFACTURACIONPDV, CODPRODUCTO, VALORCOMISION AS VALOR ' +
                       'FROM WSXML_SFG.VW_SHOW_PRDFACTURACION) PRF ' + 'ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO AND PRF.ID_CICLOFACTURACIONPDV = CLI.ID_CICLOFACTURACIONPDV) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                   + ' ' END +
      'GROUP BY CLI.ID_CICLOFACTURACIONPDV, CLI.SECUENCIA, CLI.FECHAINICIO, CLI.FECHAFIN ' +

      -- Condition for initial segment that the initial dates do not match
      
		CASE WHEN @xFECHAFRST = @sFECHAFRST THEN ' ' ELSE 'UNION ' +
			'SELECT ' + @ix__ID_CICLOFACTURACIONPDV_FIRST + '													AS IDCICLO,'+
              '-1                                                                                               AS ORDEN, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(@ix__FECHAFIN_FIRST)) +				              '			AS SEMANA, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(@ix__FECHAFIN_FIRST)) +	             ' AS SEMANA1, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetYearNumber(@ix__FECHAFIN_FIRST)) +              '  AS YEARNUMBER, ' +
              'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHAFRST) + ''') ' +                   ' AS FECHAINICIO, ' +
              'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@ix__FECHAFIN_FIRST) + ''') ' + 'AS FECHAFIN ' + @strPRODCOLUMNSPREB + ' ' +
      'FROM WSXML_SFG.TIPOPRODUCTO TPR ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +         'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                          'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT CODPUNTODEVENTA, CODPRODUCTO, ROUND(SUM(COMISION + COMISIONANTICIPO),0) AS VALOR ' +
                       'FROM VW_PREFACTURACION_DIARIA ' +
                       'WHERE FECHAARCHIVO BETWEEN WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHAFRST) + ''') AND WSXML_SFG.SFG_PACKAGE_StringToDate(''' + @ix__FECHAFIN + ''') ' +
                         'AND CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
                       'GROUP BY CODPUNTODEVENTA, CODPRODUCTO) PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' +CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                   + ' ' END +
      'GROUP BY TPR.CODLINEADENEGOCIO ' END +

	  -- FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN

      -- Condition for final segment that the final dates are not the same
      CASE WHEN @xFECHALAST = @sFECHALAST THEN ' ' ELSE
      'UNION ' +
      'SELECT ' + CONVERT(VARCHAR,@ix__ID_CICLOFACTURACIONPDV)  +               ' AS IDCICLO, ' +
              '999999999' +                                                                                        ' AS ORDEN, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS SEMANA, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS SEMANA1, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetYearNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS YEARNUMBER, ' +
             'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(CONVERT(DATETIME,@ix__FECHAFIN) + 1) + ''') ' + 'AS FECHAINICIO, ' +
             'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHALAST) + ''') ' +                                                   'AS FECHAFIN ' + @strPRODCOLUMNSPREB + ' ' +
      'FROM WSXML_SFG.TIPOPRODUCTO TPR ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +         'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                          'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT CODPUNTODEVENTA, CODPRODUCTO, ROUND(SUM(COMISION + COMISIONANTICIPO),0) AS VALOR ' +
                       'FROM WSXML_SFG.VW_PREFACTURACION_DIARIA ' +
                       'WHERE FECHAARCHIVO BETWEEN WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(CONVERT(DATETIME,@ix__FECHAFIN) + 1) + ''') AND WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHALAST) + ''') ' +
                         'AND CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
                       'GROUP BY CODPUNTODEVENTA, CODPRODUCTO) PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                  + ' ' END +
      'GROUP BY TPR.CODLINEADENEGOCIO ' END +

      'ORDER BY ORDEN';
	  --PRINT @sql
	  EXECUTE sp_executesql @sql
	  
  END;										  
GO

  IF OBJECT_ID('WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataComisionN', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataComisionN;
GO


CREATE     PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataComisionN(@p_CODCICLOFACTURACIONPDV NUMERIC(22,0),
                                           @p_CODLINEADENEGOCIO      NUMERIC(22,0),
                                           @pg_CADENA                NVARCHAR(2000),
                                           @pg_ALIADOESTRATEGICO     NVARCHAR(2000),
                                          @pg_PRODUCTO              NVARCHAR(2000)) AS
  BEGIN
    DECLARE @sFECHACCLO DATETIME;
    DECLARE @sFECHAFRST DATETIME;
    DECLARE @sFECHALAST DATETIME;
    DECLARE @xFECHAFRST DATETIME;
    DECLARE @xFECHASCND DATETIME;
    DECLARE @xFECHALAST DATETIME;
    DECLARE @lstPRODUCTOSCOLUMNAS TABLE (COLUMNNAMES VARCHAR(50));

    DECLARE @lstCICLOSFACTURACION WSXML_SFG.CICLOINFO;
    DECLARE @strPRODCOLUMNSBILL VARCHAR(2000) = '';
    DECLARE @strPRODCOLUMNSPREB VARCHAR(2000) = '';

	DECLARE @sql NVARCHAR(MAX)

    SELECT @sFECHACCLO = FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ID_CICLOFACTURACIONPDV = @p_CODCICLOFACTURACIONPDV;
    /* Reporte a partir de prefacturacion + facturacion. Obtener fechas de mes a partir del ciclo seleccionado */
    EXEC WSXML_SFG.SFG_PACKAGE_GetMonthRange @sFECHACCLO, @sFECHAFRST OUT, @sFECHALAST OUT
    /* Obtener identificadores de ciclos abarcados por el rango de fechas (correospondientes al mes del ciclo solicitado) */
    INSERT INTO @lstCICLOSFACTURACION
	SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAEJECUCION 
    FROM (SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, NULL AS FECHAINICIO, FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ACTIVE = 1 AND CONVERT(DATETIME, CONVERT(VARCHAR(7), FECHAEJECUCION, 120) + '-01') = CONVERT(DATETIME, CONVERT(VARCHAR(7), @sFECHACCLO, 120) + '-01'))t -- ORDER BY SECUENCIA);
    IF @@ROWCOUNT = 0 BEGIN
      RAISERROR('-20085 No existen ciclos de facturacion a la fecha estipulada', 16, 1);
    END 
    /* Sobreescribir fechas para cada ciclo, y obtener fechas generales de lista */
   DECLARE ix CURSOR FOR 
		SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAFIN 
		FROM @lstCICLOSFACTURACION

		OPEN ix

		DECLARE @_ultimaFila NUMERIC(38,0) = @@CURSOR_ROWS

		DECLARE @ix__ID_CICLOFACTURACIONPDV NUMERIC(38,0), @ix__SECUENCIA NUMERIC(38,0), @ix__FECHAINICIO DATETIME, @ix__FECHAFIN DATETIME
		DECLARE @ix__ID_CICLOFACTURACIONPDV_FIRST NUMERIC(38,0), @ix__SECUENCIA_FIRST NUMERIC(38,0), @ix__FECHAINICIO_FIRST DATETIME, @ix__FECHAFIN_FIRST DATETIME

        DECLARE @iniDATE DATETIME;
        DECLARE @endDATE DATETIME;
		FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN

		SET @ix__ID_CICLOFACTURACIONPDV_FIRST = @ix__ID_CICLOFACTURACIONPDV
		SET @ix__SECUENCIA_FIRST = @ix__SECUENCIA
		SET @ix__FECHAINICIO_FIRST = @ix__FECHAINICIO
		SET @ix__FECHAFIN_FIRST= @ix__FECHAFIN
		
		DECLARE @_fila INT = 1;
		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			EXEC WSXML_SFG.SFGCICLOFACTURACIONPDV_GetCicloDateRangeFromID @ix__ID_CICLOFACTURACIONPDV, @iniDATE OUT, @endDATE OUT
			SET @ix__FECHAINICIO = @iniDATE;
			SET @ix__FECHAFIN    = @endDATE;

			IF @_fila = 1 BEGIN
			--IF ix = lstCICLOSFACTURACION.First BEGIN
			  SET @xFECHAFRST = @iniDATE;
			  SET @xFECHASCND = @endDATE;
			END 
			--IF ix = lstCICLOSFACTURACION.Last BEGIN
			IF @_fila = @_ultimaFila BEGIN
			  SET @xFECHALAST = @endDATE;
			END

			SET @_fila = @_fila + 1
			FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN
		END;
		CLOSE ix;
		DEALLOCATE ix;
    /* Obtener lista de productos */
    DECLARE tPRODUCT CURSOR FOR 
			SELECT ID_AGRUPACIONPRODUCTO, AGR.NOMAGRUPACIONPRODUCTO FROM WSXML_SFG.AGRUPACIONPRODUCTO AGR
				INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ON (AGR.CODTIPOPRODUCTO = TPR.ID_TIPOPRODUCTO)
            WHERE TPR.CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO ORDER BY NOMAGRUPACIONPRODUCTO; 
	OPEN tPRODUCT;
	DECLARE @tPRODUCT__ID_AGRUPACIONPRODUCTO NUMERIC(38,0), @tPRODUCT__NOMAGRUPACIONPRODUCTO VARCHAR(255)
	FETCH tPRODUCT INTO @tPRODUCT__ID_AGRUPACIONPRODUCTO, @tPRODUCT__NOMAGRUPACIONPRODUCTO
	 WHILE @@FETCH_STATUS=0
	 BEGIN
        DECLARE @thisCOLUMNNAME VARCHAR(50);
        DECLARE @existsINLIST NUMERIC(22,0) = 0;
      BEGIN
        SET @thisCOLUMNNAME = CONVERT(VARCHAR, '"' + ISNULL(CASE WHEN LEN(@tPRODUCT__NOMAGRUPACIONPRODUCTO) > 30 THEN SUBSTRING(@tPRODUCT__NOMAGRUPACIONPRODUCTO, 0, 30) ELSE @tPRODUCT__NOMAGRUPACIONPRODUCTO END, '') + '"');
        IF (SELECT COUNT(*) FROM @lstPRODUCTOSCOLUMNAS) > 0 BEGIN
			DECLARE ix2 CURSOR FOR SELECT COLUMNNAMES FROM @lstPRODUCTOSCOLUMNAS
			OPEN ix2
			DECLARE @ix2__IDVALUE NUMERIC(38,0)
			FETCH ix2 INTO @ix2__IDVALUE
			 WHILE @@FETCH_STATUS=0
			 BEGIN
				IF @ix2__IDVALUE = @thisCOLUMNNAME BEGIN
					SET @existsINLIST = 1;
				END 
				FETCH ix2 INTO @ix2__IDVALUE
			END;
			CLOSE ix2;
			DEALLOCATE ix2;
        END 
        IF @existsINLIST = 0 BEGIN
          INSERT INTO @lstPRODUCTOSCOLUMNAS VALUES( @thisCOLUMNNAME )
          SET @strPRODCOLUMNSBILL = ISNULL(@strPRODCOLUMNSBILL, '') + ', SUM(CASE WHEN AGP.ID = ' + CONVERT(VARCHAR,@tPRODUCT__ID_AGRUPACIONPRODUCTO) + ' THEN ISNULL(VALOR, 0) ELSE 0 END) AS ' + ISNULL(@thisCOLUMNNAME, '') + ' ';
          SET @strPRODCOLUMNSPREB = ISNULL(@strPRODCOLUMNSPREB, '') + ', SUM(CASE WHEN AGP.ID = ' + CONVERT(VARCHAR,@tPRODUCT__ID_AGRUPACIONPRODUCTO) + ' THEN ISNULL(VALOR, 0) ELSE 0 END) AS ' + ISNULL(@thisCOLUMNNAME, '') + ' ';
        END 
      END;
    FETCH tPRODUCT INTO @tPRODUCT__ID_AGRUPACIONPRODUCTO, @tPRODUCT__NOMAGRUPACIONPRODUCTO
    END;
    CLOSE tPRODUCT;
    DEALLOCATE tPRODUCT;
    /* Abrir el cursor con los datos */
        SET @sql = 

      'SELECT CLI.ID_CICLOFACTURACIONPDV ' +              'AS IDCICLO, ' +
             'CLI.SECUENCIA ' +                           'AS ORDEN, ' +
             'WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CLI.FECHAFIN) ' + 'AS SEMANA, ' +
             'WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CLI.FECHAFIN) ' + 'AS SEMANA1, ' +
             'WSXML_SFG.SFG_PACKAGE_GetYearNumber(CLI.FECHAFIN) ' + 'AS YEARNUMBER, ' +
             'CLI.FECHAINICIO ' +                         'AS FECHAINICIO, ' + ' ' +
             'CLI.FECHAFIN ' +                            'AS FECHAFIN ' + @strPRODCOLUMNSBILL +
      'FROM WSXML_SFG.SFGINF_CIERREMENSUAL_GetCiclosFacturacionList(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHACCLO) + ''') CLI ' +
      'INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ' +                       'ON (1 = 1) ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +          'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                           'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT ID_CICLOFACTURACIONPDV, CODPRODUCTO, VALORCOMISIONNORMAL AS VALOR ' +
                       'FROM WSXML_SFG.VW_SHOW_PRDFACTURACION) PRF ' + 'ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO AND PRF.ID_CICLOFACTURACIONPDV = CLI.ID_CICLOFACTURACIONPDV) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                   + ' ' END +
      'GROUP BY CLI.ID_CICLOFACTURACIONPDV, CLI.SECUENCIA, CLI.FECHAINICIO, CLI.FECHAFIN ' +

      -- Condition for initial segment that the initial dates do not match
      
		CASE WHEN @xFECHAFRST = @sFECHAFRST THEN ' ' ELSE 'UNION ' +
			'SELECT ' + @ix__ID_CICLOFACTURACIONPDV_FIRST + '													AS IDCICLO,'+
              '-1                                                                                               AS ORDEN, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(@ix__FECHAFIN_FIRST)) +				              '			AS SEMANA, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(@ix__FECHAFIN_FIRST)) +	             ' AS SEMANA1, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetYearNumber(@ix__FECHAFIN_FIRST)) +              '  AS YEARNUMBER, ' +
              'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHAFRST) + ''') ' +                   ' AS FECHAINICIO, ' +
              'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@ix__FECHAFIN_FIRST) + ''') ' + 'AS FECHAFIN ' + @strPRODCOLUMNSPREB + ' ' +
      'FROM WSXML_SFG.TIPOPRODUCTO TPR ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +         'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                          'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT CODPUNTODEVENTA, CODPRODUCTO, ROUND(SUM(COMISION),0) AS VALOR ' +
                       'FROM VW_PREFACTURACION_DIARIA ' +
                       'WHERE FECHAARCHIVO BETWEEN WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHAFRST) + ''') AND WSXML_SFG.SFG_PACKAGE_StringToDate(''' + @ix__FECHAFIN + ''') ' +
                         'AND CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
                       'GROUP BY CODPUNTODEVENTA, CODPRODUCTO) PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' +CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                   + ' ' END +
      'GROUP BY TPR.CODLINEADENEGOCIO ' END +

	  -- FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN

      -- Condition for final segment that the final dates are not the same
      CASE WHEN @xFECHALAST = @sFECHALAST THEN ' ' ELSE
      'UNION ' +
      'SELECT ' + CONVERT(VARCHAR,@ix__ID_CICLOFACTURACIONPDV)  +               ' AS IDCICLO, ' +
              '999999999' +                                                                                        ' AS ORDEN, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS SEMANA, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS SEMANA1, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetYearNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS YEARNUMBER, ' +
             'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(CONVERT(DATETIME,@ix__FECHAFIN) + 1) + ''') ' + 'AS FECHAINICIO, ' +
             'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHALAST) + ''') ' +                                                   'AS FECHAFIN ' + @strPRODCOLUMNSPREB + ' ' +
      'FROM WSXML_SFG.TIPOPRODUCTO TPR ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +         'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                          'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT CODPUNTODEVENTA, CODPRODUCTO, ROUND(SUM(COMISION),0) AS VALOR ' +
                       'FROM WSXML_SFG.VW_PREFACTURACION_DIARIA ' +
                       'WHERE FECHAARCHIVO BETWEEN WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(CONVERT(DATETIME,@ix__FECHAFIN) + 1) + ''') AND WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHALAST) + ''') ' +
                         'AND CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
                       'GROUP BY CODPUNTODEVENTA, CODPRODUCTO) PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                  + ' ' END +
      'GROUP BY TPR.CODLINEADENEGOCIO ' END +

      'ORDER BY ORDEN';
	  --PRINT @sql
	  EXECUTE sp_executesql @sql
  END;										  
GO


   IF OBJECT_ID('WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataComisionA', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataComisionA;
GO


CREATE     PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataComisionA(@p_CODCICLOFACTURACIONPDV NUMERIC(22,0),
                                           @p_CODLINEADENEGOCIO      NUMERIC(22,0),
                                           @pg_CADENA                NVARCHAR(2000),
                                           @pg_ALIADOESTRATEGICO     NVARCHAR(2000),
                                          @pg_PRODUCTO              NVARCHAR(2000)) AS
  BEGIN
    DECLARE @sFECHACCLO DATETIME;
    DECLARE @sFECHAFRST DATETIME;
    DECLARE @sFECHALAST DATETIME;
    DECLARE @xFECHAFRST DATETIME;
    DECLARE @xFECHASCND DATETIME;
    DECLARE @xFECHALAST DATETIME;
    DECLARE @lstPRODUCTOSCOLUMNAS TABLE (COLUMNNAMES VARCHAR(50));

    DECLARE @lstCICLOSFACTURACION WSXML_SFG.CICLOINFO;
    DECLARE @strPRODCOLUMNSBILL VARCHAR(2000) = '';
    DECLARE @strPRODCOLUMNSPREB VARCHAR(2000) = '';

	DECLARE @sql NVARCHAR(MAX)

    SELECT @sFECHACCLO = FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ID_CICLOFACTURACIONPDV = @p_CODCICLOFACTURACIONPDV;
    /* Reporte a partir de prefacturacion + facturacion. Obtener fechas de mes a partir del ciclo seleccionado */
    EXEC WSXML_SFG.SFG_PACKAGE_GetMonthRange @sFECHACCLO, @sFECHAFRST OUT, @sFECHALAST OUT
    /* Obtener identificadores de ciclos abarcados por el rango de fechas (correospondientes al mes del ciclo solicitado) */
    INSERT INTO @lstCICLOSFACTURACION
	SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAEJECUCION 
    FROM (SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, NULL AS FECHAINICIO, FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ACTIVE = 1 AND CONVERT(DATETIME, CONVERT(VARCHAR(7), FECHAEJECUCION, 120) + '-01') = CONVERT(DATETIME, CONVERT(VARCHAR(7), @sFECHACCLO, 120) + '-01'))t -- ORDER BY SECUENCIA);
    IF @@ROWCOUNT = 0 BEGIN
      RAISERROR('-20085 No existen ciclos de facturacion a la fecha estipulada', 16, 1);
    END 
    /* Sobreescribir fechas para cada ciclo, y obtener fechas generales de lista */
   DECLARE ix CURSOR FOR 
		SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAFIN 
		FROM @lstCICLOSFACTURACION

		OPEN ix

		DECLARE @_ultimaFila NUMERIC(38,0) = @@CURSOR_ROWS

		DECLARE @ix__ID_CICLOFACTURACIONPDV NUMERIC(38,0), @ix__SECUENCIA NUMERIC(38,0), @ix__FECHAINICIO DATETIME, @ix__FECHAFIN DATETIME
		DECLARE @ix__ID_CICLOFACTURACIONPDV_FIRST NUMERIC(38,0), @ix__SECUENCIA_FIRST NUMERIC(38,0), @ix__FECHAINICIO_FIRST DATETIME, @ix__FECHAFIN_FIRST DATETIME

        DECLARE @iniDATE DATETIME;
        DECLARE @endDATE DATETIME;
		FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN

		SET @ix__ID_CICLOFACTURACIONPDV_FIRST = @ix__ID_CICLOFACTURACIONPDV
		SET @ix__SECUENCIA_FIRST = @ix__SECUENCIA
		SET @ix__FECHAINICIO_FIRST = @ix__FECHAINICIO
		SET @ix__FECHAFIN_FIRST= @ix__FECHAFIN
		
		DECLARE @_fila INT = 1;
		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			EXEC WSXML_SFG.SFGCICLOFACTURACIONPDV_GetCicloDateRangeFromID @ix__ID_CICLOFACTURACIONPDV, @iniDATE OUT, @endDATE OUT
			SET @ix__FECHAINICIO = @iniDATE;
			SET @ix__FECHAFIN    = @endDATE;

			IF @_fila = 1 BEGIN
			--IF ix = lstCICLOSFACTURACION.First BEGIN
			  SET @xFECHAFRST = @iniDATE;
			  SET @xFECHASCND = @endDATE;
			END 
			--IF ix = lstCICLOSFACTURACION.Last BEGIN
			IF @_fila = @_ultimaFila BEGIN
			  SET @xFECHALAST = @endDATE;
			END

			SET @_fila = @_fila + 1
			FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN
		END;
		CLOSE ix;
		DEALLOCATE ix;
    /* Obtener lista de productos */
    DECLARE tPRODUCT CURSOR FOR 
			SELECT ID_AGRUPACIONPRODUCTO, AGR.NOMAGRUPACIONPRODUCTO FROM WSXML_SFG.AGRUPACIONPRODUCTO AGR
				INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ON (AGR.CODTIPOPRODUCTO = TPR.ID_TIPOPRODUCTO)
            WHERE TPR.CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO ORDER BY NOMAGRUPACIONPRODUCTO; 
	OPEN tPRODUCT;
	DECLARE @tPRODUCT__ID_AGRUPACIONPRODUCTO NUMERIC(38,0), @tPRODUCT__NOMAGRUPACIONPRODUCTO VARCHAR(255)
	FETCH tPRODUCT INTO @tPRODUCT__ID_AGRUPACIONPRODUCTO, @tPRODUCT__NOMAGRUPACIONPRODUCTO
	 WHILE @@FETCH_STATUS=0
	 BEGIN
        DECLARE @thisCOLUMNNAME VARCHAR(50);
        DECLARE @existsINLIST NUMERIC(22,0) = 0;
      BEGIN
        SET @thisCOLUMNNAME = CONVERT(VARCHAR, '"' + ISNULL(CASE WHEN LEN(@tPRODUCT__NOMAGRUPACIONPRODUCTO) > 30 THEN SUBSTRING(@tPRODUCT__NOMAGRUPACIONPRODUCTO, 0, 30) ELSE @tPRODUCT__NOMAGRUPACIONPRODUCTO END, '') + '"');
        IF (SELECT COUNT(*) FROM @lstPRODUCTOSCOLUMNAS) > 0 BEGIN
			DECLARE ix2 CURSOR FOR SELECT COLUMNNAMES FROM @lstPRODUCTOSCOLUMNAS
			OPEN ix2
			DECLARE @ix2__IDVALUE NUMERIC(38,0)
			FETCH ix2 INTO @ix2__IDVALUE
			 WHILE @@FETCH_STATUS=0
			 BEGIN
				IF @ix2__IDVALUE = @thisCOLUMNNAME BEGIN
					SET @existsINLIST = 1;
				END 
				FETCH ix2 INTO @ix2__IDVALUE
			END;
			CLOSE ix2;
			DEALLOCATE ix2;
        END 
        IF @existsINLIST = 0 BEGIN
          INSERT INTO @lstPRODUCTOSCOLUMNAS VALUES( @thisCOLUMNNAME )
          SET @strPRODCOLUMNSBILL = ISNULL(@strPRODCOLUMNSBILL, '') + ', SUM(CASE WHEN AGP.ID = ' + CONVERT(VARCHAR,@tPRODUCT__ID_AGRUPACIONPRODUCTO) + ' THEN ISNULL(VALOR, 0) ELSE 0 END) AS ' + ISNULL(@thisCOLUMNNAME, '') + ' ';
          SET @strPRODCOLUMNSPREB = ISNULL(@strPRODCOLUMNSPREB, '') + ', SUM(CASE WHEN AGP.ID = ' + CONVERT(VARCHAR,@tPRODUCT__ID_AGRUPACIONPRODUCTO) + ' THEN ISNULL(VALOR, 0) ELSE 0 END) AS ' + ISNULL(@thisCOLUMNNAME, '') + ' ';
        END 
      END;
    FETCH tPRODUCT INTO @tPRODUCT__ID_AGRUPACIONPRODUCTO, @tPRODUCT__NOMAGRUPACIONPRODUCTO
    END;
    CLOSE tPRODUCT;
    DEALLOCATE tPRODUCT;
    /* Abrir el cursor con los datos */
        SET @sql = 

      'SELECT CLI.ID_CICLOFACTURACIONPDV ' +              'AS IDCICLO, ' +
             'CLI.SECUENCIA ' +                           'AS ORDEN, ' +
             'WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CLI.FECHAFIN) ' + 'AS SEMANA, ' +
             'WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CLI.FECHAFIN) ' + 'AS SEMANA1, ' +
             'WSXML_SFG.SFG_PACKAGE_GetYearNumber(CLI.FECHAFIN) ' + 'AS YEARNUMBER, ' +
             'CLI.FECHAINICIO ' +                         'AS FECHAINICIO, ' + ' ' +
             'CLI.FECHAFIN ' +                            'AS FECHAFIN ' + @strPRODCOLUMNSBILL +
      'FROM WSXML_SFG.SFGINF_CIERREMENSUAL_GetCiclosFacturacionList(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHACCLO) + ''') CLI ' +
      'INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ' +                       'ON (1 = 1) ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +          'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                           'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT ID_CICLOFACTURACIONPDV, CODPRODUCTO, VALORCOMISIONANTICIPO AS VALOR ' +
                       'FROM WSXML_SFG.VW_SHOW_PRDFACTURACION) PRF ' + 'ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO AND PRF.ID_CICLOFACTURACIONPDV = CLI.ID_CICLOFACTURACIONPDV) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                   + ' ' END +
      'GROUP BY CLI.ID_CICLOFACTURACIONPDV, CLI.SECUENCIA, CLI.FECHAINICIO, CLI.FECHAFIN ' +

      -- Condition for initial segment that the initial dates do not match
      
		CASE WHEN @xFECHAFRST = @sFECHAFRST THEN ' ' ELSE 'UNION ' +
			'SELECT ' + @ix__ID_CICLOFACTURACIONPDV_FIRST + '													AS IDCICLO,'+
              '-1                                                                                               AS ORDEN, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(@ix__FECHAFIN_FIRST)) +				              '			AS SEMANA, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(@ix__FECHAFIN_FIRST)) +	             ' AS SEMANA1, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetYearNumber(@ix__FECHAFIN_FIRST)) +              '  AS YEARNUMBER, ' +
              'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHAFRST) + ''') ' +                   ' AS FECHAINICIO, ' +
              'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@ix__FECHAFIN_FIRST) + ''') ' + 'AS FECHAFIN ' + @strPRODCOLUMNSPREB + ' ' +
      'FROM WSXML_SFG.TIPOPRODUCTO TPR ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +         'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                          'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT CODPUNTODEVENTA, CODPRODUCTO, ROUND(SUM(COMISIONANTICIPO),0) AS VALOR ' +
                       'FROM VW_PREFACTURACION_DIARIA ' +
                       'WHERE FECHAARCHIVO BETWEEN WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHAFRST) + ''') AND WSXML_SFG.SFG_PACKAGE_StringToDate(''' + @ix__FECHAFIN + ''') ' +
                         'AND CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
                       'GROUP BY CODPUNTODEVENTA, CODPRODUCTO) PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' +CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                   + ' ' END +
      'GROUP BY TPR.CODLINEADENEGOCIO ' END +

	  -- FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN

      -- Condition for final segment that the final dates are not the same
      CASE WHEN @xFECHALAST = @sFECHALAST THEN ' ' ELSE
      'UNION ' +
      'SELECT ' + CONVERT(VARCHAR,@ix__ID_CICLOFACTURACIONPDV)  +               ' AS IDCICLO, ' +
              '999999999' +                                                                                        ' AS ORDEN, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS SEMANA, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS SEMANA1, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetYearNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS YEARNUMBER, ' +
             'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(CONVERT(DATETIME,@ix__FECHAFIN) + 1) + ''') ' + 'AS FECHAINICIO, ' +
             'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHALAST) + ''') ' +                                                   'AS FECHAFIN ' + @strPRODCOLUMNSPREB + ' ' +
      'FROM WSXML_SFG.TIPOPRODUCTO TPR ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +         'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                          'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT CODPUNTODEVENTA, CODPRODUCTO, ROUND(SUM(COMISIONANTICIPO),0) AS VALOR ' +
                       'FROM WSXML_SFG.VW_PREFACTURACION_DIARIA ' +
                       'WHERE FECHAARCHIVO BETWEEN WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(CONVERT(DATETIME,@ix__FECHAFIN) + 1) + ''') AND WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHALAST) + ''') ' +
                         'AND CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
                       'GROUP BY CODPUNTODEVENTA, CODPRODUCTO) PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                  + ' ' END +
      'GROUP BY TPR.CODLINEADENEGOCIO ' END +

      'ORDER BY ORDEN';
	  --PRINT @sql
	  EXECUTE sp_executesql @sql
    
  END;										  
GO

   IF OBJECT_ID('WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataIVACmsion', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataIVACmsion;
GO


CREATE     PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataIVACmsion(@p_CODCICLOFACTURACIONPDV NUMERIC(22,0),
                                           @p_CODLINEADENEGOCIO      NUMERIC(22,0),
                                           @pg_CADENA                NVARCHAR(2000),
                                           @pg_ALIADOESTRATEGICO     NVARCHAR(2000),
                                          @pg_PRODUCTO              NVARCHAR(2000)) AS
  BEGIN
    DECLARE @sFECHACCLO DATETIME;
    DECLARE @sFECHAFRST DATETIME;
    DECLARE @sFECHALAST DATETIME;
    DECLARE @xFECHAFRST DATETIME;
    DECLARE @xFECHASCND DATETIME;
    DECLARE @xFECHALAST DATETIME;
    DECLARE @lstPRODUCTOSCOLUMNAS TABLE (COLUMNNAMES VARCHAR(50));

    DECLARE @lstCICLOSFACTURACION WSXML_SFG.CICLOINFO;
    DECLARE @strPRODCOLUMNSBILL VARCHAR(2000) = '';
    DECLARE @strPRODCOLUMNSPREB VARCHAR(2000) = '';

	DECLARE @sql NVARCHAR(MAX)

    SELECT @sFECHACCLO = FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ID_CICLOFACTURACIONPDV = @p_CODCICLOFACTURACIONPDV;
    /* Reporte a partir de prefacturacion + facturacion. Obtener fechas de mes a partir del ciclo seleccionado */
    EXEC WSXML_SFG.SFG_PACKAGE_GetMonthRange @sFECHACCLO, @sFECHAFRST OUT, @sFECHALAST OUT
    /* Obtener identificadores de ciclos abarcados por el rango de fechas (correospondientes al mes del ciclo solicitado) */
    INSERT INTO @lstCICLOSFACTURACION
	SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAEJECUCION 
    FROM (SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, NULL AS FECHAINICIO, FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ACTIVE = 1 AND CONVERT(DATETIME, CONVERT(VARCHAR(7), FECHAEJECUCION, 120) + '-01') = CONVERT(DATETIME, CONVERT(VARCHAR(7), @sFECHACCLO, 120) + '-01'))t -- ORDER BY SECUENCIA);
    IF @@ROWCOUNT = 0 BEGIN
      RAISERROR('-20085 No existen ciclos de facturacion a la fecha estipulada', 16, 1);
    END 
    /* Sobreescribir fechas para cada ciclo, y obtener fechas generales de lista */
   DECLARE ix CURSOR FOR 
		SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAFIN 
		FROM @lstCICLOSFACTURACION

		OPEN ix

		DECLARE @_ultimaFila NUMERIC(38,0) = @@CURSOR_ROWS

		DECLARE @ix__ID_CICLOFACTURACIONPDV NUMERIC(38,0), @ix__SECUENCIA NUMERIC(38,0), @ix__FECHAINICIO DATETIME, @ix__FECHAFIN DATETIME
		DECLARE @ix__ID_CICLOFACTURACIONPDV_FIRST NUMERIC(38,0), @ix__SECUENCIA_FIRST NUMERIC(38,0), @ix__FECHAINICIO_FIRST DATETIME, @ix__FECHAFIN_FIRST DATETIME

        DECLARE @iniDATE DATETIME;
        DECLARE @endDATE DATETIME;
		FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN

		SET @ix__ID_CICLOFACTURACIONPDV_FIRST = @ix__ID_CICLOFACTURACIONPDV
		SET @ix__SECUENCIA_FIRST = @ix__SECUENCIA
		SET @ix__FECHAINICIO_FIRST = @ix__FECHAINICIO
		SET @ix__FECHAFIN_FIRST= @ix__FECHAFIN
		
		DECLARE @_fila INT = 1;
		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			EXEC WSXML_SFG.SFGCICLOFACTURACIONPDV_GetCicloDateRangeFromID @ix__ID_CICLOFACTURACIONPDV, @iniDATE OUT, @endDATE OUT
			SET @ix__FECHAINICIO = @iniDATE;
			SET @ix__FECHAFIN    = @endDATE;

			IF @_fila = 1 BEGIN
			--IF ix = lstCICLOSFACTURACION.First BEGIN
			  SET @xFECHAFRST = @iniDATE;
			  SET @xFECHASCND = @endDATE;
			END 
			--IF ix = lstCICLOSFACTURACION.Last BEGIN
			IF @_fila = @_ultimaFila BEGIN
			  SET @xFECHALAST = @endDATE;
			END

			SET @_fila = @_fila + 1
			FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN
		END;
		CLOSE ix;
		DEALLOCATE ix;
    /* Obtener lista de productos */
    DECLARE tPRODUCT CURSOR FOR 
			SELECT ID_AGRUPACIONPRODUCTO, AGR.NOMAGRUPACIONPRODUCTO FROM WSXML_SFG.AGRUPACIONPRODUCTO AGR
				INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ON (AGR.CODTIPOPRODUCTO = TPR.ID_TIPOPRODUCTO)
            WHERE TPR.CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO ORDER BY NOMAGRUPACIONPRODUCTO; 
	OPEN tPRODUCT;
	DECLARE @tPRODUCT__ID_AGRUPACIONPRODUCTO NUMERIC(38,0), @tPRODUCT__NOMAGRUPACIONPRODUCTO VARCHAR(255)
	FETCH tPRODUCT INTO @tPRODUCT__ID_AGRUPACIONPRODUCTO, @tPRODUCT__NOMAGRUPACIONPRODUCTO
	 WHILE @@FETCH_STATUS=0
	 BEGIN
        DECLARE @thisCOLUMNNAME VARCHAR(50);
        DECLARE @existsINLIST NUMERIC(22,0) = 0;
      BEGIN
        SET @thisCOLUMNNAME = CONVERT(VARCHAR, '"' + ISNULL(CASE WHEN LEN(@tPRODUCT__NOMAGRUPACIONPRODUCTO) > 30 THEN SUBSTRING(@tPRODUCT__NOMAGRUPACIONPRODUCTO, 0, 30) ELSE @tPRODUCT__NOMAGRUPACIONPRODUCTO END, '') + '"');
        IF (SELECT COUNT(*) FROM @lstPRODUCTOSCOLUMNAS) > 0 BEGIN
			DECLARE ix2 CURSOR FOR SELECT COLUMNNAMES FROM @lstPRODUCTOSCOLUMNAS
			OPEN ix2
			DECLARE @ix2__IDVALUE NUMERIC(38,0)
			FETCH ix2 INTO @ix2__IDVALUE
			 WHILE @@FETCH_STATUS=0
			 BEGIN
				IF @ix2__IDVALUE = @thisCOLUMNNAME BEGIN
					SET @existsINLIST = 1;
				END 
				FETCH ix2 INTO @ix2__IDVALUE
			END;
			CLOSE ix2;
			DEALLOCATE ix2;
        END 
        IF @existsINLIST = 0 BEGIN
          INSERT INTO @lstPRODUCTOSCOLUMNAS VALUES( @thisCOLUMNNAME )
          SET @strPRODCOLUMNSBILL = ISNULL(@strPRODCOLUMNSBILL, '') + ', SUM(CASE WHEN AGP.ID = ' + CONVERT(VARCHAR,@tPRODUCT__ID_AGRUPACIONPRODUCTO) + ' THEN ISNULL(VALOR, 0) ELSE 0 END) AS ' + ISNULL(@thisCOLUMNNAME, '') + ' ';
          SET @strPRODCOLUMNSPREB = ISNULL(@strPRODCOLUMNSPREB, '') + ', SUM(CASE WHEN AGP.ID = ' + CONVERT(VARCHAR,@tPRODUCT__ID_AGRUPACIONPRODUCTO) + ' THEN ISNULL(VALOR, 0) ELSE 0 END) AS ' + ISNULL(@thisCOLUMNNAME, '') + ' ';
        END 
      END;
    FETCH tPRODUCT INTO @tPRODUCT__ID_AGRUPACIONPRODUCTO, @tPRODUCT__NOMAGRUPACIONPRODUCTO
    END;
    CLOSE tPRODUCT;
    DEALLOCATE tPRODUCT;
    /* Abrir el cursor con los datos */
        SET @sql = 

      'SELECT CLI.ID_CICLOFACTURACIONPDV ' +              'AS IDCICLO, ' +
             'CLI.SECUENCIA ' +                           'AS ORDEN, ' +
             'WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CLI.FECHAFIN) ' + 'AS SEMANA, ' +
             'WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CLI.FECHAFIN) ' + 'AS SEMANA1, ' +
             'WSXML_SFG.SFG_PACKAGE_GetYearNumber(CLI.FECHAFIN) ' + 'AS YEARNUMBER, ' +
             'CLI.FECHAINICIO ' +                         'AS FECHAINICIO, ' + ' ' +
             'CLI.FECHAFIN ' +                            'AS FECHAFIN ' + @strPRODCOLUMNSBILL +
      'FROM WSXML_SFG.SFGINF_CIERREMENSUAL_GetCiclosFacturacionList(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHACCLO) + ''') CLI ' +
      'INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ' +                       'ON (1 = 1) ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +          'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                           'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT ID_CICLOFACTURACIONPDV, CODPRODUCTO, VATCOMISION AS VALOR ' +
                       'FROM WSXML_SFG.VW_SHOW_PRDFACTURACION) PRF ' + 'ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO AND PRF.ID_CICLOFACTURACIONPDV = CLI.ID_CICLOFACTURACIONPDV) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                   + ' ' END +
      'GROUP BY CLI.ID_CICLOFACTURACIONPDV, CLI.SECUENCIA, CLI.FECHAINICIO, CLI.FECHAFIN ' +

      -- Condition for initial segment that the initial dates do not match
      
		CASE WHEN @xFECHAFRST = @sFECHAFRST THEN ' ' ELSE 'UNION ' +
			'SELECT ' + @ix__ID_CICLOFACTURACIONPDV_FIRST + '													AS IDCICLO,'+
              '-1                                                                                               AS ORDEN, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(@ix__FECHAFIN_FIRST)) +				              '			AS SEMANA, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(@ix__FECHAFIN_FIRST)) +	             ' AS SEMANA1, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetYearNumber(@ix__FECHAFIN_FIRST)) +              '  AS YEARNUMBER, ' +
              'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHAFRST) + ''') ' +                   ' AS FECHAINICIO, ' +
              'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@ix__FECHAFIN_FIRST) + ''') ' + 'AS FECHAFIN ' + @strPRODCOLUMNSPREB + ' ' +
      'FROM WSXML_SFG.TIPOPRODUCTO TPR ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +         'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                          'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT CODPUNTODEVENTA, CODPRODUCTO, ROUND(SUM(IVACOMISION),0) AS VALOR ' +
                       'FROM VW_PREFACTURACION_DIARIA ' +
                       'WHERE FECHAARCHIVO BETWEEN WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHAFRST) + ''') AND WSXML_SFG.SFG_PACKAGE_StringToDate(''' + @ix__FECHAFIN + ''') ' +
                         'AND CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
                       'GROUP BY CODPUNTODEVENTA, CODPRODUCTO) PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' +CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                   + ' ' END +
      'GROUP BY TPR.CODLINEADENEGOCIO ' END +

	  -- FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN

      -- Condition for final segment that the final dates are not the same
      CASE WHEN @xFECHALAST = @sFECHALAST THEN ' ' ELSE
      'UNION ' +
      'SELECT ' + CONVERT(VARCHAR,@ix__ID_CICLOFACTURACIONPDV)  +               ' AS IDCICLO, ' +
              '999999999' +                                                                                        ' AS ORDEN, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS SEMANA, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS SEMANA1, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetYearNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS YEARNUMBER, ' +
             'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(CONVERT(DATETIME,@ix__FECHAFIN) + 1) + ''') ' + 'AS FECHAINICIO, ' +
             'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHALAST) + ''') ' +                                                   'AS FECHAFIN ' + @strPRODCOLUMNSPREB + ' ' +
      'FROM WSXML_SFG.TIPOPRODUCTO TPR ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +         'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                          'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT CODPUNTODEVENTA, CODPRODUCTO, ROUND(SUM(IVACOMISION),0) AS VALOR ' +
                       'FROM WSXML_SFG.VW_PREFACTURACION_DIARIA ' +
                       'WHERE FECHAARCHIVO BETWEEN WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(CONVERT(DATETIME,@ix__FECHAFIN) + 1) + ''') AND WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHALAST) + ''') ' +
                         'AND CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
                       'GROUP BY CODPUNTODEVENTA, CODPRODUCTO) PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                  + ' ' END +
      'GROUP BY TPR.CODLINEADENEGOCIO ' END +

      'ORDER BY ORDEN';
	  --PRINT @sql
	  EXECUTE sp_executesql @sql
    
  END;										  
GO

IF OBJECT_ID('WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataReteFuent', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataReteFuent;
GO


CREATE     PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataReteFuent(@p_CODCICLOFACTURACIONPDV NUMERIC(22,0),
                                           @p_CODLINEADENEGOCIO      NUMERIC(22,0),
                                           @pg_CADENA                NVARCHAR(2000),
                                           @pg_ALIADOESTRATEGICO     NVARCHAR(2000),
                                          @pg_PRODUCTO              NVARCHAR(2000)) AS
  BEGIN
     DECLARE @sFECHACCLO DATETIME;
    DECLARE @sFECHAFRST DATETIME;
    DECLARE @sFECHALAST DATETIME;
    DECLARE @xFECHAFRST DATETIME;
    DECLARE @xFECHASCND DATETIME;
    DECLARE @xFECHALAST DATETIME;
    DECLARE @lstPRODUCTOSCOLUMNAS TABLE (COLUMNNAMES VARCHAR(50));

    DECLARE @lstCICLOSFACTURACION WSXML_SFG.CICLOINFO;
    DECLARE @strPRODCOLUMNSBILL VARCHAR(2000) = '';
    DECLARE @strPRODCOLUMNSPREB VARCHAR(2000) = '';

	DECLARE @sql NVARCHAR(MAX)

    SELECT @sFECHACCLO = FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ID_CICLOFACTURACIONPDV = @p_CODCICLOFACTURACIONPDV;
    /* Reporte a partir de prefacturacion + facturacion. Obtener fechas de mes a partir del ciclo seleccionado */
    EXEC WSXML_SFG.SFG_PACKAGE_GetMonthRange @sFECHACCLO, @sFECHAFRST OUT, @sFECHALAST OUT
    /* Obtener identificadores de ciclos abarcados por el rango de fechas (correospondientes al mes del ciclo solicitado) */
    INSERT INTO @lstCICLOSFACTURACION
	SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAEJECUCION 
    FROM (SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, NULL AS FECHAINICIO, FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ACTIVE = 1 AND CONVERT(DATETIME, CONVERT(VARCHAR(7), FECHAEJECUCION, 120) + '-01') = CONVERT(DATETIME, CONVERT(VARCHAR(7), @sFECHACCLO, 120) + '-01'))t -- ORDER BY SECUENCIA);
    IF @@ROWCOUNT = 0 BEGIN
      RAISERROR('-20085 No existen ciclos de facturacion a la fecha estipulada', 16, 1);
    END 
    /* Sobreescribir fechas para cada ciclo, y obtener fechas generales de lista */
   DECLARE ix CURSOR FOR 
		SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAFIN 
		FROM @lstCICLOSFACTURACION

		OPEN ix

		DECLARE @_ultimaFila NUMERIC(38,0) = @@CURSOR_ROWS

		DECLARE @ix__ID_CICLOFACTURACIONPDV NUMERIC(38,0), @ix__SECUENCIA NUMERIC(38,0), @ix__FECHAINICIO DATETIME, @ix__FECHAFIN DATETIME
		DECLARE @ix__ID_CICLOFACTURACIONPDV_FIRST NUMERIC(38,0), @ix__SECUENCIA_FIRST NUMERIC(38,0), @ix__FECHAINICIO_FIRST DATETIME, @ix__FECHAFIN_FIRST DATETIME

        DECLARE @iniDATE DATETIME;
        DECLARE @endDATE DATETIME;
		FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN

		SET @ix__ID_CICLOFACTURACIONPDV_FIRST = @ix__ID_CICLOFACTURACIONPDV
		SET @ix__SECUENCIA_FIRST = @ix__SECUENCIA
		SET @ix__FECHAINICIO_FIRST = @ix__FECHAINICIO
		SET @ix__FECHAFIN_FIRST= @ix__FECHAFIN
		
		DECLARE @_fila INT = 1;
		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			EXEC WSXML_SFG.SFGCICLOFACTURACIONPDV_GetCicloDateRangeFromID @ix__ID_CICLOFACTURACIONPDV, @iniDATE OUT, @endDATE OUT
			SET @ix__FECHAINICIO = @iniDATE;
			SET @ix__FECHAFIN    = @endDATE;

			IF @_fila = 1 BEGIN
			--IF ix = lstCICLOSFACTURACION.First BEGIN
			  SET @xFECHAFRST = @iniDATE;
			  SET @xFECHASCND = @endDATE;
			END 
			--IF ix = lstCICLOSFACTURACION.Last BEGIN
			IF @_fila = @_ultimaFila BEGIN
			  SET @xFECHALAST = @endDATE;
			END

			SET @_fila = @_fila + 1
			FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN
		END;
		CLOSE ix;
		DEALLOCATE ix;
    /* Obtener lista de productos */
    DECLARE tPRODUCT CURSOR FOR 
			SELECT ID_AGRUPACIONPRODUCTO, AGR.NOMAGRUPACIONPRODUCTO FROM WSXML_SFG.AGRUPACIONPRODUCTO AGR
				INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ON (AGR.CODTIPOPRODUCTO = TPR.ID_TIPOPRODUCTO)
            WHERE TPR.CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO ORDER BY NOMAGRUPACIONPRODUCTO; 
	OPEN tPRODUCT;
	DECLARE @tPRODUCT__ID_AGRUPACIONPRODUCTO NUMERIC(38,0), @tPRODUCT__NOMAGRUPACIONPRODUCTO VARCHAR(255)
	FETCH tPRODUCT INTO @tPRODUCT__ID_AGRUPACIONPRODUCTO, @tPRODUCT__NOMAGRUPACIONPRODUCTO
	 WHILE @@FETCH_STATUS=0
	 BEGIN
        DECLARE @thisCOLUMNNAME VARCHAR(50);
        DECLARE @existsINLIST NUMERIC(22,0) = 0;
      BEGIN
        SET @thisCOLUMNNAME = CONVERT(VARCHAR, '"' + ISNULL(CASE WHEN LEN(@tPRODUCT__NOMAGRUPACIONPRODUCTO) > 30 THEN SUBSTRING(@tPRODUCT__NOMAGRUPACIONPRODUCTO, 0, 30) ELSE @tPRODUCT__NOMAGRUPACIONPRODUCTO END, '') + '"');
        IF (SELECT COUNT(*) FROM @lstPRODUCTOSCOLUMNAS) > 0 BEGIN
			DECLARE ix2 CURSOR FOR SELECT COLUMNNAMES FROM @lstPRODUCTOSCOLUMNAS
			OPEN ix2
			DECLARE @ix2__IDVALUE NUMERIC(38,0)
			FETCH ix2 INTO @ix2__IDVALUE
			 WHILE @@FETCH_STATUS=0
			 BEGIN
				IF @ix2__IDVALUE = @thisCOLUMNNAME BEGIN
					SET @existsINLIST = 1;
				END 
				FETCH ix2 INTO @ix2__IDVALUE
			END;
			CLOSE ix2;
			DEALLOCATE ix2;
        END 
        IF @existsINLIST = 0 BEGIN
          INSERT INTO @lstPRODUCTOSCOLUMNAS VALUES( @thisCOLUMNNAME )
          SET @strPRODCOLUMNSBILL = ISNULL(@strPRODCOLUMNSBILL, '') + ', SUM(CASE WHEN AGP.ID = ' + CONVERT(VARCHAR,@tPRODUCT__ID_AGRUPACIONPRODUCTO) + ' THEN ISNULL(VALOR, 0) ELSE 0 END) AS ' + ISNULL(@thisCOLUMNNAME, '') + ' ';
          SET @strPRODCOLUMNSPREB = ISNULL(@strPRODCOLUMNSPREB, '') + ', SUM(CASE WHEN AGP.ID = ' + CONVERT(VARCHAR,@tPRODUCT__ID_AGRUPACIONPRODUCTO) + ' THEN ISNULL(VALOR, 0) ELSE 0 END) AS ' + ISNULL(@thisCOLUMNNAME, '') + ' ';
        END 
      END;
    FETCH tPRODUCT INTO @tPRODUCT__ID_AGRUPACIONPRODUCTO, @tPRODUCT__NOMAGRUPACIONPRODUCTO
    END;
    CLOSE tPRODUCT;
    DEALLOCATE tPRODUCT;
    /* Abrir el cursor con los datos */
        SET @sql = 

      'SELECT CLI.ID_CICLOFACTURACIONPDV ' +              'AS IDCICLO, ' +
             'CLI.SECUENCIA ' +                           'AS ORDEN, ' +
             'WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CLI.FECHAFIN) ' + 'AS SEMANA, ' +
             'WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CLI.FECHAFIN) ' + 'AS SEMANA1, ' +
             'WSXML_SFG.SFG_PACKAGE_GetYearNumber(CLI.FECHAFIN) ' + 'AS YEARNUMBER, ' +
             'CLI.FECHAINICIO ' +                         'AS FECHAINICIO, ' + ' ' +
             'CLI.FECHAFIN ' +                            'AS FECHAFIN ' + @strPRODCOLUMNSBILL +
      'FROM WSXML_SFG.SFGINF_CIERREMENSUAL_GetCiclosFacturacionList(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHACCLO) + ''') CLI ' +
      'INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ' +                       'ON (1 = 1) ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +          'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                           'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT ID_CICLOFACTURACIONPDV, CODPRODUCTO, RETENCION_RENTA AS VALOR ' +
                       'FROM WSXML_SFG.VW_SHOW_PRDFACTURACION) PRF ' + 'ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO AND PRF.ID_CICLOFACTURACIONPDV = CLI.ID_CICLOFACTURACIONPDV) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                   + ' ' END +
      'GROUP BY CLI.ID_CICLOFACTURACIONPDV, CLI.SECUENCIA, CLI.FECHAINICIO, CLI.FECHAFIN ' +

      -- Condition for initial segment that the initial dates do not match
      
		CASE WHEN @xFECHAFRST = @sFECHAFRST THEN ' ' ELSE 'UNION ' +
			'SELECT ' + @ix__ID_CICLOFACTURACIONPDV_FIRST + '													AS IDCICLO,'+
              '-1                                                                                               AS ORDEN, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(@ix__FECHAFIN_FIRST)) +				              '			AS SEMANA, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(@ix__FECHAFIN_FIRST)) +	             ' AS SEMANA1, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetYearNumber(@ix__FECHAFIN_FIRST)) +              '  AS YEARNUMBER, ' +
              'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHAFRST) + ''') ' +                   ' AS FECHAINICIO, ' +
              'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@ix__FECHAFIN_FIRST) + ''') ' + 'AS FECHAFIN ' + @strPRODCOLUMNSPREB + ' ' +
      'FROM WSXML_SFG.TIPOPRODUCTO TPR ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +         'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                          'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT CODPUNTODEVENTA, CODPRODUCTO, ROUND(SUM(RETEUVT + RETEFUENTE),0) AS VALOR ' +
                       'FROM VW_PREFACTURACION_DIARIA ' +
                       'WHERE FECHAARCHIVO BETWEEN WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHAFRST) + ''') AND WSXML_SFG.SFG_PACKAGE_StringToDate(''' + @ix__FECHAFIN + ''') ' +
                         'AND CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
                       'GROUP BY CODPUNTODEVENTA, CODPRODUCTO) PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' +CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                   + ' ' END +
      'GROUP BY TPR.CODLINEADENEGOCIO ' END +

	  -- FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN

      -- Condition for final segment that the final dates are not the same
      CASE WHEN @xFECHALAST = @sFECHALAST THEN ' ' ELSE
      'UNION ' +
      'SELECT ' + CONVERT(VARCHAR,@ix__ID_CICLOFACTURACIONPDV)  +               ' AS IDCICLO, ' +
              '999999999' +                                                                                        ' AS ORDEN, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS SEMANA, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS SEMANA1, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetYearNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS YEARNUMBER, ' +
             'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(CONVERT(DATETIME,@ix__FECHAFIN) + 1) + ''') ' + 'AS FECHAINICIO, ' +
             'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHALAST) + ''') ' +                                                   'AS FECHAFIN ' + @strPRODCOLUMNSPREB + ' ' +
      'FROM WSXML_SFG.TIPOPRODUCTO TPR ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +         'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                          'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT CODPUNTODEVENTA, CODPRODUCTO, ROUND(SUM(RETEUVT + RETEFUENTE),0) AS VALOR ' +
                       'FROM WSXML_SFG.VW_PREFACTURACION_DIARIA ' +
                       'WHERE FECHAARCHIVO BETWEEN WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(CONVERT(DATETIME,@ix__FECHAFIN) + 1) + ''') AND WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHALAST) + ''') ' +
                         'AND CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
                       'GROUP BY CODPUNTODEVENTA, CODPRODUCTO) PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                  + ' ' END +
      'GROUP BY TPR.CODLINEADENEGOCIO ' END +

      'ORDER BY ORDEN';
	  --PRINT @sql
	  EXECUTE sp_executesql @sql
    
  END;										  
GO


   IF OBJECT_ID('WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataRetencIVA', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataRetencIVA;
GO


CREATE     PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataRetencIVA(@p_CODCICLOFACTURACIONPDV NUMERIC(22,0),
                                           @p_CODLINEADENEGOCIO      NUMERIC(22,0),
                                           @pg_CADENA                NVARCHAR(2000),
                                           @pg_ALIADOESTRATEGICO     NVARCHAR(2000),
                                           @pg_PRODUCTO              NVARCHAR(2000),
                                           @p_cur varchar(8000)  OUTPUT) AS
  BEGIN										   
     DECLARE @sFECHACCLO DATETIME;
    DECLARE @sFECHAFRST DATETIME;
    DECLARE @sFECHALAST DATETIME;
    DECLARE @xFECHAFRST DATETIME;
    DECLARE @xFECHASCND DATETIME;
    DECLARE @xFECHALAST DATETIME;
    DECLARE @lstPRODUCTOSCOLUMNAS TABLE (COLUMNNAMES VARCHAR(50));

    DECLARE @lstCICLOSFACTURACION WSXML_SFG.CICLOINFO;
    DECLARE @strPRODCOLUMNSBILL VARCHAR(2000) = '';
    DECLARE @strPRODCOLUMNSPREB VARCHAR(2000) = '';

	DECLARE @sql NVARCHAR(MAX)

    SELECT @sFECHACCLO = FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ID_CICLOFACTURACIONPDV = @p_CODCICLOFACTURACIONPDV;
    /* Reporte a partir de prefacturacion + facturacion. Obtener fechas de mes a partir del ciclo seleccionado */
    EXEC WSXML_SFG.SFG_PACKAGE_GetMonthRange @sFECHACCLO, @sFECHAFRST OUT, @sFECHALAST OUT
    /* Obtener identificadores de ciclos abarcados por el rango de fechas (correospondientes al mes del ciclo solicitado) */
    INSERT INTO @lstCICLOSFACTURACION
	SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAEJECUCION 
    FROM (SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, NULL AS FECHAINICIO, FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ACTIVE = 1 AND CONVERT(DATETIME, CONVERT(VARCHAR(7), FECHAEJECUCION, 120) + '-01') = CONVERT(DATETIME, CONVERT(VARCHAR(7), @sFECHACCLO, 120) + '-01'))t -- ORDER BY SECUENCIA);
    IF @@ROWCOUNT = 0 BEGIN
      RAISERROR('-20085 No existen ciclos de facturacion a la fecha estipulada', 16, 1);
    END 
    /* Sobreescribir fechas para cada ciclo, y obtener fechas generales de lista */
   DECLARE ix CURSOR FOR 
		SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAFIN 
		FROM @lstCICLOSFACTURACION

		OPEN ix

		DECLARE @_ultimaFila NUMERIC(38,0) = @@CURSOR_ROWS

		DECLARE @ix__ID_CICLOFACTURACIONPDV NUMERIC(38,0), @ix__SECUENCIA NUMERIC(38,0), @ix__FECHAINICIO DATETIME, @ix__FECHAFIN DATETIME
		DECLARE @ix__ID_CICLOFACTURACIONPDV_FIRST NUMERIC(38,0), @ix__SECUENCIA_FIRST NUMERIC(38,0), @ix__FECHAINICIO_FIRST DATETIME, @ix__FECHAFIN_FIRST DATETIME

        DECLARE @iniDATE DATETIME;
        DECLARE @endDATE DATETIME;
		FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN

		SET @ix__ID_CICLOFACTURACIONPDV_FIRST = @ix__ID_CICLOFACTURACIONPDV
		SET @ix__SECUENCIA_FIRST = @ix__SECUENCIA
		SET @ix__FECHAINICIO_FIRST = @ix__FECHAINICIO
		SET @ix__FECHAFIN_FIRST= @ix__FECHAFIN
		
		DECLARE @_fila INT = 1;
		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			EXEC WSXML_SFG.SFGCICLOFACTURACIONPDV_GetCicloDateRangeFromID @ix__ID_CICLOFACTURACIONPDV, @iniDATE OUT, @endDATE OUT
			SET @ix__FECHAINICIO = @iniDATE;
			SET @ix__FECHAFIN    = @endDATE;

			IF @_fila = 1 BEGIN
			--IF ix = lstCICLOSFACTURACION.First BEGIN
			  SET @xFECHAFRST = @iniDATE;
			  SET @xFECHASCND = @endDATE;
			END 
			--IF ix = lstCICLOSFACTURACION.Last BEGIN
			IF @_fila = @_ultimaFila BEGIN
			  SET @xFECHALAST = @endDATE;
			END

			SET @_fila = @_fila + 1
			FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN
		END;
		CLOSE ix;
		DEALLOCATE ix;
    /* Obtener lista de productos */
    DECLARE tPRODUCT CURSOR FOR 
			SELECT ID_AGRUPACIONPRODUCTO, AGR.NOMAGRUPACIONPRODUCTO FROM WSXML_SFG.AGRUPACIONPRODUCTO AGR
				INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ON (AGR.CODTIPOPRODUCTO = TPR.ID_TIPOPRODUCTO)
            WHERE TPR.CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO ORDER BY NOMAGRUPACIONPRODUCTO; 
	OPEN tPRODUCT;
	DECLARE @tPRODUCT__ID_AGRUPACIONPRODUCTO NUMERIC(38,0), @tPRODUCT__NOMAGRUPACIONPRODUCTO VARCHAR(255)
	FETCH tPRODUCT INTO @tPRODUCT__ID_AGRUPACIONPRODUCTO, @tPRODUCT__NOMAGRUPACIONPRODUCTO
	 WHILE @@FETCH_STATUS=0
	 BEGIN
        DECLARE @thisCOLUMNNAME VARCHAR(50);
        DECLARE @existsINLIST NUMERIC(22,0) = 0;
      BEGIN
        SET @thisCOLUMNNAME = CONVERT(VARCHAR, '"' + ISNULL(CASE WHEN LEN(@tPRODUCT__NOMAGRUPACIONPRODUCTO) > 30 THEN SUBSTRING(@tPRODUCT__NOMAGRUPACIONPRODUCTO, 0, 30) ELSE @tPRODUCT__NOMAGRUPACIONPRODUCTO END, '') + '"');
        IF (SELECT COUNT(*) FROM @lstPRODUCTOSCOLUMNAS) > 0 BEGIN
			DECLARE ix2 CURSOR FOR SELECT COLUMNNAMES FROM @lstPRODUCTOSCOLUMNAS
			OPEN ix2
			DECLARE @ix2__IDVALUE NUMERIC(38,0)
			FETCH ix2 INTO @ix2__IDVALUE
			 WHILE @@FETCH_STATUS=0
			 BEGIN
				IF @ix2__IDVALUE = @thisCOLUMNNAME BEGIN
					SET @existsINLIST = 1;
				END 
				FETCH ix2 INTO @ix2__IDVALUE
			END;
			CLOSE ix2;
			DEALLOCATE ix2;
        END 
        IF @existsINLIST = 0 BEGIN
          INSERT INTO @lstPRODUCTOSCOLUMNAS VALUES( @thisCOLUMNNAME )
          SET @strPRODCOLUMNSBILL = ISNULL(@strPRODCOLUMNSBILL, '') + ', SUM(CASE WHEN AGP.ID = ' + CONVERT(VARCHAR,@tPRODUCT__ID_AGRUPACIONPRODUCTO) + ' THEN ISNULL(VALOR, 0) ELSE 0 END) AS ' + ISNULL(@thisCOLUMNNAME, '') + ' ';
          SET @strPRODCOLUMNSPREB = ISNULL(@strPRODCOLUMNSPREB, '') + ', SUM(CASE WHEN AGP.ID = ' + CONVERT(VARCHAR,@tPRODUCT__ID_AGRUPACIONPRODUCTO) + ' THEN ISNULL(VALOR, 0) ELSE 0 END) AS ' + ISNULL(@thisCOLUMNNAME, '') + ' ';
        END 
      END;
    FETCH tPRODUCT INTO @tPRODUCT__ID_AGRUPACIONPRODUCTO, @tPRODUCT__NOMAGRUPACIONPRODUCTO
    END;
    CLOSE tPRODUCT;
    DEALLOCATE tPRODUCT;
    /* Abrir el cursor con los datos */
        SET @sql = 

      'SELECT CLI.ID_CICLOFACTURACIONPDV ' +              'AS IDCICLO, ' +
             'CLI.SECUENCIA ' +                           'AS ORDEN, ' +
             'WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CLI.FECHAFIN) ' + 'AS SEMANA, ' +
             'WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CLI.FECHAFIN) ' + 'AS SEMANA1, ' +
             'WSXML_SFG.SFG_PACKAGE_GetYearNumber(CLI.FECHAFIN) ' + 'AS YEARNUMBER, ' +
             'CLI.FECHAINICIO ' +                         'AS FECHAINICIO, ' + ' ' +
             'CLI.FECHAFIN ' +                            'AS FECHAFIN ' + @strPRODCOLUMNSBILL +
      'FROM WSXML_SFG.SFGINF_CIERREMENSUAL_GetCiclosFacturacionList(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHACCLO) + ''') CLI ' +
      'INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ' +                       'ON (1 = 1) ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +          'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                           'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT ID_CICLOFACTURACIONPDV, CODPRODUCTO, RETENCION_RETEIVA AS VALOR ' +
                       'FROM WSXML_SFG.VW_SHOW_PRDFACTURACION) PRF ' + 'ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO AND PRF.ID_CICLOFACTURACIONPDV = CLI.ID_CICLOFACTURACIONPDV) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                   + ' ' END +
      'GROUP BY CLI.ID_CICLOFACTURACIONPDV, CLI.SECUENCIA, CLI.FECHAINICIO, CLI.FECHAFIN ' +

      -- Condition for initial segment that the initial dates do not match
      
		CASE WHEN @xFECHAFRST = @sFECHAFRST THEN ' ' ELSE 'UNION ' +
			'SELECT ' + @ix__ID_CICLOFACTURACIONPDV_FIRST + '													AS IDCICLO,'+
              '-1                                                                                               AS ORDEN, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(@ix__FECHAFIN_FIRST)) +				              '			AS SEMANA, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(@ix__FECHAFIN_FIRST)) +	             ' AS SEMANA1, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetYearNumber(@ix__FECHAFIN_FIRST)) +              '  AS YEARNUMBER, ' +
              'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHAFRST) + ''') ' +                   ' AS FECHAINICIO, ' +
              'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@ix__FECHAFIN_FIRST) + ''') ' + 'AS FECHAFIN ' + @strPRODCOLUMNSPREB + ' ' +
      'FROM WSXML_SFG.TIPOPRODUCTO TPR ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +         'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                          'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT CODPUNTODEVENTA, CODPRODUCTO, ROUND(SUM(RETEIVA),0) AS VALOR ' +
                       'FROM VW_PREFACTURACION_DIARIA ' +
                       'WHERE FECHAARCHIVO BETWEEN WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHAFRST) + ''') AND WSXML_SFG.SFG_PACKAGE_StringToDate(''' + @ix__FECHAFIN + ''') ' +
                         'AND CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
                       'GROUP BY CODPUNTODEVENTA, CODPRODUCTO) PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' +CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                   + ' ' END +
      'GROUP BY TPR.CODLINEADENEGOCIO ' END +

	  -- FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN

      -- Condition for final segment that the final dates are not the same
      CASE WHEN @xFECHALAST = @sFECHALAST THEN ' ' ELSE
      'UNION ' +
      'SELECT ' + CONVERT(VARCHAR,@ix__ID_CICLOFACTURACIONPDV)  +               ' AS IDCICLO, ' +
              '999999999' +                                                                                        ' AS ORDEN, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS SEMANA, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS SEMANA1, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetYearNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS YEARNUMBER, ' +
             'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(CONVERT(DATETIME,@ix__FECHAFIN) + 1) + ''') ' + 'AS FECHAINICIO, ' +
             'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHALAST) + ''') ' +                                                   'AS FECHAFIN ' + @strPRODCOLUMNSPREB + ' ' +
      'FROM WSXML_SFG.TIPOPRODUCTO TPR ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +         'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                          'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT CODPUNTODEVENTA, CODPRODUCTO, ROUND(SUM(RETEIVA),0) AS VALOR ' +
                       'FROM WSXML_SFG.VW_PREFACTURACION_DIARIA ' +
                       'WHERE FECHAARCHIVO BETWEEN WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(CONVERT(DATETIME,@ix__FECHAFIN) + 1) + ''') AND WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHALAST) + ''') ' +
                         'AND CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
                       'GROUP BY CODPUNTODEVENTA, CODPRODUCTO) PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                  + ' ' END +
      'GROUP BY TPR.CODLINEADENEGOCIO ' END +

      'ORDER BY ORDEN';
	  --PRINT @sql
	  EXECUTE sp_executesql @sql
    
  END;
GO


   IF OBJECT_ID('WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataRetencICA', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataRetencICA;
GO


CREATE     PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataRetencICA(@p_CODCICLOFACTURACIONPDV NUMERIC(22,0),
                                           @p_CODLINEADENEGOCIO      NUMERIC(22,0),
                                           @pg_CADENA                NVARCHAR(2000),
                                           @pg_ALIADOESTRATEGICO     NVARCHAR(2000),
                                          @pg_PRODUCTO              NVARCHAR(2000)) AS
BEGIN
    DECLARE @sFECHACCLO DATETIME;
    DECLARE @sFECHAFRST DATETIME;
    DECLARE @sFECHALAST DATETIME;
    DECLARE @xFECHAFRST DATETIME;
    DECLARE @xFECHASCND DATETIME;
    DECLARE @xFECHALAST DATETIME;
    DECLARE @lstPRODUCTOSCOLUMNAS TABLE (COLUMNNAMES VARCHAR(50));

    DECLARE @lstCICLOSFACTURACION WSXML_SFG.CICLOINFO;
    DECLARE @strPRODCOLUMNSBILL VARCHAR(2000) = '';
    DECLARE @strPRODCOLUMNSPREB VARCHAR(2000) = '';

	DECLARE @sql NVARCHAR(MAX)

    SELECT @sFECHACCLO = FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ID_CICLOFACTURACIONPDV = @p_CODCICLOFACTURACIONPDV;
    /* Reporte a partir de prefacturacion + facturacion. Obtener fechas de mes a partir del ciclo seleccionado */
    EXEC WSXML_SFG.SFG_PACKAGE_GetMonthRange @sFECHACCLO, @sFECHAFRST OUT, @sFECHALAST OUT
    /* Obtener identificadores de ciclos abarcados por el rango de fechas (correospondientes al mes del ciclo solicitado) */
    INSERT INTO @lstCICLOSFACTURACION
	SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAEJECUCION 
    FROM (SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, NULL AS FECHAINICIO, FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ACTIVE = 1 AND CONVERT(DATETIME, CONVERT(VARCHAR(7), FECHAEJECUCION, 120) + '-01') = CONVERT(DATETIME, CONVERT(VARCHAR(7), @sFECHACCLO, 120) + '-01'))t -- ORDER BY SECUENCIA);
    IF @@ROWCOUNT = 0 BEGIN
      RAISERROR('-20085 No existen ciclos de facturacion a la fecha estipulada', 16, 1);
    END 
    /* Sobreescribir fechas para cada ciclo, y obtener fechas generales de lista */
   DECLARE ix CURSOR FOR 
		SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAFIN 
		FROM @lstCICLOSFACTURACION

		OPEN ix

		DECLARE @_ultimaFila NUMERIC(38,0) = @@CURSOR_ROWS

		DECLARE @ix__ID_CICLOFACTURACIONPDV NUMERIC(38,0), @ix__SECUENCIA NUMERIC(38,0), @ix__FECHAINICIO DATETIME, @ix__FECHAFIN DATETIME
		DECLARE @ix__ID_CICLOFACTURACIONPDV_FIRST NUMERIC(38,0), @ix__SECUENCIA_FIRST NUMERIC(38,0), @ix__FECHAINICIO_FIRST DATETIME, @ix__FECHAFIN_FIRST DATETIME

        DECLARE @iniDATE DATETIME;
        DECLARE @endDATE DATETIME;
		FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN

		SET @ix__ID_CICLOFACTURACIONPDV_FIRST = @ix__ID_CICLOFACTURACIONPDV
		SET @ix__SECUENCIA_FIRST = @ix__SECUENCIA
		SET @ix__FECHAINICIO_FIRST = @ix__FECHAINICIO
		SET @ix__FECHAFIN_FIRST= @ix__FECHAFIN
		
		DECLARE @_fila INT = 1;
		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			EXEC WSXML_SFG.SFGCICLOFACTURACIONPDV_GetCicloDateRangeFromID @ix__ID_CICLOFACTURACIONPDV, @iniDATE OUT, @endDATE OUT
			SET @ix__FECHAINICIO = @iniDATE;
			SET @ix__FECHAFIN    = @endDATE;

			IF @_fila = 1 BEGIN
			--IF ix = lstCICLOSFACTURACION.First BEGIN
			  SET @xFECHAFRST = @iniDATE;
			  SET @xFECHASCND = @endDATE;
			END 
			--IF ix = lstCICLOSFACTURACION.Last BEGIN
			IF @_fila = @_ultimaFila BEGIN
			  SET @xFECHALAST = @endDATE;
			END

			SET @_fila = @_fila + 1
			FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN
		END;
		CLOSE ix;
		DEALLOCATE ix;
    /* Obtener lista de productos */
    DECLARE tPRODUCT CURSOR FOR 
			SELECT ID_AGRUPACIONPRODUCTO, AGR.NOMAGRUPACIONPRODUCTO FROM WSXML_SFG.AGRUPACIONPRODUCTO AGR
				INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ON (AGR.CODTIPOPRODUCTO = TPR.ID_TIPOPRODUCTO)
            WHERE TPR.CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO ORDER BY NOMAGRUPACIONPRODUCTO; 
	OPEN tPRODUCT;
	DECLARE @tPRODUCT__ID_AGRUPACIONPRODUCTO NUMERIC(38,0), @tPRODUCT__NOMAGRUPACIONPRODUCTO VARCHAR(255)
	FETCH tPRODUCT INTO @tPRODUCT__ID_AGRUPACIONPRODUCTO, @tPRODUCT__NOMAGRUPACIONPRODUCTO
	 WHILE @@FETCH_STATUS=0
	 BEGIN
        DECLARE @thisCOLUMNNAME VARCHAR(50);
        DECLARE @existsINLIST NUMERIC(22,0) = 0;
      BEGIN
        SET @thisCOLUMNNAME = CONVERT(VARCHAR, '"' + ISNULL(CASE WHEN LEN(@tPRODUCT__NOMAGRUPACIONPRODUCTO) > 30 THEN SUBSTRING(@tPRODUCT__NOMAGRUPACIONPRODUCTO, 0, 30) ELSE @tPRODUCT__NOMAGRUPACIONPRODUCTO END, '') + '"');
        IF (SELECT COUNT(*) FROM @lstPRODUCTOSCOLUMNAS) > 0 BEGIN
			DECLARE ix2 CURSOR FOR SELECT COLUMNNAMES FROM @lstPRODUCTOSCOLUMNAS
			OPEN ix2
			DECLARE @ix2__IDVALUE NUMERIC(38,0)
			FETCH ix2 INTO @ix2__IDVALUE
			 WHILE @@FETCH_STATUS=0
			 BEGIN
				IF @ix2__IDVALUE = @thisCOLUMNNAME BEGIN
					SET @existsINLIST = 1;
				END 
				FETCH ix2 INTO @ix2__IDVALUE
			END;
			CLOSE ix2;
			DEALLOCATE ix2;
        END 
        IF @existsINLIST = 0 BEGIN
          INSERT INTO @lstPRODUCTOSCOLUMNAS VALUES( @thisCOLUMNNAME )
          SET @strPRODCOLUMNSBILL = ISNULL(@strPRODCOLUMNSBILL, '') + ', SUM(CASE WHEN AGP.ID = ' + CONVERT(VARCHAR,@tPRODUCT__ID_AGRUPACIONPRODUCTO) + ' THEN ISNULL(VALOR, 0) ELSE 0 END) AS ' + ISNULL(@thisCOLUMNNAME, '') + ' ';
          SET @strPRODCOLUMNSPREB = ISNULL(@strPRODCOLUMNSPREB, '') + ', SUM(CASE WHEN AGP.ID = ' + CONVERT(VARCHAR,@tPRODUCT__ID_AGRUPACIONPRODUCTO) + ' THEN ISNULL(VALOR, 0) ELSE 0 END) AS ' + ISNULL(@thisCOLUMNNAME, '') + ' ';
        END 
      END;
    FETCH tPRODUCT INTO @tPRODUCT__ID_AGRUPACIONPRODUCTO, @tPRODUCT__NOMAGRUPACIONPRODUCTO
    END;
    CLOSE tPRODUCT;
    DEALLOCATE tPRODUCT;
    /* Abrir el cursor con los datos */
        SET @sql = 

      'SELECT CLI.ID_CICLOFACTURACIONPDV ' +              'AS IDCICLO, ' +
             'CLI.SECUENCIA ' +                           'AS ORDEN, ' +
             'WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CLI.FECHAFIN) ' + 'AS SEMANA, ' +
             'WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CLI.FECHAFIN) ' + 'AS SEMANA1, ' +
             'WSXML_SFG.SFG_PACKAGE_GetYearNumber(CLI.FECHAFIN) ' + 'AS YEARNUMBER, ' +
             'CLI.FECHAINICIO ' +                         'AS FECHAINICIO, ' + ' ' +
             'CLI.FECHAFIN ' +                            'AS FECHAFIN ' + @strPRODCOLUMNSBILL +
      'FROM WSXML_SFG.SFGINF_CIERREMENSUAL_GetCiclosFacturacionList(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHACCLO) + ''') CLI ' +
      'INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ' +                       'ON (1 = 1) ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +          'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                           'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT ID_CICLOFACTURACIONPDV, CODPRODUCTO, RETENCION_RETEICA AS VALOR ' +
                       'FROM WSXML_SFG.VW_SHOW_PRDFACTURACION) PRF ' + 'ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO AND PRF.ID_CICLOFACTURACIONPDV = CLI.ID_CICLOFACTURACIONPDV) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                   + ' ' END +
      'GROUP BY CLI.ID_CICLOFACTURACIONPDV, CLI.SECUENCIA, CLI.FECHAINICIO, CLI.FECHAFIN ' +

      -- Condition for initial segment that the initial dates do not match
      
		CASE WHEN @xFECHAFRST = @sFECHAFRST THEN ' ' ELSE 'UNION ' +
			'SELECT ' + @ix__ID_CICLOFACTURACIONPDV_FIRST + '													AS IDCICLO,'+
              '-1                                                                                               AS ORDEN, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(@ix__FECHAFIN_FIRST)) +				              '			AS SEMANA, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(@ix__FECHAFIN_FIRST)) +	             ' AS SEMANA1, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetYearNumber(@ix__FECHAFIN_FIRST)) +              '  AS YEARNUMBER, ' +
              'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHAFRST) + ''') ' +                   ' AS FECHAINICIO, ' +
              'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@ix__FECHAFIN_FIRST) + ''') ' + 'AS FECHAFIN ' + @strPRODCOLUMNSPREB + ' ' +
      'FROM WSXML_SFG.TIPOPRODUCTO TPR ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +         'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                          'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT CODPUNTODEVENTA, CODPRODUCTO, ROUND(SUM(RETEICA),0) AS VALOR ' +
                       'FROM WSXML_SFG.VW_PREFACTURACION_DIARIA ' +
                       'WHERE FECHAARCHIVO BETWEEN WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHAFRST) + ''') AND WSXML_SFG.SFG_PACKAGE_StringToDate(''' + @ix__FECHAFIN + ''') ' +
                         'AND CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
                       'GROUP BY CODPUNTODEVENTA, CODPRODUCTO) PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' +CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                   + ' ' END +
      'GROUP BY TPR.CODLINEADENEGOCIO ' END +

	  -- FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN

      -- Condition for final segment that the final dates are not the same
      CASE WHEN @xFECHALAST = @sFECHALAST THEN ' ' ELSE
      'UNION ' +
      'SELECT ' + CONVERT(VARCHAR,@ix__ID_CICLOFACTURACIONPDV)  +               ' AS IDCICLO, ' +
              '999999999' +                                                                                        ' AS ORDEN, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS SEMANA, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS SEMANA1, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetYearNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS YEARNUMBER, ' +
             'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(CONVERT(DATETIME,@ix__FECHAFIN) + 1) + ''') ' + 'AS FECHAINICIO, ' +
             'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHALAST) + ''') ' +                                                   'AS FECHAFIN ' + @strPRODCOLUMNSPREB + ' ' +
      'FROM WSXML_SFG.TIPOPRODUCTO TPR ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +         'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                          'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT CODPUNTODEVENTA, CODPRODUCTO, ROUND(SUM(RETEICA),0) AS VALOR ' +
                       'FROM WSXML_SFG.VW_PREFACTURACION_DIARIA ' +
                       'WHERE FECHAARCHIVO BETWEEN WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(CONVERT(DATETIME,@ix__FECHAFIN) + 1) + ''') AND WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHALAST) + ''') ' +
                         'AND CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
                       'GROUP BY CODPUNTODEVENTA, CODPRODUCTO) PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                  + ' ' END +
      'GROUP BY TPR.CODLINEADENEGOCIO ' END +

      'ORDER BY ORDEN';
	  --PRINT @sql
	  EXECUTE sp_executesql @sql
    
  END;
GO

   IF OBJECT_ID('WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataComisNeta', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataComisNeta;
GO


CREATE     PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataComisNeta(@p_CODCICLOFACTURACIONPDV NUMERIC(22,0),
                                           @p_CODLINEADENEGOCIO      NUMERIC(22,0),
                                           @pg_CADENA                NVARCHAR(2000),
                                           @pg_ALIADOESTRATEGICO     NVARCHAR(2000),
                                          @pg_PRODUCTO              NVARCHAR(2000)) AS
BEGIN
    DECLARE @sFECHACCLO DATETIME;
    DECLARE @sFECHAFRST DATETIME;
    DECLARE @sFECHALAST DATETIME;
    DECLARE @xFECHAFRST DATETIME;
    DECLARE @xFECHASCND DATETIME;
    DECLARE @xFECHALAST DATETIME;
    DECLARE @lstPRODUCTOSCOLUMNAS TABLE (COLUMNNAMES VARCHAR(50));

    DECLARE @lstCICLOSFACTURACION WSXML_SFG.CICLOINFO;
    DECLARE @strPRODCOLUMNSBILL VARCHAR(2000) = '';
    DECLARE @strPRODCOLUMNSPREB VARCHAR(2000) = '';

	DECLARE @sql NVARCHAR(MAX)

    SELECT @sFECHACCLO = FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ID_CICLOFACTURACIONPDV = @p_CODCICLOFACTURACIONPDV;
    /* Reporte a partir de prefacturacion + facturacion. Obtener fechas de mes a partir del ciclo seleccionado */
    EXEC WSXML_SFG.SFG_PACKAGE_GetMonthRange @sFECHACCLO, @sFECHAFRST OUT, @sFECHALAST OUT
    /* Obtener identificadores de ciclos abarcados por el rango de fechas (correospondientes al mes del ciclo solicitado) */
    INSERT INTO @lstCICLOSFACTURACION
	SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAEJECUCION 
    FROM (SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, NULL AS FECHAINICIO, FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ACTIVE = 1 AND CONVERT(DATETIME, CONVERT(VARCHAR(7), FECHAEJECUCION, 120) + '-01') = CONVERT(DATETIME, CONVERT(VARCHAR(7), @sFECHACCLO, 120) + '-01'))t -- ORDER BY SECUENCIA);
    IF @@ROWCOUNT = 0 BEGIN
      RAISERROR('-20085 No existen ciclos de facturacion a la fecha estipulada', 16, 1);
    END 
    /* Sobreescribir fechas para cada ciclo, y obtener fechas generales de lista */
   DECLARE ix CURSOR FOR 
		SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAFIN 
		FROM @lstCICLOSFACTURACION

		OPEN ix

		DECLARE @_ultimaFila NUMERIC(38,0) = @@CURSOR_ROWS

		DECLARE @ix__ID_CICLOFACTURACIONPDV NUMERIC(38,0), @ix__SECUENCIA NUMERIC(38,0), @ix__FECHAINICIO DATETIME, @ix__FECHAFIN DATETIME
		DECLARE @ix__ID_CICLOFACTURACIONPDV_FIRST NUMERIC(38,0), @ix__SECUENCIA_FIRST NUMERIC(38,0), @ix__FECHAINICIO_FIRST DATETIME, @ix__FECHAFIN_FIRST DATETIME

        DECLARE @iniDATE DATETIME;
        DECLARE @endDATE DATETIME;
		FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN

		SET @ix__ID_CICLOFACTURACIONPDV_FIRST = @ix__ID_CICLOFACTURACIONPDV
		SET @ix__SECUENCIA_FIRST = @ix__SECUENCIA
		SET @ix__FECHAINICIO_FIRST = @ix__FECHAINICIO
		SET @ix__FECHAFIN_FIRST= @ix__FECHAFIN
		
		DECLARE @_fila INT = 1;
		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			EXEC WSXML_SFG.SFGCICLOFACTURACIONPDV_GetCicloDateRangeFromID @ix__ID_CICLOFACTURACIONPDV, @iniDATE OUT, @endDATE OUT
			SET @ix__FECHAINICIO = @iniDATE;
			SET @ix__FECHAFIN    = @endDATE;

			IF @_fila = 1 BEGIN
			--IF ix = lstCICLOSFACTURACION.First BEGIN
			  SET @xFECHAFRST = @iniDATE;
			  SET @xFECHASCND = @endDATE;
			END 
			--IF ix = lstCICLOSFACTURACION.Last BEGIN
			IF @_fila = @_ultimaFila BEGIN
			  SET @xFECHALAST = @endDATE;
			END

			SET @_fila = @_fila + 1
			FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN
		END;
		CLOSE ix;
		DEALLOCATE ix;
    /* Obtener lista de productos */
    DECLARE tPRODUCT CURSOR FOR 
			SELECT ID_AGRUPACIONPRODUCTO, AGR.NOMAGRUPACIONPRODUCTO FROM WSXML_SFG.AGRUPACIONPRODUCTO AGR
				INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ON (AGR.CODTIPOPRODUCTO = TPR.ID_TIPOPRODUCTO)
            WHERE TPR.CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO ORDER BY NOMAGRUPACIONPRODUCTO; 
	OPEN tPRODUCT;
	DECLARE @tPRODUCT__ID_AGRUPACIONPRODUCTO NUMERIC(38,0), @tPRODUCT__NOMAGRUPACIONPRODUCTO VARCHAR(255)
	FETCH tPRODUCT INTO @tPRODUCT__ID_AGRUPACIONPRODUCTO, @tPRODUCT__NOMAGRUPACIONPRODUCTO
	 WHILE @@FETCH_STATUS=0
	 BEGIN
        DECLARE @thisCOLUMNNAME VARCHAR(50);
        DECLARE @existsINLIST NUMERIC(22,0) = 0;
      BEGIN
        SET @thisCOLUMNNAME = CONVERT(VARCHAR, '"' + ISNULL(CASE WHEN LEN(@tPRODUCT__NOMAGRUPACIONPRODUCTO) > 30 THEN SUBSTRING(@tPRODUCT__NOMAGRUPACIONPRODUCTO, 0, 30) ELSE @tPRODUCT__NOMAGRUPACIONPRODUCTO END, '') + '"');
        IF (SELECT COUNT(*) FROM @lstPRODUCTOSCOLUMNAS) > 0 BEGIN
			DECLARE ix2 CURSOR FOR SELECT COLUMNNAMES FROM @lstPRODUCTOSCOLUMNAS
			OPEN ix2
			DECLARE @ix2__IDVALUE NUMERIC(38,0)
			FETCH ix2 INTO @ix2__IDVALUE
			 WHILE @@FETCH_STATUS=0
			 BEGIN
				IF @ix2__IDVALUE = @thisCOLUMNNAME BEGIN
					SET @existsINLIST = 1;
				END 
				FETCH ix2 INTO @ix2__IDVALUE
			END;
			CLOSE ix2;
			DEALLOCATE ix2;
        END 
        IF @existsINLIST = 0 BEGIN
          INSERT INTO @lstPRODUCTOSCOLUMNAS VALUES( @thisCOLUMNNAME )
          SET @strPRODCOLUMNSBILL = ISNULL(@strPRODCOLUMNSBILL, '') + ', SUM(CASE WHEN AGP.ID = ' + CONVERT(VARCHAR,@tPRODUCT__ID_AGRUPACIONPRODUCTO) + ' THEN ISNULL(VALOR, 0) ELSE 0 END) AS ' + ISNULL(@thisCOLUMNNAME, '') + ' ';
          SET @strPRODCOLUMNSPREB = ISNULL(@strPRODCOLUMNSPREB, '') + ', SUM(CASE WHEN AGP.ID = ' + CONVERT(VARCHAR,@tPRODUCT__ID_AGRUPACIONPRODUCTO) + ' THEN ISNULL(VALOR, 0) ELSE 0 END) AS ' + ISNULL(@thisCOLUMNNAME, '') + ' ';
        END 
      END;
    FETCH tPRODUCT INTO @tPRODUCT__ID_AGRUPACIONPRODUCTO, @tPRODUCT__NOMAGRUPACIONPRODUCTO
    END;
    CLOSE tPRODUCT;
    DEALLOCATE tPRODUCT;
    /* Abrir el cursor con los datos */
        SET @sql = 

      'SELECT CLI.ID_CICLOFACTURACIONPDV ' +              'AS IDCICLO, ' +
             'CLI.SECUENCIA ' +                           'AS ORDEN, ' +
             'WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CLI.FECHAFIN) ' + 'AS SEMANA, ' +
             'WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CLI.FECHAFIN) ' + 'AS SEMANA1, ' +
             'WSXML_SFG.SFG_PACKAGE_GetYearNumber(CLI.FECHAFIN) ' + 'AS YEARNUMBER, ' +
             'CLI.FECHAINICIO ' +                         'AS FECHAINICIO, ' + ' ' +
             'CLI.FECHAFIN ' +                            'AS FECHAFIN ' + @strPRODCOLUMNSBILL +
      'FROM WSXML_SFG.SFGINF_CIERREMENSUAL_GetCiclosFacturacionList(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHACCLO) + ''') CLI ' +
      'INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ' +                       'ON (1 = 1) ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +          'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                           'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT ID_CICLOFACTURACIONPDV, CODPRODUCTO, VALORCOMISIONNETA AS VALOR ' +
                       'FROM WSXML_SFG.VW_SHOW_PRDFACTURACION) PRF ' + 'ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO AND PRF.ID_CICLOFACTURACIONPDV = CLI.ID_CICLOFACTURACIONPDV) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                   + ' ' END +
      'GROUP BY CLI.ID_CICLOFACTURACIONPDV, CLI.SECUENCIA, CLI.FECHAINICIO, CLI.FECHAFIN ' +

      -- Condition for initial segment that the initial dates do not match
      
		CASE WHEN @xFECHAFRST = @sFECHAFRST THEN ' ' ELSE 'UNION ' +
			'SELECT ' + @ix__ID_CICLOFACTURACIONPDV_FIRST + '													AS IDCICLO,'+
              '-1                                                                                               AS ORDEN, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(@ix__FECHAFIN_FIRST)) +				              '			AS SEMANA, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(@ix__FECHAFIN_FIRST)) +	             ' AS SEMANA1, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetYearNumber(@ix__FECHAFIN_FIRST)) +              '  AS YEARNUMBER, ' +
              'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHAFRST) + ''') ' +                   ' AS FECHAINICIO, ' +
              'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@ix__FECHAFIN_FIRST) + ''') ' + 'AS FECHAFIN ' + @strPRODCOLUMNSPREB + ' ' +
      'FROM WSXML_SFG.TIPOPRODUCTO TPR ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +         'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                          'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT CODPUNTODEVENTA, CODPRODUCTO, ROUND(SUM(COMISIONNETA),0) AS VALOR ' +
                       'FROM WSXML_SFG.VW_PREFACTURACION_DIARIA ' +
                       'WHERE FECHAARCHIVO BETWEEN WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHAFRST) + ''') AND WSXML_SFG.SFG_PACKAGE_StringToDate(''' + @ix__FECHAFIN + ''') ' +
                         'AND CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
                       'GROUP BY CODPUNTODEVENTA, CODPRODUCTO) PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' +CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                   + ' ' END +
      'GROUP BY TPR.CODLINEADENEGOCIO ' END +

	  -- FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN

      -- Condition for final segment that the final dates are not the same
      CASE WHEN @xFECHALAST = @sFECHALAST THEN ' ' ELSE
      'UNION ' +
      'SELECT ' + CONVERT(VARCHAR,@ix__ID_CICLOFACTURACIONPDV)  +               ' AS IDCICLO, ' +
              '999999999' +                                                                                        ' AS ORDEN, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS SEMANA, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS SEMANA1, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetYearNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS YEARNUMBER, ' +
             'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(CONVERT(DATETIME,@ix__FECHAFIN) + 1) + ''') ' + 'AS FECHAINICIO, ' +
             'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHALAST) + ''') ' +                                                   'AS FECHAFIN ' + @strPRODCOLUMNSPREB + ' ' +
      'FROM WSXML_SFG.TIPOPRODUCTO TPR ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +         'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                          'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT CODPUNTODEVENTA, CODPRODUCTO, ROUND(SUM(COMISIONNETA),0) AS VALOR ' +
                       'FROM WSXML_SFG.VW_PREFACTURACION_DIARIA ' +
                       'WHERE FECHAARCHIVO BETWEEN WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(CONVERT(DATETIME,@ix__FECHAFIN) + 1) + ''') AND WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHALAST) + ''') ' +
                         'AND CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
                       'GROUP BY CODPUNTODEVENTA, CODPRODUCTO) PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                  + ' ' END +
      'GROUP BY TPR.CODLINEADENEGOCIO ' END +

      'ORDER BY ORDEN';
	  --PRINT @sql
	  EXECUTE sp_executesql @sql
    
  END;
GO

   IF OBJECT_ID('WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataTotalPago', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataTotalPago;
GO


  CREATE PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataTotalPago(@p_CODCICLOFACTURACIONPDV NUMERIC(22,0),
                                           @p_CODLINEADENEGOCIO      NUMERIC(22,0),
                                           @pg_CADENA                NVARCHAR(2000),
                                           @pg_ALIADOESTRATEGICO     NVARCHAR(2000),
                                           @pg_PRODUCTO              NVARCHAR(2000)) AS
 BEGIN										   
     DECLARE @sFECHACCLO DATETIME;
    DECLARE @sFECHAFRST DATETIME;
    DECLARE @sFECHALAST DATETIME;
    DECLARE @xFECHAFRST DATETIME;
    DECLARE @xFECHASCND DATETIME;
    DECLARE @xFECHALAST DATETIME;
    DECLARE @lstPRODUCTOSCOLUMNAS TABLE (COLUMNNAMES VARCHAR(50));

    DECLARE @lstCICLOSFACTURACION WSXML_SFG.CICLOINFO;
    DECLARE @strPRODCOLUMNSBILL VARCHAR(2000) = '';
    DECLARE @strPRODCOLUMNSPREB VARCHAR(2000) = '';

	DECLARE @sql NVARCHAR(MAX)

    SELECT @sFECHACCLO = FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ID_CICLOFACTURACIONPDV = @p_CODCICLOFACTURACIONPDV;
    /* Reporte a partir de prefacturacion + facturacion. Obtener fechas de mes a partir del ciclo seleccionado */
    EXEC WSXML_SFG.SFG_PACKAGE_GetMonthRange @sFECHACCLO, @sFECHAFRST OUT, @sFECHALAST OUT
    /* Obtener identificadores de ciclos abarcados por el rango de fechas (correospondientes al mes del ciclo solicitado) */
    INSERT INTO @lstCICLOSFACTURACION
	SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAEJECUCION 
    FROM (SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, NULL AS FECHAINICIO, FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ACTIVE = 1 AND CONVERT(DATETIME, CONVERT(VARCHAR(7), FECHAEJECUCION, 120) + '-01') = CONVERT(DATETIME, CONVERT(VARCHAR(7), @sFECHACCLO, 120) + '-01'))t -- ORDER BY SECUENCIA);
    IF @@ROWCOUNT = 0 BEGIN
      RAISERROR('-20085 No existen ciclos de facturacion a la fecha estipulada', 16, 1);
    END 
    /* Sobreescribir fechas para cada ciclo, y obtener fechas generales de lista */
   DECLARE ix CURSOR FOR 
		SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAFIN 
		FROM @lstCICLOSFACTURACION

		OPEN ix

		DECLARE @_ultimaFila NUMERIC(38,0) = @@CURSOR_ROWS

		DECLARE @ix__ID_CICLOFACTURACIONPDV NUMERIC(38,0), @ix__SECUENCIA NUMERIC(38,0), @ix__FECHAINICIO DATETIME, @ix__FECHAFIN DATETIME
		DECLARE @ix__ID_CICLOFACTURACIONPDV_FIRST NUMERIC(38,0), @ix__SECUENCIA_FIRST NUMERIC(38,0), @ix__FECHAINICIO_FIRST DATETIME, @ix__FECHAFIN_FIRST DATETIME

        DECLARE @iniDATE DATETIME;
        DECLARE @endDATE DATETIME;
		FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN

		SET @ix__ID_CICLOFACTURACIONPDV_FIRST = @ix__ID_CICLOFACTURACIONPDV
		SET @ix__SECUENCIA_FIRST = @ix__SECUENCIA
		SET @ix__FECHAINICIO_FIRST = @ix__FECHAINICIO
		SET @ix__FECHAFIN_FIRST= @ix__FECHAFIN
		
		DECLARE @_fila INT = 1;
		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			EXEC WSXML_SFG.SFGCICLOFACTURACIONPDV_GetCicloDateRangeFromID @ix__ID_CICLOFACTURACIONPDV, @iniDATE OUT, @endDATE OUT
			SET @ix__FECHAINICIO = @iniDATE;
			SET @ix__FECHAFIN    = @endDATE;

			IF @_fila = 1 BEGIN
			--IF ix = lstCICLOSFACTURACION.First BEGIN
			  SET @xFECHAFRST = @iniDATE;
			  SET @xFECHASCND = @endDATE;
			END 
			--IF ix = lstCICLOSFACTURACION.Last BEGIN
			IF @_fila = @_ultimaFila BEGIN
			  SET @xFECHALAST = @endDATE;
			END

			SET @_fila = @_fila + 1
			FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN
		END;
		CLOSE ix;
		DEALLOCATE ix;
    /* Obtener lista de productos */
    DECLARE tPRODUCT CURSOR FOR 
			SELECT ID_AGRUPACIONPRODUCTO, AGR.NOMAGRUPACIONPRODUCTO FROM WSXML_SFG.AGRUPACIONPRODUCTO AGR
				INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ON (AGR.CODTIPOPRODUCTO = TPR.ID_TIPOPRODUCTO)
            WHERE TPR.CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO ORDER BY NOMAGRUPACIONPRODUCTO; 
	OPEN tPRODUCT;
	DECLARE @tPRODUCT__ID_AGRUPACIONPRODUCTO NUMERIC(38,0), @tPRODUCT__NOMAGRUPACIONPRODUCTO VARCHAR(255)
	FETCH tPRODUCT INTO @tPRODUCT__ID_AGRUPACIONPRODUCTO, @tPRODUCT__NOMAGRUPACIONPRODUCTO
	 WHILE @@FETCH_STATUS=0
	 BEGIN
        DECLARE @thisCOLUMNNAME VARCHAR(50);
        DECLARE @existsINLIST NUMERIC(22,0) = 0;
      BEGIN
        SET @thisCOLUMNNAME = CONVERT(VARCHAR, '"' + ISNULL(CASE WHEN LEN(@tPRODUCT__NOMAGRUPACIONPRODUCTO) > 30 THEN SUBSTRING(@tPRODUCT__NOMAGRUPACIONPRODUCTO, 0, 30) ELSE @tPRODUCT__NOMAGRUPACIONPRODUCTO END, '') + '"');
        IF (SELECT COUNT(*) FROM @lstPRODUCTOSCOLUMNAS) > 0 BEGIN
			DECLARE ix2 CURSOR FOR SELECT COLUMNNAMES FROM @lstPRODUCTOSCOLUMNAS
			OPEN ix2
			DECLARE @ix2__IDVALUE NUMERIC(38,0)
			FETCH ix2 INTO @ix2__IDVALUE
			 WHILE @@FETCH_STATUS=0
			 BEGIN
				IF @ix2__IDVALUE = @thisCOLUMNNAME BEGIN
					SET @existsINLIST = 1;
				END 
				FETCH ix2 INTO @ix2__IDVALUE
			END;
			CLOSE ix2;
			DEALLOCATE ix2;
        END 
        IF @existsINLIST = 0 BEGIN
          INSERT INTO @lstPRODUCTOSCOLUMNAS VALUES( @thisCOLUMNNAME )
          SET @strPRODCOLUMNSBILL = ISNULL(@strPRODCOLUMNSBILL, '') + ', SUM(CASE WHEN AGP.ID = ' + CONVERT(VARCHAR,@tPRODUCT__ID_AGRUPACIONPRODUCTO) + ' THEN ISNULL(VALOR, 0) ELSE 0 END) AS ' + ISNULL(@thisCOLUMNNAME, '') + ' ';
          SET @strPRODCOLUMNSPREB = ISNULL(@strPRODCOLUMNSPREB, '') + ', SUM(CASE WHEN AGP.ID = ' + CONVERT(VARCHAR,@tPRODUCT__ID_AGRUPACIONPRODUCTO) + ' THEN ISNULL(VALOR, 0) ELSE 0 END) AS ' + ISNULL(@thisCOLUMNNAME, '') + ' ';
        END 
      END;
    FETCH tPRODUCT INTO @tPRODUCT__ID_AGRUPACIONPRODUCTO, @tPRODUCT__NOMAGRUPACIONPRODUCTO
    END;
    CLOSE tPRODUCT;
    DEALLOCATE tPRODUCT;
    /* Abrir el cursor con los datos */
        SET @sql = 

      'SELECT CLI.ID_CICLOFACTURACIONPDV ' +              'AS IDCICLO, ' +
             'CLI.SECUENCIA ' +                           'AS ORDEN, ' +
             'WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CLI.FECHAFIN) ' + 'AS SEMANA, ' +
             'WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CLI.FECHAFIN) ' + 'AS SEMANA1, ' +
             'WSXML_SFG.SFG_PACKAGE_GetYearNumber(CLI.FECHAFIN) ' + 'AS YEARNUMBER, ' +
             'CLI.FECHAINICIO ' +                         'AS FECHAINICIO, ' + ' ' +
             'CLI.FECHAFIN ' +                            'AS FECHAFIN ' + @strPRODCOLUMNSBILL +
      'FROM WSXML_SFG.SFGINF_CIERREMENSUAL_GetCiclosFacturacionList(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHACCLO) + ''') CLI ' +
      'INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ' +                       'ON (1 = 1) ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +          'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                           'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT ID_CICLOFACTURACIONPDV, CODPRODUCTO, (FACTURADOENCONTRAGTECH - FACTURADOAFAVORGTECH) + (FACTURADOENCONTRAFIDUCIA - FACTURADOAFAVORFIDUCIA) AS VALOR ' +
                       'FROM WSXML_SFG.VW_SHOW_PRDFACTURACION) PRF ' + 'ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO AND PRF.ID_CICLOFACTURACIONPDV = CLI.ID_CICLOFACTURACIONPDV) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                   + ' ' END +
      'GROUP BY CLI.ID_CICLOFACTURACIONPDV, CLI.SECUENCIA, CLI.FECHAINICIO, CLI.FECHAFIN ' +

      -- Condition for initial segment that the initial dates do not match
      
		CASE WHEN @xFECHAFRST = @sFECHAFRST THEN ' ' ELSE 'UNION ' +
			'SELECT ' + @ix__ID_CICLOFACTURACIONPDV_FIRST + '													AS IDCICLO,'+
              '-1                                                                                               AS ORDEN, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(@ix__FECHAFIN_FIRST)) +				              '			AS SEMANA, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(@ix__FECHAFIN_FIRST)) +	             ' AS SEMANA1, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetYearNumber(@ix__FECHAFIN_FIRST)) +              '  AS YEARNUMBER, ' +
              'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHAFRST) + ''') ' +                   ' AS FECHAINICIO, ' +
              'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@ix__FECHAFIN_FIRST) + ''') ' + 'AS FECHAFIN ' + @strPRODCOLUMNSPREB + ' ' +
      'FROM WSXML_SFG.TIPOPRODUCTO TPR ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +         'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                          'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT CODPUNTODEVENTA, CODPRODUCTO, ROUND(SUM(INGRESOSVALIDOS - COMISIONNETA - PREMIOSPAGADOS),0) AS VALOR ' +
                       'FROM WSXML_SFG.VW_PREFACTURACION_DIARIA ' +
                       'WHERE FECHAARCHIVO BETWEEN WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHAFRST) + ''') AND WSXML_SFG.SFG_PACKAGE_StringToDate(''' + @ix__FECHAFIN + ''') ' +
                         'AND CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
                       'GROUP BY CODPUNTODEVENTA, CODPRODUCTO) PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' +CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                   + ' ' END +
      'GROUP BY TPR.CODLINEADENEGOCIO ' END +

	  -- FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN

      -- Condition for final segment that the final dates are not the same
      CASE WHEN @xFECHALAST = @sFECHALAST THEN ' ' ELSE
      'UNION ' +
      'SELECT ' + CONVERT(VARCHAR,@ix__ID_CICLOFACTURACIONPDV)  +               ' AS IDCICLO, ' +
              '999999999' +                                                                                        ' AS ORDEN, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS SEMANA, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS SEMANA1, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetYearNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS YEARNUMBER, ' +
             'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(CONVERT(DATETIME,@ix__FECHAFIN) + 1) + ''') ' + 'AS FECHAINICIO, ' +
             'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHALAST) + ''') ' +                                                   'AS FECHAFIN ' + @strPRODCOLUMNSPREB + ' ' +
      'FROM WSXML_SFG.TIPOPRODUCTO TPR ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +         'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                          'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT CODPUNTODEVENTA, CODPRODUCTO, ROUND(SUM(INGRESOSVALIDOS - COMISIONNETA - PREMIOSPAGADOS),0) AS VALOR ' +
                       'FROM WSXML_SFG.VW_PREFACTURACION_DIARIA ' +
                       'WHERE FECHAARCHIVO BETWEEN WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(CONVERT(DATETIME,@ix__FECHAFIN) + 1) + ''') AND WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHALAST) + ''') ' +
                         'AND CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
                       'GROUP BY CODPUNTODEVENTA, CODPRODUCTO) PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                  + ' ' END +
      'GROUP BY TPR.CODLINEADENEGOCIO ' END +

      'ORDER BY ORDEN';
	  --PRINT @sql
	  EXECUTE sp_executesql @sql
  END
GO


   IF OBJECT_ID('WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataTotalGTEC', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataTotalGTEC;
GO


  CREATE PROCEDURE  WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataTotalGTEC(@p_CODCICLOFACTURACIONPDV NUMERIC(22,0),
                                           @p_CODLINEADENEGOCIO      NUMERIC(22,0),
                                           @pg_CADENA                NVARCHAR(2000),
                                           @pg_ALIADOESTRATEGICO     NVARCHAR(2000),
                                           @pg_PRODUCTO              NVARCHAR(2000)) AS
 BEGIN										   
    DECLARE @sFECHACCLO DATETIME;
    DECLARE @sFECHAFRST DATETIME;
    DECLARE @sFECHALAST DATETIME;
    DECLARE @xFECHAFRST DATETIME;
    DECLARE @xFECHASCND DATETIME;
    DECLARE @xFECHALAST DATETIME;
    DECLARE @lstPRODUCTOSCOLUMNAS TABLE (COLUMNNAMES VARCHAR(50));

    DECLARE @lstCICLOSFACTURACION WSXML_SFG.CICLOINFO;
    DECLARE @strPRODCOLUMNSBILL VARCHAR(2000) = '';
    DECLARE @strPRODCOLUMNSPREB VARCHAR(2000) = '';

	DECLARE @sql NVARCHAR(MAX)

    SELECT @sFECHACCLO = FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ID_CICLOFACTURACIONPDV = @p_CODCICLOFACTURACIONPDV;
    /* Reporte a partir de prefacturacion + facturacion. Obtener fechas de mes a partir del ciclo seleccionado */
    EXEC WSXML_SFG.SFG_PACKAGE_GetMonthRange @sFECHACCLO, @sFECHAFRST OUT, @sFECHALAST OUT
    /* Obtener identificadores de ciclos abarcados por el rango de fechas (correospondientes al mes del ciclo solicitado) */
    INSERT INTO @lstCICLOSFACTURACION
	SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAEJECUCION 
    FROM (SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, NULL AS FECHAINICIO, FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ACTIVE = 1 AND CONVERT(DATETIME, CONVERT(VARCHAR(7), FECHAEJECUCION, 120) + '-01') = CONVERT(DATETIME, CONVERT(VARCHAR(7), @sFECHACCLO, 120) + '-01'))t -- ORDER BY SECUENCIA);
    IF @@ROWCOUNT = 0 BEGIN
      RAISERROR('-20085 No existen ciclos de facturacion a la fecha estipulada', 16, 1);
    END 
    /* Sobreescribir fechas para cada ciclo, y obtener fechas generales de lista */
   DECLARE ix CURSOR FOR 
		SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAFIN 
		FROM @lstCICLOSFACTURACION

		OPEN ix

		DECLARE @_ultimaFila NUMERIC(38,0) = @@CURSOR_ROWS

		DECLARE @ix__ID_CICLOFACTURACIONPDV NUMERIC(38,0), @ix__SECUENCIA NUMERIC(38,0), @ix__FECHAINICIO DATETIME, @ix__FECHAFIN DATETIME
		DECLARE @ix__ID_CICLOFACTURACIONPDV_FIRST NUMERIC(38,0), @ix__SECUENCIA_FIRST NUMERIC(38,0), @ix__FECHAINICIO_FIRST DATETIME, @ix__FECHAFIN_FIRST DATETIME

        DECLARE @iniDATE DATETIME;
        DECLARE @endDATE DATETIME;
		FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN

		SET @ix__ID_CICLOFACTURACIONPDV_FIRST = @ix__ID_CICLOFACTURACIONPDV
		SET @ix__SECUENCIA_FIRST = @ix__SECUENCIA
		SET @ix__FECHAINICIO_FIRST = @ix__FECHAINICIO
		SET @ix__FECHAFIN_FIRST= @ix__FECHAFIN
		
		DECLARE @_fila INT = 1;
		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			EXEC WSXML_SFG.SFGCICLOFACTURACIONPDV_GetCicloDateRangeFromID @ix__ID_CICLOFACTURACIONPDV, @iniDATE OUT, @endDATE OUT
			SET @ix__FECHAINICIO = @iniDATE;
			SET @ix__FECHAFIN    = @endDATE;

			IF @_fila = 1 BEGIN
			--IF ix = lstCICLOSFACTURACION.First BEGIN
			  SET @xFECHAFRST = @iniDATE;
			  SET @xFECHASCND = @endDATE;
			END 
			--IF ix = lstCICLOSFACTURACION.Last BEGIN
			IF @_fila = @_ultimaFila BEGIN
			  SET @xFECHALAST = @endDATE;
			END

			SET @_fila = @_fila + 1
			FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN
		END;
		CLOSE ix;
		DEALLOCATE ix;
    /* Obtener lista de productos */
    DECLARE tPRODUCT CURSOR FOR 
			SELECT ID_AGRUPACIONPRODUCTO, AGR.NOMAGRUPACIONPRODUCTO FROM WSXML_SFG.AGRUPACIONPRODUCTO AGR
				INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ON (AGR.CODTIPOPRODUCTO = TPR.ID_TIPOPRODUCTO)
            WHERE TPR.CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO ORDER BY NOMAGRUPACIONPRODUCTO; 
	OPEN tPRODUCT;
	DECLARE @tPRODUCT__ID_AGRUPACIONPRODUCTO NUMERIC(38,0), @tPRODUCT__NOMAGRUPACIONPRODUCTO VARCHAR(255)
	FETCH tPRODUCT INTO @tPRODUCT__ID_AGRUPACIONPRODUCTO, @tPRODUCT__NOMAGRUPACIONPRODUCTO
	 WHILE @@FETCH_STATUS=0
	 BEGIN
        DECLARE @thisCOLUMNNAME VARCHAR(50);
        DECLARE @existsINLIST NUMERIC(22,0) = 0;
      BEGIN
        SET @thisCOLUMNNAME = CONVERT(VARCHAR, '"' + ISNULL(CASE WHEN LEN(@tPRODUCT__NOMAGRUPACIONPRODUCTO) > 30 THEN SUBSTRING(@tPRODUCT__NOMAGRUPACIONPRODUCTO, 0, 30) ELSE @tPRODUCT__NOMAGRUPACIONPRODUCTO END, '') + '"');
        IF (SELECT COUNT(*) FROM @lstPRODUCTOSCOLUMNAS) > 0 BEGIN
			DECLARE ix2 CURSOR FOR SELECT COLUMNNAMES FROM @lstPRODUCTOSCOLUMNAS
			OPEN ix2
			DECLARE @ix2__IDVALUE NUMERIC(38,0)
			FETCH ix2 INTO @ix2__IDVALUE
			 WHILE @@FETCH_STATUS=0
			 BEGIN
				IF @ix2__IDVALUE = @thisCOLUMNNAME BEGIN
					SET @existsINLIST = 1;
				END 
				FETCH ix2 INTO @ix2__IDVALUE
			END;
			CLOSE ix2;
			DEALLOCATE ix2;
        END 
        IF @existsINLIST = 0 BEGIN
          INSERT INTO @lstPRODUCTOSCOLUMNAS VALUES( @thisCOLUMNNAME )
          SET @strPRODCOLUMNSBILL = ISNULL(@strPRODCOLUMNSBILL, '') + ', SUM(CASE WHEN AGP.ID = ' + CONVERT(VARCHAR,@tPRODUCT__ID_AGRUPACIONPRODUCTO) + ' THEN ISNULL(VALOR, 0) ELSE 0 END) AS ' + ISNULL(@thisCOLUMNNAME, '') + ' ';
          SET @strPRODCOLUMNSPREB = ISNULL(@strPRODCOLUMNSPREB, '') + ', SUM(CASE WHEN AGP.ID = ' + CONVERT(VARCHAR,@tPRODUCT__ID_AGRUPACIONPRODUCTO) + ' THEN ISNULL(VALOR, 0) ELSE 0 END) AS ' + ISNULL(@thisCOLUMNNAME, '') + ' ';
        END 
      END;
    FETCH tPRODUCT INTO @tPRODUCT__ID_AGRUPACIONPRODUCTO, @tPRODUCT__NOMAGRUPACIONPRODUCTO
    END;
    CLOSE tPRODUCT;
    DEALLOCATE tPRODUCT;
    /* Abrir el cursor con los datos */
        SET @sql = 

      'SELECT CLI.ID_CICLOFACTURACIONPDV ' +              'AS IDCICLO, ' +
             'CLI.SECUENCIA ' +                           'AS ORDEN, ' +
             'WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CLI.FECHAFIN) ' + 'AS SEMANA, ' +
             'WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CLI.FECHAFIN) ' + 'AS SEMANA1, ' +
             'WSXML_SFG.SFG_PACKAGE_GetYearNumber(CLI.FECHAFIN) ' + 'AS YEARNUMBER, ' +
             'CLI.FECHAINICIO ' +                         'AS FECHAINICIO, ' + ' ' +
             'CLI.FECHAFIN ' +                            'AS FECHAFIN ' + @strPRODCOLUMNSBILL +
      'FROM WSXML_SFG.SFGINF_CIERREMENSUAL_GetCiclosFacturacionList(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHACCLO) + ''') CLI ' +
      'INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ' +                       'ON (1 = 1) ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +          'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                           'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT ID_CICLOFACTURACIONPDV, CODPRODUCTO, (FACTURADOENCONTRAGTECH - FACTURADOAFAVORGTECH) AS VALOR ' +
                       'FROM WSXML_SFG.VW_SHOW_PRDFACTURACION) PRF ' + 'ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO AND PRF.ID_CICLOFACTURACIONPDV = CLI.ID_CICLOFACTURACIONPDV) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                   + ' ' END +
      'GROUP BY CLI.ID_CICLOFACTURACIONPDV, CLI.SECUENCIA, CLI.FECHAINICIO, CLI.FECHAFIN ' +

      -- Condition for initial segment that the initial dates do not match
      
		CASE WHEN @xFECHAFRST = @sFECHAFRST THEN ' ' ELSE 'UNION ' +
			'SELECT ' + @ix__ID_CICLOFACTURACIONPDV_FIRST + '													AS IDCICLO,'+
              '-1                                                                                               AS ORDEN, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(@ix__FECHAFIN_FIRST)) +				              '			AS SEMANA, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(@ix__FECHAFIN_FIRST)) +	             ' AS SEMANA1, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetYearNumber(@ix__FECHAFIN_FIRST)) +              '  AS YEARNUMBER, ' +
              'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHAFRST) + ''') ' +                   ' AS FECHAINICIO, ' +
              'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@ix__FECHAFIN_FIRST) + ''') ' + 'AS FECHAFIN ' + @strPRODCOLUMNSPREB + ' ' +
      'FROM WSXML_SFG.TIPOPRODUCTO TPR ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +         'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                          'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
		'LEFT OUTER JOIN (SELECT CODPUNTODEVENTA, CODPRODUCTO, ROUND(SUM(CASE WHEN PRF.PORCENTAJEFIDUCIA > 0 THEN (INGRESOSVALIDOS - COMISIONNETA - PREMIOSPAGADOS) - ((INGRESOSBRUTOS * (PRF.PORCENTAJEFIDUCIA / 100)) - PREMIOSPAGADOS) ELSE INGRESOSVALIDOS - COMISIONNETA - PREMIOSPAGADOS END),0) AS VALOR ' +
				   'FROM VW_PREFACTURACION_DIARIA PRF ' +
				   'INNER JOIN WSXML_SFG.PRODUCTO ON (CODPRODUCTO = ID_PRODUCTO) ' +
				   'WHERE FECHAARCHIVO BETWEEN WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHAFRST) + ''') AND WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@ix__FECHAFIN_FIRST) + ''') ' +
					 'AND CODLINEADENEGOCIO = ' + @p_CODLINEADENEGOCIO + ' ' +
                       'GROUP BY CODPUNTODEVENTA, CODPRODUCTO) PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' +CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                   + ' ' END +
      'GROUP BY TPR.CODLINEADENEGOCIO ' END +

	  -- FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN

      -- Condition for final segment that the final dates are not the same
      CASE WHEN @xFECHALAST = @sFECHALAST THEN ' ' ELSE
      'UNION ' +
      'SELECT ' + CONVERT(VARCHAR,@ix__ID_CICLOFACTURACIONPDV)  +               ' AS IDCICLO, ' +
              '999999999' +                                                                                        ' AS ORDEN, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS SEMANA, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS SEMANA1, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetYearNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS YEARNUMBER, ' +
             'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(CONVERT(DATETIME,@ix__FECHAFIN) + 1) + ''') ' + 'AS FECHAINICIO, ' +
             'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHALAST) + ''') ' +                                                   'AS FECHAFIN ' + @strPRODCOLUMNSPREB + ' ' +
      'FROM WSXML_SFG.TIPOPRODUCTO TPR ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +         'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                          'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
       'LEFT OUTER JOIN (SELECT CODPUNTODEVENTA, CODPRODUCTO, ROUND(SUM(CASE WHEN PRF.PORCENTAJEFIDUCIA > 0 THEN (INGRESOSVALIDOS - COMISIONNETA - PREMIOSPAGADOS) - ((INGRESOSBRUTOS * (PRF.PORCENTAJEFIDUCIA / 100)) - PREMIOSPAGADOS) ELSE INGRESOSVALIDOS - COMISIONNETA - PREMIOSPAGADOS END)) AS VALOR ' +
                       'FROM WSXML_SFG.VW_PREFACTURACION_DIARIA PRF ' +
                       'INNER JOIN WSXML_SFG.PRODUCTO ON (CODPRODUCTO = ID_PRODUCTO) ' +
                       'WHERE FECHAARCHIVO BETWEEN WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(CONVERT(DATETIME,@ix__FECHAFIN) + 1) + ''') AND WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHALAST) + ''') ' +
                         'AND CODLINEADENEGOCIO = ' + @p_CODLINEADENEGOCIO + ' ' +
                       'GROUP BY CODPUNTODEVENTA, CODPRODUCTO) PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                  + ' ' END +
      'GROUP BY TPR.CODLINEADENEGOCIO ' END +

      'ORDER BY ORDEN';
	  --PRINT @sql
	  EXECUTE sp_executesql @sql
  END;
GO

   IF OBJECT_ID('WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataTotalFidu', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataTotalFidu;
GO

  CREATE PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataTotalFidu(@p_CODCICLOFACTURACIONPDV NUMERIC(22,0),
                                           @p_CODLINEADENEGOCIO      NUMERIC(22,0),
                                           @pg_CADENA                NVARCHAR(2000),
                                           @pg_ALIADOESTRATEGICO     NVARCHAR(2000),
                                           @pg_PRODUCTO              NVARCHAR(2000)) AS
  BEGIN										   
      DECLARE @sFECHACCLO DATETIME;
    DECLARE @sFECHAFRST DATETIME;
    DECLARE @sFECHALAST DATETIME;
    DECLARE @xFECHAFRST DATETIME;
    DECLARE @xFECHASCND DATETIME;
    DECLARE @xFECHALAST DATETIME;
    DECLARE @lstPRODUCTOSCOLUMNAS TABLE (COLUMNNAMES VARCHAR(50));

    DECLARE @lstCICLOSFACTURACION WSXML_SFG.CICLOINFO;
    DECLARE @strPRODCOLUMNSBILL VARCHAR(2000) = '';
    DECLARE @strPRODCOLUMNSPREB VARCHAR(2000) = '';

	DECLARE @sql NVARCHAR(MAX)

    SELECT @sFECHACCLO = FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ID_CICLOFACTURACIONPDV = @p_CODCICLOFACTURACIONPDV;
    /* Reporte a partir de prefacturacion + facturacion. Obtener fechas de mes a partir del ciclo seleccionado */
    EXEC WSXML_SFG.SFG_PACKAGE_GetMonthRange @sFECHACCLO, @sFECHAFRST OUT, @sFECHALAST OUT
    /* Obtener identificadores de ciclos abarcados por el rango de fechas (correospondientes al mes del ciclo solicitado) */
    INSERT INTO @lstCICLOSFACTURACION
	SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAEJECUCION 
    FROM (SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, NULL AS FECHAINICIO, FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ACTIVE = 1 AND CONVERT(DATETIME, CONVERT(VARCHAR(7), FECHAEJECUCION, 120) + '-01') = CONVERT(DATETIME, CONVERT(VARCHAR(7), @sFECHACCLO, 120) + '-01'))t -- ORDER BY SECUENCIA);
    IF @@ROWCOUNT = 0 BEGIN
      RAISERROR('-20085 No existen ciclos de facturacion a la fecha estipulada', 16, 1);
    END 
    /* Sobreescribir fechas para cada ciclo, y obtener fechas generales de lista */
   DECLARE ix CURSOR FOR 
		SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAFIN 
		FROM @lstCICLOSFACTURACION

		OPEN ix

		DECLARE @_ultimaFila NUMERIC(38,0) = @@CURSOR_ROWS

		DECLARE @ix__ID_CICLOFACTURACIONPDV NUMERIC(38,0), @ix__SECUENCIA NUMERIC(38,0), @ix__FECHAINICIO DATETIME, @ix__FECHAFIN DATETIME
		DECLARE @ix__ID_CICLOFACTURACIONPDV_FIRST NUMERIC(38,0), @ix__SECUENCIA_FIRST NUMERIC(38,0), @ix__FECHAINICIO_FIRST DATETIME, @ix__FECHAFIN_FIRST DATETIME

        DECLARE @iniDATE DATETIME;
        DECLARE @endDATE DATETIME;
		FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN

		SET @ix__ID_CICLOFACTURACIONPDV_FIRST = @ix__ID_CICLOFACTURACIONPDV
		SET @ix__SECUENCIA_FIRST = @ix__SECUENCIA
		SET @ix__FECHAINICIO_FIRST = @ix__FECHAINICIO
		SET @ix__FECHAFIN_FIRST= @ix__FECHAFIN
		
		DECLARE @_fila INT = 1;
		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			EXEC WSXML_SFG.SFGCICLOFACTURACIONPDV_GetCicloDateRangeFromID @ix__ID_CICLOFACTURACIONPDV, @iniDATE OUT, @endDATE OUT
			SET @ix__FECHAINICIO = @iniDATE;
			SET @ix__FECHAFIN    = @endDATE;

			IF @_fila = 1 BEGIN
			--IF ix = lstCICLOSFACTURACION.First BEGIN
			  SET @xFECHAFRST = @iniDATE;
			  SET @xFECHASCND = @endDATE;
			END 
			--IF ix = lstCICLOSFACTURACION.Last BEGIN
			IF @_fila = @_ultimaFila BEGIN
			  SET @xFECHALAST = @endDATE;
			END

			SET @_fila = @_fila + 1
			FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN
		END;
		CLOSE ix;
		DEALLOCATE ix;
    /* Obtener lista de productos */
    DECLARE tPRODUCT CURSOR FOR 
			SELECT ID_AGRUPACIONPRODUCTO, AGR.NOMAGRUPACIONPRODUCTO FROM WSXML_SFG.AGRUPACIONPRODUCTO AGR
				INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ON (AGR.CODTIPOPRODUCTO = TPR.ID_TIPOPRODUCTO)
            WHERE TPR.CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO ORDER BY NOMAGRUPACIONPRODUCTO; 
	OPEN tPRODUCT;
	DECLARE @tPRODUCT__ID_AGRUPACIONPRODUCTO NUMERIC(38,0), @tPRODUCT__NOMAGRUPACIONPRODUCTO VARCHAR(255)
	FETCH tPRODUCT INTO @tPRODUCT__ID_AGRUPACIONPRODUCTO, @tPRODUCT__NOMAGRUPACIONPRODUCTO
	 WHILE @@FETCH_STATUS=0
	 BEGIN
        DECLARE @thisCOLUMNNAME VARCHAR(50);
        DECLARE @existsINLIST NUMERIC(22,0) = 0;
      BEGIN
        SET @thisCOLUMNNAME = CONVERT(VARCHAR, '"' + ISNULL(CASE WHEN LEN(@tPRODUCT__NOMAGRUPACIONPRODUCTO) > 30 THEN SUBSTRING(@tPRODUCT__NOMAGRUPACIONPRODUCTO, 0, 30) ELSE @tPRODUCT__NOMAGRUPACIONPRODUCTO END, '') + '"');
        IF (SELECT COUNT(*) FROM @lstPRODUCTOSCOLUMNAS) > 0 BEGIN
			DECLARE ix2 CURSOR FOR SELECT COLUMNNAMES FROM @lstPRODUCTOSCOLUMNAS
			OPEN ix2
			DECLARE @ix2__IDVALUE NUMERIC(38,0)
			FETCH ix2 INTO @ix2__IDVALUE
			 WHILE @@FETCH_STATUS=0
			 BEGIN
				IF @ix2__IDVALUE = @thisCOLUMNNAME BEGIN
					SET @existsINLIST = 1;
				END 
				FETCH ix2 INTO @ix2__IDVALUE
			END;
			CLOSE ix2;
			DEALLOCATE ix2;
        END 
        IF @existsINLIST = 0 BEGIN
          INSERT INTO @lstPRODUCTOSCOLUMNAS VALUES( @thisCOLUMNNAME )
          SET @strPRODCOLUMNSBILL = ISNULL(@strPRODCOLUMNSBILL, '') + ', SUM(CASE WHEN AGP.ID = ' + CONVERT(VARCHAR,@tPRODUCT__ID_AGRUPACIONPRODUCTO) + ' THEN ISNULL(VALOR, 0) ELSE 0 END) AS ' + ISNULL(@thisCOLUMNNAME, '') + ' ';
          SET @strPRODCOLUMNSPREB = ISNULL(@strPRODCOLUMNSPREB, '') + ', SUM(CASE WHEN AGP.ID = ' + CONVERT(VARCHAR,@tPRODUCT__ID_AGRUPACIONPRODUCTO) + ' THEN ISNULL(VALOR, 0) ELSE 0 END) AS ' + ISNULL(@thisCOLUMNNAME, '') + ' ';
        END 
      END;
    FETCH tPRODUCT INTO @tPRODUCT__ID_AGRUPACIONPRODUCTO, @tPRODUCT__NOMAGRUPACIONPRODUCTO
    END;
    CLOSE tPRODUCT;
    DEALLOCATE tPRODUCT;
    /* Abrir el cursor con los datos */
        SET @sql = 

      'SELECT CLI.ID_CICLOFACTURACIONPDV ' +              'AS IDCICLO, ' +
             'CLI.SECUENCIA ' +                           'AS ORDEN, ' +
             'WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CLI.FECHAFIN) ' + 'AS SEMANA, ' +
             'WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CLI.FECHAFIN) ' + 'AS SEMANA1, ' +
             'WSXML_SFG.SFG_PACKAGE_GetYearNumber(CLI.FECHAFIN) ' + 'AS YEARNUMBER, ' +
             'CLI.FECHAINICIO ' +                         'AS FECHAINICIO, ' + ' ' +
             'CLI.FECHAFIN ' +                            'AS FECHAFIN ' + @strPRODCOLUMNSBILL +
      'FROM WSXML_SFG.SFGINF_CIERREMENSUAL_GetCiclosFacturacionList(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHACCLO) + ''') CLI ' +
      'INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ' +                       'ON (1 = 1) ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +          'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                           'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT ID_CICLOFACTURACIONPDV, CODPRODUCTO, (FACTURADOENCONTRAFIDUCIA - FACTURADOAFAVORFIDUCIA) AS VALOR ' +
                       'FROM WSXML_SFG.VW_SHOW_PRDFACTURACION) PRF ' + 'ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO AND PRF.ID_CICLOFACTURACIONPDV = CLI.ID_CICLOFACTURACIONPDV) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                   + ' ' END +
      'GROUP BY CLI.ID_CICLOFACTURACIONPDV, CLI.SECUENCIA, CLI.FECHAINICIO, CLI.FECHAFIN ' +

      -- Condition for initial segment that the initial dates do not match
      
		CASE WHEN @xFECHAFRST = @sFECHAFRST THEN ' ' ELSE 'UNION ' +
			'SELECT ' + @ix__ID_CICLOFACTURACIONPDV_FIRST + '													AS IDCICLO,'+
              '-1                                                                                               AS ORDEN, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(@ix__FECHAFIN_FIRST)) +				              '			AS SEMANA, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(@ix__FECHAFIN_FIRST)) +	             ' AS SEMANA1, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetYearNumber(@ix__FECHAFIN_FIRST)) +              '  AS YEARNUMBER, ' +
              'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHAFRST) + ''') ' +                   ' AS FECHAINICIO, ' +
              'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@ix__FECHAFIN_FIRST) + ''') ' + 'AS FECHAFIN ' + @strPRODCOLUMNSPREB + ' ' +
      'FROM WSXML_SFG.TIPOPRODUCTO TPR ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +         'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                          'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT CODPUNTODEVENTA, CODPRODUCTO, ROUND(SUM(CASE WHEN PRF.PORCENTAJEFIDUCIA > 0 THEN (INGRESOSBRUTOS * (PRF.PORCENTAJEFIDUCIA / 100)) - PREMIOSPAGADOS ELSE 0 END),0) AS VALOR ' +
                       'FROM WSXML_SFG.VW_PREFACTURACION_DIARIA ' +
                       'WHERE FECHAARCHIVO BETWEEN WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHAFRST) + ''') AND WSXML_SFG.SFG_PACKAGE_StringToDate(''' + @ix__FECHAFIN + ''') ' +
                         'AND CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
                       'GROUP BY CODPUNTODEVENTA, CODPRODUCTO) PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' +CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                   + ' ' END +
      'GROUP BY TPR.CODLINEADENEGOCIO ' END +

	  -- FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN

      -- Condition for final segment that the final dates are not the same
      CASE WHEN @xFECHALAST = @sFECHALAST THEN ' ' ELSE
      'UNION ' +
      'SELECT ' + CONVERT(VARCHAR,@ix__ID_CICLOFACTURACIONPDV)  +               ' AS IDCICLO, ' +
              '999999999' +                                                                                        ' AS ORDEN, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS SEMANA, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS SEMANA1, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetYearNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS YEARNUMBER, ' +
             'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(CONVERT(DATETIME,@ix__FECHAFIN) + 1) + ''') ' + 'AS FECHAINICIO, ' +
             'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHALAST) + ''') ' +                                                   'AS FECHAFIN ' + @strPRODCOLUMNSPREB + ' ' +
      'FROM WSXML_SFG.TIPOPRODUCTO TPR ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +         'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                          'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT CODPUNTODEVENTA, CODPRODUCTO,  ROUND(SUM(CASE WHEN PRF.PORCENTAJEFIDUCIA > 0 THEN (INGRESOSBRUTOS * (PRF.PORCENTAJEFIDUCIA / 100)) - PREMIOSPAGADOS ELSE 0 END),0) ' +
                       'FROM WSXML_SFG.VW_PREFACTURACION_DIARIA ' +
                       'WHERE FECHAARCHIVO BETWEEN WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(CONVERT(DATETIME,@ix__FECHAFIN) + 1) + ''') AND WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHALAST) + ''') ' +
                         'AND CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
                       'GROUP BY CODPUNTODEVENTA, CODPRODUCTO) PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                  + ' ' END +
      'GROUP BY TPR.CODLINEADENEGOCIO ' END +

      'ORDER BY ORDEN';
	  --PRINT @sql
	  EXECUTE sp_executesql @sql
    
  END;
GO

   IF OBJECT_ID('WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataPremiosPg', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataPremiosPg;
GO


CREATE     PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataPremiosPg(@p_CODCICLOFACTURACIONPDV NUMERIC(22,0),
                                           @p_CODLINEADENEGOCIO      NUMERIC(22,0),
                                           @pg_CADENA                NVARCHAR(2000),
                                           @pg_ALIADOESTRATEGICO     NVARCHAR(2000),
                                          @pg_PRODUCTO              NVARCHAR(2000)
                                           ) AS
   BEGIN										   
    DECLARE @sFECHACCLO DATETIME;
    DECLARE @sFECHAFRST DATETIME;
    DECLARE @sFECHALAST DATETIME;
    DECLARE @xFECHAFRST DATETIME;
    DECLARE @xFECHASCND DATETIME;
    DECLARE @xFECHALAST DATETIME;
    DECLARE @lstPRODUCTOSCOLUMNAS TABLE (COLUMNNAMES VARCHAR(50));

    DECLARE @lstCICLOSFACTURACION WSXML_SFG.CICLOINFO;
    DECLARE @strPRODCOLUMNSBILL VARCHAR(2000) = '';
    DECLARE @strPRODCOLUMNSPREB VARCHAR(2000) = '';

	DECLARE @sql NVARCHAR(MAX)

    SELECT @sFECHACCLO = FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ID_CICLOFACTURACIONPDV = @p_CODCICLOFACTURACIONPDV;
    /* Reporte a partir de prefacturacion + facturacion. Obtener fechas de mes a partir del ciclo seleccionado */
    EXEC WSXML_SFG.SFG_PACKAGE_GetMonthRange @sFECHACCLO, @sFECHAFRST OUT, @sFECHALAST OUT
    /* Obtener identificadores de ciclos abarcados por el rango de fechas (correospondientes al mes del ciclo solicitado) */
    INSERT INTO @lstCICLOSFACTURACION
	SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAEJECUCION 
    FROM (SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, NULL AS FECHAINICIO, FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ACTIVE = 1 AND CONVERT(DATETIME, CONVERT(VARCHAR(7), FECHAEJECUCION, 120) + '-01') = CONVERT(DATETIME, CONVERT(VARCHAR(7), @sFECHACCLO, 120) + '-01'))t -- ORDER BY SECUENCIA);
    IF @@ROWCOUNT = 0 BEGIN
      RAISERROR('-20085 No existen ciclos de facturacion a la fecha estipulada', 16, 1);
    END 
    /* Sobreescribir fechas para cada ciclo, y obtener fechas generales de lista */
   DECLARE ix CURSOR FOR 
		SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAFIN 
		FROM @lstCICLOSFACTURACION

		OPEN ix

		DECLARE @_ultimaFila NUMERIC(38,0) = @@CURSOR_ROWS

		DECLARE @ix__ID_CICLOFACTURACIONPDV NUMERIC(38,0), @ix__SECUENCIA NUMERIC(38,0), @ix__FECHAINICIO DATETIME, @ix__FECHAFIN DATETIME
		DECLARE @ix__ID_CICLOFACTURACIONPDV_FIRST NUMERIC(38,0), @ix__SECUENCIA_FIRST NUMERIC(38,0), @ix__FECHAINICIO_FIRST DATETIME, @ix__FECHAFIN_FIRST DATETIME

        DECLARE @iniDATE DATETIME;
        DECLARE @endDATE DATETIME;
		FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN

		SET @ix__ID_CICLOFACTURACIONPDV_FIRST = @ix__ID_CICLOFACTURACIONPDV
		SET @ix__SECUENCIA_FIRST = @ix__SECUENCIA
		SET @ix__FECHAINICIO_FIRST = @ix__FECHAINICIO
		SET @ix__FECHAFIN_FIRST= @ix__FECHAFIN
		
		DECLARE @_fila INT = 1;
		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			EXEC WSXML_SFG.SFGCICLOFACTURACIONPDV_GetCicloDateRangeFromID @ix__ID_CICLOFACTURACIONPDV, @iniDATE OUT, @endDATE OUT
			SET @ix__FECHAINICIO = @iniDATE;
			SET @ix__FECHAFIN    = @endDATE;

			IF @_fila = 1 BEGIN
			--IF ix = lstCICLOSFACTURACION.First BEGIN
			  SET @xFECHAFRST = @iniDATE;
			  SET @xFECHASCND = @endDATE;
			END 
			--IF ix = lstCICLOSFACTURACION.Last BEGIN
			IF @_fila = @_ultimaFila BEGIN
			  SET @xFECHALAST = @endDATE;
			END

			SET @_fila = @_fila + 1
			FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN
		END;
		CLOSE ix;
		DEALLOCATE ix;
    /* Obtener lista de productos */
    DECLARE tPRODUCT CURSOR FOR 
			SELECT ID_AGRUPACIONPRODUCTO, AGR.NOMAGRUPACIONPRODUCTO FROM WSXML_SFG.AGRUPACIONPRODUCTO AGR
				INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ON (AGR.CODTIPOPRODUCTO = TPR.ID_TIPOPRODUCTO)
            WHERE TPR.CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO ORDER BY NOMAGRUPACIONPRODUCTO; 
	OPEN tPRODUCT;
	DECLARE @tPRODUCT__ID_AGRUPACIONPRODUCTO NUMERIC(38,0), @tPRODUCT__NOMAGRUPACIONPRODUCTO VARCHAR(255)
	FETCH tPRODUCT INTO @tPRODUCT__ID_AGRUPACIONPRODUCTO, @tPRODUCT__NOMAGRUPACIONPRODUCTO
	 WHILE @@FETCH_STATUS=0
	 BEGIN
        DECLARE @thisCOLUMNNAME VARCHAR(50);
        DECLARE @existsINLIST NUMERIC(22,0) = 0;
      BEGIN
        SET @thisCOLUMNNAME = CONVERT(VARCHAR, '"' + ISNULL(CASE WHEN LEN(@tPRODUCT__NOMAGRUPACIONPRODUCTO) > 30 THEN SUBSTRING(@tPRODUCT__NOMAGRUPACIONPRODUCTO, 0, 30) ELSE @tPRODUCT__NOMAGRUPACIONPRODUCTO END, '') + '"');
        IF (SELECT COUNT(*) FROM @lstPRODUCTOSCOLUMNAS) > 0 BEGIN
			DECLARE ix2 CURSOR FOR SELECT COLUMNNAMES FROM @lstPRODUCTOSCOLUMNAS
			OPEN ix2
			DECLARE @ix2__IDVALUE NUMERIC(38,0)
			FETCH ix2 INTO @ix2__IDVALUE
			 WHILE @@FETCH_STATUS=0
			 BEGIN
				IF @ix2__IDVALUE = @thisCOLUMNNAME BEGIN
					SET @existsINLIST = 1;
				END 
				FETCH ix2 INTO @ix2__IDVALUE
			END;
			CLOSE ix2;
			DEALLOCATE ix2;
        END 
        IF @existsINLIST = 0 BEGIN
          INSERT INTO @lstPRODUCTOSCOLUMNAS VALUES( @thisCOLUMNNAME )
          SET @strPRODCOLUMNSBILL = ISNULL(@strPRODCOLUMNSBILL, '') + ', SUM(CASE WHEN AGP.ID = ' + CONVERT(VARCHAR,@tPRODUCT__ID_AGRUPACIONPRODUCTO) + ' THEN ISNULL(VALOR, 0) ELSE 0 END) AS ' + ISNULL(@thisCOLUMNNAME, '') + ' ';
          SET @strPRODCOLUMNSPREB = ISNULL(@strPRODCOLUMNSPREB, '') + ', SUM(CASE WHEN AGP.ID = ' + CONVERT(VARCHAR,@tPRODUCT__ID_AGRUPACIONPRODUCTO) + ' THEN ISNULL(VALOR, 0) ELSE 0 END) AS ' + ISNULL(@thisCOLUMNNAME, '') + ' ';
        END 
      END;
    FETCH tPRODUCT INTO @tPRODUCT__ID_AGRUPACIONPRODUCTO, @tPRODUCT__NOMAGRUPACIONPRODUCTO
    END;
    CLOSE tPRODUCT;
    DEALLOCATE tPRODUCT;
    /* Abrir el cursor con los datos */
        SET @sql = 

      'SELECT CLI.ID_CICLOFACTURACIONPDV ' +              'AS IDCICLO, ' +
             'CLI.SECUENCIA ' +                           'AS ORDEN, ' +
             'WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CLI.FECHAFIN) ' + 'AS SEMANA, ' +
             'WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CLI.FECHAFIN) ' + 'AS SEMANA1, ' +
             'WSXML_SFG.SFG_PACKAGE_GetYearNumber(CLI.FECHAFIN) ' + 'AS YEARNUMBER, ' +
             'CLI.FECHAINICIO ' +                         'AS FECHAINICIO, ' + ' ' +
             'CLI.FECHAFIN ' +                            'AS FECHAFIN ' + @strPRODCOLUMNSBILL +
      'FROM WSXML_SFG.SFGINF_CIERREMENSUAL_GetCiclosFacturacionList(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHACCLO) + ''') CLI ' +
      'INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ' +                       'ON (1 = 1) ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +          'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                           'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT ID_CICLOFACTURACIONPDV, CODPRODUCTO, ROUND(SUM(PREMIOSPAGADOS),0) AS VALOR ' +
                       'FROM WSXML_SFG.VW_SHOW_PRDFACTURACION) PRF ' + 'ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO AND PRF.ID_CICLOFACTURACIONPDV = CLI.ID_CICLOFACTURACIONPDV) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                   + ' ' END +
      'GROUP BY CLI.ID_CICLOFACTURACIONPDV, CLI.SECUENCIA, CLI.FECHAINICIO, CLI.FECHAFIN ' +

      -- Condition for initial segment that the initial dates do not match
      
		CASE WHEN @xFECHAFRST = @sFECHAFRST THEN ' ' ELSE 'UNION ' +
			'SELECT ' + @ix__ID_CICLOFACTURACIONPDV_FIRST + '													AS IDCICLO,'+
              '-1                                                                                               AS ORDEN, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(@ix__FECHAFIN_FIRST)) +				              '			AS SEMANA, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(@ix__FECHAFIN_FIRST)) +	             ' AS SEMANA1, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetYearNumber(@ix__FECHAFIN_FIRST)) +              '  AS YEARNUMBER, ' +
              'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHAFRST) + ''') ' +                   ' AS FECHAINICIO, ' +
              'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@ix__FECHAFIN_FIRST) + ''') ' + 'AS FECHAFIN ' + @strPRODCOLUMNSPREB + ' ' +
      'FROM WSXML_SFG.TIPOPRODUCTO TPR ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +         'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                          'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT CODPUNTODEVENTA, CODPRODUCTO, ROUND(SUM(PREMIOSPAGADOS),0) AS VALOR ' +
                       'FROM WSXML_SFG.VW_PREFACTURACION_DIARIA ' +
                       'WHERE FECHAARCHIVO BETWEEN WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHAFRST) + ''') AND WSXML_SFG.SFG_PACKAGE_StringToDate(''' + @ix__FECHAFIN + ''') ' +
                         'AND CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
                       'GROUP BY CODPUNTODEVENTA, CODPRODUCTO) PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' +CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                   + ' ' END +
      'GROUP BY TPR.CODLINEADENEGOCIO ' END +

	  -- FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN

      -- Condition for final segment that the final dates are not the same
      CASE WHEN @xFECHALAST = @sFECHALAST THEN ' ' ELSE
      'UNION ' +
      'SELECT ' + CONVERT(VARCHAR,@ix__ID_CICLOFACTURACIONPDV)  +               ' AS IDCICLO, ' +
              '999999999' +                                                                                        ' AS ORDEN, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS SEMANA, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS SEMANA1, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetYearNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS YEARNUMBER, ' +
             'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(CONVERT(DATETIME,@ix__FECHAFIN) + 1) + ''') ' + 'AS FECHAINICIO, ' +
             'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHALAST) + ''') ' +                                                   'AS FECHAFIN ' + @strPRODCOLUMNSPREB + ' ' +
      'FROM WSXML_SFG.TIPOPRODUCTO TPR ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +         'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                          'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT CODPUNTODEVENTA, CODPRODUCTO, ROUND(SUM(PREMIOSPAGADOS),0) AS VALOR ' +
                       'FROM WSXML_SFG.VW_PREFACTURACION_DIARIA ' +
                       'WHERE FECHAARCHIVO BETWEEN WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(CONVERT(DATETIME,@ix__FECHAFIN) + 1) + ''') AND WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHALAST) + ''') ' +
                         'AND CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
                       'GROUP BY CODPUNTODEVENTA, CODPRODUCTO) PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                  + ' ' END +
      'GROUP BY TPR.CODLINEADENEGOCIO ' END +

      'ORDER BY ORDEN';
	  --PRINT @sql
	  EXECUTE sp_executesql @sql
END
    
GO

  IF OBJECT_ID('WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataIVAProdct', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataIVAProdct;
GO


  CREATE PROCEDURE WSXML_SFG.SFGINF_CIERREMENSUAL_GetMonthlyCrossedDataIVAProdct(@p_CODCICLOFACTURACIONPDV NUMERIC(22,0),
                                           @p_CODLINEADENEGOCIO      NUMERIC(22,0),
                                           @pg_CADENA                NVARCHAR(2000),
                                           @pg_ALIADOESTRATEGICO     NVARCHAR(2000),
                                           @pg_PRODUCTO              NVARCHAR(2000)) AS
      BEGIN										   
    DECLARE @sFECHACCLO DATETIME;
    DECLARE @sFECHAFRST DATETIME;
    DECLARE @sFECHALAST DATETIME;
    DECLARE @xFECHAFRST DATETIME;
    DECLARE @xFECHASCND DATETIME;
    DECLARE @xFECHALAST DATETIME;
    DECLARE @lstPRODUCTOSCOLUMNAS TABLE (COLUMNNAMES VARCHAR(50));

    DECLARE @lstCICLOSFACTURACION WSXML_SFG.CICLOINFO;
    DECLARE @strPRODCOLUMNSBILL VARCHAR(2000) = '';
    DECLARE @strPRODCOLUMNSPREB VARCHAR(2000) = '';

	DECLARE @sql NVARCHAR(MAX)

    SELECT @sFECHACCLO = FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ID_CICLOFACTURACIONPDV = @p_CODCICLOFACTURACIONPDV;
    /* Reporte a partir de prefacturacion + facturacion. Obtener fechas de mes a partir del ciclo seleccionado */
    EXEC WSXML_SFG.SFG_PACKAGE_GetMonthRange @sFECHACCLO, @sFECHAFRST OUT, @sFECHALAST OUT
    /* Obtener identificadores de ciclos abarcados por el rango de fechas (correospondientes al mes del ciclo solicitado) */
    INSERT INTO @lstCICLOSFACTURACION
	SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAEJECUCION 
    FROM (SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, NULL AS FECHAINICIO, FECHAEJECUCION FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ACTIVE = 1 AND CONVERT(DATETIME, CONVERT(VARCHAR(7), FECHAEJECUCION, 120) + '-01') = CONVERT(DATETIME, CONVERT(VARCHAR(7), @sFECHACCLO, 120) + '-01'))t -- ORDER BY SECUENCIA);
    IF @@ROWCOUNT = 0 BEGIN
      RAISERROR('-20085 No existen ciclos de facturacion a la fecha estipulada', 16, 1);
    END 
    /* Sobreescribir fechas para cada ciclo, y obtener fechas generales de lista */
   DECLARE ix CURSOR FOR 
		SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAFIN 
		FROM @lstCICLOSFACTURACION

		OPEN ix

		DECLARE @_ultimaFila NUMERIC(38,0) = @@CURSOR_ROWS

		DECLARE @ix__ID_CICLOFACTURACIONPDV NUMERIC(38,0), @ix__SECUENCIA NUMERIC(38,0), @ix__FECHAINICIO DATETIME, @ix__FECHAFIN DATETIME
		DECLARE @ix__ID_CICLOFACTURACIONPDV_FIRST NUMERIC(38,0), @ix__SECUENCIA_FIRST NUMERIC(38,0), @ix__FECHAINICIO_FIRST DATETIME, @ix__FECHAFIN_FIRST DATETIME

        DECLARE @iniDATE DATETIME;
        DECLARE @endDATE DATETIME;
		FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN

		SET @ix__ID_CICLOFACTURACIONPDV_FIRST = @ix__ID_CICLOFACTURACIONPDV
		SET @ix__SECUENCIA_FIRST = @ix__SECUENCIA
		SET @ix__FECHAINICIO_FIRST = @ix__FECHAINICIO
		SET @ix__FECHAFIN_FIRST= @ix__FECHAFIN
		
		DECLARE @_fila INT = 1;
		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			EXEC WSXML_SFG.SFGCICLOFACTURACIONPDV_GetCicloDateRangeFromID @ix__ID_CICLOFACTURACIONPDV, @iniDATE OUT, @endDATE OUT
			SET @ix__FECHAINICIO = @iniDATE;
			SET @ix__FECHAFIN    = @endDATE;

			IF @_fila = 1 BEGIN
			--IF ix = lstCICLOSFACTURACION.First BEGIN
			  SET @xFECHAFRST = @iniDATE;
			  SET @xFECHASCND = @endDATE;
			END 
			--IF ix = lstCICLOSFACTURACION.Last BEGIN
			IF @_fila = @_ultimaFila BEGIN
			  SET @xFECHALAST = @endDATE;
			END

			SET @_fila = @_fila + 1
			FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN
		END;
		CLOSE ix;
		DEALLOCATE ix;
    /* Obtener lista de productos */
    DECLARE tPRODUCT CURSOR FOR 
			SELECT ID_AGRUPACIONPRODUCTO, AGR.NOMAGRUPACIONPRODUCTO FROM WSXML_SFG.AGRUPACIONPRODUCTO AGR
				INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ON (AGR.CODTIPOPRODUCTO = TPR.ID_TIPOPRODUCTO)
            WHERE TPR.CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO ORDER BY NOMAGRUPACIONPRODUCTO; 
	OPEN tPRODUCT;
	DECLARE @tPRODUCT__ID_AGRUPACIONPRODUCTO NUMERIC(38,0), @tPRODUCT__NOMAGRUPACIONPRODUCTO VARCHAR(255)
	FETCH tPRODUCT INTO @tPRODUCT__ID_AGRUPACIONPRODUCTO, @tPRODUCT__NOMAGRUPACIONPRODUCTO
	 WHILE @@FETCH_STATUS=0
	 BEGIN
        DECLARE @thisCOLUMNNAME VARCHAR(50);
        DECLARE @existsINLIST NUMERIC(22,0) = 0;
      BEGIN
        SET @thisCOLUMNNAME = CONVERT(VARCHAR, '"' + ISNULL(CASE WHEN LEN(@tPRODUCT__NOMAGRUPACIONPRODUCTO) > 30 THEN SUBSTRING(@tPRODUCT__NOMAGRUPACIONPRODUCTO, 0, 30) ELSE @tPRODUCT__NOMAGRUPACIONPRODUCTO END, '') + '"');
        IF (SELECT COUNT(*) FROM @lstPRODUCTOSCOLUMNAS) > 0 BEGIN
			DECLARE ix2 CURSOR FOR SELECT COLUMNNAMES FROM @lstPRODUCTOSCOLUMNAS
			OPEN ix2
			DECLARE @ix2__IDVALUE NUMERIC(38,0)
			FETCH ix2 INTO @ix2__IDVALUE
			 WHILE @@FETCH_STATUS=0
			 BEGIN
				IF @ix2__IDVALUE = @thisCOLUMNNAME BEGIN
					SET @existsINLIST = 1;
				END 
				FETCH ix2 INTO @ix2__IDVALUE
			END;
			CLOSE ix2;
			DEALLOCATE ix2;
        END 
        IF @existsINLIST = 0 BEGIN
          INSERT INTO @lstPRODUCTOSCOLUMNAS VALUES( @thisCOLUMNNAME )
          SET @strPRODCOLUMNSBILL = ISNULL(@strPRODCOLUMNSBILL, '') + ', SUM(CASE WHEN AGP.ID = ' + CONVERT(VARCHAR,@tPRODUCT__ID_AGRUPACIONPRODUCTO) + ' THEN ISNULL(VALOR, 0) ELSE 0 END) AS ' + ISNULL(@thisCOLUMNNAME, '') + ' ';
          SET @strPRODCOLUMNSPREB = ISNULL(@strPRODCOLUMNSPREB, '') + ', SUM(CASE WHEN AGP.ID = ' + CONVERT(VARCHAR,@tPRODUCT__ID_AGRUPACIONPRODUCTO) + ' THEN ISNULL(VALOR, 0) ELSE 0 END) AS ' + ISNULL(@thisCOLUMNNAME, '') + ' ';
        END 
      END;
    FETCH tPRODUCT INTO @tPRODUCT__ID_AGRUPACIONPRODUCTO, @tPRODUCT__NOMAGRUPACIONPRODUCTO
    END;
    CLOSE tPRODUCT;
    DEALLOCATE tPRODUCT;
    /* Abrir el cursor con los datos */
        SET @sql = 

      'SELECT CLI.ID_CICLOFACTURACIONPDV ' +              'AS IDCICLO, ' +
             'CLI.SECUENCIA ' +                           'AS ORDEN, ' +
             'WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CLI.FECHAFIN) ' + 'AS SEMANA, ' +
             'WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CLI.FECHAFIN) ' + 'AS SEMANA1, ' +
             'WSXML_SFG.SFG_PACKAGE_GetYearNumber(CLI.FECHAFIN) ' + 'AS YEARNUMBER, ' +
             'CLI.FECHAINICIO ' +                         'AS FECHAINICIO, ' + ' ' +
             'CLI.FECHAFIN ' +                            'AS FECHAFIN ' + @strPRODCOLUMNSBILL +
      'FROM WSXML_SFG.SFGINF_CIERREMENSUAL_GetCiclosFacturacionList(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHACCLO) + ''') CLI ' +
      'INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ' +                       'ON (1 = 1) ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +          'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                           'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT ID_CICLOFACTURACIONPDV, CODPRODUCTO, IMPUESTO_IVA AS VALOR ' +
                       'FROM WSXML_SFG.VW_SHOW_PRDFACTURACION) PRF ' + 'ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO AND PRF.ID_CICLOFACTURACIONPDV = CLI.ID_CICLOFACTURACIONPDV) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                   + ' ' END +
      'GROUP BY CLI.ID_CICLOFACTURACIONPDV, CLI.SECUENCIA, CLI.FECHAINICIO, CLI.FECHAFIN ' +

      -- Condition for initial segment that the initial dates do not match
      
		CASE WHEN @xFECHAFRST = @sFECHAFRST THEN ' ' ELSE 'UNION ' +
			'SELECT ' + @ix__ID_CICLOFACTURACIONPDV_FIRST + '													AS IDCICLO,'+
              '-1                                                                                               AS ORDEN, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(@ix__FECHAFIN_FIRST)) +				              '			AS SEMANA, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(@ix__FECHAFIN_FIRST)) +	             ' AS SEMANA1, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetYearNumber(@ix__FECHAFIN_FIRST)) +              '  AS YEARNUMBER, ' +
              'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHAFRST) + ''') ' +                   ' AS FECHAINICIO, ' +
              'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@ix__FECHAFIN_FIRST) + ''') ' + 'AS FECHAFIN ' + @strPRODCOLUMNSPREB + ' ' +
      'FROM WSXML_SFG.TIPOPRODUCTO TPR ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +         'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                          'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT CODPUNTODEVENTA, CODPRODUCTO, ROUND(SUM(IVAPRODUCTO),0) AS VALOR ' +
                       'FROM WSXML_SFG.VW_PREFACTURACION_DIARIA ' +
                       'WHERE FECHAARCHIVO BETWEEN WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHAFRST) + ''') AND WSXML_SFG.SFG_PACKAGE_StringToDate(''' + @ix__FECHAFIN + ''') ' +
                         'AND CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
                       'GROUP BY CODPUNTODEVENTA, CODPRODUCTO) PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' +CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                   + ' ' END +
      'GROUP BY TPR.CODLINEADENEGOCIO ' END +

	  -- FETCH NEXT FROM  ix INTO @ix__ID_CICLOFACTURACIONPDV, @ix__SECUENCIA, @ix__FECHAINICIO, @ix__FECHAFIN

      -- Condition for final segment that the final dates are not the same
      CASE WHEN @xFECHALAST = @sFECHALAST THEN ' ' ELSE
      'UNION ' +
      'SELECT ' + CONVERT(VARCHAR,@ix__ID_CICLOFACTURACIONPDV)  +               ' AS IDCICLO, ' +
              '999999999' +                                                                                        ' AS ORDEN, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS SEMANA, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetWeekNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS SEMANA1, ' +
              CONVERT(VARCHAR,WSXML_SFG.SFG_PACKAGE_GetYearNumber(CONVERT(DATETIME,@ix__FECHAFIN) + 2)) +          ' AS YEARNUMBER, ' +
             'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(CONVERT(DATETIME,@ix__FECHAFIN) + 1) + ''') ' + 'AS FECHAINICIO, ' +
             'WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHALAST) + ''') ' +                                                   'AS FECHAFIN ' + @strPRODCOLUMNSPREB + ' ' +
      'FROM WSXML_SFG.TIPOPRODUCTO TPR ' +
      'INNER JOIN (SELECT CODTIPOPRODUCTO, ID_AGRUPACIONPRODUCTO AS ID ' +
                  'FROM WSXML_SFG.AGRUPACIONPRODUCTO) AGP ' +         'ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO) ' +
      'INNER JOIN WSXML_SFG.PRODUCTO PRD ' +                          'ON (AGP.ID = PRD.CODAGRUPACIONPRODUCTO) ' +
      'LEFT OUTER JOIN (SELECT CODPUNTODEVENTA, CODPRODUCTO, ROUND(SUM(IVAPRODUCTO),0) AS VALOR ' +
                       'FROM WSXML_SFG.VW_PREFACTURACION_DIARIA ' +
                       'WHERE FECHAARCHIVO BETWEEN WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(CONVERT(DATETIME,@ix__FECHAFIN) + 1) + ''') AND WSXML_SFG.SFG_PACKAGE_StringToDate(''' + WSXML_SFG.SFG_PACKAGE_DateToString(@sFECHALAST) + ''') ' +
                         'AND CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
                       'GROUP BY CODPUNTODEVENTA, CODPRODUCTO) PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO) ' +
      'WHERE TPR.CODLINEADENEGOCIO = ' + CONVERT(VARCHAR,@p_CODLINEADENEGOCIO) + ' ' +
        CASE WHEN @pg_ALIADOESTRATEGICO <> '-1' THEN 'AND PRD.CODALIADOESTRATEGICO = ' + CONVERT(VARCHAR,WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO)) + ' ' END +
        CASE WHEN @pg_PRODUCTO <> '-1'          THEN 'AND PRD.ID_PRODUCTO = '          + CONVERT(VARCHAR,WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO))                  + ' ' END +
      'GROUP BY TPR.CODLINEADENEGOCIO ' END +

      'ORDER BY ORDEN';
	  --PRINT @sql
	  EXECUTE sp_executesql @sql
END
  GO