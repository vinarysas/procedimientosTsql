USE SFGPRODU;
--  DDL for Package Body SFGXMLDEPOSITSLIP
--------------------------------------------------------

  /* PACKAGE BODY WSXML_SFG.SFGXMLDEPOSITSLIP */ 

  IF OBJECT_ID('WSXML_SFG.SFGXMLDEPOSITSLIP_GetDepositSlipHeaderCount', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGXMLDEPOSITSLIP_GetDepositSlipHeaderCount;
GO

CREATE     PROCEDURE WSXML_SFG.SFGXMLDEPOSITSLIP_GetDepositSlipHeaderCount(@p_SECUENCIACICLO NUMERIC(22,0), @p_ROWCOUNT_out NUMERIC(22,0) OUT) AS
 BEGIN
    DECLARE @cFILASXPAGINA NUMERIC(22,0) = 500;
    DECLARE @cMAXSECUENCIAFACTURACION NUMERIC(22,0);
    DECLARE @cCODCICLOFACTURACIONPDV  NUMERIC(22,0);
   DECLARE @msg VARCHAR(2000)
  SET NOCOUNT ON;
    BEGIN
      IF @p_SECUENCIACICLO = -1 BEGIN
        SELECT @cMAXSECUENCIAFACTURACION = MAX(SECUENCIA) FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ACTIVE = 1;
      END
      ELSE BEGIN
        SET @cMAXSECUENCIAFACTURACION = @p_SECUENCIACICLO;
      END 

		SELECT @cCODCICLOFACTURACIONPDV = ID_CICLOFACTURACIONPDV FROM WSXML_SFG.CICLOFACTURACIONPDV
		WHERE SECUENCIA = @cMAXSECUENCIAFACTURACION AND ACTIVE = 1;
		
		DECLARE @rowcount NUMERIC(22,0) = @@ROWCOUNT;
		IF @rowcount = 0 BEGIN
			SET @msg = '-20054 No existe el ciclo de facturacion No. ' + ISNULL(CONVERT(VARCHAR,@p_SECUENCIACICLO), '')
			RAISERROR(@msg, 16, 1);
			RETURN 0
		END
		IF @rowcount > 1 BEGIN
			RAISERROR('-20054 Hay mas de un ciclo de facturacion con el mismo codigo de secuencia. Este es un problema de consistencia de datos.', 16, 1);
			RETURN 0
		END
    END;
    /* Finalmente debe retornar solamente los puntos de venta a los que se les genero tirilla */
    SELECT @p_ROWCOUNT_out = CEILING(COUNT(1) / @cFILASXPAGINA) FROM WSXML_SFG.MAESTROFACTURACIONTIRILLA WHERE CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV;
  END;
  GO


  IF OBJECT_ID('WSXML_SFG.SFGXMLDEPOSITSLIP_GetDepositSlipDetails', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGXMLDEPOSITSLIP_GetDepositSlipDetails;
GO

CREATE     PROCEDURE WSXML_SFG.SFGXMLDEPOSITSLIP_GetDepositSlipDetails(@p_SECUENCIACICLO NUMERIC(22,0), @p_CODPUNTODEVENTA NUMERIC(22,0)) AS
 BEGIN
    DECLARE @cMAXSECUENCIAFACTURACION NUMERIC(22,0);
    DECLARE @cCODCICLOFACTURACIONPDV NUMERIC(22,0);
    DECLARE @xPRODTX  NUMERIC(22,0) = 1; -- Impuesto IVA
    DECLARE @xBILLPAY NUMERIC(22,0) = 3; -- Linea de negocio Bill Payment
    DECLARE @xPREPAID NUMERIC(22,0) = 2; -- Linea de negocio Pines y Recargas
    DECLARE @xLOTTERY NUMERIC(22,0) = 1; -- Linea de negocio Juegos
    DECLARE @xBPAYMNT NUMERIC(22,0) = 8; -- Tipo de producto Bill Payment
    DECLARE @xDEPONLN NUMERIC(22,0) = 9; -- Tipo de producto Deposit Online
    DECLARE @xEVOUCHR NUMERIC(22,0) = 6; -- Tipo de producto EVoucher
    DECLARE @xERECHRG NUMERIC(22,0) = 7; -- Tipo de producto ERecharge
   
   DECLARE @msg varchar(2000)
  SET NOCOUNT ON;
    BEGIN
      IF @p_SECUENCIACICLO = -1 BEGIN
        SELECT @cMAXSECUENCIAFACTURACION = MAX(SECUENCIA) FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ACTIVE = 1;
      END
      ELSE BEGIN
        SET @cMAXSECUENCIAFACTURACION = @p_SECUENCIACICLO;
      END 

		SELECT @cCODCICLOFACTURACIONPDV = ID_CICLOFACTURACIONPDV FROM WSXML_SFG.CICLOFACTURACIONPDV
		WHERE SECUENCIA = @cMAXSECUENCIAFACTURACION AND ACTIVE = 1;
		
		DECLARE @rowcount NUMERIC(22,0) = @@ROWCOUNT;
		
		IF @rowcount = 0 BEGIN
			set @msg = '-20054 No existe el ciclo de facturacion No. ' + ISNULL(CONVERT(VARCHAR,@p_SECUENCIACICLO), '') 
			RAISERROR(@msg , 16, 1);
			RETURN 0;
		END
		
		IF @rowcount > 1 BEGIN
			RAISERROR('-20054 Hay mas de un ciclo de facturacion con el mismo codigo de secuencia. Este es un problema de consistencia de datos.', 16, 1);
			RETURN 0;
		END
    END;

      SELECT CASE WHEN TPR.CODLINEADENEGOCIO = @xBILLPAY AND TPR.ID_TIPOPRODUCTO = @xBPAYMNT THEN 'BillPayment'
                  WHEN TPR.CODLINEADENEGOCIO = @xBILLPAY AND TPR.ID_TIPOPRODUCTO = @xDEPONLN THEN 'DepositOnLine'
                  WHEN TPR.CODLINEADENEGOCIO = @xPREPAID AND TPR.ID_TIPOPRODUCTO = @xEVOUCHR THEN 'EVoucher'
                  WHEN TPR.CODLINEADENEGOCIO = @xPREPAID AND TPR.ID_TIPOPRODUCTO = @xERECHRG THEN 'ERecharge'
                  WHEN TPR.CODLINEADENEGOCIO = @xLOTTERY THEN 'Games'
             END AS PARENTNODE,
             PRD.ID_PRODUCTO, PRD.NOMPRODUCTO  AS PRODUCTNAME,
             DFP.CANTIDADVENTA                 AS QUANTITY,
             DFP.VALORVENTA                    AS AMOUNT,  -- Venta total, sin descontar impuestos ni anulaciones
             DFP.CANTIDADANULACION             AS QUANTITYCANCELED,
             DFP.VALORANULACION                AS AMOUNTCANCELED,
             DFP.VALORVENTABRUTA               AS GROSSSALES,
             ISNULL(DFPTAXIVA.VALORIMPUESTOx1, 0) AS TAXIVA,
             DFP.CANTIDADPREMIOPAGO            AS AWARDPAIDQUANTITY,
             DFP.VALORPREMIOPAGO               AS AWARDPAIDAMOUNT,
             DFP.RETENCIONPREMIOSPAGADOS       AS AWARDPAIDTAXDISCOUNTING
      FROM WSXML_SFG.MAESTROFACTURACIONPDV MFP
      INNER JOIN DETALLEFACTURACIONPDV DFP ON (DFP.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV)
      INNER JOIN PRODUCTO PRD ON (DFP.CODPRODUCTO = PRD.ID_PRODUCTO)
      INNER JOIN TIPOPRODUCTO TPR ON (PRD.CODTIPOPRODUCTO = TPR.ID_TIPOPRODUCTO)
      LEFT OUTER JOIN (SELECT CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV, SUM(CASE WHEN CODIMPUESTO = @xPRODTX THEN VALORIMPUESTO ELSE 0 END) AS VALORIMPUESTOx1
                       FROM WSXML_SFG.DETALLEFACTURACIONIMPUESTO
                       GROUP BY CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV) DFPTAXIVA ON (DFPTAXIVA.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV AND DFPTAXIVA.CODDETALLEFACTURACIONPDV = DFP.ID_DETALLEFACTURACIONPDV)
      WHERE MFP.CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV
        AND MFP.CODPUNTODEVENTA = @p_CODPUNTODEVENTA
      ORDER BY TPR.CODLINEADENEGOCIO, DFP.CANTIDADVENTA DESC;
  END;
  GO


   IF OBJECT_ID('WSXML_SFG.SFGXMLDEPOSITSLIP_GetDepositSlipDetailsForChain', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGXMLDEPOSITSLIP_GetDepositSlipDetailsForChain;
GO

CREATE     PROCEDURE WSXML_SFG.SFGXMLDEPOSITSLIP_GetDepositSlipDetailsForChain(@p_SECUENCIACICLO NUMERIC(22,0), @p_CODAGRUPACIONPUNTODEVENTA NUMERIC(22,0)) AS
 BEGIN
    DECLARE @cMAXSECUENCIAFACTURACION NUMERIC(22,0);
    DECLARE @cCODCICLOFACTURACIONPDV NUMERIC(22,0);
    DECLARE @xPRODTX  NUMERIC(22,0) = 1; -- Impuesto IVA
    DECLARE @xBILLPAY NUMERIC(22,0) = 3; -- Linea de negocio Bill Payment
    DECLARE @xPREPAID NUMERIC(22,0) = 2; -- Linea de negocio Pines y Recargas
    DECLARE @xLOTTERY NUMERIC(22,0) = 1; -- Linea de negocio Juegos
    DECLARE @xBPAYMNT NUMERIC(22,0) = 8; -- Tipo de producto Bill Payment
    DECLARE @xDEPONLN NUMERIC(22,0) = 9; -- Tipo de producto Deposit Online
    DECLARE @xEVOUCHR NUMERIC(22,0) = 6; -- Tipo de producto EVoucher
    DECLARE @xERECHRG NUMERIC(22,0) = 7; -- Tipo de producto ERecharge
   declare @msg varchar(2000)
  SET NOCOUNT ON;
    BEGIN
      IF @p_SECUENCIACICLO = -1 BEGIN
        SELECT @cMAXSECUENCIAFACTURACION = MAX(SECUENCIA) FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ACTIVE = 1;
      END
      ELSE BEGIN
        SET @cMAXSECUENCIAFACTURACION = @p_SECUENCIACICLO;
      END 

		SELECT @cCODCICLOFACTURACIONPDV = ID_CICLOFACTURACIONPDV FROM WSXML_SFG.CICLOFACTURACIONPDV
		WHERE SECUENCIA = @cMAXSECUENCIAFACTURACION AND ACTIVE = 1;
		
		DECLARE @rowcount NUMERIC(22,0) = @@ROWCOUNT;
		
		IF @rowcount = 0 BEGIN
			set @msg = '-20054 No existe el ciclo de facturacion No. ' + ISNULL(CONVERT(VARCHAR,@p_SECUENCIACICLO), '')
			RAISERROR(@msg, 16, 1);
			RETURN 0;
		END
		
		IF @rowcount > 1 BEGIN
			RAISERROR('-20054 Hay mas de un ciclo de facturacion con el mismo codigo de secuencia. Este es un problema de consistencia de datos.', 16, 1);
			RETURN 0;
		END;

      SELECT CASE WHEN TPR.CODLINEADENEGOCIO = @xBILLPAY AND TPR.ID_TIPOPRODUCTO = @xBPAYMNT THEN 'BillPayment'
                  WHEN TPR.CODLINEADENEGOCIO = @xBILLPAY AND TPR.ID_TIPOPRODUCTO = @xDEPONLN THEN 'DepositOnLine'
                  WHEN TPR.CODLINEADENEGOCIO = @xPREPAID AND TPR.ID_TIPOPRODUCTO = @xEVOUCHR THEN 'EVoucher'
                  WHEN TPR.CODLINEADENEGOCIO = @xPREPAID AND TPR.ID_TIPOPRODUCTO = @xERECHRG THEN 'ERecharge'
                  WHEN TPR.CODLINEADENEGOCIO = @xLOTTERY THEN 'Games'
             END AS PARENTNODE,
             PRD.ID_PRODUCTO, PRD.NOMPRODUCTO       AS PRODUCTNAME,
             SUM(DFP.CANTIDADVENTA)                 AS QUANTITY,
             SUM(DFP.VALORVENTA)                    AS AMOUNT,  -- Venta total, sin descontar impuestos ni anulaciones
             SUM(DFP.CANTIDADANULACION)             AS QUANTITYCANCELED,
             SUM(DFP.VALORANULACION)                AS AMOUNTCANCELED,
             SUM(DFP.VALORVENTABRUTA)               AS GROSSSALES,
             SUM(ISNULL(DFPTAXIVA.VALORIMPUESTOx1, 0)) AS TAXIVA,
             SUM(DFP.CANTIDADPREMIOPAGO)            AS AWARDPAIDQUANTITY,
             SUM(DFP.VALORPREMIOPAGO)               AS AWARDPAIDAMOUNT,
             SUM(DFP.RETENCIONPREMIOSPAGADOS)       AS AWARDPAIDTAXDISCOUNTING
      FROM WSXML_SFG.MAESTROFACTURACIONPDV MFP
      INNER JOIN PUNTODEVENTA PDV ON (PDV.ID_PUNTODEVENTA = MFP.CODPUNTODEVENTA)
      INNER JOIN DETALLEFACTURACIONPDV DFP ON (DFP.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV)
      INNER JOIN PRODUCTO PRD ON (DFP.CODPRODUCTO = PRD.ID_PRODUCTO)
      INNER JOIN TIPOPRODUCTO TPR ON (PRD.CODTIPOPRODUCTO = TPR.ID_TIPOPRODUCTO)
      LEFT OUTER JOIN (SELECT CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV, SUM(CASE WHEN CODIMPUESTO = @xPRODTX THEN VALORIMPUESTO ELSE 0 END) AS VALORIMPUESTOx1
                       FROM WSXML_SFG.DETALLEFACTURACIONIMPUESTO
                       GROUP BY CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV) DFPTAXIVA ON (DFPTAXIVA.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV AND DFPTAXIVA.CODDETALLEFACTURACIONPDV = DFP.ID_DETALLEFACTURACIONPDV)
      WHERE MFP.CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV
        AND PDV.CODAGRUPACIONPUNTODEVENTA = @p_CODAGRUPACIONPUNTODEVENTA
      GROUP BY TPR.CODLINEADENEGOCIO, TPR.ID_TIPOPRODUCTO, PRD.ID_PRODUCTO, PRD.NOMPRODUCTO
      ORDER BY TPR.CODLINEADENEGOCIO, SUM(DFP.CANTIDADVENTA) DESC;
  END;
end
  GO


   IF OBJECT_ID('WSXML_SFG.SFGXMLDEPOSITSLIP_GetDepositSlipConfiguration', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGXMLDEPOSITSLIP_GetDepositSlipConfiguration;
GO

CREATE     PROCEDURE WSXML_SFG.SFGXMLDEPOSITSLIP_GetDepositSlipConfiguration(@p_INCLUIRTODOS NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
      SELECT NOMXMLDEPOSITSLIPCONFIG,
             FIELDINCLUDED,
             CODXMLDSCONFIGPARENT
      FROM WSXML_SFG.XMLDEPOSITSLIPCONFIG
      WHERE FIELDINCLUDED	= CASE WHEN @p_INCLUIRTODOS = -1 THEN FIELDINCLUDED ELSE @p_INCLUIRTODOS END
      ORDER BY ORDEN;
	IF @@ROWCOUNT = 0
		RAISERROR('-20054 No existen configuraciones', 16, 1);
  END;
GO


   IF OBJECT_ID('WSXML_SFG.SFGXMLDEPOSITSLIP_SetDepositSlipGenerated', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGXMLDEPOSITSLIP_SetDepositSlipGenerated;
GO

CREATE     PROCEDURE WSXML_SFG.SFGXMLDEPOSITSLIP_SetDepositSlipGenerated(@p_CODMAESTROFACTURACIONTIRILLA NUMERIC(22,0), @p_RUTAGENERADO NVARCHAR(2000)) AS
  BEGIN
  SET NOCOUNT ON;
    UPDATE WSXML_SFG.MAESTROFACTURACIONTIRILLA SET GENERADO = 1,
                                         RUTAGENERADO = @p_RUTAGENERADO
    WHERE ID_MAESTROFACTURACIONTIRILLA = @p_CODMAESTROFACTURACIONTIRILLA;
  END;
go

    IF OBJECT_ID('WSXML_SFG.SFGXMLDEPOSITSLIP_SetDepositSlipTransferred', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGXMLDEPOSITSLIP_SetDepositSlipTransferred;
GO

CREATE     PROCEDURE WSXML_SFG.SFGXMLDEPOSITSLIP_SetDepositSlipTransferred(@p_CODMAESTROFACTURACIONTIRILLA NUMERIC(22,0), @p_RUTATRANSFERIDO NVARCHAR(2000)) AS
  BEGIN
  SET NOCOUNT ON;
    UPDATE WSXML_SFG.MAESTROFACTURACIONTIRILLA SET TRANSFERIDO = 1,
                                         RUTATRANSFERIDO = @p_RUTATRANSFERIDO
    WHERE ID_MAESTROFACTURACIONTIRILLA = @p_CODMAESTROFACTURACIONTIRILLA;
  END;
  GO
  
  
  
IF EXISTS (
    SELECT * FROM sys.objects WHERE OBJECT_NAME(object_id) = N'SFGXMLDEPOSITSLIP_PuntosDeVentaPaginadosLista'
    AND type IN (N'FN', N'IF', N'TF')
)
    DROP FUNCTION WSXML_SFG.SFGXMLDEPOSITSLIP_PuntosDeVentaPaginadosLista
GO


CREATE     FUNCTION WSXML_SFG.SFGXMLDEPOSITSLIP_PuntosDeVentaPaginadosLista(@p_CODCICLOFACTURACIONPDV NUMERIC(22,0), @p_PAGENUMBER NUMERIC(22,0), @p_ROWSXPAGE NUMERIC(22,0)) 
RETURNS @listagents TABLE (IDVALUE NUMERIC(38,0)) AS
 BEGIN
    --DECLARE @listagents WSXML_SFG.MEDIUMNUMBERARRAY;
   
	INSERT INTO @listagents
    SELECT CODPUNTODEVENTA 
    FROM (SELECT CODPUNTODEVENTA, ROW_NUMBER() OVER(ORDER BY CAST(CODIGOGTECHPUNTODEVENTA AS NUMERIC(38,0))) AS row_counter
          FROM (SELECT CODPUNTODEVENTA FROM WSXML_SFG.MAESTROFACTURACIONTIRILLA
                INNER JOIN WSXLM_SFG.PUNTODEVENTA ON (CODPUNTODEVENTA = ID_PUNTODEVENTA)
                WHERE CODCICLOFACTURACIONPDV = @p_CODCICLOFACTURACIONPDV
                
			)T
		) T
    WHERE row_counter > (@p_PAGENUMBER * @p_ROWSXPAGE)
      AND row_counter <= ((@p_PAGENUMBER + 1) * @p_ROWSXPAGE);
    RETURN
  END;
GO


 /* Obtains a list of paginated agents */

IF EXISTS (
    SELECT * FROM sys.objects WHERE OBJECT_NAME(object_id) = N'SFGXMLDEPOSITSLIP_PuntosDeVentaPaginados'
    AND type IN (N'FN', N'IF', N'TF')
)
    DROP FUNCTION WSXML_SFG.SFGXMLDEPOSITSLIP_PuntosDeVentaPaginados
GO

CREATE     FUNCTION WSXML_SFG.SFGXMLDEPOSITSLIP_PuntosDeVentaPaginados(@p_CODCICLOFACTURACIONPDV NUMERIC(22,0), @p_PAGENUMBER NUMERIC(22,0), @p_ROWSXPAGE NUMERIC(22,0)) 
RETURNS @SPLIT_TBL TABLE ([SWC_Index] int,[SWC_Value] varchar(max))
as begin
   
    DECLARE tAGENT CURSOR FOR SELECT CODPUNTODEVENTA AGENT, row_counter
                   FROM (SELECT CODPUNTODEVENTA, ROW_NUMBER() OVER(ORDER BY cast(CODIGOGTECHPUNTODEVENTA AS NUMERIC) asc) AS row_counter
                         FROM (SELECT CODPUNTODEVENTA, CODIGOGTECHPUNTODEVENTA FROM WSXML_SFG.MAESTROFACTURACIONTIRILLA
                               INNER JOIN PUNTODEVENTA ON (CODPUNTODEVENTA = ID_PUNTODEVENTA)
                               WHERE CODCICLOFACTURACIONPDV = @p_CODCICLOFACTURACIONPDV
							  ) s
					) s
                   WHERE row_counter > (@p_PAGENUMBER * @p_ROWSXPAGE)
                     AND row_counter <= ((@p_PAGENUMBER + 1) * @p_ROWSXPAGE); OPEN tAGENT;

DECLARE @tAGENT__AGENT numeric(38,0), @tAGENT__row_counter INT
 FETCH tAGENT INTO @tAGENT__AGENT, @tAGENT__row_counter;
 WHILE @@FETCH_STATUS=0
 BEGIN
      INSERT INTO @SPLIT_TBL VALUES (@tAGENT__row_counter, @tAGENT__AGENT)
   FETCH tAGENT INTO @tAGENT__AGENT, @tAGENT__row_counter;
    END;
    CLOSE tAGENT;
    DEALLOCATE tAGENT;
    RETURN;
  END;
go



    IF OBJECT_ID('WSXML_SFG.SFGXMLDEPOSITSLIP_GetMissingDepositSlips', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGXMLDEPOSITSLIP_GetMissingDepositSlips;
GO


  CREATE PROCEDURE WSXML_SFG.SFGXMLDEPOSITSLIP_GetMissingDepositSlips(@p_SECUENCIACICLO NUMERIC(22,0), @p_cur varchar(8000)  OUTPUT) AS
 BEGIN
    DECLARE @cMAXSECUENCIAFACTURACION NUMERIC(22,0);
    DECLARE @cCODCICLOFACTURACIONPDV  NUMERIC(22,0);
    DECLARE @msg VARCHAR(2000)
  SET NOCOUNT ON;
    -- Obtencion de ciclo
    BEGIN
		IF @p_SECUENCIACICLO = -1 BEGIN
			SELECT @cMAXSECUENCIAFACTURACION = MAX(SECUENCIA) FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ACTIVE = 1;
		END
		ELSE BEGIN
			SET @cMAXSECUENCIAFACTURACION = @p_SECUENCIACICLO;
		END 
		
		SELECT @cCODCICLOFACTURACIONPDV = ID_CICLOFACTURACIONPDV FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE SECUENCIA = @cMAXSECUENCIAFACTURACION AND ACTIVE = 1;
	  
		DECLARE @rowcount NUMERIC(22,0) = @@ROWCOUNT;
		IF @rowcount = 0 BEGIN
			SET @msg = '-20054 No existe el ciclo de facturacion No: ' + ISNULL(CONVERT(VARCHAR,@p_SECUENCIACICLO), '')
			RAISERROR(@msg, 16, 1);
			RETURN 0;
		END
		IF @rowcount  > 1 BEGIN
			RAISERROR('-20054 Hay mas de un ciclo de facturacion con el mismo codigo de secuencia. Este es un problema de consistencia de datos.', 16, 1);
			RETURN 0;
		END
    END;
    -- Obtencion de las tirillas generadas no transferidas hasta ahora
      SELECT ID_MAESTROFACTURACIONTIRILLA, GENERADO, RUTAGENERADO FROM WSXML_SFG.MAESTROFACTURACIONTIRILLA
      INNER JOIN WSXML_SFG.PUNTODEVENTA ON (CODPUNTODEVENTA = ID_PUNTODEVENTA)
      WHERE CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV
        AND (TRANSFERIDO = 0 OR RUTATRANSFERIDO IS NULL)
      ORDER BY CAST(CODIGOGTECHPUNTODEVENTA AS NUMERIC(38,0));
  END;
  GO
  
  
  
   /* Obtains the records for every deposit slip to be generated */
  IF OBJECT_ID('WSXML_SFG.SFGXMLDEPOSITSLIP_GetDepositSlipHeaders', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGXMLDEPOSITSLIP_GetDepositSlipHeaders;
GO

CREATE     PROCEDURE WSXML_SFG.SFGXMLDEPOSITSLIP_GetDepositSlipHeaders(@p_SECUENCIACICLO NUMERIC(22,0), @p_PAGNUM NUMERIC(22,0), @p_cur varchar(8000)  OUTPUT) AS
 BEGIN
    DECLARE @cMAXSECUENCIAFACTURACION NUMERIC(22,0);
    DECLARE @cCODCICLOFACTURACIONPDV NUMERIC(22,0);
    DECLARE @xBILLPAY NUMERIC(22,0) = 3; -- Linea de negocio Bill Payment
    DECLARE @xPREPAID NUMERIC(22,0) = 2; -- Linea de negocio Pines y Recargas
    DECLARE @xLOTTERY NUMERIC(22,0) = 1; -- Linea de negocio Juegos

    DECLARE @xBPAYMNT NUMERIC(22,0) = 8; -- Tipo de producto Bill Payment
    DECLARE @xDEPONLN NUMERIC(22,0) = 9; -- Tipo de producto Deposit Online
    DECLARE @xEVOUCHR NUMERIC(22,0) = 6; -- Tipo de producto EVoucher
    DECLARE @xERECHRG NUMERIC(22,0) = 7; -- Tipo de producto ERecharge

    DECLARE @xTAXRENTA NUMERIC(22,0) = 1; -- Retencion Tributaria RENTA
    DECLARE @xTAXICA   NUMERIC(22,0) = 2; -- Retencion Tributaria ICA
    DECLARE @xTAXIVA   NUMERIC(22,0) = 3; -- Retencion Tributaria IVA

    DECLARE @xPRODTX   NUMERIC(22,0) = 1; -- Impuesto IVA

    DECLARE @vBarcodeBillPayment VARCHAR(4000)  /* Use -meta option PARAMETRO.VALOR%TYPE */;
    DECLARE @vBarcodePrePaid VARCHAR(4000)      /* Use -meta option PARAMETRO.VALOR%TYPE */;
    DECLARE @vBarcodeGamesGTECH VARCHAR(4000)   /* Use -meta option PARAMETRO.VALOR%TYPE */;
    DECLARE @vBarcodeGamesFiducia VARCHAR(4000) /* Use -meta option PARAMETRO.VALOR%TYPE */;
    DECLARE @vLastBillingDate     DATETIME;

    DECLARE @cFILASXPAGINA NUMERIC(22,0) = 500;
    --cAGENTS_TBL SPLIT_TBL;
    DECLARE @cAGENTS_TBL WSXML_SFG.MEDIUMNUMBERARRAY;
    DECLARE @msg VARCHAR(2000);
   
  SET NOCOUNT ON;
    BEGIN
      IF @p_SECUENCIACICLO = -1 BEGIN
        SELECT @cMAXSECUENCIAFACTURACION = MAX(SECUENCIA) FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ACTIVE = 1;
      END
      ELSE BEGIN
        SET @cMAXSECUENCIAFACTURACION = @p_SECUENCIACICLO;
      END 

		SELECT @cCODCICLOFACTURACIONPDV = ID_CICLOFACTURACIONPDV FROM WSXML_SFG.CICLOFACTURACIONPDV
		WHERE SECUENCIA = @cMAXSECUENCIAFACTURACION AND ACTIVE = 1;
		
		DECLARE @rowcount NUMERIC(22,0) = @@ROWCOUNT;
		IF @rowcount = 0 BEGIN
			SET @msg = '-20054 No existe el ciclo de facturacion No. ' + ISNULL(CONVERT(VARCHAR,@p_SECUENCIACICLO), '')
			RAISERROR(@msg, 16, 1);
			RETURN 0
		END
		IF @rowcount > 1 BEGIN
			RAISERROR('-20054 Hay mas de un ciclo de facturacion con el mismo codigo de secuencia. Este es un problema de consistencia de datos.', 16, 1);
			RETURN 0;
		END

    END;

    /* Ciclo de facturacion previo (SECUENCIA MENOR ACTIVA) */
    BEGIN
		BEGIN TRY
			  SELECT @vLastBillingDate = ISNULL(CFPREV.FECHAEJECUCION, CONVERT(DATETIME, CONVERT(DATE,'01/01/2000')))
			  FROM WSXML_SFG.CICLOFACTURACIONPDV CFPREV
			  WHERE CFPREV.SECUENCIA = (@cMAXSECUENCIAFACTURACION - 1) AND CFPREV.ACTIVE = 1;
		END TRY
		BEGIN CATCH
			SELECT @vLastBillingDate = CONVERT(DATETIME, CONVERT(DATE,'01/01/2000'));	
		END CATCH
    END;
	BEGIN TRY
		EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'BarcodeBillPayment', @vBarcodeBillPayment OUT
    EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'BarcodePrePaid', @vBarcodePrePaid OUT
    EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'BarcodeGamesGTECH', @vBarcodeGamesGTECH OUT
    EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'BarcodeGamesFiducia', @vBarcodeGamesFiducia OUT

    -- Filas de pagina
    --SELECT PuntosDeVentaPaginados(cCODCICLOFACTURACIONPDV, p_PAGNUM, cFILASXPAGINA) INTO cAGENTS_TBL FROM DUAL;
    --SELECT @cAGENTS_TBL = ;

    -- Actualizar SLIPXML cada obtencion
    UPDATE WSXML_SFG.PUNTODEVENTA SET SLIPXML = SLIPXML + 1
    WHERE ID_PUNTODEVENTA IN (SELECT IDVALUE AS AGENT FROM WSXML_SFG.SFGXMLDEPOSITSLIP_PuntosDeVentaPaginadosLista(@cCODCICLOFACTURACIONPDV, @p_PAGNUM, @cFILASXPAGINA));

      SELECT @vLastBillingDate AS LASTBILLINGDATE,
             CFP.FECHAEJECUCION AS BILLINGDATE,
             AGR.CODIGOAGRUPACIONGTECH AS CHAINNUMBER,
             PDV.CODIGOGTECHPUNTODEVENTA AS POSNUMBER,
             PDV.NUMEROTERMINAL AS TERMINALNUMBER,
             MFT.ID_MAESTROFACTURACIONTIRILLA,

             -- Cualquiera de las referencias por linea de negocio.
             COALESCE(BILLPAYBILLING.REFERENCIAGTECH, PREPAIDBILLING.REFERENCIAGTECH, LOTTERYBILLING.REFERENCIAGTECH) AS REFERENCENUMBER,

             /* Bill Payment */
             CASE WHEN BILLPAYBILLING.ID_MAESTROFACTURACIONPDV IS NULL THEN 0 ELSE 1 END AS BILLPAYBILLING,
             BILLPAYBILLING.NUMEROCUENTA AS BILLPAYBANKACCOUNTNUMBER,
             @vBarcodeBillPayment AS BILLPAYBARCODE,

             ISNULL(BILLPAYBILLING.VALORVENTAx8, 0)               AS BILLPAYPRODTOTAMOU,
             ISNULL(BILLPAYBILLING.VALORVENTAx9, 0)               AS BILLPAYDEPONLPRODTOTAMOU,
             /* Bill Payment Comission Nodes */
             -- Comission
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xBILLPAY THEN ISNULL(BILLPAYBILLING.VALORCOMISIONx8, 0) ELSE 0 END AS BPNCMMIBILLPAYMN,
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xBILLPAY THEN ISNULL(PREPAIDBILLING.VALORCOMISIONx6, 0) ELSE 0 END AS BPNCMMIEVOUCHERS,
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xBILLPAY THEN ISNULL(PREPAIDBILLING.VALORCOMISIONx7, 0) ELSE 0 END AS BPNCMMIERECHARGE,
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xBILLPAY THEN ISNULL(BILLPAYBILLING.VALORCOMISIONx9, 0) ELSE 0 END AS BPNCMMIDEPONLINE,
             -- Sumatoria de comision calculada
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xBILLPAY
             THEN ISNULL(BILLPAYBILLING.VALORCOMISIONx8, 0) + ISNULL(BILLPAYBILLING.VALORCOMISIONx9, 0)
             ELSE 0 END
             +
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xBILLPAY
             THEN ISNULL(PREPAIDBILLING.VALORCOMISIONx6, 0) + ISNULL(PREPAIDBILLING.VALORCOMISIONx7, 0)
             ELSE 0 END
                                                               AS BPNCMMITOTCMMIWITHOUTVAT,
             -- Sumatoria del IVA de la comision
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xBILLPAY
             THEN ISNULL(BILLPAYBILLING.VATCOMISIONx8, 0) + ISNULL(BILLPAYBILLING.VATCOMISIONx9, 0)
             ELSE 0 END
             +
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xBILLPAY
             THEN ISNULL(PREPAIDBILLING.VATCOMISIONx6, 0) + ISNULL(PREPAIDBILLING.VATCOMISIONx7, 0)
             ELSE 0 END
                                                               AS BPNCMMIVATOFTHECMMI,
             -- Sumatoria de comision + IVA Comision
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xBILLPAY
             THEN ISNULL(BILLPAYBILLING.VALORCOMISIONBRUTAx8, 0) + ISNULL(BILLPAYBILLING.VALORCOMISIONBRUTAx9, 0)
             ELSE 0 END
             +
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xBILLPAY
             THEN ISNULL(PREPAIDBILLING.VALORCOMISIONBRUTAx6, 0) + ISNULL(PREPAIDBILLING.VALORCOMISIONBRUTAx7, 0)
             ELSE 0 END
                                                               AS BPNCMMITOTCMMIWITHVAT,
             -- Sumatoria de Comision Neta (Sin Impuestos)
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xBILLPAY
             THEN ISNULL(BILLPAYBILLING.VALORCOMISIONNETAx8, 0) + ISNULL(BILLPAYBILLING.VALORCOMISIONNETAx9, 0)
             ELSE 0 END
             +
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xBILLPAY
             THEN ISNULL(PREPAIDBILLING.VALORCOMISIONNETAx6, 0) + ISNULL(PREPAIDBILLING.VALORCOMISIONNETAx7, 0)
             ELSE 0 END
                                                               AS BPNCMMITOTCMMIWITHVATWITHOUT,
             -- ReteRenta
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xBILLPAY
             THEN ISNULL(BILLPAYBILLING.RETVALORx1, 0) ELSE 0 END
             +
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xBILLPAY
             THEN ISNULL(PREPAIDBILLING.RETVALORx1, 0) ELSE 0 END
                                                               AS BPNTAXRENTA,
             -- ReteICA
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xBILLPAY
             THEN ISNULL(BILLPAYBILLING.RETVALORx2, 0) ELSE 0 END
             +
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xBILLPAY
             THEN ISNULL(PREPAIDBILLING.RETVALORx2, 0) ELSE 0 END
                                                               AS BPNTAXICA,
             -- ReteIVA
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xBILLPAY
             THEN ISNULL(BILLPAYBILLING.RETVALORx3, 0) ELSE 0 END
             +
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xBILLPAY
             THEN ISNULL(PREPAIDBILLING.RETVALORx3, 0) ELSE 0 END
                                                               AS BPNTAXIVA,
             /* END Bill Payment Comission Nodes */
             ISNULL(BILLPAYBILLING.NUEVOSALDOGTECH -
                 BILLPAYBILLING.SALDOANTERIORGTECH, 0)         AS BILLPAYTOTQUANTITYOWED,
             ISNULL(BILLPAYBILLING.NUEVOSALDOGTECH, 0)            AS BILLPAYBILLDUTYACCOUNTBALANCE,

             /* PrePaid */
             CASE WHEN PREPAIDBILLING.ID_MAESTROFACTURACIONPDV IS NULL THEN 0 ELSE 1 END AS PREPAIDBILLING,
             PREPAIDBILLING.NUMEROCUENTA AS PRPBANKACCOUNTNUMBER,
             @vBarcodePrePaid AS PRPBARCODE,

             ISNULL(PREPAIDBILLING.VALORVENTAx6, 0) AS PRPEVOUCHERPRODTOTAMOU,
             ISNULL(PREPAIDBILLING.VALORVENTAx7, 0) AS PRPERECHARGEPRODTOTAMOU,

             /* PrePaid Comission Nodes */
             -- Comission
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xPREPAID THEN ISNULL(BILLPAYBILLING.VALORCOMISIONx8, 0) ELSE 0 END AS PRPCMMIBILLPAYMN,
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xPREPAID THEN ISNULL(PREPAIDBILLING.VALORCOMISIONx6, 0) ELSE 0 END AS PRPCMMIEVOUCHERS,
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xPREPAID THEN ISNULL(PREPAIDBILLING.VALORCOMISIONx7, 0) ELSE 0 END AS PRPCMMIERECHARGE,
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xPREPAID THEN ISNULL(BILLPAYBILLING.VALORCOMISIONx9, 0) ELSE 0 END AS PRPCMMIDEPONLINE,
             -- Sumatoria de comision calculada
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xPREPAID
             THEN ISNULL(BILLPAYBILLING.VALORCOMISIONx8, 0) + ISNULL(BILLPAYBILLING.VALORCOMISIONx9, 0)
             ELSE 0 END
             +
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xPREPAID
             THEN ISNULL(PREPAIDBILLING.VALORCOMISIONx6, 0) + ISNULL(PREPAIDBILLING.VALORCOMISIONx7, 0)
             ELSE 0 END
                                                               AS PRPCMMITOTCMMIWITHOUTVAT,
             -- Sumatoria del IVA de la comision
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xPREPAID
             THEN ISNULL(BILLPAYBILLING.VATCOMISIONx8, 0) + ISNULL(BILLPAYBILLING.VATCOMISIONx9, 0)
             ELSE 0 END
             +
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xPREPAID
             THEN ISNULL(PREPAIDBILLING.VATCOMISIONx6, 0) + ISNULL(PREPAIDBILLING.VATCOMISIONx7, 0)
             ELSE 0 END
                                                               AS PRPCMMIVATOFTHECMMI,
             -- Sumatoria de comision + IVA Comision
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xPREPAID
             THEN ISNULL(BILLPAYBILLING.VALORCOMISIONBRUTAx8, 0) + ISNULL(BILLPAYBILLING.VALORCOMISIONBRUTAx9, 0)
             ELSE 0 END
             +
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xPREPAID
             THEN ISNULL(PREPAIDBILLING.VALORCOMISIONBRUTAx6, 0) + ISNULL(PREPAIDBILLING.VALORCOMISIONBRUTAx7, 0)
             ELSE 0 END
                                                               AS PRPCMMITOTCMMIWITHVAT,
             -- Sumatoria de Comision Neta (Sin Impuestos)
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xPREPAID
             THEN ISNULL(BILLPAYBILLING.VALORCOMISIONNETAx8, 0) + ISNULL(BILLPAYBILLING.VALORCOMISIONNETAx9, 0)
             ELSE 0 END
             +
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xPREPAID
             THEN ISNULL(PREPAIDBILLING.VALORCOMISIONNETAx6, 0) + ISNULL(PREPAIDBILLING.VALORCOMISIONNETAx7, 0)
             ELSE 0 END
                                                               AS PRPCMMITOTCMMIWITHVATWITHOUT,
             -- ReteRenta
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xPREPAID
             THEN ISNULL(BILLPAYBILLING.RETVALORx1, 0) ELSE 0 END
             +
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xPREPAID
             THEN ISNULL(PREPAIDBILLING.RETVALORx1, 0) ELSE 0 END
                                                               AS PRPTAXRENTA,
             -- ReteICA
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xPREPAID
             THEN ISNULL(BILLPAYBILLING.RETVALORx2, 0) ELSE 0 END
             +
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xPREPAID
             THEN ISNULL(PREPAIDBILLING.RETVALORx2, 0) ELSE 0 END
                                                               AS PRPTAXICA,
             -- ReteIVA
             CASE WHEN BILLPAYBILLING.DESCONTADA = @xPREPAID
             THEN ISNULL(BILLPAYBILLING.RETVALORx3, 0) ELSE 0 END
             +
             CASE WHEN PREPAIDBILLING.DESCONTADA = @xPREPAID
             THEN ISNULL(PREPAIDBILLING.RETVALORx3, 0) ELSE 0 END
                                                               AS PRPTAXIVA,
             /* END PrePaid Comission Nodes */
             ISNULL(PREPAIDBILLING.NUEVOSALDOGTECH -
                 PREPAIDBILLING.SALDOANTERIORGTECH, 0)         AS PRPTOTQUANTITYOWED,
             ISNULL(PREPAIDBILLING.NUEVOSALDOGTECH, 0)            AS PRPCMMONDUTYACCOUNTBALANCE,

             /* Lottery */
             CASE WHEN LOTTERYBILLING.ID_MAESTROFACTURACIONPDV IS NULL THEN 0 ELSE 1 END AS LOTTERYBILLING,
             ISNULL(LOTTERYBILLING.SALDOANTERIORFIDUCIA, 0)         AS LOTTPENDINGBALANFIDUCIA,
             ISNULL(LOTTERYBILLING.SALDOANTERIORGTECH, 0)           AS LOTTPENDINGBALANGTECH,
             ISNULL(LOTTERYBILLING.SALDOANTERIORFIDUCIA +
                 LOTTERYBILLING.SALDOANTERIORGTECH, 0)           AS LOTTPREVIOUSBALANTOTAMOUNT,
             -- No existen ajustes en facturacion
             0                                                   AS LOTTADJUSTMENTS,
             ISNULL(LOTTERYBILLING.IMPVALORx1, 0)                   AS LOTTCONSOLIDATEDTAXIVA,
             ISNULL(LOTTERYBILLING.FACTURACIONGTECH, 0) +
             ISNULL(LOTTERYBILLING.FACTURACIONFIDUCIA, 0)           AS LOTTTOTCURRENTWEEK,
             ISNULL(LOTTERYBILLING.NUEVOSALDOFIDUCIA +
                 LOTTERYBILLING.NUEVOSALDOGTECH, 0)              AS LOTTTOTQUANTITYOWED,
             ISNULL(LOTTERYBILLING.NUEVOSALDOFIDUCIA, 0)            AS LOTTOWEDFIDUCIARY,
             ISNULL(LOTTERYBILLING.NUEVOSALDOGTECH, 0)              AS LOTTOWEDGTECH,
             ISNULL(LOTTERYBILLING.VALORCOMISION, 0)                AS LOTTGROSSCMMI,
             ISNULL(LOTTERYBILLING.UVTVALOR, 0)                     AS LOTTINCOMETAX,
             ISNULL(LOTTERYBILLING.RETVALORx2, 0)                   AS LOTTTAXINDUSTRYANDCMMERCE,
             0                                                   AS LOTTINSURANCEOWED,
             ISNULL(LOTTERYBILLING.VALORCOMISIONNETA, 0)            AS LOTTCMMIFINAL,

             LOTTERYBILLING.REFERENCIAGTECH                      AS LOTTGTEREFERENCENUMBERGTECH,
             @vBarcodeGamesGTECH                                  AS LOTTGTEBARCODEGTECH,
             LOTTERYBILLING.NUMEROCUENTAGTECH                    AS LOTTGTEBANKACCOUNTNUMBERGTECH,
             ISNULL(LOTTERYBILLING.NUEVOSALDOGTECH, 0)              AS LOTTGTEPREVIOUSBALANCEGTECH,   -- Increible, pero cierto: El valor a pagar se llama PreviousBalanceGTECH
             LOTTERYBILLING.REFERENCIAFIDUCIA                    AS LOTTFIDREFERENCENUMBERFID,
             @vBarcodeGamesFiducia                                AS LOTTFIDBARCODEFIDUCIA,
             LOTTERYBILLING.NUMEROCUENTAFIDUCIA                  AS LOTTFIDBANKACCOUNTNUMBERFID,
             ISNULL(LOTTERYBILLING.NUEVOSALDOFIDUCIA, 0)            AS LOTTFIDPREVIOUSBALANCEFID,     -- Increible, pero cierto: El valor a pagar se llama PreviousBalanceFiducia

             /* Informacion de control */
             PDV.ID_PUNTODEVENTA,
             AGR.ID_AGRUPACIONPUNTODEVENTA,
             COALESCE(BILLPAYBILLING.CODTIPOPUNTODEVENTA,
                      PREPAIDBILLING.CODTIPOPUNTODEVENTA,
                      LOTTERYBILLING.CODTIPOPUNTODEVENTA)   AS CODTIPOPUNTODEVENTA,
             COALESCE(BILLPAYBILLING.CODPUNTODEVENTACABEZA,
                      PREPAIDBILLING.CODPUNTODEVENTACABEZA,
                      LOTTERYBILLING.CODPUNTODEVENTACABEZA) AS CODPUNTODEVENTACABEZA,
             ISNULL(PDV.SLIPXML, 0)               AS SLIPXML
      FROM (SELECT CODPUNTODEVENTA AS AGENT
            FROM (SELECT CODPUNTODEVENTA, ROW_NUMBER() OVER(ORDER BY CODIGOGTECHPUNTODEVENTA) AS row_counter
                  FROM (SELECT CODPUNTODEVENTA, CODIGOGTECHPUNTODEVENTA FROM WSXML_SFG.MAESTROFACTURACIONTIRILLA
                        INNER JOIN PUNTODEVENTA ON (CODPUNTODEVENTA = ID_PUNTODEVENTA)
                        WHERE CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV
                        --ORDER BY CAST(CODIGOGTECHPUNTODEVENTA AS NUMERIC(38,0))
						) 
						s) s
            WHERE row_counter > (@p_PAGNUM * @cFILASXPAGINA)
              AND row_counter <= ((@p_PAGNUM + 1) * @cFILASXPAGINA)) PAGED
      /* Puntos de venta inicialmente paginados */
      INNER JOIN PUNTODEVENTA PDV ON (PDV.ID_PUNTODEVENTA = PAGED.AGENT)
      INNER JOIN CICLOFACTURACIONPDV CFP ON (CFP.ID_CICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV)
      INNER JOIN MAESTROFACTURACIONTIRILLA MFT ON (MFT.CODCICLOFACTURACIONPDV = CFP.ID_CICLOFACTURACIONPDV
                                               AND MFT.CODPUNTODEVENTA = PDV.ID_PUNTODEVENTA)
      /* Facturacion de BillPayment */
      LEFT OUTER JOIN (SELECT /*+ index(MAESTROFACTURACIONPDV GLOBALXML_MAESTROFACT_IX) */
                              MFPBILLPAY.ID_MAESTROFACTURACIONPDV     AS ID_MAESTROFACTURACIONPDV,
                              MFPBILLPAY.CODMAESTROFACTURACIONTIRILLA AS CODMAESTROFACTURACIONTIRILLA,
                              MFPBILLPAY.CODCICLOFACTURACIONPDV       AS CODCICLOFACTURACIONPDV,
                              MFPBILLPAY.CODPUNTODEVENTA              AS CODPUNTODEVENTA,
                              MFCBILLPAY.CODAGRUPACIONPUNTODEVENTA    AS CODAGRUPACIONPUNTODEVENTA,
                              MFCBILLPAY.CODPUNTODEVENTA              AS CODPUNTODEVENTACABEZA,
                              MFCBILLPAY.CODTIPOPUNTODEVENTA          AS CODTIPOPUNTODEVENTA,

                              ISNULL(MFPBILLPAY.SALDOANTERIORENCONTRAGTECH -
                                  MFPBILLPAY.SALDOANTERIORAFAVORGTECH, 0)  AS SALDOANTERIORGTECH,
                              ISNULL(MFPxBP.FACTURADOGTECH, 0)                AS FACTURACIONGTECH,
                              ISNULL(MFPBILLPAY.NUEVOSALDOENCONTRAGTECH -
                                  MFPBILLPAY.NUEVOSALDOAFAVORGTECH, 0)     AS NUEVOSALDOGTECH,
                              MFCBILLPAY.REFERENCIAGTECH                   AS REFERENCIAGTECH,
                              CNTBILLPAY.NUMEROCUENTA                      AS NUMEROCUENTA,

                              ISNULL(MFPxBP.VALORVENTAxBP, 0)            AS VALORVENTAx8,
                              ISNULL(MFPxBP.VALORVENTANETAxBP, 0)        AS VALORVENTANETAx8,
                              ISNULL(MFPxBP.VALORCOMISIONxBP, 0)         AS VALORCOMISIONx8,
                              ISNULL(MFPxBP.VALORCOMISIONBRUTAxBP, 0)    AS VALORCOMISIONBRUTAx8,
                              ISNULL(MFPxBP.VALORCOMISIONNETAxBP, 0)     AS VALORCOMISIONNETAx8,
                              ISNULL(MFPxBP.IVACOMISIONxBP, 0)           AS VATCOMISIONx8,
                              ISNULL(MFPxBP.VALORVENTAxDO, 0)            AS VALORVENTAx9,
                              ISNULL(MFPxBP.VALORVENTANETAxDO, 0)        AS VALORVENTANETAx9,
                              ISNULL(MFPxBP.VALORCOMISIONxDO, 0)         AS VALORCOMISIONx9,
                              ISNULL(MFPxBP.VALORCOMISIONBRUTAxDO, 0)    AS VALORCOMISIONBRUTAx9,
                              ISNULL(MFPxBP.VALORCOMISIONNETAxDO, 0)     AS VALORCOMISIONNETAx9,
                              ISNULL(MFPxBP.IVACOMISIONxDO, 0)           AS VATCOMISIONx9,
                              ISNULL(RETBILLPAY.VALORRETENCIONx1, 0)     AS RETVALORx1,
                              ISNULL(RETBILLPAY.VALORRETENCIONx2, 0)     AS RETVALORx2,
                              ISNULL(RETBILLPAY.VALORRETENCIONx3, 0)     AS RETVALORx3,
                              MFPBILLPAY.CODLINEADENEGOCIODESCUENTO   AS DESCONTADA
                       FROM WSXML_SFG.MAESTROFACTURACIONPDV MFPBILLPAY
                       INNER JOIN MAESTROFACTURACIONCOMPCONSIG MFCBILLPAY ON (MFCBILLPAY.ID_MAESTROFACTCOMPCONSIG = MFPBILLPAY.CODMAESTROFACTURACIONCOMPCONSI)
                       INNER JOIN CUENTA CNTBILLPAY ON (CNTBILLPAY.ID_CUENTA = MFCBILLPAY.CODCUENTAPAGOGTECH)
                       -- Easily tradable for a redundant table
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONPDV GLOBALTIPO_DETALLEFACTPDV_IX) */
                                               DFPBILLPAY.CODMAESTROFACTURACIONPDV,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xBPAYMNT THEN DFPBILLPAY.VALORVENTA ELSE 0 END)         AS VALORVENTAxBP,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xBPAYMNT THEN DFPBILLPAY.VALORVENTANETA ELSE 0 END)     AS VALORVENTANETAxBP,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xBPAYMNT THEN DFPBILLPAY.VALORCOMISION ELSE 0 END)      AS VALORCOMISIONxBP,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xBPAYMNT THEN DFPBILLPAY.VALORCOMISIONBRUTA ELSE 0 END) AS VALORCOMISIONBRUTAxBP,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xBPAYMNT THEN DFPBILLPAY.VALORCOMISIONNETA ELSE 0 END)  AS VALORCOMISIONNETAxBP,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xBPAYMNT THEN DFPBILLPAY.IVACOMISION ELSE 0 END)        AS IVACOMISIONxBP,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xDEPONLN THEN DFPBILLPAY.VALORVENTA ELSE 0 END)         AS VALORVENTAxDO,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xDEPONLN THEN DFPBILLPAY.VALORVENTANETA ELSE 0 END)     AS VALORVENTANETAxDO,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xDEPONLN THEN DFPBILLPAY.VALORCOMISION ELSE 0 END)      AS VALORCOMISIONxDO,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xDEPONLN THEN DFPBILLPAY.VALORCOMISIONBRUTA ELSE 0 END) AS VALORCOMISIONBRUTAxDO,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xDEPONLN THEN DFPBILLPAY.VALORCOMISIONNETA ELSE 0 END)  AS VALORCOMISIONNETAxDO,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xDEPONLN THEN DFPBILLPAY.IVACOMISION ELSE 0 END)        AS IVACOMISIONxDO,
                                               SUM(DFPBILLPAY.NUEVOSALDOENCONTRAGTECH - DFPBILLPAY.NUEVOSALDOAFAVORGTECH)                         AS FACTURADOGTECH,
                                               SUM(DFPBILLPAY.NUEVOSALDOENCONTRAFIDUCIA - DFPBILLPAY.NUEVOSALDOAFAVORFIDUCIA)                     AS FACTURADOFIDUCIA
                                        FROM WSXML_SFG.DETALLEFACTURACIONPDV DFPBILLPAY
                                        GROUP BY DFPBILLPAY.CODMAESTROFACTURACIONPDV) MFPxBP ON (MFPxBP.CODMAESTROFACTURACIONPDV = MFPBILLPAY.ID_MAESTROFACTURACIONPDV)
                       -- End Easily tradable
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONRETENCION GLOBALBILL_DETALLEFACTRET_IX) */
                                               CODMAESTROFACTURACIONPDV,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXRENTA THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx1,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXICA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx2,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXIVA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx3
                                        FROM WSXML_SFG.DETALLEFACTURACIONRETENCION
                                        GROUP BY CODMAESTROFACTURACIONPDV) RETBILLPAY ON (RETBILLPAY.CODMAESTROFACTURACIONPDV = MFPBILLPAY.ID_MAESTROFACTURACIONPDV)
                       WHERE MFPBILLPAY.CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV
                         AND MFPBILLPAY.CODLINEADENEGOCIO = @xBILLPAY
                       ) BILLPAYBILLING ON (BILLPAYBILLING.CODCICLOFACTURACIONPDV = CFP.ID_CICLOFACTURACIONPDV
                                        AND BILLPAYBILLING.CODMAESTROFACTURACIONTIRILLA = MFT.ID_MAESTROFACTURACIONTIRILLA)
      /* Facturacion de PrePaid */
      LEFT OUTER JOIN (SELECT /*+ index(MAESTROFACTURACIONPDV GLOBALXML_MAESTROFACT_IX) */
                              MFPPREPAID.ID_MAESTROFACTURACIONPDV     AS ID_MAESTROFACTURACIONPDV,
                              MFPPREPAID.CODMAESTROFACTURACIONTIRILLA AS CODMAESTROFACTURACIONTIRILLA,
                              MFPPREPAID.CODCICLOFACTURACIONPDV       AS CODCICLOFACTURACIONPDV,
                              MFPPREPAID.CODPUNTODEVENTA              AS CODPUNTODEVENTA,
                              MFCPREPAID.CODAGRUPACIONPUNTODEVENTA    AS CODAGRUPACIONPUNTODEVENTA,
                              MFCPREPAID.CODPUNTODEVENTA              AS CODPUNTODEVENTACABEZA,
                              MFCPREPAID.CODTIPOPUNTODEVENTA          AS CODTIPOPUNTODEVENTA,

                              ISNULL(MFPPREPAID.SALDOANTERIORENCONTRAGTECH -
                                  MFPPREPAID.SALDOANTERIORAFAVORGTECH, 0)     AS SALDOANTERIORGTECH,
                              ISNULL(MFPxPN.FACTURADOGTECH, 0)                   AS FACTURACIONGTECH,
                              ISNULL(MFPPREPAID.NUEVOSALDOENCONTRAGTECH -
                                  MFPPREPAID.NUEVOSALDOAFAVORGTECH, 0)        AS NUEVOSALDOGTECH,
                              MFCPREPAID.REFERENCIAGTECH                      AS REFERENCIAGTECH,
                              CNTPREPAID.NUMEROCUENTA                         AS NUMEROCUENTA,

                              ISNULL(MFPxPN.VALORVENTAxEV, 0)            AS VALORVENTAx6,
                              ISNULL(MFPxPN.VALORVENTANETAxEV, 0)        AS VALORVENTANETAx6,
                              ISNULL(MFPxPN.VALORCOMISIONxEV, 0)         AS VALORCOMISIONx6,
                              ISNULL(MFPxPN.VALORCOMISIONBRUTAxEV, 0)    AS VALORCOMISIONBRUTAx6,
                              ISNULL(MFPxPN.VALORCOMISIONNETAxEV, 0)     AS VALORCOMISIONNETAx6,
                              ISNULL(MFPxPN.IVACOMISIONxEV, 0)           AS VATCOMISIONx6,
                              ISNULL(MFPxPN.VALORVENTAxER, 0)            AS VALORVENTAx7,
                              ISNULL(MFPxPN.VALORVENTANETAxER, 0)        AS VALORVENTANETAx7,
                              ISNULL(MFPxPN.VALORCOMISIONxER, 0)         AS VALORCOMISIONx7,
                              ISNULL(MFPxPN.VALORCOMISIONBRUTAxER, 0)    AS VALORCOMISIONBRUTAx7,
                              ISNULL(MFPxPN.VALORCOMISIONNETAxER, 0)     AS VALORCOMISIONNETAx7,
                              ISNULL(MFPxPN.IVACOMISIONxER, 0)           AS VATCOMISIONx7,
                              ISNULL(RETPREPAID.VALORRETENCIONx1, 0)     AS RETVALORx1,
                              ISNULL(RETPREPAID.VALORRETENCIONx2, 0)     AS RETVALORx2,
                              ISNULL(RETPREPAID.VALORRETENCIONx3, 0)     AS RETVALORx3,
                              MFPPREPAID.CODLINEADENEGOCIODESCUENTO   AS DESCONTADA
                       FROM MAESTROFACTURACIONPDV MFPPREPAID
                       INNER JOIN MAESTROFACTURACIONCOMPCONSIG MFCPREPAID ON (MFCPREPAID.ID_MAESTROFACTCOMPCONSIG = MFPPREPAID.CODMAESTROFACTURACIONCOMPCONSI)
                       INNER JOIN CUENTA CNTPREPAID ON (CNTPREPAID.ID_CUENTA = MFCPREPAID.CODCUENTAPAGOGTECH)
                       -- Easily tradable for a redundant table
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONPDV GLOBALTIPO_DETALLEFACTPDV_IX) */
                                               DFPPREPAID.CODMAESTROFACTURACIONPDV,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xEVOUCHR THEN DFPPREPAID.VALORVENTA ELSE 0 END)         AS VALORVENTAxEV,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xEVOUCHR THEN DFPPREPAID.VALORVENTANETA ELSE 0 END)     AS VALORVENTANETAxEV,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xEVOUCHR THEN DFPPREPAID.VALORCOMISION ELSE 0 END)      AS VALORCOMISIONxEV,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xEVOUCHR THEN DFPPREPAID.VALORCOMISIONBRUTA ELSE 0 END) AS VALORCOMISIONBRUTAxEV,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xEVOUCHR THEN DFPPREPAID.VALORCOMISIONNETA ELSE 0 END)  AS VALORCOMISIONNETAxEV,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xEVOUCHR THEN DFPPREPAID.IVACOMISION ELSE 0 END)        AS IVACOMISIONxEV,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xERECHRG THEN DFPPREPAID.VALORVENTA ELSE 0 END)         AS VALORVENTAxER,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xERECHRG THEN DFPPREPAID.VALORVENTANETA ELSE 0 END)     AS VALORVENTANETAxER,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xERECHRG THEN DFPPREPAID.VALORCOMISION ELSE 0 END)      AS VALORCOMISIONxER,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xERECHRG THEN DFPPREPAID.VALORCOMISIONBRUTA ELSE 0 END) AS VALORCOMISIONBRUTAxER,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xERECHRG THEN DFPPREPAID.VALORCOMISIONNETA ELSE 0 END)  AS VALORCOMISIONNETAxER,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xERECHRG THEN DFPPREPAID.IVACOMISION ELSE 0 END)        AS IVACOMISIONxER,
                                               SUM(DFPPREPAID.NUEVOSALDOENCONTRAGTECH - DFPPREPAID.NUEVOSALDOAFAVORGTECH)                         AS FACTURADOGTECH,
                                               SUM(DFPPREPAID.NUEVOSALDOENCONTRAFIDUCIA - DFPPREPAID.NUEVOSALDOAFAVORFIDUCIA)                     AS FACTURADOFIDUCIA
                                        FROM DETALLEFACTURACIONPDV DFPPREPAID
                                        GROUP BY DFPPREPAID.CODMAESTROFACTURACIONPDV) MFPxPN ON (MFPxPN.CODMAESTROFACTURACIONPDV = MFPPREPAID.ID_MAESTROFACTURACIONPDV)
                       -- End Easily tradable
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONRETENCION GLOBALBILL_DETALLEFACTRET_IX) */
                                               CODMAESTROFACTURACIONPDV,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXRENTA THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx1,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXICA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx2,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXIVA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx3
                                        FROM DETALLEFACTURACIONRETENCION
                                        GROUP BY CODMAESTROFACTURACIONPDV) RETPREPAID ON (RETPREPAID.CODMAESTROFACTURACIONPDV = MFPPREPAID.ID_MAESTROFACTURACIONPDV)
                       WHERE MFPPREPAID.CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV
                         AND MFPPREPAID.CODLINEADENEGOCIO = @xPREPAID
                       ) PREPAIDBILLING ON (PREPAIDBILLING.CODCICLOFACTURACIONPDV = CFP.ID_CICLOFACTURACIONPDV
                                        AND PREPAIDBILLING.CODMAESTROFACTURACIONTIRILLA = MFT.ID_MAESTROFACTURACIONTIRILLA)
      /* Facturacion de Lottery */
      LEFT OUTER JOIN (SELECT /*+ index(MAESTROFACTURACIONPDV GLOBALXML_MAESTROFACT_IX) */
                              MFPLOTTERY.ID_MAESTROFACTURACIONPDV     AS ID_MAESTROFACTURACIONPDV,
                              MFPLOTTERY.CODMAESTROFACTURACIONTIRILLA AS CODMAESTROFACTURACIONTIRILLA,
                              MFPLOTTERY.CODCICLOFACTURACIONPDV       AS CODCICLOFACTURACIONPDV,
                              MFPLOTTERY.CODPUNTODEVENTA              AS CODPUNTODEVENTA,
                              MFCLOTTERY.CODAGRUPACIONPUNTODEVENTA    AS CODAGRUPACIONPUNTODEVENTA,
                              MFCLOTTERY.CODPUNTODEVENTA              AS CODPUNTODEVENTACABEZA,
                              MFCLOTTERY.CODTIPOPUNTODEVENTA          AS CODTIPOPUNTODEVENTA,

                              ISNULL(MFPLOTTERY.SALDOANTERIORENCONTRAGTECH -
                                  MFPLOTTERY.SALDOANTERIORAFAVORGTECH, 0)     AS SALDOANTERIORGTECH,
                              ISNULL(MFPLOTTERY.SALDOANTERIORENCONTRAFIDUCIA -
                                  MFPLOTTERY.SALDOANTERIORAFAVORFIDUCIA, 0)   AS SALDOANTERIORFIDUCIA,
                              ISNULL(MFPLOTTERY.NUEVOSALDOENCONTRAGTECH -
                                  MFPLOTTERY.NUEVOSALDOAFAVORGTECH, 0)        AS NUEVOSALDOGTECH,
                              ISNULL(MFPLOTTERY.NUEVOSALDOENCONTRAFIDUCIA -
                                  MFPLOTTERY.NUEVOSALDOAFAVORFIDUCIA, 0)      AS NUEVOSALDOFIDUCIA,
                              MFCLOTTERY.REFERENCIAGTECH                      AS REFERENCIAGTECH,
                              MFCLOTTERY.REFERENCIAFIDUCIA                    AS REFERENCIAFIDUCIA,
                              CNTLOTTEGT.NUMEROCUENTA                         AS NUMEROCUENTAGTECH,
                              CNTLOTTEFD.NUMEROCUENTA                         AS NUMEROCUENTAFIDUCIA,

                              ISNULL(MFPxLT.VALORVENTA, 0)               AS VALORVENTA,
                              ISNULL(MFPxLT.VALORVENTANETA, 0)           AS VALORVENTANETA,
                              ISNULL(MFPxLT.VALORCOMISION, 0)            AS VALORCOMISION,
                              ISNULL(MFPxLT.VALORCOMISIONBRUTA, 0)       AS VALORCOMISIONBRUTA,
                              ISNULL(MFPxLT.VALORCOMISIONNETA, 0)        AS VALORCOMISIONNETA,
                              ISNULL(MFPxLT.IVACOMISION, 0)              AS VATCOMISION,
                              ISNULL(MFPxLT.FACTURACIONGTECH, 0)         AS FACTURACIONGTECH,
                              ISNULL(MFPxLT.FACTURACIONFIDUCIA, 0)       AS FACTURACIONFIDUCIA,
                              ISNULL(IMPLOTTERY.VALORIMPUESTOx1, 0)      AS IMPVALORx1,
                              ISNULL(RETLOTTERY.VALORRETENCIONx1, 0)     AS RETVALORx1,
                              ISNULL(RETLOTTERY.VALORRETENCIONx2, 0)     AS RETVALORx2,
                              ISNULL(RETLOTTERY.VALORRETENCIONx3, 0)     AS RETVALORx3,
                              ISNULL(UVTLOTTERY.VALORRETENCION, 0)       AS UVTVALOR,
                              MFPLOTTERY.CODLINEADENEGOCIODESCUENTO   AS DESCONTADA
                       FROM MAESTROFACTURACIONPDV MFPLOTTERY
                       INNER JOIN MAESTROFACTURACIONCOMPCONSIG MFCLOTTERY ON (MFCLOTTERY.ID_MAESTROFACTCOMPCONSIG = MFPLOTTERY.CODMAESTROFACTURACIONCOMPCONSI)
                       INNER JOIN CUENTA CNTLOTTEGT ON (CNTLOTTEGT.ID_CUENTA = MFCLOTTERY.CODCUENTAPAGOGTECH)
                       INNER JOIN CUENTA CNTLOTTEFD ON (CNTLOTTEFD.ID_CUENTA = MFCLOTTERY.CODCUENTAPAGOFIDUCIA)
                       -- Easily tradable for a redundant table
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONPDV XMLGENERACION_DFP_IX) */
                                               DFPLOTTERY.CODMAESTROFACTURACIONPDV,
                                               SUM(DFPLOTTERY.VALORVENTA)         AS VALORVENTA,
                                               SUM(DFPLOTTERY.VALORVENTANETA)     AS VALORVENTANETA,
                                               SUM(DFPLOTTERY.VALORCOMISION)      AS VALORCOMISION,
                                               SUM(DFPLOTTERY.VALORCOMISIONBRUTA) AS VALORCOMISIONBRUTA,
                                               SUM(DFPLOTTERY.VALORCOMISIONNETA)  AS VALORCOMISIONNETA,
                                               SUM(DFPLOTTERY.IVACOMISION)        AS IVACOMISION,
                                               SUM(DFPLOTTERY.NUEVOSALDOENCONTRAGTECH - DFPLOTTERY.NUEVOSALDOAFAVORGTECH)     AS FACTURACIONGTECH,
                                               SUM(DFPLOTTERY.NUEVOSALDOENCONTRAFIDUCIA - DFPLOTTERY.NUEVOSALDOAFAVORFIDUCIA) AS FACTURACIONFIDUCIA
                                        FROM DETALLEFACTURACIONPDV DFPLOTTERY
                                        GROUP BY DFPLOTTERY.CODMAESTROFACTURACIONPDV) MFPxLT ON (MFPxLT.CODMAESTROFACTURACIONPDV = MFPLOTTERY.ID_MAESTROFACTURACIONPDV)
                       -- End Easily tradable
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONIMPUESTO GLOBALBILL_DETALLEFACTIMP_IX) */
                                               CODMAESTROFACTURACIONPDV,
                                               SUM(CASE WHEN CODIMPUESTO = @xPRODTX THEN VALORIMPUESTO ELSE 0 END) AS VALORIMPUESTOx1
                                        FROM DETALLEFACTURACIONIMPUESTO
                                        GROUP BY CODMAESTROFACTURACIONPDV) IMPLOTTERY ON (IMPLOTTERY.CODMAESTROFACTURACIONPDV = MFPLOTTERY.ID_MAESTROFACTURACIONPDV)
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONRETENCION GLOBALBILL_DETALLEFACTRET_IX) */
                                               CODMAESTROFACTURACIONPDV,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXRENTA THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx1,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXICA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx2,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXIVA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx3
                                        FROM DETALLEFACTURACIONRETENCION
                                        GROUP BY CODMAESTROFACTURACIONPDV) RETLOTTERY ON (RETLOTTERY.CODMAESTROFACTURACIONPDV = MFPLOTTERY.ID_MAESTROFACTURACIONPDV)
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONRETUVT GLOBALBILL_DETALLEFACTUVT_IX) */
                                               CODMAESTROFACTURACIONPDV,
                                               SUM(VALORRETENCION) AS VALORRETENCION
                                        FROM DETALLEFACTURACIONRETUVT
                                        GROUP BY CODMAESTROFACTURACIONPDV) UVTLOTTERY ON (UVTLOTTERY.CODMAESTROFACTURACIONPDV = MFPLOTTERY.ID_MAESTROFACTURACIONPDV)
                       WHERE MFPLOTTERY.CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV
                         AND MFPLOTTERY.CODLINEADENEGOCIO = @xLOTTERY
                       ) LOTTERYBILLING ON (LOTTERYBILLING.CODCICLOFACTURACIONPDV = CFP.ID_CICLOFACTURACIONPDV
                                        AND LOTTERYBILLING.CODMAESTROFACTURACIONTIRILLA = MFT.ID_MAESTROFACTURACIONTIRILLA)
      LEFT OUTER JOIN AGRUPACIONPUNTODEVENTA AGR ON (COALESCE(BILLPAYBILLING.CODAGRUPACIONPUNTODEVENTA,
                                                              PREPAIDBILLING.CODAGRUPACIONPUNTODEVENTA,
                                                              LOTTERYBILLING.CODAGRUPACIONPUNTODEVENTA) = AGR.ID_AGRUPACIONPUNTODEVENTA);

	END TRY
	BEGIN CATCH
		
		DECLARE 		@p_TIPOINFORMATIVO TINYINT,
			@p_TIPOERROR TINYINT,
			@p_TIPOADVERTENCIA TINYINT,
			@p_TIPOCUALQUIERA TINYINT,
			@p_PROCESONOTIFICACION TINYINT,
			@p_ESTADOABIERTA TINYINT,
			@p_ESTADOCERRADA TINYINT
		EXEC WSXML_SFG.SFGALERTA_CONSTANT
			@p_TIPOINFORMATIVO OUT,
			@p_TIPOERROR OUT,
			@p_TIPOADVERTENCIA OUT,
			@p_TIPOCUALQUIERA OUT,
			@p_PROCESONOTIFICACION  OUT,
			@p_ESTADOABIERTA OUT,
			@p_ESTADOCERRADA OUT
		SET @msg = 'No se pudo obtener la informacion de Deposit Slips: ' + isnull(ERROR_MESSAGE ( ) , '');
		EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @p_TIPOADVERTENCIA,'GENERACIONXML', @msg , 1
	END CATCH

  END
  GO

  
  
   IF OBJECT_ID('WSXML_SFG.SFGXMLDEPOSITSLIP_GetDepositSlipGeneratedFiles', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGXMLDEPOSITSLIP_GetDepositSlipGeneratedFiles;
GO

  CREATE PROCEDURE WSXML_SFG.SFGXMLDEPOSITSLIP_GetDepositSlipGeneratedFiles(@p_SECUENCIACICLO NUMERIC(22,0), @p_cur varchar(8000)  OUTPUT) AS
 BEGIN
    DECLARE @cMAXSECUENCIAFACTURACION NUMERIC(22,0);
    DECLARE @cCODCICLOFACTURACIONPDV  NUMERIC(22,0);
    DECLARE @msg  VARCHAR(2000)
  SET NOCOUNT ON;
    -- Obtencion de ciclo
    BEGIN
      IF @p_SECUENCIACICLO = -1 BEGIN
        SELECT @cMAXSECUENCIAFACTURACION = MAX(SECUENCIA) FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ACTIVE = 1;
      END
      ELSE BEGIN
        SET @cMAXSECUENCIAFACTURACION = @p_SECUENCIACICLO;
      END 
		SELECT @cCODCICLOFACTURACIONPDV = ID_CICLOFACTURACIONPDV FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE SECUENCIA = @cMAXSECUENCIAFACTURACION AND ACTIVE = 1;
		
		DECLARE @rowcount NUMERIC(22,0) = @@ROWCOUNT;
		IF @rowcount = 0 BEGIN
			SET @msg = '-20054 No existe el ciclo de facturacion No. ' + ISNULL(CONVERT(VARCHAR,@p_SECUENCIACICLO), '')
			RAISERROR(@msg, 16, 1);
			RETURN 0;
		END
		IF @rowcount > 1 BEGIN
			RAISERROR('-20054 Hay mas de un ciclo de facturacion con el mismo codigo de secuencia. Este es un problema de consistencia de datos.', 16, 1);
			RETURN 0;
		END
    END;
    -- Obtencion de las tirillas generadas
      SELECT ID_MAESTROFACTURACIONTIRILLA, GENERADO, RUTAGENERADO 
	  FROM WSXML_SFG.MAESTROFACTURACIONTIRILLA
      INNER JOIN WSXML_SFG.PUNTODEVENTA ON (CODPUNTODEVENTA = ID_PUNTODEVENTA)
      WHERE CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV
      ORDER BY CAST(CODIGOGTECHPUNTODEVENTA AS NUMERIC(38,0));
  END;
GO