USE SFGPRODU;
--  DDL for Package Body SFG_TASK_MANAGER
--------------------------------------------------------

  /* PACKAGE BODY WSXML_SFG.SFG_TASK_MANAGER */ 

IF OBJECT_ID('WSXML_SFG.SFG_TASK_MANAGER_CONSTANT', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFG_TASK_MANAGER_CONSTANT;
GO


CREATE PROCEDURE WSXML_SFG.SFG_TASK_MANAGER_CONSTANT(
	@REGISTRADASTR VARCHAR(15) OUT
  ) AS
  BEGIN
  SET NOCOUNT ON;
    SET @REGISTRADASTR = 'REGISTRADA';
  END;
GO


  IF OBJECT_ID('WSXML_SFG.SFG_TASK_MANAGER_BUSCAR_TAREAS_STANDBY', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFG_TASK_MANAGER_BUSCAR_TAREAS_STANDBY;
GO

  CREATE PROCEDURE WSXML_SFG.SFG_TASK_MANAGER_BUSCAR_TAREAS_STANDBY(@strVALORES VARCHAR(4000)) AS
  BEGIN
  SET NOCOUNT ON;
    IF @strVALORES IS NULL BEGIN
        SELECT 0 ID_DETALLETAREAEJECUTADA, 0 ID_DETALLETAREAMUSTHAVE, 0 ESTADOACTUAL, 0 ESTADOESPERADO;
    END
    ELSE BEGIN
      --SFGTMPTRACE.TraceLog(strVALORES);
        SELECT ID_DETALLETAREAEJECUTADA, ID_DETALLETAREAMUSTHAVE, ESTADOACTUAL, ESTADOESPERADO FROM (
          SELECT DTE.ID_DETALLETAREAEJECUTADA, PDT.CODDETALLETAREAEJECUTADA,
                 DTME.ID_DETALLETAREAEJECUTADA ID_DETALLETAREAMUSTHAVE,
                 PDT.CODESTADOTAREAESPERADO ESTADOESPERADO,
                 MAX(ETE.CODESTADOTAREA) ESTADOACTUAL
          FROM WSXML_SFG.DETALLETAREAEJECUTADA DTE
          INNER JOIN WSXML_SFG.PREDECESORDETALLETAREA PDT ON (DTE.CODDETALLETAREA = PDT.CODDETALLETAREAAEJECUTAR)
          INNER JOIN WSXML_SFG.DETALLETAREAEJECUTADA DTME ON (DTME.CODDETALLETAREA = PDT.CODDETALLETAREAEJECUTADA AND DTME.CODTAREAEJECUTADA = DTE.CODTAREAEJECUTADA)
          INNER JOIN WSXML_SFG.ESTADODETALLETAREAEJECUTADA ETE ON (ETE.CODDETALLETAREAEJECUTADA = DTME.ID_DETALLETAREAEJECUTADA)
          INNER JOIN WSXML_SFG.ESTADOTAREA ET ON (ETE.CODESTADOTAREA = ET.ID_ESTADOTAREA)
          WHERE DTE.ID_DETALLETAREAEJECUTADA IN (SELECT * FROM STRING_SPLIT(@strVALORES, '-'))
          GROUP BY DTE.ID_DETALLETAREAEJECUTADA, PDT.CODDETALLETAREAEJECUTADA, DTME.ID_DETALLETAREAEJECUTADA, PDT.CODESTADOTAREAESPERADO) s;
    END 
  END;
GO


 IF OBJECT_ID('WSXML_SFG.SFG_TASK_MANAGER_DetermineEnqueuableTaskExec', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFG_TASK_MANAGER_DetermineEnqueuableTaskExec;
GO

  CREATE PROCEDURE WSXML_SFG.SFG_TASK_MANAGER_DetermineEnqueuableTaskExec(@pk_ID_TAREAEJECUTADA NUMERIC(22,0), @p_ENQUEUABLE_out NUMERIC(22,0) OUT) AS
  BEGIN
  SET NOCOUNT ON;
	BEGIN TRY
    SET @p_ENQUEUABLE_out = 1; -- Default is yes
    /* Check for execution (current - running) */
      DECLARE @xCurrentExecutionState NUMERIC(22,0);
    BEGIN
      SELECT @xCurrentExecutionState = MAX(CODESTADOTAREA) FROM WSXML_SFG.ESTADOTAREAEJECUTADA WHERE CODTAREAEJECUTADA = @pk_ID_TAREAEJECUTADA AND ACTIVE = 1;
      -- Only FAILED, ABORTED AND WARNING STATES ARE ENQUEUABLE
      IF @xCurrentExecutionState NOT IN (4, 5, 7) BEGIN
        RAISERROR('-20030 La tarea no se encuentra en un estado reprocesable', 16, 1);
      END 
		IF @@ROWCOUNT = 0
			RAISERROR('-20031 No se puede determinar el estado de la tarea y por tanto no se puede afirmar si es reprocesable', 16, 1);
    END;
    /* Check for number of enqueuable subtasks */
      DECLARE @xCountEnqueuable NUMERIC(22,0);
    BEGIN
      SELECT @xCountEnqueuable = COUNT(1) FROM WSXML_SFG.DETALLETAREAEJECUTADA
      INNER JOIN (SELECT CODDETALLETAREAEJECUTADA, MAX(CODESTADOTAREA) AS CODESTADOTAREAACTUAL 
					FROM WSXML_SFG.ESTADODETALLETAREAEJECUTADA 
					WHERE ACTIVE = 1
                  GROUP BY CODDETALLETAREAEJECUTADA) t
				  ON (t.CODDETALLETAREAEJECUTADA = ID_DETALLETAREAEJECUTADA)
      WHERE CODTAREAEJECUTADA = @pk_ID_TAREAEJECUTADA;
      IF @xCountEnqueuable = 0 BEGIN
        RAISERROR('-20032 La tarea no tiene detalles reprocesables', 16, 1);
      END 
    END;
    /* Check for not already enqueued */
      DECLARE @xCountExists NUMERIC(22,0);
    BEGIN
      SELECT @xCountExists = COUNT(1) FROM WSXML_SFG.TAREAREPROCESO
      WHERE CODTAREAEJECUTADA = @pk_ID_TAREAEJECUTADA AND CODESTADOTAREA IN (1, 2);
      IF @xCountExists > 0 BEGIN
        RAISERROR('-20033 Ya se ha activado un reproceso de esta tarea', 16, 1);
      END 
    END;
	END TRY
	BEGIN CATCH
  
	  SET @p_ENQUEUABLE_out = 0;
	END CATCH
  END; 
GO



 IF OBJECT_ID('WSXML_SFG.SFG_TASK_MANAGER_DetermineReadyExecution', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFG_TASK_MANAGER_DetermineReadyExecution;
GO

  CREATE PROCEDURE WSXML_SFG.SFG_TASK_MANAGER_DetermineReadyExecution(@pk_ID_DETALLETAREAREPROCESO NUMERIC(22,0), @p_EXECUTE_out INT OUT) AS
  BEGIN
  SET NOCOUNT ON;
  SELECT NULL;
  END;
  GO


  /* Manual Agent */
 IF OBJECT_ID('WSXML_SFG.SFG_TASK_MANAGER_ExecuteCustomTask', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFG_TASK_MANAGER_ExecuteCustomTask;
GO

  CREATE PROCEDURE WSXML_SFG.SFG_TASK_MANAGER_ExecuteCustomTask(@pk_ID_TAREA NUMERIC(22,0)) AS
 BEGIN
    DECLARE @xCODTAREAEJECUTADA NUMERIC(22,0);
   declare @FECHAHOY DATETIME = GETDATE();
  SET NOCOUNT ON;
    EXEC WSXML_SFG.SFGTAREAEJECUTADA_AddRecord 'REGISTRADA', @FECHAHOY, 1, @pk_ID_TAREA, @xCODTAREAEJECUTADA out
      SELECT T.ID_TAREAEJECUTADA, T.CODTAREA FROM WSXML_SFG.TAREAEJECUTADA T
      WHERE T.ID_TAREAEJECUTADA = @xCODTAREAEJECUTADA;
  END
  GO



 IF OBJECT_ID('WSXML_SFG.SFG_TASK_MANAGER_DetermineEnqueuableTaskExecF', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFG_TASK_MANAGER_DetermineEnqueuableTaskExecF;
GO

  CREATE PROCEDURE WSXML_SFG.SFG_TASK_MANAGER_DetermineEnqueuableTaskExecF(@pk_ID_TAREAEJECUTADA NUMERIC(22,0), @returnvalue NUMERIC(22,0) OUT )  AS
 BEGIN
    EXEC WSXML_SFG.SFG_TASK_MANAGER_DetermineEnqueuableTaskExec @pk_ID_TAREAEJECUTADA, @returnvalue OUT
  
  END;
  GO

  
    IF OBJECT_ID('WSXML_SFG.SFG_TASK_MANAGER_VALIDAR_DEPENDENCIAS', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFG_TASK_MANAGER_VALIDAR_DEPENDENCIAS;
GO

  CREATE PROCEDURE WSXML_SFG.SFG_TASK_MANAGER_VALIDAR_DEPENDENCIAS(@P_ID_DETALLETAREA   NUMERIC(38,0),
                                 @P_CODTAREAEJECUTADA NUMERIC(38,0)) AS
 BEGIN
    --DECLARE @L_PREDECESORDETALLETAREA   LOCALCURSOR;
    DECLARE @L_CODDETALLETAREAEJECUTADA NUMERIC(38,0);
    DECLARE @L_CODESTADOTAREAESPERADO   NUMERIC(38,0);
    DECLARE @L_TIENEPREDECESOR          NUMERIC(38,0) = 0;
   
  SET NOCOUNT ON;

    -- Predecesores activos
    SELECT @L_TIENEPREDECESOR = COUNT(1) FROM WSXML_SFG.PREDECESORDETALLETAREA PD
    INNER JOIN WSXML_SFG.DETALLETAREA DT ON (PD.CODDETALLETAREAEJECUTADA = DT.ID_DETALLETAREA)
    WHERE PD.CODDETALLETAREAAEJECUTAR = @P_ID_DETALLETAREA
      AND PD.ACTIVE = 1
      AND DT.ACTIVE = 1;

	  DECLARE
					@p_REGISTRADA      			TINYINT,
                    @p_INICIADA         		TINYINT,
                    @p_FINALIZADAOK 			TINYINT,
                    @p_FINALIZADAFALLO  		TINYINT,
					@p_ABORTADA  				TINYINT,
					@p_NOINICIADA  				TINYINT,
					@p_FINALIZADAADVERTENCIA  	TINYINT

	   EXEC WSXML_SFG.SFGESTADOTAREAEJECUTADA_CONSTANT
					@p_REGISTRADA      			OUT,
                    @p_INICIADA         		OUT,
                    @p_FINALIZADAOK 			OUT,
                    @p_FINALIZADAFALLO  		OUT,
					@p_ABORTADA  				OUT,
					@p_NOINICIADA  				OUT,
					@p_FINALIZADAADVERTENCIA  	OUT
    /*SELECT DT.TIENEPREDECESOR INTO L_TIENEPREDECESOR FROM DETALLETAREA DT
    WHERE DT.ID_DETALLETAREA = P_ID_DETALLETAREA;*/

    IF @L_TIENEPREDECESOR > 0 BEGIN

       DECLARE L_PREDECESORDETALLETAREA CURSOR FOR  
			SELECT T.CODDETALLETAREAEJECUTADA, T.CODESTADOTAREAESPERADO
        FROM WSXML_SFG.PREDECESORDETALLETAREA T
        WHERE T.CODDETALLETAREAAEJECUTAR = @P_ID_DETALLETAREA
          AND T.ACTIVE = 1;
		OPEN L_PREDECESORDETALLETAREA

		FETCH NEXT FROM L_PREDECESORDETALLETAREA INTO @L_CODDETALLETAREAEJECUTADA, @L_CODESTADOTAREAESPERADO;
		WHILE (@@FETCH_STATUS = 0)
        BEGIN
        

        -- Verificar el estado que debe tener el predecesor antes de continuar
          SELECT COUNT(*) AS FINALIZADAS_OK
            FROM WSXML_SFG.DETALLETAREAEJECUTADA DT, WSXML_SFG.ESTADODETALLETAREAEJECUTADA EDT
           WHERE DT.CODDETALLETAREA = @L_CODDETALLETAREAEJECUTADA
             AND DT.CODTAREAEJECUTADA = @P_CODTAREAEJECUTADA
             AND (EDT.CODESTADOTAREA = @p_FINALIZADAOK
               OR EDT.CODESTADOTAREA = CASE WHEN @L_CODESTADOTAREAESPERADO = @p_FINALIZADAADVERTENCIA THEN @p_FINALIZADAADVERTENCIA ELSE @p_FINALIZADAOK END)
             AND EDT.ACTIVE = 1
             AND DT.ACTIVE = 1
             AND DT.ID_DETALLETAREAEJECUTADA = EDT.CODDETALLETAREAEJECUTADA;
			 FETCH NEXT FROM L_PREDECESORDETALLETAREA INTO @L_CODDETALLETAREAEJECUTADA, @L_CODESTADOTAREAESPERADO;
		END;

    END
    ELSE BEGIN
        SELECT 1 AS FINALIZADAS_OK;
    END 

  END; 
  GO
  
  
    IF OBJECT_ID('WSXML_SFG.SFG_TASK_MANAGER_RegisterEnqueuedTask', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFG_TASK_MANAGER_RegisterEnqueuedTask;
GO


  CREATE PROCEDURE WSXML_SFG.SFG_TASK_MANAGER_RegisterEnqueuedTask(@pk_ID_TAREAREPROCESO NUMERIC(22,0), @p_CODUSUARIOMODIFICACION NUMERIC(22,0)) AS
 BEGIN
    DECLARE @TaskExecID      NUMERIC(22,0);
    DECLARE @TaskExecDetails WSXML_SFG.NUMBERARRAY;
    DECLARE @detout          NUMERIC(22,0);
   
  SET NOCOUNT ON;
    SELECT @TaskExecID = CODTAREAEJECUTADA FROM WSXML_SFG.TAREAREPROCESO WHERE ID_TAREAREPROCESO = @pk_ID_TAREAREPROCESO;
    IF @TaskExecID IS NOT NULL BEGIN /* Mark As Reprocessing and reset for execution */
      UPDATE WSXML_SFG.TAREAEJECUTADA SET CODTAREAREPROCESO = @pk_ID_TAREAREPROCESO--, ESTADO = REGISTRADASTR 
	  WHERE ID_TAREAEJECUTADA = @TaskExecID;
      
	  INSERT INTO @TaskExecDetails 
	  SELECT CODDETALLETAREAEJECUTADA 
	  FROM (
		SELECT CODDETALLETAREAEJECUTADA 
		FROM WSXML_SFG.DETALLETAREAREPROCESO 
		WHERE CODTAREAREPROCESO = @pk_ID_TAREAREPROCESO 
		GROUP BY CODDETALLETAREAEJECUTADA
		) T;

      DECLARE idx CURSOR FOR SELECT IDVALUE FROM @TaskExecDetails
	  OPEN idx
	  declare @idx__idvalue numeric(38,0)
	  FETCH NEXT FROM idx INTO @idx__idvalue
        
        WHILE (@@FETCH_STATUS = 0)
        BEGIN
	  
        exec wsxml_sfg.SFGESTADODETALLETAREAEJECUTADA_ResetEstadoDetalle  @idx__idvalue, @p_CODUSUARIOMODIFICACION, @detout OUT
		FETCH NEXT FROM idx INTO @idx__idvalue
      END;
      CLOSE idx;
      DEALLOCATE idx;
    END 
      SELECT DET.ID_DETALLETAREAREPROCESO         AS ID_DETALLETAREAREPROCESO,
             ISNULL(DET.CODDETALLETAREAEJECUTADA, 0) AS CODDETALLETAREAEJECUTADA,
             DET.NOMDETALLETAREAREPROCESO         AS NOMDETALLETAREAREPROCESO,
             DET.CODINFOEJECUCION                 AS CODINFOEJECUCION,
             INF.ENSAMBLADO                       AS ENSAMBLADO,
             INF.CLASE                            AS CLASE,
             INF.METODO                           AS METODO,
             DET.CODESTADOTAREA                   AS CODESTADOTAREA,
             DET.PARAMETROUTILIZADO               AS PARAMETROUTILIZADO
      FROM WSXML_SFG.DETALLETAREAREPROCESO DET
      INNER JOIN INFOEJECUCION INF ON (INF.ID_INFOEJECUCION = DET.CODINFOEJECUCION)
      WHERE CODTAREAREPROCESO = @pk_ID_TAREAREPROCESO;
  END; 

  GO
  
  
    IF OBJECT_ID('WSXML_SFG.SFG_TASK_MANAGER_INICIAR_DETALLE_TAREA', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFG_TASK_MANAGER_INICIAR_DETALLE_TAREA;
GO


  CREATE PROCEDURE WSXML_SFG.SFG_TASK_MANAGER_INICIAR_DETALLE_TAREA(@p_ID_TAREA       NUMERIC(38,0),
                                  @p_ID_TAREA_EJECT NUMERIC(38,0)) AS
 BEGIN

   -- DECLARE @L_CURDETALLE               LOCALCURSOR;
    DECLARE @L_ID_DETALLETAREA          NUMERIC(22,0);
    DECLARE @L_CODINFOEJECUCION         NUMERIC(22,0);
    DECLARE @L_PARAMETRO                NVARCHAR(2000);
    DECLARE @L_ID_DETALLETAREAEJECUTADA NUMERIC(38,0);
    DECLARE @L_ID_ESTADODETALLETAREAEJE NUMERIC(38,0);
    DECLARE @L_DETALLE_TAREA_STING      VARCHAR(MAX) = '0';
    DECLARE @L_SQL_INSTRUCTION          VARCHAR(MAX) = '';
	DECLARE @FECHAHOY DATETIME = GETDATE()
   
  SET NOCOUNT ON;
      SELECT ID_DETALLETAREA, CODINFOEJECUCION, PARAMETRO FROM WSXML_SFG.DETALLETAREA
       WHERE DETALLETAREA.CODTAREA = @p_ID_TAREA AND DETALLETAREA.ACTIVE = 1 ORDER BY ORDEN;
    WHILE 1=1 BEGIN
      FETCH L_CURDETALLE INTO @L_ID_DETALLETAREA, @L_CODINFOEJECUCION, @L_PARAMETRO;
      IF @@FETCH_STATUS <> 0 BREAK ;
      -- Add execution trace
      EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_AddRecord @L_ID_DETALLETAREA,
                                         NULL,
                                         @FECHAHOY,
                                         @L_CODINFOEJECUCION,
                                         @p_ID_TAREA_EJECT,
                                         @L_PARAMETRO,
                                         1,
                                         @L_ID_DETALLETAREAEJECUTADA OUT
      -- Add initial state
      EXEC WSXML_SFG.SFGESTADODETALLETAREAEJECUTADA_ADDRECORD @L_ID_DETALLETAREAEJECUTADA,
                                               1,
                                               1,
                                               @L_ID_ESTADODETALLETAREAEJE OUT

      IF @L_DETALLE_TAREA_STING = '0' BEGIN
        SET @L_DETALLE_TAREA_STING = @L_ID_DETALLETAREAEJECUTADA;
      END
      ELSE IF @L_DETALLE_TAREA_STING IS NOT NULL BEGIN
        SET @L_DETALLE_TAREA_STING = ISNULL(@L_DETALLE_TAREA_STING, '') +
                                 ' OR TO_CHAR(DTE.ID_DETALLETAREAEJECUTADA) = ' +
                                 ISNULL(@L_ID_DETALLETAREAEJECUTADA, '');
      END 

    END;

    SET @L_SQL_INSTRUCTION = 'SELECT DTE.ID_DETALLETAREAEJECUTADA,
                               DTE.CODDETALLETAREA,
                               DTE.CODTAREAEJECUTADA,
                               EDTE.ID_ESTADODETALLETAREAEJECUTADA
                          FROM ESTADODETALLETAREAEJECUTADA EDTE,
                               DETALLETAREAEJECUTADA       DTE,
                               DETALLETAREA                DT
                         WHERE DT.ACTIVE = 1
                           AND DTE.ACTIVE = 1
                           AND DT.ID_DETALLETAREA = DTE.CODDETALLETAREA
                           AND EDTE.CODDETALLETAREAEJECUTADA = DTE.ID_DETALLETAREAEJECUTADA
                           AND (TO_CHAR(DTE.ID_DETALLETAREAEJECUTADA) =  ' +
                         ISNULL(@L_DETALLE_TAREA_STING, '') + ') ORDER BY DT.ORDEN ';

    EXECUTE (@L_SQL_INSTRUCTION);

  END
  GO

  
    IF OBJECT_ID('WSXML_SFG.SFG_TASK_MANAGER_EnqueuedTasks', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFG_TASK_MANAGER_EnqueuedTasks;
GO


 
  CREATE PROCEDURE WSXML_SFG.SFG_TASK_MANAGER_EnqueuedTasks AS
 BEGIN
    DECLARE @lstenqueued WSXML_SFG.NUMBERARRAY;
   
  SET NOCOUNT ON;
    /* Mark as considered then return: atomic transaction - threaded call */
    INSERT INTO @lstenqueued
	SELECT ID_TAREAREPROCESO FROM WSXML_SFG.TAREAREPROCESO WHERE FLAGCONSIDERADO = 0 AND FLAGEJECUTADO = 0;
    UPDATE WSXML_SFG.TAREAREPROCESO SET FLAGCONSIDERADO = 1 WHERE ID_TAREAREPROCESO IN (SELECT IDVALUE FROM @lstenqueued);
      SELECT ID_TAREAREPROCESO, NOMTAREAREPROCESO, DESCRIPCIONREPROCESO, CODESTADOTAREA, CODUSUARIOMODIFICACION FROM WSXML_SFG.TAREAREPROCESO
      WHERE ID_TAREAREPROCESO IN (SELECT IDVALUE FROM @lstenqueued);
  END
  GO

  
IF EXISTS (
    SELECT * FROM sys.objects WHERE OBJECT_NAME(object_id) = N'SFG_TASK_MANAGER_ObtainFailedExecutionMapList'
    AND type IN (N'FN', N'IF', N'TF')
)
    DROP FUNCTION WSXML_SFG.SFG_TASK_MANAGER_ObtainFailedExecutionMapList
GO

  CREATE FUNCTION WSXML_SFG.SFG_TASK_MANAGER_ObtainFailedExecutionMapList(@pk_ID_TAREAEJECUTADA NUMERIC(22,0)) RETURNS 
  @ExecutionMap TABLE (
  	ORDERFLAG numeric(38, 0),
	OEXECUTE numeric(38, 0),
	ID numeric(38, 0),
	EXECID numeric(38, 0),
	NAME varchar(200) NULL,
	INFOEXEC numeric(38, 0),
	CURRENTSTATE numeric(38, 0),
	PARAMETER varchar(2000)
  )
  
  AS
 BEGIN
    DECLARE @ExecutionMap_out WSXML_SFG.ExecutionTask;
    DECLARE @Programmed   NumberArray;
    DECLARE @Successful   NumberArray;
    DECLARE @Enqueuable   NUMERIC(22,0);
    DECLARE @ErrorMessage NVARCHAR(2000);
    DECLARE @OrderCounter NUMERIC(22,0) = 0;
    RETURN;
END
GO

  IF OBJECT_ID('WSXML_SFG.SFG_TASK_MANAGER_ObtainFailedExecutionMap', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFG_TASK_MANAGER_ObtainFailedExecutionMap;
GO



  CREATE PROCEDURE WSXML_SFG.SFG_TASK_MANAGER_ObtainFailedExecutionMap(@pk_ID_TAREAEJECUTADA NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
      SELECT ORDERFLAG, T.OEXECUTE, ID, NAME, INFOEXEC, INF.NOMEJECUCION, CURRENTSTATE, EST.NOMESTADOTAREA, EST.IMAGEN, PARAMETER
      FROM WSXML_SFG.SFG_TASK_MANAGER_ObtainFailedExecutionMapList(@pk_ID_TAREAEJECUTADA) T
      INNER JOIN WSXML_SFG.INFOEJECUCION INF ON (INF.ID_INFOEJECUCION = T.INFOEXEC)
      INNER JOIN WSXML_SFG.ESTADOTAREA   EST ON (EST.ID_ESTADOTAREA   = T.CURRENTSTATE)
      ORDER BY ORDERFLAG;
  END
GO

   IF OBJECT_ID('WSXML_SFG.SFG_TASK_MANAGER_EnqueueFailedExecution', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFG_TASK_MANAGER_EnqueueFailedExecution;
GO


 CREATE PROCEDURE WSXML_SFG.SFG_TASK_MANAGER_EnqueueFailedExecution(@pk_ID_TAREAEJECUTADA NUMERIC(22,0), @p_DESCRIPCIONREPROCESO NVARCHAR(2000), @p_CODUSUARIOMODIFICACION NUMERIC(22,0), @p_ID_TAREAREPROCESO_out NUMERIC(22,0) OUT) AS
 BEGIN
    --DECLARE @ExecutionMap WSXML_SFG.ExecutionTask;
    DECLARE @TaskID       NUMERIC(22,0);
    DECLARE @TaskName     NVARCHAR(150);
	DECLARE @msg VARCHAR(2000);
   
  SET NOCOUNT ON;
    --SET @ExecutionMap = WSXML_SFG.SFG_TASK_MANAGER_ObtainFailedExecutionMapList(@pk_ID_TAREAEJECUTADA);
    -- Obtain current definition information
    SELECT @TaskID = ID_TAREA, @TaskName = NOMTAREA 
	FROM WSXML_SFG.TAREAEJECUTADA 
		INNER JOIN WSXML_SFG.TAREA ON (CODTAREA = ID_TAREA) 
	WHERE ID_TAREAEJECUTADA = @pk_ID_TAREAEJECUTADA;

	DECLARE @p_REGISTRADA      			TINYINT,
                    @p_INICIADA         		TINYINT,
                    @p_FINALIZADAOK 			TINYINT,
                    @p_FINALIZADAFALLO  		TINYINT,
					@p_ABORTADA  				TINYINT,
					@p_NOINICIADA  				TINYINT,
					@p_FINALIZADAADVERTENCIA  	TINYINT

	EXEC WSXML_SFG.SFGESTADOTAREAEJECUTADA_CONSTANT
					@p_REGISTRADA      			OUT,
                    @p_INICIADA         		OUT,
                    @p_FINALIZADAOK 			OUT,
                    @p_FINALIZADAFALLO  		OUT,
					@p_ABORTADA  				OUT,
					@p_NOINICIADA  				OUT,
					@p_FINALIZADAADVERTENCIA  	OUT

    -- Insert primary registry (Agent will search for these
    INSERT INTO WSXML_SFG.TAREAREPROCESO ( CODTAREA, CODTAREAEJECUTADA, NOMTAREAREPROCESO, DESCRIPCIONREPROCESO, CODESTADOTAREA, CODUSUARIOMODIFICACION)
    VALUES ( @TaskID, @pk_ID_TAREAEJECUTADA, @TaskName, @p_DESCRIPCIONREPROCESO, @p_REGISTRADA, @p_CODUSUARIOMODIFICACION);
    
	SET @p_ID_TAREAREPROCESO_out = SCOPE_IDENTITY();
    
	-- Definition List contains all validations for this item: Append Accordingly
    DECLARE detail CURSOR FOR 
		SELECT ORDERFLAG, OEXECUTE, ID, EXECID, NAME, INFOEXEC, CURRENTSTATE, PARAMETER 
		FROM WSXML_SFG.SFG_TASK_MANAGER_ObtainFailedExecutionMapList(@pk_ID_TAREAEJECUTADA)
		ORDER BY ORDERFLAG; 
	
	OPEN detail;

	DECLARE @detail__ORDERFLAG NUMERIC(38,0), @detail__OEXECUTE NUMERIC(38,0), @detail__ID NUMERIC(38,0), @detail__EXECID NUMERIC(38,0), @detail__NAME VARCHAR(200), 
		@detail__INFOEXEC NUMERIC(38,0), @detail__CURRENTSTATE NUMERIC(38,0), @detail__PARAMETER VARCHAR(2000)
	
	FETCH NEXT FROM detail INTO @detail__ORDERFLAG, @detail__OEXECUTE, @detail__ID, @detail__EXECID, @detail__NAME, @detail__INFOEXEC, @detail__CURRENTSTATE, @detail__PARAMETER;
	 WHILE @@FETCH_STATUS=0
	 BEGIN
		  IF @detail__OEXECUTE = 1 BEGIN
          DECLARE @ReprocessID NUMERIC(22,0);
        BEGIN
          INSERT INTO WSXML_SFG.DETALLETAREAREPROCESO ( CODTAREAREPROCESO, CODDETALLETAREA, CODDETALLETAREAEJECUTADA, NOMDETALLETAREAREPROCESO, CODINFOEJECUCION, CODESTADOTAREA, PARAMETROUTILIZADO)
          VALUES ( @p_ID_TAREAREPROCESO_out, @detail__ID, @detail__EXECID, @detail__NAME, @detail__INFOEXEC, @detail__CURRENTSTATE, @detail__PARAMETER);
          
		  SET @ReprocessID = SCOPE_IDENTITY();
          DECLARE pred CURSOR FOR 
			SELECT ID_PREDECESORDETALLETAREA, CODDETALLETAREAEJECUTADA, CODDETALLETAREAAEJECUTAR, CODESTADOTAREAESPERADO 
			FROM WSXML_SFG.PREDECESORDETALLETAREA WHERE CODDETALLETAREAAEJECUTAR = @detail__ID; OPEN pred;

			DECLARE @pred__ID_PREDECESORDETALLETAREA NUMERIC(38,0), @pred__CODDETALLETAREAEJECUTADA NUMERIC(38,0), 
				@pred__CODDETALLETAREAAEJECUTAR NUMERIC(38,0), @pred__CODESTADOTAREAESPERADO  NUMERIC(38,0)
			
			FETCH NEXT FROM pred INTO @pred__ID_PREDECESORDETALLETAREA, @pred__CODDETALLETAREAEJECUTADA, @pred__CODDETALLETAREAAEJECUTAR, @pred__CODESTADOTAREAESPERADO;
			
			WHILE @@FETCH_STATUS=0
			BEGIN
              DECLARE @EquivalentReprocess NUMERIC(22,0);
              DECLARE @CountSuccessful     NUMERIC(22,0) = 0;
            BEGIN
              /* Depend on relative sequence */
              BEGIN
                SELECT @EquivalentReprocess = ID_DETALLETAREAREPROCESO FROM WSXML_SFG.DETALLETAREAREPROCESO WHERE CODTAREAREPROCESO = @p_ID_TAREAREPROCESO_out AND CODDETALLETAREA = @pred__CODDETALLETAREAEJECUTADA;

				IF @@ROWCOUNT > 1
					SELECT @EquivalentReprocess = MAX(ID_DETALLETAREAREPROCESO) FROM WSXML_SFG.DETALLETAREAREPROCESO WHERE CODTAREAREPROCESO = @p_ID_TAREAREPROCESO_out AND CODDETALLETAREA = @pred__CODDETALLETAREAEJECUTADA;
              END;
              INSERT INTO WSXML_SFG.PREDDETALLETAREAREPROCESO ( CODDETALLETAREAREPEJECUTADO, CODDETALLETAREAREPAEJECUTAR, CODESTADOTAREAESPERADO)
              VALUES ( @EquivalentReprocess, @ReprocessID, @pred__CODESTADOTAREAESPERADO);

			  IF @@ROWCOUNT = 0 BEGIN
				  SELECT @CountSuccessful = COUNT(1) 
				  FROM WSXML_SFG.SFG_TASK_MANAGER_ObtainFailedExecutionMapList(@pk_ID_TAREAEJECUTADA)
				  WHERE ID = @pred__CODDETALLETAREAEJECUTADA;
				  IF @CountSuccessful <= 0 BEGIN
					SET @msg = '-20090 Error en la programación de predecesores del detalle de tarea ' + CONVERT(VARCHAR, @detail__ID)
					RAISERROR(@msg, 16, 1);
				  END 
			  END 
            END;
			FETCH NEXT FROM pred INTO @pred__ID_PREDECESORDETALLETAREA, @pred__CODDETALLETAREAEJECUTADA, @pred__CODDETALLETAREAAEJECUTAR, @pred__CODESTADOTAREAESPERADO;
          END;
          CLOSE pred;
          DEALLOCATE pred;
        END;
      END 
		FETCH NEXT FROM detail INTO @detail__ORDERFLAG, @detail__OEXECUTE, @detail__ID, @detail__EXECID, @detail__NAME, @detail__INFOEXEC, @detail__CURRENTSTATE, @detail__PARAMETER;
    END;
    CLOSE detail;
    DEALLOCATE detail;
  END; 
GO
  
  
 	
IF OBJECT_ID('WSXML_SFG.SFG_TASK_MANAGER_BUSCAR_TAREA_AHORA3', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFG_TASK_MANAGER_BUSCAR_TAREA_AHORA3;
GO


CREATE PROCEDURE WSXML_SFG.SFG_TASK_MANAGER_BUSCAR_TAREA_AHORA3(@NOW_SERVICE DATETIME) AS
 BEGIN
	SET NOCOUNT ON;

    DECLARE @L_AHORA           VARCHAR(2000);
    DECLARE @L_IDTK            INTEGER;
    DECLARE @L_ADD             INTEGER;
    DECLARE @L_DATETK          VARCHAR(2000);
    DECLARE @L_FUNCION         NVARCHAR(MAX);
    DECLARE @V_FECHA_LOOP      VARCHAR(2000);
    DECLARE @L_FECHATMP        VARCHAR(2000);
    DECLARE @L_CODPERIODICIDAD INTEGER;
    DECLARE @L_SQL_INSTRUCTION NVARCHAR(MAX) = '';
    DECLARE @L_TAREA_STING     VARCHAR(MAX) = '0';
    DECLARE @L_TAREA_EJECUTADA VARCHAR(MAX) = '0';
	
	DECLARE @FECHAHOY DATETIME = GETDATE()


	DECLARE @p1_date DATETIME
	DECLARE @p2_date DATETIME
	DECLARE @p2_int INT

    DECLARE L_CUR_IDTK CURSOR LOCAL FOR
      SELECT T.ID_TAREA,
             FORMAT(T.FECHAEJECUCIONTAREA, 'dd/MM/yyyy HH:mm'),
             P.FUNCION,
             T.CODPERIODICIDAD
        FROM WSXML_SFG.TAREA T, WSXML_SFG.PERIORICIDAD P
       WHERE T.CODPERIODICIDAD = P.ID_PERIORICIDAD
         AND T.ACTIVE = 1
         AND P.ACTIVE = 1
         AND T.AGENTE_EJECUTOR = '3';

	DECLARE @REGISTRADASTR VARCHAR(15)
	EXEC WSXML_SFG.SFG_TASK_MANAGER_CONSTANT @REGISTRADASTR OUT
   

    SET @L_AHORA = FORMAT(@NOW_SERVICE, 'dd/MM/yyyy HH:mm');

    SET @L_ADD = 1;
    OPEN L_CUR_IDTK;

	DECLARE @L_CUR_IDTK_ROWCOUNT NUMERIC(22,0)
	
	SELECT @L_CUR_IDTK_ROWCOUNT = COUNT(*)
        FROM WSXML_SFG.TAREA T, WSXML_SFG.PERIORICIDAD P
       WHERE T.CODPERIODICIDAD = P.ID_PERIORICIDAD
         AND T.ACTIVE = 1
         AND P.ACTIVE = 1
         AND T.AGENTE_EJECUTOR = '3';

	FETCH L_CUR_IDTK INTO @L_IDTK, @L_DATETK, @L_FUNCION, @L_CODPERIODICIDAD;

    WHILE @@FETCH_STATUS = 0 BEGIN
      

      SET @L_FECHATMP = @L_DATETK;

      IF @L_CUR_IDTK_ROWCOUNT >= 1 BEGIN

      SET @L_ADD = 1;

        WHILE 1=1 BEGIN
          SET @V_FECHA_LOOP = @L_FECHATMP;

         /* L_ADD := 1;*/

          IF CONVERT(DATETIME,@V_FECHA_LOOP, 103) > CONVERT(DATETIME, @L_AHORA, 103)
				BREAK;

          IF @L_CODPERIODICIDAD BETWEEN 20 AND 40 BEGIN

			 SET @p1_date = CONVERT(DATETIME, @L_DATETK, 103)
			 SET @p2_date = CONVERT(DATETIME, @L_AHORA, 103)
             EXECUTE sp_executesql @L_FUNCION, N'@L_FECHATMP VARCHAR(2000) output, @p1 DATETIME, @p2 DATETIME',
				@L_FECHATMP OUTPUT, @p1_date, @p2_date


           IF @L_FECHATMP = 'TRUE' BEGIN

				EXEC WSXML_SFG.SFGTAREAEJECUTADA_ADDRECORD  
										@REGISTRADASTR,
                                        @FECHAHOY,
                                        1,
                                        @L_IDTK,
                                        @L_TAREA_EJECUTADA OUT
				SET @L_ADD = 1;

				  IF @L_TAREA_STING = '0' BEGIN
					SET @L_TAREA_STING = @L_TAREA_EJECUTADA;
				  END
				  ELSE IF @L_TAREA_STING IS NOT NULL BEGIN
					SET @L_TAREA_STING = ISNULL(@L_TAREA_STING, '') + ' OR T.ID_TAREAEJECUTADA = ' + @L_TAREA_EJECUTADA;
				  END 

					BREAK;

			END
            ELSE IF @L_FECHATMP = 'FALSE' BEGIN
				BREAK;
            END 

          END
          ELSE BEGIN


           IF CONVERT(DATETIME, @V_FECHA_LOOP, 103) = CONVERT(DATETIME, @L_AHORA, 103) BEGIN

              EXEC WSXML_SFG.SFGTAREAEJECUTADA_ADDRECORD 
										@REGISTRADASTR,
                                        @FECHAHOY,
                                        1,
                                        @L_IDTK,
                                        @L_TAREA_EJECUTADA OUT
              SET @L_ADD = 1;

              IF @L_TAREA_STING = '0' BEGIN
                SET @L_TAREA_STING = @L_TAREA_EJECUTADA;
              END
              ELSE IF @L_TAREA_STING IS NOT NULL BEGIN
                SET @L_TAREA_STING = ISNULL(@L_TAREA_STING, '') + ' OR T.ID_TAREAEJECUTADA = ' + @L_TAREA_EJECUTADA
              END 

              BREAK;

            END 

			SET @p1_date =CONVERT(DATETIME,@L_DATETK, 103)
			SET @p2_int = @L_ADD

            EXECUTE sp_executesql @L_FUNCION, N'@L_FECHATMP VARCHAR(2000) output, @p1 DATETIME, @p2 INT',
              @L_FECHATMP OUTPUT, @p1_date, @p2_int

            SET @L_ADD = @L_ADD + 1;

            SET @V_FECHA_LOOP = @L_FECHATMP;

            IF CONVERT(DATETIME, @V_FECHA_LOOP, 103) = CONVERT(DATETIME, @L_AHORA, 103) BEGIN

              EXEC WSXML_SFG.SFGTAREAEJECUTADA_ADDRECORD 
										  @REGISTRADASTR,
                                          @FECHAHOY,
                                          1,
                                          @L_IDTK,
                                          @L_TAREA_EJECUTADA OUT
              SET @L_ADD = 1;

              IF @L_TAREA_STING = '0' BEGIN
                SET @L_TAREA_STING = @L_TAREA_EJECUTADA;
              END
              ELSE IF @L_TAREA_STING IS NOT NULL BEGIN
                SET @L_TAREA_STING = ISNULL(@L_TAREA_STING, '') + ' OR T.ID_TAREAEJECUTADA = ' + @L_TAREA_EJECUTADA
              END 

              BREAK;

            END 

          END 

        END;

      END 

    END;
    CLOSE L_CUR_IDTK;
    DEALLOCATE L_CUR_IDTK;

    SET @L_SQL_INSTRUCTION = 'SELECT T.ID_TAREAEJECUTADA, T.CODTAREA FROM WSXML_SFG.TAREAEJECUTADA T WHERE T.ID_TAREAEJECUTADA =  ' + @L_TAREA_STING

    EXECUTE sp_executesql @L_SQL_INSTRUCTION

  END
GO
	
	

  IF OBJECT_ID('WSXML_SFG.SFG_TASK_MANAGER_BUSCAR_TAREA_AHORA2', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFG_TASK_MANAGER_BUSCAR_TAREA_AHORA2;
GO

CREATE PROCEDURE WSXML_SFG.SFG_TASK_MANAGER_BUSCAR_TAREA_AHORA2(@NOW_SERVICE DATETIME) AS
 BEGIN

	SET NOCOUNT ON;

    DECLARE @L_AHORA           VARCHAR(MAX);
    DECLARE @L_IDTK            INTEGER;
    DECLARE @L_ADD             INTEGER;
    DECLARE @L_DATETK          VARCHAR(MAX);
    DECLARE @L_FUNCION         NVARCHAR(MAX);
    DECLARE @V_FECHA_LOOP      VARCHAR(MAX);
    DECLARE @L_FECHATMP        VARCHAR(MAX);
    DECLARE @L_CODPERIODICIDAD INTEGER;
    DECLARE @L_SQL_INSTRUCTION NVARCHAR(MAX) = '';
    DECLARE @L_TAREA_STING     VARCHAR(MAX) = '0';
    DECLARE @L_TAREA_EJECUTADA VARCHAR(MAX) = '0';

	DECLARE @FECHAHOY DATETIME = GETDATE()


	DECLARE @p1_date DATETIME
	DECLARE @p2_date DATETIME
	DECLARE @p2_int INT

    DECLARE L_CUR_IDTK CURSOR LOCAL FOR
      SELECT T.ID_TAREA,
             FORMAT(T.FECHAEJECUCIONTAREA, 'dd/MM/yyyy HH:mm'),
             P.FUNCION,
             T.CODPERIODICIDAD
        FROM WSXML_SFG.TAREA T, WSXML_SFG.PERIORICIDAD P
       WHERE T.CODPERIODICIDAD = P.ID_PERIORICIDAD
         AND T.ACTIVE = 1
         AND P.ACTIVE = 1
         AND T.AGENTE_EJECUTOR = '2';

    DECLARE @REGISTRADASTR VARCHAR(15)
	EXEC WSXML_SFG.SFG_TASK_MANAGER_CONSTANT @REGISTRADASTR OUT

    SELECT @L_AHORA = FORMAT(@NOW_SERVICE, 'dd/MM/yyyy HH:mm');
    SET @L_ADD = 1;
    OPEN L_CUR_IDTK;

	DECLARE @L_CUR_IDTK_ROWCOUNT NUMERIC(22,0)

	 SELECT @L_CUR_IDTK_ROWCOUNT = COUNT(*)
        FROM WSXML_SFG.TAREA T, WSXML_SFG.PERIORICIDAD P
       WHERE T.CODPERIODICIDAD = P.ID_PERIORICIDAD
         AND T.ACTIVE = 1
         AND P.ACTIVE = 1
         AND T.AGENTE_EJECUTOR = '2';

	FETCH NEXT FROM L_CUR_IDTK INTO @L_IDTK, @L_DATETK, @L_FUNCION, @L_CODPERIODICIDAD;
	WHILE @@FETCH_STATUS = 0 BEGIN
      

      SET @L_FECHATMP = @L_DATETK;

      IF @L_CUR_IDTK_ROWCOUNT >= 1 BEGIN

		SET @L_ADD = 1;

			WHILE 1=1 BEGIN
				SET @V_FECHA_LOOP = @L_FECHATMP;

				 /* L_ADD := 1;*/


				IF CONVERT(DATETIME,@V_FECHA_LOOP, 103) > CONVERT(DATETIME, @L_AHORA,103) BEGIN
					BREAK;
				END

				 

				IF @L_CODPERIODICIDAD BETWEEN 20 AND 40 BEGIN
					SET @p1_date = CONVERT(DATETIME, @L_DATETK, 103)
					SET @p2_date = CONVERT(DATETIME, @L_AHORA, 103)

					SET @p1_date = CONVERT(DATETIME, @L_DATETK, 103)
					SET @p2_date = CONVERT(DATETIME, @L_AHORA, 103)
					
					--EXECUTE sp_executesql @L_FUNCION, N'@L_FECHATMP VARCHAR(2000) output, @p1 DATETIME, @p2 DATETIME',
					--	@L_FECHATMP OUTPUT, @p1_date, @p2_date

					IF @L_FECHATMP = 'TRUE' BEGIN

						EXEC WSXML_SFG.SFGTAREAEJECUTADA_ADDRECORD 
										@REGISTRADASTR,
                                        @FECHAHOY,
                                        1,
                                        @L_IDTK,
                                        @L_TAREA_EJECUTADA OUT
						SET @L_ADD = 1;

						IF @L_TAREA_STING = '0' BEGIN
							SET @L_TAREA_STING = @L_TAREA_EJECUTADA;
						END

						ELSE IF @L_TAREA_STING IS NOT NULL BEGIN
							SET @L_TAREA_STING = ISNULL(@L_TAREA_STING, '') + ' OR T.ID_TAREAEJECUTADA = ' + ISNULL(@L_TAREA_EJECUTADA, '');
						END 

						BREAK;

					END
					ELSE IF @L_FECHATMP = 'FALSE' BEGIN

						BREAK;

					END 

				END
				ELSE BEGIN


				IF CONVERT(DATETIME, @V_FECHA_LOOP, 103) = CONVERT(DATETIME, @L_AHORA, 103) BEGIN

					EXEC WSXML_SFG.SFGTAREAEJECUTADA_ADDRECORD		
										  @REGISTRADASTR,
                                          @FECHAHOY,
                                          1,
                                          @L_IDTK,
                                          @L_TAREA_EJECUTADA OUT
					SET @L_ADD = 1;

					IF @L_TAREA_STING = '0' BEGIN
						SET @L_TAREA_STING = @L_TAREA_EJECUTADA;
					END
					ELSE IF @L_TAREA_STING IS NOT NULL BEGIN
						SET @L_TAREA_STING = ISNULL(@L_TAREA_STING, '') +
										 ' OR T.ID_TAREAEJECUTADA = ' + ISNULL(@L_TAREA_EJECUTADA, '');
					END 

					BREAK;

				END 
					SET @p1_date = CONVERT(DATETIME, @L_DATETK, 103)
					SET @p2_int = @L_ADD
					EXECUTE sp_executesql @L_FUNCION, N'@L_FECHATMP output, @p1 DATETIME, @p2 INT',
						@L_FECHATMP OUTPUT, @p1_date, @p2_int;

					SET @L_ADD = @L_ADD + 1;

					SET @V_FECHA_LOOP = @L_FECHATMP;

					IF CONVERT(DATETIME, @V_FECHA_LOOP, 103) = CONVERT(DATETIME, @L_AHORA, 103) BEGIN

						  EXEC WSXML_SFG.SFGTAREAEJECUTADA_ADDRECORD
													 @REGISTRADASTR,
													 @FECHAHOY,
													  1,
													  @L_IDTK,
													  @L_TAREA_EJECUTADA OUT
						  SET @L_ADD = 1;

						  IF @L_TAREA_STING = '0' BEGIN
							SET @L_TAREA_STING = @L_TAREA_EJECUTADA;
						  END
						  ELSE IF @L_TAREA_STING IS NOT NULL BEGIN
							SET @L_TAREA_STING = ISNULL(@L_TAREA_STING, '') + ' OR T.ID_TAREAEJECUTADA = ' + ISNULL(@L_TAREA_EJECUTADA, '');
						  END 

						  BREAK;

					  END 

				END 

			END;

		END 
	  FETCH NEXT FROM L_CUR_IDTK INTO @L_IDTK, @L_DATETK, @L_FUNCION, @L_CODPERIODICIDAD;
    END;
    CLOSE L_CUR_IDTK;
    DEALLOCATE L_CUR_IDTK;

    SET @L_SQL_INSTRUCTION = 'SELECT T.ID_TAREAEJECUTADA, T.CODTAREA FROM WSXML_SFG.TAREAEJECUTADA T WHERE T.ID_TAREAEJECUTADA =  ' + @L_TAREA_STING

    EXECUTE sp_executesql @L_SQL_INSTRUCTION

  END
GO

  IF OBJECT_ID('WSXML_SFG.SFG_TASK_MANAGER_BUSCAR_TAREA_AHORA', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFG_TASK_MANAGER_BUSCAR_TAREA_AHORA;
GO

CREATE     PROCEDURE WSXML_SFG.SFG_TASK_MANAGER_BUSCAR_TAREA_AHORA(@NOW_SERVICE DATETIME) AS
 BEGIN

	SET NOCOUNT ON;

    DECLARE @L_AHORA           VARCHAR(2000);
    DECLARE @L_IDTK            INTEGER;
    DECLARE @L_ADD             INTEGER;
    DECLARE @L_DATETK          VARCHAR(2000);
    DECLARE @L_FUNCION         NVARCHAR(MAX);
    DECLARE @V_FECHA_LOOP      VARCHAR(2000);
    DECLARE @L_FECHATMP        VARCHAR(2000);
    DECLARE @L_CODPERIODICIDAD INTEGER;
    DECLARE @L_SQL_INSTRUCTION NVARCHAR(MAX) = '';
    DECLARE @L_TAREA_STING     VARCHAR(MAX) = '0';
    DECLARE @L_TAREA_EJECUTADA VARCHAR(MAX) = '0';

	DECLARE @FECHAHOY DATETIME = GETDATE()


	DECLARE @p1_date DATETIME
	DECLARE @p2_date DATETIME
	DECLARE @p2_int INT

    DECLARE L_CUR_IDTK CURSOR LOCAL FOR
      SELECT T.ID_TAREA,
             FORMAT(T.FECHAEJECUCIONTAREA, 'dd/MM/yyyy HH:mm'),
             P.FUNCION,
             T.CODPERIODICIDAD
        FROM WSXML_SFG.TAREA T, WSXML_SFG.PERIORICIDAD P
       WHERE T.CODPERIODICIDAD = P.ID_PERIORICIDAD
         AND T.ACTIVE = 1
         AND P.ACTIVE = 1
         AND T.AGENTE_EJECUTOR = '1';

		  OPEN L_CUR_IDTK;

	DECLARE @L_CUR_IDTK_ROWCOUNT NUMERIC(22,0)
	
	 SELECT @L_CUR_IDTK_ROWCOUNT = COUNT(*)
        FROM WSXML_SFG.TAREA T, WSXML_SFG.PERIORICIDAD P
       WHERE T.CODPERIODICIDAD = P.ID_PERIORICIDAD
         AND T.ACTIVE = 1
         AND P.ACTIVE = 1
         AND T.AGENTE_EJECUTOR = '1';
		 
	DECLARE @REGISTRADASTR VARCHAR(15)
	EXEC WSXML_SFG.SFG_TASK_MANAGER_CONSTANT @REGISTRADASTR OUT
  
    SET @L_AHORA =FORMAT(@NOW_SERVICE, 'dd/MM/yyyy HH:mm');

    SET @L_ADD = 1;
   
	
	FETCH NEXT FROM L_CUR_IDTK INTO @L_IDTK, @L_DATETK, @L_FUNCION, @L_CODPERIODICIDAD;

    WHILE @@FETCH_STATUS = 0 BEGIN

    
      --SET @L_FECHATMP = FORMAT(@L_DATETK, 'dd/MM/yyyy HH:mm');
	  SET @L_FECHATMP = @L_DATETK

      IF @L_CUR_IDTK_ROWCOUNT >= 1 BEGIN
	
		SET @L_ADD = 1;

		SET @V_FECHA_LOOP = @L_FECHATMP;
		
        WHILE 1=1 BEGIN
          SET @V_FECHA_LOOP = @L_FECHATMP;

         -- L_ADD := 1;
		 
          --IF CONVERT(DATETIME,@V_FECHA_LOOP,103) > CONVERT(DATETIME, @L_AHORA,103) BEGIN
		  IF WSXML_SFG.DATEDIFF('mi',CONVERT(DATETIME, @L_AHORA,103),CONVERT(DATETIME,@V_FECHA_LOOP,103)) > 0 BEGIN
			BREAK;
		  END
		  
			
			
          IF @L_CODPERIODICIDAD BETWEEN 20 AND 40 BEGIN

			 SET @p1_date = CONVERT(DATETIME, @L_DATETK,103)
			 SET @p2_date = CONVERT(DATETIME, @L_AHORA,103)
			 
             EXECUTE sp_executesql @L_FUNCION, N'@L_FECHATMP VARCHAR(2000) output, @p1 DATETIME, @p2 DATETIME',
				@L_FECHATMP OUTPUT, @p1_date, @p2_date

			  -- select @result =  sfg_package.SUM_SEMANA(@param_1, @param2)

				IF @L_FECHATMP = 'TRUE' BEGIN

					EXEC WSXML_SFG.SFGTAREAEJECUTADA_ADDRECORD 
											  @REGISTRADASTR,
											  @FECHAHOY,
											  1,
											  @L_IDTK,
											  @L_TAREA_EJECUTADA OUT
					
					SET @L_ADD = 1;

					IF @L_TAREA_STING = '0' BEGIN
						SET @L_TAREA_STING = @L_TAREA_EJECUTADA;
					END
					ELSE IF @L_TAREA_STING IS NOT NULL BEGIN
						SET @L_TAREA_STING = ISNULL(@L_TAREA_STING, '') + ' OR T.ID_TAREAEJECUTADA = ' + 
								ISNULL(@L_TAREA_EJECUTADA, '');
					END 
					BREAK;

				END
            ELSE IF @L_FECHATMP = 'FALSE' BEGIN

              BREAK;

            END 

          END
          ELSE BEGIN


			IF CONVERT(DATETIME, @V_FECHA_LOOP, 103) = CONVERT(DATETIME, @L_AHORA, 103) BEGIN

              EXEC WSXML_SFG.SFGTAREAEJECUTADA_ADDRECORD
										  @REGISTRADASTR,
                                          @FECHAHOY,
                                          1,
                                          @L_IDTK,
                                          @L_TAREA_EJECUTADA OUT
              SET @L_ADD = 1;

              IF @L_TAREA_STING = '0' BEGIN
                SET @L_TAREA_STING = @L_TAREA_EJECUTADA;
              END
              ELSE IF @L_TAREA_STING IS NOT NULL BEGIN
					SET @L_TAREA_STING = ISNULL(@L_TAREA_STING, '') + ' OR CONVERT(VARCHAR,T.ID_TAREAEJECUTADA) = ' +
                                 ISNULL(@L_TAREA_EJECUTADA, '');
              END 

              BREAK;

            END 

			SET @p1_date =CONVERT(DATETIME,@L_DATETK, 103)

            EXECUTE sp_executesql @L_FUNCION, N'@L_FECHATMP VARCHAR(2000) output, @p1 DATETIME, @p2 INT',
              @L_FECHATMP OUTPUT, @p1_date, @L_ADD

            SET @L_ADD = @L_ADD + 1;

            SET @V_FECHA_LOOP = @L_FECHATMP;

            IF CONVERT(DATETIME, @V_FECHA_LOOP, 103) = CONVERT(DATETIME, @L_AHORA, 103) BEGIN

              EXEC WSXML_SFG.SFGTAREAEJECUTADA_ADDRECORD @REGISTRADASTR,
                                          @FECHAHOY,
                                          1,
                                          @L_IDTK,
                                          @L_TAREA_EJECUTADA OUT
              SET @L_ADD = 1;

              IF @L_TAREA_STING = '0' BEGIN
                SET @L_TAREA_STING = @L_TAREA_EJECUTADA;
              END
              ELSE IF @L_TAREA_STING IS NOT NULL BEGIN
                SET @L_TAREA_STING = ISNULL(@L_TAREA_STING, '') + ' OR T.ID_TAREAEJECUTADA = ' + @L_TAREA_EJECUTADA;
              END 

              BREAK;

            END 

          END 
        END;

      END 
	  FETCH NEXT FROM L_CUR_IDTK INTO @L_IDTK, @L_DATETK, @L_FUNCION, @L_CODPERIODICIDAD;
    END;
    CLOSE L_CUR_IDTK;
    DEALLOCATE L_CUR_IDTK;

    SET @L_SQL_INSTRUCTION = N'SELECT T.ID_TAREAEJECUTADA, T.CODTAREA FROM WSXML_SFG.TAREAEJECUTADA T WHERE T.ID_TAREAEJECUTADA =  ' 
								+ @L_TAREA_STING
    EXECUTE sp_executesql @L_SQL_INSTRUCTION

  END; 
GO