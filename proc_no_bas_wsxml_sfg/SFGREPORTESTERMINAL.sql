USE SFGPRODU;
--  DDL for Package Body SFGREPORTESTERMINAL
--------------------------------------------------------

  /* PACKAGE BODY WSXML_SFG.SFGREPORTESTERMINAL */ 
   --
IF OBJECT_ID('WSXML_SFG.SFGREPORTESTERMINAL_CONSTANT', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREPORTESTERMINAL_CONSTANT;
GO

CREATE       PROCEDURE WSXML_SFG.SFGREPORTESTERMINAL_CONSTANT(@p_NUMEROREGISTROSXPAGINA INT OUT) AS
BEGIN
	SET NOCOUNT ON;
	SET @p_NUMEROREGISTROSXPAGINA = 500;
END;
GO


IF OBJECT_ID('WSXML_SFG.SFGREPORTESTERMINAL_ExpectedCycleID', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREPORTESTERMINAL_ExpectedCycleID;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREPORTESTERMINAL_ExpectedCycleID(@p_SECUENCIACICLO NUMERIC(22,0), @p_CODCICLOFACTURACIONPDV NUMERIC(22,0) OUT, @p_FECHAULTIMAEJECUCION DATETIME OUT) AS
 BEGIN
    DECLARE @cMAXSECUENCIAFACTURACION NUMERIC(22,0);
   
  SET NOCOUNT ON;
    -- Get expected cycle identifier
    BEGIN
      IF @p_SECUENCIACICLO = -1 
	  BEGIN
        SELECT @cMAXSECUENCIAFACTURACION = MAX(SECUENCIA) FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ACTIVE = 1;
      END
      ELSE 
	  BEGIN
        SET @cMAXSECUENCIAFACTURACION = @p_SECUENCIACICLO;
      END 

      SELECT @p_CODCICLOFACTURACIONPDV = ID_CICLOFACTURACIONPDV FROM WSXML_SFG.CICLOFACTURACIONPDV
      WHERE SECUENCIA = @cMAXSECUENCIAFACTURACION AND ACTIVE = 1;
      /* Ciclo de facturacion previo (SECUENCIA MENOR ACTIVA) */
      BEGIN
		BEGIN TRY
			SELECT @p_FECHAULTIMAEJECUCION = ISNULL(CFPREV.FECHAEJECUCION, FORMAT(CAST('01/01/2000' AS DATETIME), 'dd/MM/yyyy'))
			FROM WSXML_SFG.CICLOFACTURACIONPDV CFPREV
			WHERE CFPREV.SECUENCIA = (@cMAXSECUENCIAFACTURACION - 1) AND CFPREV.ACTIVE = 1;
		END TRY
		BEGIN CATCH

			SELECT @p_FECHAULTIMAEJECUCION = FORMAT(CAST('01/01/2000' AS DATETIME), 'dd/MM/yyyy');
		END CATCH
      END;
    
	
	IF @@ROWCOUNT = 0 BEGIN
		DECLARE @msg VARCHAR(2000)= '-20054 No existe el ciclo de facturaci?n No. ' + ISNULL(@p_SECUENCIACICLO, '') 
		RAISERROR(@msg, 16, 1);
	END
	
	IF @@ROWCOUNT > 1
		RAISERROR('-20054 Hay mas de un ciclo de facturaci?n con el mismo c?digo de secuencia. Este es un problema de consistencia de datos.', 16, 1);

  END;

END
GO

   
IF OBJECT_ID('WSXML_SFG.SFGREPORTESTERMINAL_GetPagingParameters', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREPORTESTERMINAL_GetPagingParameters;
GO

CREATE       PROCEDURE WSXML_SFG.SFGREPORTESTERMINAL_GetPagingParameters(@p_NUMEROPAGINA NUMERIC(22,0), @p_LIMITEMENOR NUMERIC(22,0) OUT, @p_LIMITEMAYOR NUMERIC(22,0) OUT) AS
   BEGIN
   SET NOCOUNT ON;
	DECLARE @NUMEROREGISTROSXPAGINA INT;
	EXEC WSXML_SFG.SFGREPORTESTERMINAL_CONSTANT @NUMEROREGISTROSXPAGINA OUT;
    SELECT @p_LIMITEMENOR = @p_NUMEROPAGINA * @NUMEROREGISTROSXPAGINA, @p_LIMITEMAYOR = (@p_NUMEROPAGINA + 1) * @NUMEROREGISTROSXPAGINA
  END
GO
  -- Conteo para paginar la informaci?n de puntos de venta
  IF OBJECT_ID('WSXML_SFG.SFGREPORTESTERMINAL_GetDepositSlipHeaderCount', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREPORTESTERMINAL_GetDepositSlipHeaderCount;
GO


CREATE     PROCEDURE WSXML_SFG.SFGREPORTESTERMINAL_GetDepositSlipHeaderCount(@p_SECUENCIACICLO NUMERIC(22,0), @p_ROWCOUNT_out NUMERIC(22,0) OUT) AS
 BEGIN
	SET NOCOUNT ON;
	
    DECLARE @cCODCICLOFACTURACIONPDV  NUMERIC(22,0);
    DECLARE @cFECHAEJECUCION          DATETIME;
	DECLARE @l_NUMEROREGISTROSXPAGINA INT;

  
	EXEC WSXML_SFG.SFGREPORTESTERMINAL_CONSTANT @l_NUMEROREGISTROSXPAGINA OUT;
	
    EXEC WSXML_SFG.SFGREPORTESTERMINAL_ExpectedCycleID @p_SECUENCIACICLO, @cCODCICLOFACTURACIONPDV, @cFECHAEJECUCION OUT
	
    SELECT @p_ROWCOUNT_out = CEILING(COUNT(1) / @l_NUMEROREGISTROSXPAGINA)
    FROM WSXML_SFG.MAESTROFACTURACIONTIRILLA
    INNER JOIN WSXML_SFG.PUNTODEVENTA ON MAESTROFACTURACIONTIRILLA.CODPUNTODEVENTA = PUNTODEVENTA.ID_PUNTODEVENTA
    INNER JOIN WSXML_SFG.REDPDV       ON PUNTODEVENTA.CODREDPDV = REDPDV.ID_REDPDV
    WHERE REDPDV.CODCANALNEGOCIO = 1 AND  CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV;
  END;
GO




   -- Lista de items general para puntos de venta
IF OBJECT_ID('WSXML_SFG.SFGREPORTESTERMINAL_GetDepositSlipItemListForAgent', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREPORTESTERMINAL_GetDepositSlipItemListForAgent;
GO

CREATE       PROCEDURE WSXML_SFG.SFGREPORTESTERMINAL_GetDepositSlipItemListForAgent(@p_SECUENCIACICLO NUMERIC(22,0)              , 
                                           @p_PAGNUM         NUMERIC(22,0)              
                                                 ) AS
 BEGIN
	SET NOCOUNT ON;
      --
      -- Identificadores de Ciclo
      DECLARE @cCODCICLOFACTURACIONPDV NUMERIC(22,0);
      DECLARE @cFECHAULTIMAEJECUCION   DATETIME;
      -- Identificadores de Impuestos
      DECLARE @xINSTALL  NUMERIC(22,0) = 5;   -- Linea de negocio Instalaciones
      DECLARE @xWITHDRW  NUMERIC(22,0) = 4;   -- Linea de negocio Retiros
      DECLARE @xBILLPAY  NUMERIC(22,0) = 3;   -- Linea de negocio Bill Payment
      DECLARE @xPREPAID  NUMERIC(22,0) = 2;   -- Linea de negocio Pines y Recargas
      DECLARE @xLOTTERY  NUMERIC(22,0) = 1;   -- Linea de negocio Juegos
      DECLARE @xTAXRENTA NUMERIC(22,0) = 1;   -- Retencion Tributaria RENTA
      DECLARE @xTAXICA   NUMERIC(22,0) = 2;   -- Retencion Tributaria ICA
      DECLARE @xTAXIVA   NUMERIC(22,0) = 3;   -- Retencion Tributaria IVA
      DECLARE @xTAXCREE  NUMERIC(22,0) = 4;   -- Retencion Tributaria CREE
      DECLARE @xPRODTX   NUMERIC(22,0) = 1;   -- Impuesto IVA
      -- Codigos de Cuentas
      DECLARE @vAccountGTECH VARCHAR(4000)         /* Use -meta option PARAMETRO.VALOR%TYPE */;
      DECLARE @vAccountFiducia VARCHAR(4000)       /* Use -meta option PARAMETRO.VALOR%TYPE */;
      DECLARE @vBarcodeIGT VARCHAR(4000)           /* Use -meta option PARAMETRO.VALOR%TYPE */;
      DECLARE @vBarcodeFiducia VARCHAR(4000)       /* Use -meta option PARAMETRO.VALOR%TYPE */;
      DECLARE @vShortBarcodeIGT VARCHAR(4000)    /* Use -meta option PARAMETRO.VALOR%TYPE */;
      DECLARE @vShortBarcodeFiducia VARCHAR(4000)  /* Use -meta option PARAMETRO.VALOR%TYPE */;
      -- Paginacion
      DECLARE @xLOWERLIMIT NUMERIC(22,0);
      DECLARE @xUPPERLIMIT NUMERIC(22,0);
      DECLARE @msg VARCHAR(2000);
      --
       
      
	  BEGIN TRY
         --
			 EXEC WSXML_SFG.SFGREPORTESTERMINAL_ExpectedCycleID @p_SECUENCIACICLO, @cCODCICLOFACTURACIONPDV, @cFECHAULTIMAEJECUCION OUT
			 --
			 EXEC WSXML_SFG.SFGREPORTESTERMINAL_GetPagingParameters @p_PAGNUM, @xLOWERLIMIT OUT, @xUPPERLIMIT OUT
			 -- Default Barcodes. Override with unified
			 EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'AccountNumberGTECH'   , @vAccountGTECH       OUT
			 EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'AccountNumberFiducia' , @vAccountFiducia     OUT
			 EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'BarcodeGTECH'         , @vBarcodeIGT         OUT
			 EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'BarcodeFiducia'       , @vBarcodeFiducia     OUT
			 -- 23/03/2017 Nuevo Baloto
			 EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'ShortBarcodeIGT'      , @vShortBarcodeIGT     OUT
			 EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'ShortBarcodeFiducia'  , @vShortBarcodeFiducia OUT
			 --
			 --
			
			 SELECT /* Informacion Base */
					@cFECHAULTIMAEJECUCION                       AS LASTBILLINGDATE                    ,
					CFP.FECHAEJECUCION                          AS BILLINGDATE                        ,
					AGR.CODIGOAGRUPACIONGTECH                   AS CHAINNUMBER                        ,
					PDV.CODIGOGTECHPUNTODEVENTA                 AS POSNUMBER                          ,
					PDV.NUMEROTERMINAL                          AS TERMINALNUMBER                     ,
					MFT.ID_MAESTROFACTURACIONTIRILLA            AS SLIPID                             ,
					REFERENCIAGTECH                             AS REFERENCENUMBER                    ,
					/* Informacion de Referencia */
					@vAccountGTECH                               AS GTECHBANKACCOUNTNUMBER             ,
					@vAccountFiducia                             AS FIDUCIABANKACCOUNTNUMBER           ,
					-- EPINEDA 23/03/2017 Obtener codigo de barras a imprimir dependiendo del tipo de terminal
					(CASE WHEN TER.USACODIGODEBARRASCORTO = 0 THEN @vBarcodeIGT     ELSE @vShortBarcodeIGT     END ) AS  GTECHBARCODE      ,
					--
					(CASE WHEN TER.USACODIGODEBARRASCORTO = 0 THEN @vBarcodeFiducia ELSE @vShortBarcodeFiducia END ) AS  FIDUCIABARCODE    ,
					--
					/* Valores */
					ROUND(ISNULL(SALDOANTERIORGTECHx1, 0), 0)      AS GPREVIOUSBALANCELOTTERY ,
					ROUND(ISNULL(SALDOANTERIORGTECHx2, 0), 0)      AS GPREVIOUSBALANCEPREPAID ,
					ROUND(ISNULL(SALDOANTERIORGTECHx3, 0), 0)      AS GPREVIOUSBALANCEBILLPAY ,
					ROUND(ISNULL(SALDOANTERIORGTECHx4, 0), 0)      AS GPREVIOUSBALANCEWITHDRW ,
					ROUND(ISNULL(SALDOANTERIORGTECHx5, 0), 0)      AS GPREVIOUSBALANCEINSTALL ,
					ROUND(ISNULL(SALDOANTERIORGTECH, 0), 0)        AS GPREVIOUSBALANCETOTAL   ,
					ROUND(ISNULL(SALDOANTERIORFIDUCIAx1, 0), 0)    AS FPREVIOUSBALANCELOTTERY ,
					ROUND(ISNULL(SALDOANTERIORFIDUCIA, 0), 0)      AS FPREVIOUSBALANCETOTAL   ,
					ROUND(ISNULL(SALDOANTERIORGTECH, 0), 0) +
					ROUND(ISNULL(SALDOANTERIORFIDUCIA, 0), 0)      AS PREVIOUSBALANCETOTAL    ,
					ROUND(ISNULL(FACTURACIONGTECHx1, 0), 0)        AS GTOTALBILLINGLOTTERY    ,
					ROUND(ISNULL(FACTURACIONGTECHx2, 0), 0)        AS GTOTALBILLINGPREPAID    ,
					ROUND(ISNULL(FACTURACIONGTECHx3, 0), 0)        AS GTOTALBILLINGBILLPAY    ,
					ROUND(ISNULL(FACTURACIONGTECHx4, 0), 0)        AS GTOTALBILLINGWITHDRW    ,
					ROUND(ISNULL(FACTURACIONGTECHx5, 0), 0)        AS GTOTALBILLINGINSTALL    ,
					ROUND(ISNULL(FACTURACIONGTECH, 0), 0)          AS GTOTALBILLINGTOTAL      ,
					ROUND(ISNULL(FACTURACIONFIDUCIAx1, 0), 0)      AS FTOTALBILLINGLOTTERY    ,
					ROUND(ISNULL(FACTURACIONFIDUCIA, 0), 0)        AS FTOTALBILLINGTOTAL      ,
					ROUND(ISNULL(FACTURACIONGTECH, 0), 0) +
					ROUND(ISNULL(FACTURACIONFIDUCIA, 0), 0)        AS TOTALBILLINGTOTAL       ,
					--
					ROUND(ISNULL(NUEVOSALDOGTECHx1, 0), 0)         AS GCURRENTBALANCELOTTERY  ,
					ROUND(ISNULL(NUEVOSALDOGTECHx2, 0), 0)         AS GCURRENTBALANCEPREPAID  ,
					ROUND(ISNULL(NUEVOSALDOGTECHx3, 0), 0)         AS GCURRENTBALANCEBILLPAY  ,
					ROUND(ISNULL(NUEVOSALDOGTECHx4, 0), 0)         AS GCURRENTBALANCEWITHDRW  , 
					ROUND(ISNULL(NUEVOSALDOGTECHx5, 0), 0)         AS GCURRENTBALANCEINSTALL  , 
					ROUND(ISNULL(NUEVOSALDOGTECH, 0), 0)           AS GCURRENTBALANCETOTAL    ,
					ROUND(ISNULL(NUEVOSALDOFIDUCIAx1, 0), 0)       AS FCURRENTBALANCELOTTERY  ,
					ROUND(ISNULL(NUEVOSALDOFIDUCIA, 0), 0)         AS FCURRENTBALANCETOTAL    ,
					ROUND(ISNULL(NUEVOSALDOGTECH, 0), 0)     +
					ROUND(ISNULL(NUEVOSALDOFIDUCIA, 0), 0)         AS CURRENTBALANCETOTAL     ,
					--
					ROUND(ISNULL(CANTIDADVENTA, 0), 0)             AS SALESQUANTITY           ,
					ROUND(ISNULL(VALORVENTA, 0), 0)                AS SALESAMOUNT             ,
					ROUND(ISNULL(CANTIDADANULACION, 0), 0)         AS ANNULMENTQUANTITY       ,
					ROUND(ISNULL(VALORANULACION, 0), 0)            AS ANNULMENTAMOUNT         ,
					ROUND(ISNULL(CANTIDADGRATUITO, 0), 0)          AS FREETKQUANTITY          ,
					ROUND(ISNULL(VALORGRATUITO, 0), 0)             AS FREETKAMOUNT            ,
					ROUND(ISNULL(CANTIDADPREMIOPAGO, 0), 0)        AS AWARDPAIDQUANTITY       ,
					ROUND(ISNULL(VALORPREMIOPAGO, 0), 0)           AS AWARDPAIDAMOUNT         ,
					ROUND(ISNULL(RETENCIONPREMIOSPAGADOS, 0), 0)   AS AWARDTAXDISCOUNT        ,
					--
					ROUND(ISNULL(IMPVALORx1, 0), 0)                AS PRODUCTTAXIVA           ,
					ROUND(ISNULL(VALORVENTABRUTA, 0), 0)           AS GROSSSALES              ,
					ROUND(ISNULL(VALORCOMISION, 0), 0)             AS GROSSCOMMISSION         ,
					ROUND(ISNULL(IVACOMISION, 0), 0)               AS VATCOMMISSION           ,
					--
					ROUND(ISNULL(RETVALOR_PRDx1, 0), 0)            AS TAXRENTA_PRD            ,
					ROUND(ISNULL(RETVALOR_PRDx2, 0), 0)            AS TAXICA_PRD              ,
					ROUND(ISNULL(RETVALOR_PRDx3, 0), 0)            AS TAXIVA_PRD              ,
					ROUND(ISNULL(RETVALOR_PRDx4, 0), 0)            AS TAXCREE_PRD             ,
					--
					ROUND(ISNULL(RETVALORx1, 0), 0) +
					ROUND(ISNULL(RETVALORxUVT, 0), 0)              AS TAXRENTA                ,
					ROUND(ISNULL(RETVALORx2, 0), 0)                AS TAXICA                  ,
					ROUND(ISNULL(RETVALORx3, 0), 0)                AS TAXIVA                  ,
					ROUND(ISNULL(RETVALORx4, 0), 0)                AS TAXCREE                 ,
					ROUND(ISNULL(VALORCOMISIONNETA, 0), 0)         AS FINALCOMMISSION         ,
					--
					ROUND(ISNULL(FACTURACIONGTECH, 0), 0)          AS GCURRENTWEEK            ,
					ROUND(ISNULL(FACTURACIONGTECH105, 0), 0)       AS GCURRENTWEEK105         ,
					ROUND(ISNULL(FACTURACIONGTECH161, 0), 0)       AS GCURRENTWEEK161         ,
					ROUND(ISNULL(FACTURACIONFIDUCIA, 0), 0)        AS FCURRENTWEEK            ,
					ROUND(ISNULL(FACTURACIONGTECH, 0), 0) +
					ROUND(ISNULL(FACTURACIONFIDUCIA, 0), 0)        AS TOTALCURRENTWEEK        ,
					--
					ROUND(ISNULL(NUEVOSALDOGTECH, 0), 0)           AS GCURRENTBALANCE         ,
					ROUND(ISNULL(NUEVOSALDOFIDUCIA, 0), 0)         AS FCURRENTBALANCE         ,
					0                                           AS NUMEROPAGOS             ,
					0                                           AS PAGOSAPLICADOS          ,
					--
					/* Informaci?n de control */
					PDV.ID_PUNTODEVENTA                  AS ID_PUNTODEVENTA                ,
					AGR.ID_AGRUPACIONPUNTODEVENTA        AS ID_AGRUPACIONPUNTODEVENTA      ,
					GLOBALBILLING.CODTIPOPUNTODEVENTA    AS CODTIPOPUNTODEVENTA            ,
					GLOBALBILLING.CODPUNTODEVENTACABEZA  AS CODPUNTODEVENTACABEZA          ,
					MFT.ID_MAESTROFACTURACIONTIRILLA     AS ID_MAESTROFACTURACIONTIRILLA   ,
					-- EPINEDA 22/03/2017 NUEVO BALOTO. Fechas l?mites de pago tanto de IGT como de Fiducia
					GLOBALBILLING.FECHALIMITEPAGOGTECH   AS IGTDUEDATE                     ,
					GLOBALBILLING.FECHALIMITEPAGOFIDUCIA AS FDUEDATE
				FROM (SELECT CODPUNTODEVENTA AS AGENT
						FROM (SELECT CODPUNTODEVENTA , 
									 ROW_NUMBER() OVER(ORDER BY CAST(s.CODIGOGTECHPUNTODEVENTA AS INT)) AS row_counter
								FROM (SELECT CODPUNTODEVENTA , CODIGOGTECHPUNTODEVENTA
										FROM WSXML_SFG.MAESTROFACTURACIONTIRILLA
									   INNER JOIN WSXML_SFG.PUNTODEVENTA 
										  ON (CODPUNTODEVENTA       = ID_PUNTODEVENTA)
									   INNER JOIN WSXML_SFG.REDPDV       
										  ON PUNTODEVENTA.CODREDPDV = REDPDV.ID_REDPDV
									   WHERE REDPDV.CODCANALNEGOCIO = 1 
										 AND CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV
									  ) s
							  ) s
						WHERE row_counter >  @xLOWERLIMIT
						  AND row_counter <= @xUPPERLIMIT
					 ) PAGED
				/* Puntos de venta inicialmente paginados */
				INNER JOIN WSXML_SFG.PUNTODEVENTA              PDV ON (PDV.ID_PUNTODEVENTA        = PAGED.AGENT                 )
				INNER JOIN WSXML_SFG.TIPOTERMINAL              TER ON  PDV.CODTIPOTERMINAL        = TER.ID_TIPOTERMINAL
				INNER JOIN WSXML_SFG.REDPDV                    RED ON (PDV.CODREDPDV              = RED.ID_REDPDV               )
				INNER JOIN WSXML_SFG.CICLOFACTURACIONPDV       CFP ON (CFP.ID_CICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV     )
				INNER JOIN WSXML_SFG.MAESTROFACTURACIONTIRILLA MFT ON (MFT.CODCICLOFACTURACIONPDV = CFP.ID_CICLOFACTURACIONPDV
														AND MFT.CODPUNTODEVENTA         = PDV.ID_PUNTODEVENTA         )
			--
			/* Facturacion Globalizada */
			LEFT OUTER JOIN (SELECT /*+ index(MAESTROFACTURACIONPDV MAESTROFACT_CICLOTIRILLA_IX) */
									MFP.CODCICLOFACTURACIONPDV       AS CODCICLOFACTURACIONPDV,
									MFP.CODMAESTROFACTURACIONTIRILLA AS CODMAESTROFACTURACIONTIRILLA,
									MIN(MFP.CODPUNTODEVENTA)              AS CODPUNTODEVENTA,
									MIN(MFC.CODAGRUPACIONPUNTODEVENTA)    AS CODAGRUPACIONPUNTODEVENTA,
									MIN(MFC.CODPUNTODEVENTA)              AS CODPUNTODEVENTACABEZA,
									MIN(MFC.CODTIPOPUNTODEVENTA)          AS CODTIPOPUNTODEVENTA,
									--EPINEDA 22/03/2017 NUEVO BALOTO
									MIN(MFC.FECHALIMITEPAGOGTECH)         AS FECHALIMITEPAGOGTECH    ,
									MIN(MFC.FECHALIMITEPAGOFIDUCIA)       AS FECHALIMITEPAGOFIDUCIA  ,
									SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xLOTTERY THEN ISNULL(MFP.SALDOANTERIORENCONTRAGTECH - MFP.SALDOANTERIORAFAVORGTECH, 0) ELSE 0 END)     AS SALDOANTERIORGTECHx1,
									SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xPREPAID THEN ISNULL(MFP.SALDOANTERIORENCONTRAGTECH - MFP.SALDOANTERIORAFAVORGTECH, 0) ELSE 0 END)     AS SALDOANTERIORGTECHx2,
									SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xBILLPAY THEN ISNULL(MFP.SALDOANTERIORENCONTRAGTECH - MFP.SALDOANTERIORAFAVORGTECH, 0) ELSE 0 END)     AS SALDOANTERIORGTECHx3,
									SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xWITHDRW THEN ISNULL(MFP.SALDOANTERIORENCONTRAGTECH - MFP.SALDOANTERIORAFAVORGTECH, 0) ELSE 0 END)     AS SALDOANTERIORGTECHx4,
									SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xINSTALL THEN ISNULL(MFP.SALDOANTERIORENCONTRAGTECH - MFP.SALDOANTERIORAFAVORGTECH, 0) ELSE 0 END)     AS SALDOANTERIORGTECHx5,
									SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xLOTTERY THEN ISNULL(MFP.SALDOANTERIORENCONTRAFIDUCIA - MFP.SALDOANTERIORAFAVORFIDUCIA, 0) ELSE 0 END) AS SALDOANTERIORFIDUCIAx1,

									SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xLOTTERY THEN ISNULL(DFP.TOTALFACTURACIONGTECH, 0) ELSE 0 END)     AS FACTURACIONGTECHx1,
									SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xPREPAID THEN ISNULL(DFP.TOTALFACTURACIONGTECH, 0) ELSE 0 END)     AS FACTURACIONGTECHx2,
									SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xBILLPAY THEN ISNULL(DFP.TOTALFACTURACIONGTECH, 0) ELSE 0 END)     AS FACTURACIONGTECHx3,
									SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xWITHDRW THEN ISNULL(DFP.TOTALFACTURACIONGTECH, 0) ELSE 0 END)     AS FACTURACIONGTECHx4,
									SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xINSTALL THEN ISNULL(DFP.TOTALFACTURACIONGTECH, 0) - ISNULL(RET_PRD.VALORRETENCION_PRDx1, 0) - ISNULL(RET_PRD.VALORRETENCION_PRDx2, 0) - ISNULL(RET_PRD.VALORRETENCION_PRDx3, 0) ELSE 0 END)     AS FACTURACIONGTECHx5,
									--SUM(CASE WHEN MFP.CODLINEADENEGOCIO = xINSTALL THEN NVL(DFP.VALORVENTANETA, 0) ELSE 0 END)     AS FACTURACIONGTECHx5,
									SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xLOTTERY THEN ISNULL(DFP.TOTALFACTURACIONFIDUCIA, 0) ELSE 0 END)   AS FACTURACIONFIDUCIAx1,

									SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xLOTTERY THEN ISNULL(MFP.NUEVOSALDOENCONTRAGTECH - MFP.NUEVOSALDOAFAVORGTECH, 0) ELSE 0 END)     AS NUEVOSALDOGTECHx1,
									SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xPREPAID THEN ISNULL(MFP.NUEVOSALDOENCONTRAGTECH - MFP.NUEVOSALDOAFAVORGTECH, 0) ELSE 0 END)     AS NUEVOSALDOGTECHx2,
									SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xBILLPAY THEN ISNULL(MFP.NUEVOSALDOENCONTRAGTECH - MFP.NUEVOSALDOAFAVORGTECH, 0) ELSE 0 END)     AS NUEVOSALDOGTECHx3,
									SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xWITHDRW THEN ISNULL(MFP.NUEVOSALDOENCONTRAGTECH - MFP.NUEVOSALDOAFAVORGTECH, 0) ELSE 0 END)     AS NUEVOSALDOGTECHx4,
									SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xINSTALL THEN ISNULL(MFP.NUEVOSALDOENCONTRAGTECH - MFP.NUEVOSALDOAFAVORGTECH, 0) ELSE 0 END)     AS NUEVOSALDOGTECHx5,
									SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xLOTTERY THEN ISNULL(MFP.NUEVOSALDOENCONTRAFIDUCIA - MFP.NUEVOSALDOAFAVORFIDUCIA, 0) ELSE 0 END) AS NUEVOSALDOFIDUCIAx1,

									SUM(ISNULL(DFP.TOTALFACTURACIONGTECH, 0)- ISNULL(RET_PRD.VALORRETENCION_PRDx1, 0)- ISNULL(RET_PRD.VALORRETENCION_PRDx2, 0) - ISNULL(RET_PRD.VALORRETENCION_PRDx3,0))                                         AS FACTURACIONGTECH,--Restar las retenciones de diferidos
									SUM(ISNULL(MFP.SALDOANTERIORENCONTRAGTECH - MFP.SALDOANTERIORAFAVORGTECH, 0))     AS SALDOANTERIORGTECH,
									SUM(ISNULL((ISNULL(MFP.NUEVOSALDOENCONTRAGTECH,0)- ISNULL(RET_PRD.VALORRETENCION_PRDx1, 0) - ISNULL(RET_PRD.VALORRETENCION_PRDx2, 0) - ISNULL(RET_PRD.VALORRETENCION_PRDx3,0)) - MFP.NUEVOSALDOAFAVORGTECH, 0))           AS NUEVOSALDOGTECH,
									--SUM(NVL(MFP.NUEVOSALDOENCONTRAGTECH - MFP.NUEVOSALDOAFAVORGTECH, 0))           AS NUEVOSALDOGTECH,
									MIN(MFC.REFERENCIAGTECH)                                                       AS REFERENCIAGTECH,
									SUM(ISNULL(DFP.TOTALFACTURACIONFIDUCIA, 0))                                       AS FACTURACIONFIDUCIA,
									SUM(ISNULL(MFP.SALDOANTERIORENCONTRAFIDUCIA - MFP.SALDOANTERIORAFAVORFIDUCIA, 0)) AS SALDOANTERIORFIDUCIA,
									SUM(ISNULL(MFP.NUEVOSALDOENCONTRAFIDUCIA - MFP.NUEVOSALDOAFAVORFIDUCIA, 0))       AS NUEVOSALDOFIDUCIA,
									MIN(MFC.REFERENCIAFIDUCIA)                                                     AS REFERENCIAFIDUCIA,

									SUM(CASE WHEN MFP.CODLINEADENEGOCIO = 1
											 THEN ISNULL(DFP.TOTALFACTURACIONGTECH, 0) ELSE 0 END)                    AS FACTURACIONGTECH105,
									SUM(CASE WHEN MFP.CODLINEADENEGOCIO IN (2, 3, 4, 5)
											 THEN ISNULL(DFP.TOTALFACTURACIONGTECH, 0) ELSE 0 END)                    AS FACTURACIONGTECH161,

									SUM(ISNULL(DFP.CANTIDADVENTA, 0))           AS CANTIDADVENTA,
									SUM(ISNULL(DFP.VALORVENTA, 0))              AS VALORVENTA,
									SUM(ISNULL(DFP.CANTIDADANULACION, 0))       AS CANTIDADANULACION,
									SUM(ISNULL(DFP.VALORANULACION, 0))          AS VALORANULACION,
									SUM(ISNULL(DFP.CANTIDADGRATUITO, 0))        AS CANTIDADGRATUITO,
									SUM(ISNULL(DFP.VALORGRATUITO, 0))           AS VALORGRATUITO,
									SUM(ISNULL(DFP.CANTIDADPREMIOPAGO, 0))      AS CANTIDADPREMIOPAGO,
									SUM(ISNULL(DFP.VALORPREMIOPAGO, 0))         AS VALORPREMIOPAGO,
									SUM(ISNULL(DFP.RETENCIONPREMIOSPAGADOS, 0)) AS RETENCIONPREMIOSPAGADOS,

									SUM(ISNULL(IMP.VALORIMPUESTOx1, 0))         AS IMPVALORx1,
									SUM(ISNULL(DFP.VALORVENTABRUTA, 0))         AS VALORVENTABRUTA,
									SUM(ISNULL(DFP.VALORCOMISION, 0))           AS VALORCOMISION,

									SUM(ISNULL(RET_PRD.VALORRETENCION_PRDx1, 0))        AS RETVALOR_PRDx1,
									SUM(ISNULL(RET_PRD.VALORRETENCION_PRDx2, 0))        AS RETVALOR_PRDx2,
									SUM(ISNULL(RET_PRD.VALORRETENCION_PRDx3, 0))        AS RETVALOR_PRDx3,
									SUM(ISNULL(RET_PRD.VALORRETENCION_PRDx4, 0))        AS RETVALOR_PRDx4,

									SUM(ISNULL(DFP.IVACOMISION, 0))             AS IVACOMISION,
									SUM(ISNULL(RET.VALORRETENCIONx1, 0))        AS RETVALORx1,
									SUM(ISNULL(RET.VALORRETENCIONx2, 0))        AS RETVALORx2,
									SUM(ISNULL(RET.VALORRETENCIONx3, 0))        AS RETVALORx3,
									SUM(ISNULL(RET.VALORRETENCIONx4, 0))        AS RETVALORx4,

									SUM(ISNULL(RUV.VALORRETENCIONUVT, 0))       AS RETVALORxUVT,
									SUM(ISNULL(DFP.VALORCOMISIONNETA, 0))       AS VALORCOMISIONNETA

							 FROM WSXML_SFG.MAESTROFACTURACIONPDV MFP
							INNER JOIN WSXML_SFG.MAESTROFACTURACIONCOMPCONSIG MFC 
							   ON (MFC.ID_MAESTROFACTCOMPCONSIG = MFP.CODMAESTROFACTURACIONCOMPCONSI)
							 -- Details of Billing
							 LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONPDV XMLGENERACION_DFP_IX) */
													 DFP.CODMAESTROFACTURACIONPDV,
													 SUM(DFP.CANTIDADVENTA)           AS CANTIDADVENTA,
													 SUM(DFP.VALORVENTA)              AS VALORVENTA,
													 SUM(DFP.CANTIDADANULACION)       AS CANTIDADANULACION,
													 SUM(DFP.VALORANULACION)          AS VALORANULACION,
													 SUM(DFP.CANTIDADGRATUITO)        AS CANTIDADGRATUITO,
													 SUM(DFP.VALORGRATUITO)           AS VALORGRATUITO,
													 SUM(DFP.CANTIDADPREMIOPAGO)      AS CANTIDADPREMIOPAGO,
													 SUM(DFP.VALORPREMIOPAGO)         AS VALORPREMIOPAGO,
													 SUM(DFP.RETENCIONPREMIOSPAGADOS) AS RETENCIONPREMIOSPAGADOS,

													 SUM(DFP.VALORVENTANETA)              AS VALORVENTANETA,

													 SUM(DFP.VALORVENTABRUTA)         AS VALORVENTABRUTA,
													 SUM(DFP.VALORCOMISION)           AS VALORCOMISION,
													 SUM(DFP.VALORCOMISIONBRUTA)      AS VALORCOMISIONBRUTA,
													 SUM(DFP.VALORCOMISIONNETA)       AS VALORCOMISIONNETA,
													 SUM(DFP.IVACOMISION)             AS IVACOMISION,

													 SUM(DFP.NUEVOSALDOENCONTRAGTECH - DFP.NUEVOSALDOAFAVORGTECH)     AS TOTALFACTURACIONGTECH,
													 SUM(DFP.NUEVOSALDOENCONTRAFIDUCIA - DFP.NUEVOSALDOAFAVORFIDUCIA) AS TOTALFACTURACIONFIDUCIA

											  FROM WSXML_SFG.DETALLEFACTURACIONPDV DFP
											  GROUP BY DFP.CODMAESTROFACTURACIONPDV) DFP ON (DFP.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV)
							 -- Product Taxes
							 LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONIMPUESTO GLOBALBILL_DETALLEFACTIMP_IX) */
													 CODMAESTROFACTURACIONPDV,
													 SUM(CASE WHEN CODIMPUESTO = @xPRODTX THEN VALORIMPUESTO ELSE 0 END) AS VALORIMPUESTOx1
											  FROM WSXML_SFG.DETALLEFACTURACIONIMPUESTO
											  GROUP BY CODMAESTROFACTURACIONPDV) IMP ON (IMP.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV)
							 -- Commission Taxes
							 LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONRETENCION GLOBALBILL_DETALLEFACTRET_IX) */
													 CODMAESTROFACTURACIONPDV,
													 SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXRENTA THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx1,
													 SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXICA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx2,
													 SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXIVA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx3,
													 SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXCREE  THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx4
											  FROM WSXML_SFG.DETALLEFACTURACIONRETENCION
											  GROUP BY CODMAESTROFACTURACIONPDV) RET ON (RET.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV)
							 -- Retencion Taxes over product
							 LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONRETDIFE GLOBALBILL_DETALLEFACTRTDF_IX) */
													 CODMAESTROFACTURACIONPDV,
													 SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXRENTA THEN VALORRETENCION ELSE 0 END) AS VALORRETENCION_PRDx1,
													 SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXICA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCION_PRDx2,
													 SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXIVA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCION_PRDx3,
													 SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXCREE  THEN VALORRETENCION ELSE 0 END) AS VALORRETENCION_PRDx4
											  FROM WSXML_SFG.DETALLEFACTURACIONRETDIFE
											  GROUP BY CODMAESTROFACTURACIONPDV) RET_PRD ON (RET_PRD.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV)
							 -- Special Taxes over Commission
							 LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONRETUVT GLOBALBILL_DETALLEFACTUVT_IX) */
													 CODMAESTROFACTURACIONPDV, SUM(VALORRETENCION) AS VALORRETENCIONUVT
											  FROM WSXML_SFG.DETALLEFACTURACIONRETUVT
											  GROUP BY CODMAESTROFACTURACIONPDV) RUV ON (RUV.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV)
							 WHERE MFP.CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV
							 GROUP BY MFP.CODCICLOFACTURACIONPDV, MFP.CODMAESTROFACTURACIONTIRILLA
							 ) GLOBALBILLING ON (GLOBALBILLING.CODCICLOFACTURACIONPDV = CFP.ID_CICLOFACTURACIONPDV
											 AND GLOBALBILLING.CODMAESTROFACTURACIONTIRILLA = MFT.ID_MAESTROFACTURACIONTIRILLA)
			LEFT OUTER JOIN WSXML_SFG.AGRUPACIONPUNTODEVENTA AGR ON (GLOBALBILLING.CODAGRUPACIONPUNTODEVENTA = AGR.ID_AGRUPACIONPUNTODEVENTA)
			WHERE   RED.CODCANALNEGOCIO = 1;
		
	END TRY
	BEGIN CATCH
		DECLARE @l_TIPOINFORMATIVO TINYINT, @l_TIPOERROR TINYINT, @l_TIPOADVERTENCIA TINYINT, @l_TIPOCUALQUIERA TINYINT, @l_PROCESONOTIFICACION TINYINT, @l_ESTADOABIERTA TINYINT, @l_ESTADOCERRADA TINYINT 
		EXEC WSXML_SFG.SFGALERTA_CONSTANT @l_TIPOINFORMATIVO OUT, @l_TIPOERROR OUT, @l_TIPOADVERTENCIA OUT, @l_TIPOCUALQUIERA OUT, @l_PROCESONOTIFICACION OUT, @l_ESTADOABIERTA OUT, @l_ESTADOCERRADA OUT 
		SET @msg = 'No se pudo obtener la informaci?n de Deposit Slips: ' + isnull(ERROR_MESSAGE(), '');
		EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @l_TIPOADVERTENCIA, 'GENERACIONXMLUNIFICADA', @msg, 1
	END CATCH
  END;
GO


  -- Lista de items general para cadenas
IF OBJECT_ID('WSXML_SFG.SFGREPORTESTERMINAL_GetDepositSlipItemListForChain', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREPORTESTERMINAL_GetDepositSlipItemListForChain;
GO
CREATE     PROCEDURE WSXML_SFG.SFGREPORTESTERMINAL_GetDepositSlipItemListForChain(@p_SECUENCIACICLO NUMERIC(22,0)) AS
 BEGIN
	SET NOCOUNT ON;
    -- Identificadores de Ciclo
    DECLARE @cCODCICLOFACTURACIONPDV NUMERIC(22,0);
    DECLARE @cFECHAULTIMAEJECUCION   DATETIME;
    -- Identificadores de Impuestos
    DECLARE @xINSTALL  NUMERIC(22,0) = 5;   -- Linea de negocio Instalaciones
    DECLARE @xWITHDRW  NUMERIC(22,0) = 4;
    DECLARE @xBILLPAY  NUMERIC(22,0) = 3;   -- Linea de negocio Bill Payment
    DECLARE @xPREPAID  NUMERIC(22,0) = 2;   -- Linea de negocio Pines y Recargas
    DECLARE @xLOTTERY  NUMERIC(22,0) = 1;   -- Linea de negocio Juegos
    DECLARE @xTAXRENTA NUMERIC(22,0) = 1;  -- Retencion Tributaria RENTA
    DECLARE @xTAXICA   NUMERIC(22,0) = 2;  -- Retencion Tributaria ICA
    DECLARE @xTAXIVA   NUMERIC(22,0) = 3;  -- Retencion Tributaria IVA
    DECLARE @xTAXCREE  NUMERIC(22,0) = 4;  -- Retencion Tributaria CREE
    DECLARE @xPRODTX   NUMERIC(22,0) = 1;  -- Impuesto IVA
    -- Codigos de Cuentas
    DECLARE @vAccountGTECH VARCHAR(4000)    /* Use -meta option PARAMETRO.VALOR%TYPE */      ;
    DECLARE @vAccountFiducia VARCHAR(4000)  /* Use -meta option PARAMETRO.VALOR%TYPE */      ;
    DECLARE @vBarcodeIGT VARCHAR(4000)    /* Use -meta option PARAMETRO.VALOR%TYPE */      ;
    DECLARE @vBarcodeFiducia VARCHAR(4000)  /* Use -meta option PARAMETRO.VALOR%TYPE */      ;
    DECLARE @vShortBarcodeIGT VARCHAR(4000)    /* Use -meta option PARAMETRO.VALOR%TYPE */   ;
    DECLARE @vShortBarcodeFiducia VARCHAR(4000)  /* Use -meta option PARAMETRO.VALOR%TYPE */ ;
    DECLARE @msg VARCHAR(2000);
   
  
  BEGIN TRY
    EXEC WSXML_SFG.SFGREPORTESTERMINAL_ExpectedCycleID @p_SECUENCIACICLO, @cCODCICLOFACTURACIONPDV, @cFECHAULTIMAEJECUCION OUT
    -- Default Barcodes. Override with unified
    EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'AccountNumberGTECH'   , @vAccountGTECH   OUT
    EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'AccountNumberFiducia' , @vAccountFiducia OUT
    EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'BarcodeGTECH'         , @vBarcodeIGT   OUT
    EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'BarcodeFiducia'       , @vBarcodeFiducia OUT
    -- 23/03/2017 Nuevo Baloto
    EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'ShortBarcodeIGT'      , @vShortBarcodeIGT     OUT
    EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'ShortBarcodeFiducia'  , @vShortBarcodeFiducia OUT
    --
	
      SELECT DISTINCT /* Informacion Base */
             @cFECHAULTIMAEJECUCION            AS LASTBILLINGDATE             ,
             CFP.FECHAEJECUCION               AS BILLINGDATE                 ,
             AGR.CODIGOAGRUPACIONGTECH        AS CHAINNUMBER                 ,
             REFERENCIAGTECH                  AS REFERENCENUMBER             ,
             /* Informacion de Referencia */
             @vAccountGTECH                    AS GTECHBANKACCOUNTNUMBER,
             @vAccountFiducia                  AS FIDUCIABANKACCOUNTNUMBER,
             -- EPINEDA 23/03/2017 Obtener codigo de barras a imprimir dependiendo del tipo de terminal
             (CASE WHEN TER.USACODIGODEBARRASCORTO = 0 THEN @vBarcodeIGT     ELSE @vShortBarcodeIGT     END ) AS  GTECHBARCODE      ,
             --
             (CASE WHEN TER.USACODIGODEBARRASCORTO = 0 THEN @vBarcodeFiducia ELSE @vShortBarcodeFiducia END ) AS  FIDUCIABARCODE    ,
             /* Valores */
             ROUND(ISNULL(SALDOANTERIORGTECHx1, 0), 0)      AS GPREVIOUSBALANCELOTTERY,
             ROUND(ISNULL(SALDOANTERIORGTECHx2, 0), 0)      AS GPREVIOUSBALANCEPREPAID,
             ROUND(ISNULL(SALDOANTERIORGTECHx3, 0), 0)      AS GPREVIOUSBALANCEBILLPAY,
             ROUND(ISNULL(SALDOANTERIORGTECHx4, 0), 0)      AS GPREVIOUSBALANCEWITHDRW,
             ROUND(ISNULL(SALDOANTERIORGTECHx5, 0), 0)      AS GPREVIOUSBALANCEINSTALL,
             ROUND(ISNULL(SALDOANTERIORGTECH, 0), 0)        AS GPREVIOUSBALANCETOTAL,
             ROUND(ISNULL(SALDOANTERIORFIDUCIAx1, 0), 0)    AS FPREVIOUSBALANCELOTTERY,
             ROUND(ISNULL(SALDOANTERIORFIDUCIA, 0), 0)      AS FPREVIOUSBALANCETOTAL,
             ROUND(ISNULL(SALDOANTERIORGTECH, 0), 0) +
             ROUND(ISNULL(SALDOANTERIORFIDUCIA, 0), 0)      AS PREVIOUSBALANCETOTAL,

             ROUND(ISNULL(FACTURACIONGTECHx1, 0), 0)        AS GTOTALBILLINGLOTTERY,
             ROUND(ISNULL(FACTURACIONGTECHx2, 0), 0)        AS GTOTALBILLINGPREPAID,
             ROUND(ISNULL(FACTURACIONGTECHx3, 0), 0)        AS GTOTALBILLINGBILLPAY,
             ROUND(ISNULL(FACTURACIONGTECHx4, 0), 0)        AS GTOTALBILLINGWITHDRW,
             ROUND(ISNULL(FACTURACIONGTECHx5, 0), 0)        AS GTOTALBILLINGINSTALL,
             ROUND(ISNULL(FACTURACIONGTECH, 0), 0)          AS GTOTALBILLINGTOTAL,
             ROUND(ISNULL(FACTURACIONFIDUCIAx1, 0), 0)      AS FTOTALBILLINGLOTTERY,
             ROUND(ISNULL(FACTURACIONFIDUCIA, 0), 0)        AS FTOTALBILLINGTOTAL,
             ROUND(ISNULL(FACTURACIONGTECH, 0), 0) +
             ROUND(ISNULL(FACTURACIONFIDUCIA, 0), 0)        AS TOTALBILLINGTOTAL,

             ROUND(ISNULL(NUEVOSALDOGTECHx1, 0), 0)         AS GCURRENTBALANCELOTTERY,
             ROUND(ISNULL(NUEVOSALDOGTECHx2, 0), 0)         AS GCURRENTBALANCEPREPAID,
             ROUND(ISNULL(NUEVOSALDOGTECHx3, 0), 0)         AS GCURRENTBALANCEBILLPAY,
             ROUND(ISNULL(NUEVOSALDOGTECHx4, 0), 0)         AS GCURRENTBALANCEWITHDRW,
             ROUND(ISNULL(NUEVOSALDOGTECHx5, 0), 0)         AS GCURRENTBALANCEINSTALL,
             ROUND(ISNULL(NUEVOSALDOGTECH, 0), 0)           AS GCURRENTBALANCETOTAL,
             ROUND(ISNULL(NUEVOSALDOFIDUCIAx1, 0), 0)       AS FCURRENTBALANCELOTTERY,
             ROUND(ISNULL(NUEVOSALDOFIDUCIA, 0), 0)         AS FCURRENTBALANCETOTAL,
             ROUND(ISNULL(NUEVOSALDOGTECH, 0), 0) +
             ROUND(ISNULL(NUEVOSALDOFIDUCIA, 0), 0)         AS CURRENTBALANCETOTAL,

             ROUND(ISNULL(CANTIDADVENTA, 0), 0)             AS SALESQUANTITY,
             ROUND(ISNULL(VALORVENTA, 0), 0)                AS SALESAMOUNT,
             ROUND(ISNULL(CANTIDADANULACION, 0), 0)         AS ANNULMENTQUANTITY,
             ROUND(ISNULL(VALORANULACION, 0), 0)            AS ANNULMENTAMOUNT,
             ROUND(ISNULL(CANTIDADGRATUITO, 0), 0)          AS FREETKQUANTITY,
             ROUND(ISNULL(VALORGRATUITO, 0), 0)             AS FREETKAMOUNT,
             ROUND(ISNULL(CANTIDADPREMIOPAGO, 0), 0)        AS AWARDPAIDQUANTITY,
             ROUND(ISNULL(VALORPREMIOPAGO, 0), 0)           AS AWARDPAIDAMOUNT,
             ROUND(ISNULL(RETENCIONPREMIOSPAGADOS, 0), 0)   AS AWARDTAXDISCOUNT,

             ROUND(ISNULL(IMPVALORx1, 0), 0)                AS PRODUCTTAXIVA,
             ROUND(ISNULL(VALORVENTABRUTA, 0), 0)           AS GROSSSALES,
             ROUND(ISNULL(VALORCOMISION, 0), 0)             AS GROSSCOMMISSION,
             ROUND(ISNULL(IVACOMISION, 0), 0)               AS VATCOMMISSION,

             ROUND(ISNULL(RETVALOR_PRDx1, 0), 0)                AS TAXRENTA_PRD,
             ROUND(ISNULL(RETVALOR_PRDx2, 0), 0)                AS TAXICA_PRD,
             ROUND(ISNULL(RETVALOR_PRDx3, 0), 0)                AS TAXIVA_PRD,
             ROUND(ISNULL(RETVALOR_PRDx4, 0), 0)                AS TAXCREE_PRD,

             ROUND(ISNULL(RETVALORx1, 0), 0) +
             ROUND(ISNULL(RETVALORxUVT, 0), 0)              AS TAXRENTA,
             ROUND(ISNULL(RETVALORx2, 0), 0)                AS TAXICA,
             ROUND(ISNULL(RETVALORx3, 0), 0)                AS TAXIVA,
             ROUND(ISNULL(RETVALORx4, 0), 0)                AS TAXCREE,

             ROUND(ISNULL(VALORCOMISIONNETA, 0), 0)         AS FINALCOMMISSION,

             ROUND(ISNULL(FACTURACIONGTECH, 0), 0)          AS GCURRENTWEEK,
             ROUND(ISNULL(FACTURACIONGTECH105, 0), 0)       AS GCURRENTWEEK105,
             ROUND(ISNULL(FACTURACIONGTECH161, 0), 0)       AS GCURRENTWEEK161,
             ROUND(ISNULL(FACTURACIONFIDUCIA, 0), 0)        AS FCURRENTWEEK,
             ROUND(ISNULL(FACTURACIONGTECH, 0), 0) +
             ROUND(ISNULL(FACTURACIONFIDUCIA, 0), 0)        AS TOTALCURRENTWEEK,

             ROUND(ISNULL(NUEVOSALDOGTECH, 0), 0)           AS GCURRENTBALANCE,
             ROUND(ISNULL(NUEVOSALDOFIDUCIA, 0), 0)         AS FCURRENTBALANCE,
             0                                           AS NUMEROPAGOS,
             0                                           AS PAGOSAPLICADOS,

             /* Informaci?n de control */
             AGR.ID_AGRUPACIONPUNTODEVENTA        AS ID_AGRUPACIONPUNTODEVENTA ,
             GLOBALBILLING.CODTIPOPUNTODEVENTA    AS CODTIPOPUNTODEVENTA       ,
             GLOBALBILLING.CODPUNTODEVENTACABEZA  AS CODPUNTODEVENTACABEZA     ,
              -- EPINEDA 22/03/2017 NUEVO BALOTO. Fechas l?mites de pago tanto de IGT como de Fiducia
              GLOBALBILLING.FECHALIMITEPAGOGTECH   AS IGTDUEDATE                     ,
              GLOBALBILLING.FECHALIMITEPAGOFIDUCIA AS FDUEDATE

      FROM WSXML_SFG.AGRUPACIONPUNTODEVENTA AGR
      LEFT OUTER JOIN WSXML_SFG.PUNTODEVENTA PDV ON AGR.ID_AGRUPACIONPUNTODEVENTA = PDV.CODAGRUPACIONPUNTODEVENTA 
      LEFT OUTER JOIN WSXML_SFG.TIPOTERMINAL TER ON TER.ID_TIPOTERMINAL           = PDV.CODTIPOTERMINAL
      INNER JOIN WSXML_SFG.CICLOFACTURACIONPDV CFP ON (CFP.ID_CICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV)
      /* Facturacion Globalizada */
      LEFT OUTER JOIN (SELECT /*+ index(MAESTROFACTURACIONPDV MAESTROFACT_CICLOTIRILLA_IX) */
                              MFC.CODCICLOFACTURACIONPDV            AS CODCICLOFACTURACIONPDV,
                              MFC.CODAGRUPACIONPUNTODEVENTA         AS CODAGRUPACIONPUNTODEVENTA,
                              MIN(MFC.CODPUNTODEVENTA)              AS CODPUNTODEVENTACABEZA,
                              MIN(MFC.CODTIPOPUNTODEVENTA)          AS CODTIPOPUNTODEVENTA,
                              --EPINEDA 22/03/2017 NUEVO BALOTO
                              MIN(MFC.FECHALIMITEPAGOGTECH)         AS FECHALIMITEPAGOGTECH    ,
                              MIN(MFC.FECHALIMITEPAGOFIDUCIA)       AS FECHALIMITEPAGOFIDUCIA  ,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xLOTTERY THEN ISNULL(MFP.SALDOANTERIORENCONTRAGTECH - MFP.SALDOANTERIORAFAVORGTECH, 0) ELSE 0 END)     AS SALDOANTERIORGTECHx1,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xPREPAID THEN ISNULL(MFP.SALDOANTERIORENCONTRAGTECH - MFP.SALDOANTERIORAFAVORGTECH, 0) ELSE 0 END)     AS SALDOANTERIORGTECHx2,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xBILLPAY THEN ISNULL(MFP.SALDOANTERIORENCONTRAGTECH - MFP.SALDOANTERIORAFAVORGTECH, 0) ELSE 0 END)     AS SALDOANTERIORGTECHx3,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xWITHDRW THEN ISNULL(MFP.SALDOANTERIORENCONTRAGTECH - MFP.SALDOANTERIORAFAVORGTECH, 0) ELSE 0 END)     AS SALDOANTERIORGTECHx4,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xINSTALL THEN ISNULL(MFP.SALDOANTERIORENCONTRAGTECH - MFP.SALDOANTERIORAFAVORGTECH, 0) ELSE 0 END)     AS SALDOANTERIORGTECHx5,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xLOTTERY THEN ISNULL(MFP.SALDOANTERIORENCONTRAFIDUCIA - MFP.SALDOANTERIORAFAVORFIDUCIA, 0) ELSE 0 END) AS SALDOANTERIORFIDUCIAx1,

                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xLOTTERY THEN ISNULL(DFP.TOTALFACTURACIONGTECH, 0) ELSE 0 END)     AS FACTURACIONGTECHx1,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xPREPAID THEN ISNULL(DFP.TOTALFACTURACIONGTECH, 0) ELSE 0 END)     AS FACTURACIONGTECHx2,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xBILLPAY THEN ISNULL(DFP.TOTALFACTURACIONGTECH, 0) ELSE 0 END)     AS FACTURACIONGTECHx3,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xWITHDRW THEN ISNULL(DFP.TOTALFACTURACIONGTECH, 0) ELSE 0 END)     AS FACTURACIONGTECHx4,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xINSTALL THEN ISNULL(DFP.TOTALFACTURACIONGTECH, 0) - ISNULL(RET_PRD.VALORRETENCION_PRDx1, 0) - ISNULL(RET_PRD.VALORRETENCION_PRDx2, 0) - ISNULL(RET_PRD.VALORRETENCION_PRDx3, 0) ELSE 0 END)     AS FACTURACIONGTECHx5,
                              --SUM(CASE WHEN MFP.CODLINEADENEGOCIO = xINSTALL THEN NVL(DFP.VALORVENTANETA, 0) ELSE 0 END)     AS FACTURACIONGTECHx5,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xLOTTERY THEN ISNULL(DFP.TOTALFACTURACIONFIDUCIA, 0) ELSE 0 END)   AS FACTURACIONFIDUCIAx1,

                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xLOTTERY THEN ISNULL(MFP.NUEVOSALDOENCONTRAGTECH - MFP.NUEVOSALDOAFAVORGTECH, 0) ELSE 0 END)     AS NUEVOSALDOGTECHx1,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xPREPAID THEN ISNULL(MFP.NUEVOSALDOENCONTRAGTECH - MFP.NUEVOSALDOAFAVORGTECH, 0) ELSE 0 END)     AS NUEVOSALDOGTECHx2,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xBILLPAY THEN ISNULL(MFP.NUEVOSALDOENCONTRAGTECH - MFP.NUEVOSALDOAFAVORGTECH, 0) ELSE 0 END)     AS NUEVOSALDOGTECHx3,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xWITHDRW THEN ISNULL(MFP.NUEVOSALDOENCONTRAGTECH - MFP.NUEVOSALDOAFAVORGTECH, 0) ELSE 0 END)     AS NUEVOSALDOGTECHx4,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xINSTALL THEN ISNULL(MFP.NUEVOSALDOENCONTRAGTECH - MFP.NUEVOSALDOAFAVORGTECH, 0) ELSE 0 END)     AS NUEVOSALDOGTECHx5,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xLOTTERY THEN ISNULL(MFP.NUEVOSALDOENCONTRAFIDUCIA - MFP.NUEVOSALDOAFAVORFIDUCIA, 0) ELSE 0 END) AS NUEVOSALDOFIDUCIAx1,

                              --SUM(NVL(DFP.TOTALFACTURACIONGTECH, 0))                                         AS FACTURACIONGTECH,
                              SUM(ISNULL(DFP.TOTALFACTURACIONGTECH, 0)- ISNULL(RET_PRD.VALORRETENCION_PRDx1, 0) - ISNULL(RET_PRD.VALORRETENCION_PRDx2, 0) - ISNULL(RET_PRD.VALORRETENCION_PRDx3,0))                                         AS FACTURACIONGTECH,
                              SUM(ISNULL(MFP.SALDOANTERIORENCONTRAGTECH - MFP.SALDOANTERIORAFAVORGTECH, 0))     AS SALDOANTERIORGTECH,
                              SUM(ISNULL((ISNULL(MFP.NUEVOSALDOENCONTRAGTECH,0)- ISNULL(RET_PRD.VALORRETENCION_PRDx1, 0) - ISNULL(RET_PRD.VALORRETENCION_PRDx2, 0) - ISNULL(RET_PRD.VALORRETENCION_PRDx3,0)) - MFP.NUEVOSALDOAFAVORGTECH, 0))           AS NUEVOSALDOGTECH,
                              --SUM(NVL(MFP.NUEVOSALDOENCONTRAGTECH - MFP.NUEVOSALDOAFAVORGTECH, 0))           AS NUEVOSALDOGTECH,
                              MIN(MFC.REFERENCIAGTECH)                                                       AS REFERENCIAGTECH,
                              SUM(ISNULL(DFP.TOTALFACTURACIONFIDUCIA, 0))                                       AS FACTURACIONFIDUCIA,
                              SUM(ISNULL(MFP.SALDOANTERIORENCONTRAFIDUCIA - MFP.SALDOANTERIORAFAVORFIDUCIA, 0)) AS SALDOANTERIORFIDUCIA,
                              SUM(ISNULL(MFP.NUEVOSALDOENCONTRAFIDUCIA - MFP.NUEVOSALDOAFAVORFIDUCIA, 0))       AS NUEVOSALDOFIDUCIA,
                              MIN(MFC.REFERENCIAFIDUCIA)                                                     AS REFERENCIAFIDUCIA,

                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = 1
                                       THEN ISNULL(DFP.TOTALFACTURACIONGTECH, 0) ELSE 0 END)                    AS FACTURACIONGTECH105,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO IN (2, 3, 4)
                                       THEN ISNULL(DFP.TOTALFACTURACIONGTECH, 0) ELSE 0 END)                    AS FACTURACIONGTECH161,

                              SUM(ISNULL(DFP.CANTIDADVENTA, 0))           AS CANTIDADVENTA,
                              SUM(ISNULL(DFP.VALORVENTA, 0))              AS VALORVENTA,
                              SUM(ISNULL(DFP.CANTIDADANULACION, 0))       AS CANTIDADANULACION,
                              SUM(ISNULL(DFP.VALORANULACION, 0))          AS VALORANULACION,
                              SUM(ISNULL(DFP.CANTIDADGRATUITO, 0))        AS CANTIDADGRATUITO,
                              SUM(ISNULL(DFP.VALORGRATUITO, 0))           AS VALORGRATUITO,
                              SUM(ISNULL(DFP.CANTIDADPREMIOPAGO, 0))      AS CANTIDADPREMIOPAGO,
                              SUM(ISNULL(DFP.VALORPREMIOPAGO, 0))         AS VALORPREMIOPAGO,
                              SUM(ISNULL(DFP.RETENCIONPREMIOSPAGADOS, 0)) AS RETENCIONPREMIOSPAGADOS,

                              SUM(ISNULL(DFP.VALORVENTANETA, 0))              AS VALORVENTANETA,

                              SUM(ISNULL(IMP.VALORIMPUESTOx1, 0))         AS IMPVALORx1,
                              SUM(ISNULL(DFP.VALORVENTABRUTA, 0))         AS VALORVENTABRUTA,
                              SUM(ISNULL(DFP.VALORCOMISION, 0))           AS VALORCOMISION,
                              SUM(ISNULL(DFP.IVACOMISION, 0))             AS IVACOMISION,

                              SUM(ISNULL(RET_PRD.VALORRETENCION_PRDx1, 0))        AS RETVALOR_PRDx1,
                              SUM(ISNULL(RET_PRD.VALORRETENCION_PRDx2, 0))        AS RETVALOR_PRDx2,
                              SUM(ISNULL(RET_PRD.VALORRETENCION_PRDx3, 0))        AS RETVALOR_PRDx3,
                              SUM(ISNULL(RET_PRD.VALORRETENCION_PRDx4, 0))        AS RETVALOR_PRDx4,


                              SUM(ISNULL(RET.VALORRETENCIONx1, 0))        AS RETVALORx1,
                              SUM(ISNULL(RET.VALORRETENCIONx2, 0))        AS RETVALORx2,
                              SUM(ISNULL(RET.VALORRETENCIONx3, 0))        AS RETVALORx3,
                              SUM(ISNULL(RET.VALORRETENCIONx4, 0))        AS RETVALORx4,

                              SUM(ISNULL(RUV.VALORRETENCIONUVT, 0))       AS RETVALORxUVT,
                              SUM(ISNULL(DFP.VALORCOMISIONNETA, 0))       AS VALORCOMISIONNETA

                       FROM WSXML_SFG.MAESTROFACTURACIONPDV MFP
                       INNER JOIN WSXML_SFG.MAESTROFACTURACIONCOMPCONSIG MFC ON (MFC.ID_MAESTROFACTCOMPCONSIG = MFP.CODMAESTROFACTURACIONCOMPCONSI)
                       -- Details of Billing
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONPDV XMLGENERACION_DFP_IX) */
                                               DFP.CODMAESTROFACTURACIONPDV,
                                               SUM(DFP.CANTIDADVENTA)           AS CANTIDADVENTA,
                                               SUM(DFP.VALORVENTA)              AS VALORVENTA,
                                               SUM(DFP.CANTIDADANULACION)       AS CANTIDADANULACION,
                                               SUM(DFP.VALORANULACION)          AS VALORANULACION,
                                               SUM(DFP.CANTIDADGRATUITO)        AS CANTIDADGRATUITO,
                                               SUM(DFP.VALORGRATUITO)           AS VALORGRATUITO,
                                               SUM(DFP.CANTIDADPREMIOPAGO)      AS CANTIDADPREMIOPAGO,
                                               SUM(DFP.VALORPREMIOPAGO)         AS VALORPREMIOPAGO,
                                               SUM(DFP.RETENCIONPREMIOSPAGADOS) AS RETENCIONPREMIOSPAGADOS,

                                               SUM(DFP.VALORVENTANETA)              AS VALORVENTANETA,

                                               SUM(DFP.VALORVENTABRUTA)         AS VALORVENTABRUTA,
                                               SUM(DFP.VALORCOMISION)           AS VALORCOMISION,
                                               SUM(DFP.VALORCOMISIONBRUTA)      AS VALORCOMISIONBRUTA,
                                               SUM(DFP.VALORCOMISIONNETA)       AS VALORCOMISIONNETA,
                                               SUM(DFP.IVACOMISION)             AS IVACOMISION,

                                               SUM(DFP.NUEVOSALDOENCONTRAGTECH - DFP.NUEVOSALDOAFAVORGTECH) AS TOTALFACTURACIONGTECH,
                                               SUM(DFP.NUEVOSALDOENCONTRAFIDUCIA - DFP.NUEVOSALDOAFAVORFIDUCIA) AS TOTALFACTURACIONFIDUCIA

                                        FROM WSXML_SFG.DETALLEFACTURACIONPDV DFP
                                        GROUP BY DFP.CODMAESTROFACTURACIONPDV) DFP ON (DFP.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV)
                       -- Product Taxes
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONIMPUESTO GLOBALBILL_DETALLEFACTIMP_IX) */
                                               CODMAESTROFACTURACIONPDV,
                                               SUM(CASE WHEN CODIMPUESTO = @xPRODTX THEN VALORIMPUESTO ELSE 0 END) AS VALORIMPUESTOx1
                                        FROM WSXML_SFG.DETALLEFACTURACIONIMPUESTO
                                        GROUP BY CODMAESTROFACTURACIONPDV) IMP ON (IMP.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV)
                       -- Commission Taxes
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONRETENCION GLOBALBILL_DETALLEFACTRET_IX) */
                                               CODMAESTROFACTURACIONPDV,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXRENTA THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx1,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXICA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx2,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXIVA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx3,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXCREE  THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx4
                                        FROM WSXML_SFG.DETALLEFACTURACIONRETENCION
                                        GROUP BY CODMAESTROFACTURACIONPDV) RET ON (RET.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV)
                        -- Commission Taxes over product
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONRETDIFE GLOBALBILL_DETALLEFACTRTDF_IX) */
                                               CODMAESTROFACTURACIONPDV,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXRENTA THEN VALORRETENCION ELSE 0 END) AS VALORRETENCION_PRDx1,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXICA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCION_PRDx2,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXIVA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCION_PRDx3,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXCREE  THEN VALORRETENCION ELSE 0 END) AS VALORRETENCION_PRDx4
                                        FROM WSXML_SFG.DETALLEFACTURACIONRETDIFE
                                        GROUP BY CODMAESTROFACTURACIONPDV) RET_PRD ON (RET_PRD.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV)
                       -- Special Taxes over Commission
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONRETUVT GLOBALBILL_DETALLEFACTUVT_IX) */
                                               CODMAESTROFACTURACIONPDV, SUM(VALORRETENCION) AS VALORRETENCIONUVT
                                        FROM WSXML_SFG.DETALLEFACTURACIONRETUVT
                                        GROUP BY CODMAESTROFACTURACIONPDV) RUV ON (RUV.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV)
                       WHERE MFP.CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV
                       GROUP BY MFC.CODCICLOFACTURACIONPDV, MFC.CODAGRUPACIONPUNTODEVENTA
                       ) GLOBALBILLING ON (GLOBALBILLING.CODCICLOFACTURACIONPDV = CFP.ID_CICLOFACTURACIONPDV
                                       AND GLOBALBILLING.CODAGRUPACIONPUNTODEVENTA = AGR.ID_AGRUPACIONPUNTODEVENTA);
		
	END TRY
	BEGIN CATCH
		DECLARE @l_TIPOINFORMATIVO TINYINT, @l_TIPOERROR TINYINT, @l_TIPOADVERTENCIA TINYINT, @l_TIPOCUALQUIERA TINYINT, @l_PROCESONOTIFICACION TINYINT, @l_ESTADOABIERTA TINYINT, @l_ESTADOCERRADA TINYINT 
		EXEC WSXML_SFG.SFGALERTA_CONSTANT @l_TIPOINFORMATIVO OUT, @l_TIPOERROR OUT, @l_TIPOADVERTENCIA OUT, @l_TIPOCUALQUIERA OUT, @l_PROCESONOTIFICACION OUT, @l_ESTADOABIERTA OUT, @l_ESTADOCERRADA OUT 
		
		SET @msg = 'No se pudo obtener la informaci?n de Deposit Slips: ' + isnull(ERROR_MESSAGE(), '');
		EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @l_TIPOADVERTENCIA, 'GENERACIONXMLUNIFICADA', @msg, 1
	END CATCH
  END;
GO


  -- Lista de informacion de resumen de ventas para puntos de ventas
  IF OBJECT_ID('WSXML_SFG.SFGREPORTESTERMINAL_GetSalesSummaryItmListForAgent', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREPORTESTERMINAL_GetSalesSummaryItmListForAgent;
GO
CREATE     PROCEDURE WSXML_SFG.SFGREPORTESTERMINAL_GetSalesSummaryItmListForAgent(@p_SECUENCIACICLO NUMERIC(22,0), @p_PAGNUM NUMERIC(22,0)) AS
 BEGIN
	SET NOCOUNT ON;
    DECLARE @cCODCICLOFACTURACIONPDV NUMERIC(22,0);
    DECLARE @cFECHAULTIMAEJECUCION   DATETIME;
    -- Paginacion
    DECLARE @xLOWERLIMIT NUMERIC(22,0);
    DECLARE @xUPPERLIMIT NUMERIC(22,0);
    DECLARE @msg VARCHAR(2000);
   
  
  BEGIN TRY
    EXEC WSXML_SFG.SFGREPORTESTERMINAL_ExpectedCycleID @p_SECUENCIACICLO, @cCODCICLOFACTURACIONPDV, @cFECHAULTIMAEJECUCION OUT
	
    EXEC WSXML_SFG.SFGREPORTESTERMINAL_GetPagingParameters @p_PAGNUM, @xLOWERLIMIT OUT, @xUPPERLIMIT OUT
    /* Group by both TIPOAGRUPACION ------------------------------------------- */
	
      SELECT /*+
               PUSH_PRED(IMP)
               PUSH_PRED(RET)
               PUSH_PRED(UVT)
             */
             MFP.CODPUNTODEVENTA       AS ID_PUNTODEVENTA,
             SRV.ID_SERVICIO           AS ID_SERVICIO,
             TPR.ID_TIPOPRODUCTO       AS ID_TIPOPRODUCTO,
             AGP.ID_AGRUPACIONPRODUCTO AS ID_AGRUPACIONPRODUCTO,
             /* Informacion Base */
             SRV.NOMSERVICIO,
             TPR.NOMTIPOPRODUCTO,
             AGP.NOMAGRUPACIONPRODUCTO,
             /* Valores */
             ROUND(SUM(DFP.CANTIDADVENTA), 0)            AS QUANTITY,
             ROUND(SUM(DFP.VALORVENTA), 0)               AS AMOUNT,
             ROUND(SUM(DFP.CANTIDADANULACION), 0)        AS ANNULLEDQUANTITY,
             ROUND(SUM(DFP.VALORANULACION), 0)           AS ANNULLEDAMOUNT,
             ROUND(SUM(ISNULL(IMP.VALORIMPUESTOx1, 0)), 0)  AS TAXIVA,
             ROUND(SUM(ISNULL(DFP.VALORDESCUENTOS, 0)), 0)  AS DISCOUNTS,
             ROUND(SUM(DFP.VALORVENTABRUTA), 0)          AS GROSSSALES,
             ROUND(SUM(DFP.CANTIDADPREMIOPAGO), 0)       AS AWARDPAIDQUANTITY,
             ROUND(SUM(DFP.VALORPREMIOPAGO), 0)          AS AWARDPAIDAMOUNT,
             ROUND(SUM(DFP.RETENCIONPREMIOSPAGADOS), 0)  AS AWARDPAIDTAXDISCOUNTING,
             ROUND(SUM(DFP.VALORCOMISION), 0)            AS COMMISSION,
             ROUND(SUM(DFP.VALORCOMISIONBRUTA -
                       DFP.VALORCOMISION), 0)            AS VATCMS,

             ROUND(SUM(ISNULL(RET_PRD.VALORRETENCION_PRDx1, 0)), 0) AS RETRNT_PRD,
             ROUND(SUM(ISNULL(RET_PRD.VALORRETENCION_PRDx2, 0)), 0) AS RETICA_PRD,
             ROUND(SUM(ISNULL(RET_PRD.VALORRETENCION_PRDx3, 0)), 0) AS RETIVA_PRD,
             ROUND(SUM(ISNULL(RET_PRD.VALORRETENCION_PRDx4, 0)), 0) AS RETCREE_PRD,


             ROUND(SUM(ISNULL(RET.VALORRETENCIONx1, 0) +
                       ISNULL(UVT.VALORRETUVTx1, 0)), 0)    AS RETRNT,
             ROUND(SUM(ISNULL(RET.VALORRETENCIONx2, 0)), 0) AS RETICA,
             ROUND(SUM(ISNULL(RET.VALORRETENCIONx3, 0)), 0) AS RETIVA,
             ROUND(SUM(ISNULL(RET.VALORRETENCIONx4, 0)), 0) AS RETCREE,
             ROUND(SUM(DFP.VALORCOMISIONNETA), 0)        AS FINALCOMMISSION,
             -- Cummulative
             ROUND(SUM(DFP.CANTIDADVENTA -
                       DFP.CANTIDADANULACION -
                       DFP.CANTIDADPREMIOPAGO), 0)       AS FINALQUANTITY,
             ROUND(SUM(DFP.VALORVENTA -
                       DFP.VALORANULACION -
                       DFP.VALORPREMIOPAGO), 0)          AS FINALAMOUNT
      FROM (SELECT CODPUNTODEVENTA AS AGENT
            FROM (SELECT CODPUNTODEVENTA, ROW_NUMBER() OVER(ORDER BY CAST(CODIGOGTECHPUNTODEVENTA AS INT)) AS row_counter
                  FROM (SELECT CODPUNTODEVENTA, CODIGOGTECHPUNTODEVENTA FROM WSXML_SFG.MAESTROFACTURACIONTIRILLA
                        INNER JOIN WSXML_SFG.PUNTODEVENTA ON (CODPUNTODEVENTA = ID_PUNTODEVENTA)
                        WHERE CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV
                        ) s
				) s
            WHERE row_counter > @xLOWERLIMIT
              AND row_counter <= @xUPPERLIMIT) PAGED
      INNER JOIN WSXML_SFG.MAESTROFACTURACIONPDV MFP ON (MFP.CODCICLOFACTURACIONPDV   = @cCODCICLOFACTURACIONPDV
                                           AND MFP.CODPUNTODEVENTA          = PAGED.AGENT)
      INNER JOIN WSXML_SFG.DETALLEFACTURACIONPDV DFP ON (DFP.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV)
      INNER JOIN WSXML_SFG.PRODUCTO              PRD ON (DFP.CODPRODUCTO              = PRD.ID_PRODUCTO)
      INNER JOIN WSXML_SFG.AGRUPACIONPRODUCTO    AGP ON (PRD.CODAGRUPACIONPRODUCTO    = AGP.ID_AGRUPACIONPRODUCTO)
      INNER JOIN WSXML_SFG.TIPOPRODUCTO          TPR ON (AGP.CODTIPOPRODUCTO          = TPR.ID_TIPOPRODUCTO)
      INNER JOIN WSXML_SFG.LINEADENEGOCIO        LDN ON (TPR.CODLINEADENEGOCIO        = LDN.ID_LINEADENEGOCIO)
      INNER JOIN WSXML_SFG.SERVICIO              SRV ON (LDN.CODSERVICIO              = SRV.ID_SERVICIO)
      LEFT OUTER JOIN (SELECT CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV,
                              SUM(CASE WHEN CODIMPUESTO = 1 THEN VALORIMPUESTO ELSE 0 END) AS VALORIMPUESTOx1
                       FROM WSXML_SFG.DETALLEFACTURACIONIMPUESTO
                       GROUP BY CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV) IMP ON (IMP.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV
                                                                                        AND IMP.CODDETALLEFACTURACIONPDV = DFP.ID_DETALLEFACTURACIONPDV)
      LEFT OUTER JOIN (SELECT CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV,
                              SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 1 THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx1,
                              SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 2 THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx2,
                              SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 3 THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx3,
                              SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 4 THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx4
                       FROM WSXML_SFG.DETALLEFACTURACIONRETENCION
                       GROUP BY CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV) RET ON (RET.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV
                                                                                        AND RET.CODDETALLEFACTURACIONPDV = DFP.ID_DETALLEFACTURACIONPDV)

       -- Retencion Taxes over product
      LEFT OUTER JOIN (SELECT CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV,
                              SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 1 THEN VALORRETENCION ELSE 0 END) AS VALORRETENCION_PRDx1,
                              SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 2 THEN VALORRETENCION ELSE 0 END) AS VALORRETENCION_PRDx2,
                              SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 3 THEN VALORRETENCION ELSE 0 END) AS VALORRETENCION_PRDx3,
                              SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 3 THEN VALORRETENCION ELSE 0 END) AS VALORRETENCION_PRDx4
                       FROM WSXML_SFG.DETALLEFACTURACIONRETDIFE
                       GROUP BY CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV) RET_PRD ON (RET_PRD.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV
                                                                                        AND RET_PRD.CODDETALLEFACTURACIONPDV = DFP.ID_DETALLEFACTURACIONPDV)



      LEFT OUTER JOIN (SELECT CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV,
                              SUM(CASE WHEN CODRETENCIONUVT = 1 THEN VALORRETENCION ELSE 0 END) AS VALORRETUVTx1
                       FROM WSXML_SFG.DETALLEFACTURACIONRETUVT
                       GROUP BY CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV) UVT ON (UVT.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV
                                                                                        AND UVT.CODDETALLEFACTURACIONPDV = DFP.ID_DETALLEFACTURACIONPDV)
      GROUP BY MFP.CODPUNTODEVENTA,
               SRV.ID_SERVICIO, TPR.ID_TIPOPRODUCTO, AGP.ID_AGRUPACIONPRODUCTO,
               SRV.NOMSERVICIO, TPR.NOMTIPOPRODUCTO, AGP.NOMAGRUPACIONPRODUCTO,
               SRV.ORDEN
      ORDER BY MFP.CODPUNTODEVENTA,
               SRV.ORDEN,
               TPR.ID_TIPOPRODUCTO,
               AGP.NOMAGRUPACIONPRODUCTO,
               SUM(DFP.CANTIDADVENTA) DESC;
	
	END TRY
	BEGIN CATCH
  
		DECLARE @l_TIPOINFORMATIVO TINYINT, @l_TIPOERROR TINYINT, @l_TIPOADVERTENCIA TINYINT, @l_TIPOCUALQUIERA TINYINT, @l_PROCESONOTIFICACION TINYINT, @l_ESTADOABIERTA TINYINT, @l_ESTADOCERRADA TINYINT 
		EXEC WSXML_SFG.SFGALERTA_CONSTANT @l_TIPOINFORMATIVO OUT, @l_TIPOERROR OUT, @l_TIPOADVERTENCIA OUT, @l_TIPOCUALQUIERA OUT, @l_PROCESONOTIFICACION OUT, @l_ESTADOABIERTA OUT, @l_ESTADOCERRADA OUT 
		SET @msg = 'No se pudo obtener la informaci?n resumen para los reportes de puntos de venta: ' + isnull(ERROR_MESSAGE(), '');
		EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @l_TIPOADVERTENCIA, 'GENERACIONXMLUNIFICADA', @msg, 1
	END CATCH
  END;
GO


  -- Lista de informacion de resumen de ventas para cadenas
  IF OBJECT_ID('WSXML_SFG.SFGREPORTESTERMINAL_GetSalesSummaryItmListForChain', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREPORTESTERMINAL_GetSalesSummaryItmListForChain;
GO
CREATE     PROCEDURE WSXML_SFG.SFGREPORTESTERMINAL_GetSalesSummaryItmListForChain(@p_SECUENCIACICLO NUMERIC(22,0)) AS
 BEGIN
	SET NOCOUNT ON;
	DECLARE @cCODCICLOFACTURACIONPDV NUMERIC(22,0);
    DECLARE @cFECHAULTIMAEJECUCION   DATETIME;
    DECLARE @msg VARCHAR(2000);
   
	BEGIN TRY
    EXEC WSXML_SFG.SFGREPORTESTERMINAL_ExpectedCycleID @p_SECUENCIACICLO, @cCODCICLOFACTURACIONPDV, @cFECHAULTIMAEJECUCION OUT
    /* Group by both TIPOAGRUPACION --  Changed package body sfgsync_saldos  -- */
	
      SELECT /*+
               PUSH_PRED(IMP)
               PUSH_PRED(RET)
               PUSH_PRED(UVT)
             */
             MFC.CODAGRUPACIONPUNTODEVENTA AS ID_AGRUPACIONPUNTODEVENTA,
             SRV.ID_SERVICIO               AS ID_SERVICIO,
             TPR.ID_TIPOPRODUCTO           AS ID_TIPOPRODUCTO,
             AGP.ID_AGRUPACIONPRODUCTO     AS ID_AGRUPACIONPRODUCTO,
             /* Informacion Base */
             SRV.NOMSERVICIO,
             TPR.NOMTIPOPRODUCTO,
             AGP.NOMAGRUPACIONPRODUCTO,
             /* Valores */
             ROUND(SUM(DFP.CANTIDADVENTA), 0)            AS QUANTITY,
             ROUND(SUM(DFP.VALORVENTA), 0)               AS AMOUNT,
             ROUND(SUM(DFP.CANTIDADANULACION), 0)        AS ANNULLEDQUANTITY,
             ROUND(SUM(DFP.VALORANULACION), 0)           AS ANNULLEDAMOUNT,
             ROUND(SUM(ISNULL(IMP.VALORIMPUESTOx1, 0)), 0)  AS TAXIVA,
             ROUND(SUM(ISNULL(DFP.VALORDESCUENTOS, 0)), 0)  AS DISCOUNTS,
             ROUND(SUM(DFP.VALORVENTABRUTA), 0)          AS GROSSSALES,
             ROUND(SUM(DFP.CANTIDADPREMIOPAGO), 0)       AS AWARDPAIDQUANTITY,
             ROUND(SUM(DFP.VALORPREMIOPAGO), 0)          AS AWARDPAIDAMOUNT,
             ROUND(SUM(DFP.RETENCIONPREMIOSPAGADOS), 0)  AS AWARDPAIDTAXDISCOUNTING,
             ROUND(SUM(DFP.VALORCOMISION), 0)            AS COMMISSION,
             ROUND(SUM(DFP.VALORCOMISIONBRUTA -
                       DFP.VALORCOMISION), 0)            AS VATCMS,

             ROUND(SUM(ISNULL(RET_PRD.VALORRETENCION_PRDx1, 0)), 0) AS RETRNT_PRD,
             ROUND(SUM(ISNULL(RET_PRD.VALORRETENCION_PRDx2, 0)), 0) AS RETICA_PRD,
             ROUND(SUM(ISNULL(RET_PRD.VALORRETENCION_PRDx3, 0)), 0) AS RETIVA_PRD,
             ROUND(SUM(ISNULL(RET_PRD.VALORRETENCION_PRDx4, 0)), 0) AS RETCREE_PRD,

             ROUND(SUM(ISNULL(RET.VALORRETENCIONx1, 0) +
                       ISNULL(UVT.VALORRETUVTx1, 0)), 0)    AS RETRNT,
             ROUND(SUM(ISNULL(RET.VALORRETENCIONx2, 0)), 0) AS RETICA,
             ROUND(SUM(ISNULL(RET.VALORRETENCIONx3, 0)), 0) AS RETIVA,
             ROUND(SUM(ISNULL(RET.VALORRETENCIONx4, 0)), 0) AS RETCREE,
             ROUND(SUM(DFP.VALORCOMISIONNETA), 0)        AS FINALCOMMISSION,
             -- Cummulative
             ROUND(SUM(DFP.CANTIDADVENTA -
                       DFP.CANTIDADANULACION -
                       DFP.CANTIDADPREMIOPAGO), 0)       AS FINALQUANTITY,
             ROUND(SUM(DFP.VALORVENTA -
                       DFP.VALORANULACION -
                       DFP.VALORPREMIOPAGO), 0)          AS FINALAMOUNT
      FROM WSXML_SFG.MAESTROFACTURACIONCOMPCONSIG MFC
      INNER JOIN WSXML_SFG.MAESTROFACTURACIONPDV MFP ON (MFP.CODMAESTROFACTURACIONCOMPCONSI = MFC.ID_MAESTROFACTCOMPCONSIG)
      INNER JOIN WSXML_SFG.DETALLEFACTURACIONPDV DFP ON (DFP.CODMAESTROFACTURACIONPDV       = MFP.ID_MAESTROFACTURACIONPDV)
      INNER JOIN WSXML_SFG.PRODUCTO              PRD ON (DFP.CODPRODUCTO                    = PRD.ID_PRODUCTO)
      INNER JOIN WSXML_SFG.AGRUPACIONPRODUCTO    AGP ON (PRD.CODAGRUPACIONPRODUCTO          = AGP.ID_AGRUPACIONPRODUCTO)
      INNER JOIN WSXML_SFG.TIPOPRODUCTO          TPR ON (AGP.CODTIPOPRODUCTO                = TPR.ID_TIPOPRODUCTO)
      INNER JOIN WSXML_SFG.LINEADENEGOCIO        LDN ON (TPR.CODLINEADENEGOCIO              = LDN.ID_LINEADENEGOCIO)
      INNER JOIN WSXML_SFG.SERVICIO              SRV ON (LDN.CODSERVICIO                    = SRV.ID_SERVICIO)
      LEFT OUTER JOIN (SELECT CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV,
                              SUM(CASE WHEN CODIMPUESTO = 1 THEN VALORIMPUESTO ELSE 0 END) AS VALORIMPUESTOx1
                       FROM WSXML_SFG.DETALLEFACTURACIONIMPUESTO
                       GROUP BY CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV) IMP ON (IMP.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV
                                                                                        AND IMP.CODDETALLEFACTURACIONPDV = DFP.ID_DETALLEFACTURACIONPDV)
      LEFT OUTER JOIN (SELECT CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV,
                              SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 1 THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx1,
                              SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 2 THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx2,
                              SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 3 THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx3,
                              SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 4 THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx4
                       FROM WSXML_SFG.DETALLEFACTURACIONRETENCION
                       GROUP BY CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV) RET ON (RET.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV
                                                                                        AND RET.CODDETALLEFACTURACIONPDV = DFP.ID_DETALLEFACTURACIONPDV)

      -- Retencion Taxes over product
      LEFT OUTER JOIN (SELECT CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV,
                              SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 1 THEN VALORRETENCION ELSE 0 END) AS VALORRETENCION_PRDx1,
                              SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 2 THEN VALORRETENCION ELSE 0 END) AS VALORRETENCION_PRDx2,
                              SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 3 THEN VALORRETENCION ELSE 0 END) AS VALORRETENCION_PRDx3,
                              SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 4 THEN VALORRETENCION ELSE 0 END) AS VALORRETENCION_PRDx4
                       FROM WSXML_SFG.DETALLEFACTURACIONRETDIFE
                       GROUP BY CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV) RET_PRD ON (RET_PRD.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV
                                                                                        AND RET_PRD.CODDETALLEFACTURACIONPDV = DFP.ID_DETALLEFACTURACIONPDV)


      LEFT OUTER JOIN (SELECT CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV,
                              SUM(CASE WHEN CODRETENCIONUVT = 1 THEN VALORRETENCION ELSE 0 END) AS VALORRETUVTx1
                       FROM WSXML_SFG.DETALLEFACTURACIONRETUVT
                       GROUP BY CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV) UVT ON (UVT.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV
                                                                                        AND UVT.CODDETALLEFACTURACIONPDV = DFP.ID_DETALLEFACTURACIONPDV)
      WHERE MFC.CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV
      GROUP BY MFC.CODAGRUPACIONPUNTODEVENTA,
               SRV.ID_SERVICIO, TPR.ID_TIPOPRODUCTO, AGP.ID_AGRUPACIONPRODUCTO,
               SRV.NOMSERVICIO, TPR.NOMTIPOPRODUCTO, AGP.NOMAGRUPACIONPRODUCTO,
               SRV.ORDEN
      ORDER BY MFC.CODAGRUPACIONPUNTODEVENTA,
               SRV.ORDEN,
               TPR.ID_TIPOPRODUCTO,
               AGP.NOMAGRUPACIONPRODUCTO,
               SUM(DFP.CANTIDADVENTA) DESC;
	
	END TRY
	BEGIN CATCH
	
		DECLARE @l_TIPOINFORMATIVO TINYINT, @l_TIPOERROR TINYINT, @l_TIPOADVERTENCIA TINYINT, @l_TIPOCUALQUIERA TINYINT, @l_PROCESONOTIFICACION TINYINT, @l_ESTADOABIERTA TINYINT, @l_ESTADOCERRADA TINYINT 
		EXEC WSXML_SFG.SFGALERTA_CONSTANT @l_TIPOINFORMATIVO OUT, @l_TIPOERROR OUT, @l_TIPOADVERTENCIA OUT, @l_TIPOCUALQUIERA OUT, @l_PROCESONOTIFICACION OUT, @l_ESTADOABIERTA OUT, @l_ESTADOCERRADA OUT 
		SET @msg = 'No se pudo obtener la informaci?n resumen para los reportes de cadenas: ' + isnull(ERROR_MESSAGE(), '');
		EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @l_TIPOADVERTENCIA, 'GENERACIONXMLUNIFICADA', @msg, 1
	END CATCH
  END;
GO


  -- Lista de Invoice Report para puntos de venta
  IF OBJECT_ID('WSXML_SFG.SFGREPORTESTERMINAL_GetInvoiceReportItmLstForAgent', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREPORTESTERMINAL_GetInvoiceReportItmLstForAgent;
GO
CREATE     PROCEDURE WSXML_SFG.SFGREPORTESTERMINAL_GetInvoiceReportItmLstForAgent(@p_SECUENCIACICLO NUMERIC(22,0), @p_PAGNUM NUMERIC(22,0), @p_cur cursor varying  OUTPUT) AS
 BEGIN
	 SET NOCOUNT ON;
    DECLARE @cCODCICLOFACTURACIONPDV NUMERIC(22,0);
    DECLARE @cFECHAULTIMAEJECUCION   DATETIME;
    -- Paginacion
    DECLARE @xLOWERLIMIT NUMERIC(22,0);
    DECLARE @xUPPERLIMIT NUMERIC(22,0);
    DECLARE @msg VARCHAR(2000);
   
	BEGIN TRY
		EXEC WSXML_SFG.SFGREPORTESTERMINAL_ExpectedCycleID @p_SECUENCIACICLO, @cCODCICLOFACTURACIONPDV, @cFECHAULTIMAEJECUCION OUT
		EXEC WSXML_SFG.SFGREPORTESTERMINAL_GetPagingParameters @p_PAGNUM, @xLOWERLIMIT OUT, @xUPPERLIMIT OUT
		-- Info per contract type for each product
		/* Dynamic behaviour could be accomplished with a previous list of taxes */
		
		  SELECT ID_PUNTODEVENTA                                                      AS ID_PUNTODEVENTA,
             ID_COMPANIA                                                          AS ID_COMPANIA,
             CODTIPOCONTRATOPRODUCTO                                              AS ID_TIPOCONTRATOPRODUCTO,
             CODIGO                                                               AS CODIGO,
             NOMCOMPANIA                                                          AS NOMCOMPANIA,
             WSXML_SFG.SFGCOMPANIA_FormatIdentification(IDENTIFICACION, DIGITOVERIFICACION) AS IDENTIFICACION,
             ISNULL(NOMTIPOCONTRATOPRODUCTO, 'ADMINISTRACION PDV')                   AS NOMTIPOCONTRATOPRODUCTO,
             ROUND(SUM(INGRESO), 0)       AS INGRESO,
             ROUND(SUM(IVAINGRESO), 0)    AS IVAINGRESO,

             ROUND(SUM(RETEFUENTE_PRD), 0)    AS RETEFUENTE_PRD,
             ROUND(SUM(RETEICA_PRD), 0)       AS RETEICA_PRD,
             ROUND(SUM(RETEIVA_PRD), 0)       AS RETEIVA_PRD,
             ROUND(SUM(RETECREE_PRD), 0)       AS RETEIVA_PRD,

             ROUND(SUM(RETEFUENTE), 0)    AS RETEFUENTE,
             ROUND(SUM(RETEICA), 0)       AS RETEICA,
             ROUND(SUM(RETEIVA), 0)       AS RETEIVA,
             ROUND(SUM(RETECREE), 0)       AS RETECREE,
             ROUND(SUM(INGRESONETO), 0)   AS INGRESONETO
        FROM (SELECT /* Informaci?n de control */
                     MFP.CODPUNTODEVENTA         AS ID_PUNTODEVENTA,
                     PRD.CODCOMPANIA             AS CODCOMPANIA,
                     CASE WHEN ISNULL(RSC.CODTIPOCONTRATOPDV, 1) = 3
                          THEN PCT.CODTIPOCONTRATOPRODUCTO
                          ELSE 0 END             AS CODTIPOCONTRATOPRODUCTO,
                     DFP.ID_DETALLEFACTURACIONPDV,
                     /* Valores */
                     SUM(CASE WHEN DFP.COMISIONANTICIPO = 0 THEN DFP.VALORCOMISION ELSE 0 END)     AS INGRESO,
                     SUM(DFP.IVACOMISION)                                                          AS IVAINGRESO,
                     SUM(ISNULL(RET.RETEFUENTE, 0) + ISNULL(RTU.RETEUVT, 0))                             AS RETEFUENTE,
                     SUM(ISNULL(RET.RETEICA, 0))                                                      AS RETEICA,
                     SUM(ISNULL(RET.RETEIVA, 0))                                                      AS RETEIVA,
                     SUM(ISNULL(RET.RETECREE, 0))                                                      AS RETECREE,

                     SUM(ISNULL(RET_PRD.RETEFUENTE_PRD, 0))                                                   AS RETEFUENTE_PRD,
                     SUM(ISNULL(RET_PRD.RETEICA_PRD, 0))                                                      AS RETEICA_PRD,
                     SUM(ISNULL(RET_PRD.RETEIVA_PRD, 0))                                                      AS RETEIVA_PRD,
                     SUM(ISNULL(RET_PRD.RETECREE_PRD, 0))                                                      AS RETECREE_PRD,

                     SUM(CASE WHEN DFP.COMISIONANTICIPO = 0 THEN DFP.VALORCOMISIONNETA ELSE 0 END) AS INGRESONETO
              FROM (SELECT CODPUNTODEVENTA AS AGENT
                    FROM (SELECT CODPUNTODEVENTA
							--, ROWNUM AS row_counter
							, ROW_NUMBER() OVER(ORDER BY CAST(CODIGOGTECHPUNTODEVENTA AS INT)) AS row_counter
                          FROM (SELECT CODPUNTODEVENTA, CODIGOGTECHPUNTODEVENTA FROM WSXML_SFG.MAESTROFACTURACIONTIRILLA
                                INNER JOIN WSXML_SFG.PUNTODEVENTA ON (CODPUNTODEVENTA = ID_PUNTODEVENTA)
                                WHERE CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV
                              ) s
							  ) s
                    WHERE row_counter > @xLOWERLIMIT
                      AND row_counter <= @xUPPERLIMIT) PAGED
              INNER JOIN WSXML_SFG.PUNTODEVENTA          PDV ON (PDV.ID_PUNTODEVENTA          = PAGED.AGENT)
              INNER JOIN WSXML_SFG.MAESTROFACTURACIONPDV MFP ON (MFP.CODCICLOFACTURACIONPDV   = @cCODCICLOFACTURACIONPDV
                                                   AND MFP.CODPUNTODEVENTA          = PDV.ID_PUNTODEVENTA)
              INNER JOIN WSXML_SFG.DETALLEFACTURACIONPDV DFP ON (DFP.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV)
              INNER JOIN WSXML_SFG.PRODUCTO              PRD ON (PRD.ID_PRODUCTO              = DFP.CODPRODUCTO)
              INNER JOIN WSXML_SFG.PRODUCTOCONTRATO      PCT ON (PCT.CODPRODUCTO              = PRD.ID_PRODUCTO)
              -- Razon Social tomar de cabecera. Tipo de contrato por compania, ya que es independiente el servicio
              LEFT OUTER JOIN (SELECT PDV.ID_PUNTODEVENTA           AS CODPUNTODEVENTA,
                                      RSC.CODCOMPANIA               AS CODCOMPANIA,
                                      MAX(CODTIPOCONTRATOPDV)       AS CODTIPOCONTRATOPDV
                               FROM WSXML_SFG.PUNTODEVENTA PDV
                               INNER JOIN RAZONSOCIALCONTRATO RSC ON (RSC.CODRAZONSOCIAL = PDV.CODRAZONSOCIAL)
                               GROUP BY PDV.ID_PUNTODEVENTA, RSC.CODCOMPANIA) RSC ON (RSC.CODPUNTODEVENTA = PDV.ID_PUNTODEVENTA
                                                                                  AND RSC.CODCOMPANIA     = PRD.CODCOMPANIA)
              LEFT OUTER JOIN (SELECT CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV,
                                      SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 1 THEN VALORRETENCION ELSE 0 END) AS RETEFUENTE,
                                      SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 2 THEN VALORRETENCION ELSE 0 END) AS RETEICA,
                                      SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 3 THEN VALORRETENCION ELSE 0 END) AS RETEIVA,
                                      SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 4 THEN VALORRETENCION ELSE 0 END) AS RETECREE
                               FROM WSXML_SFG.DETALLEFACTURACIONRETENCION DFR
                               GROUP BY CODMAESTROFACTURACIONPDV,
                                        CODDETALLEFACTURACIONPDV) RET ON (RET.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV
                                                                      AND RET.CODDETALLEFACTURACIONPDV = DFP.ID_DETALLEFACTURACIONPDV)
              -- Retencion Taxes over product
              LEFT OUTER JOIN (SELECT CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV,
                                      SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 1 THEN VALORRETENCION ELSE 0 END) AS RETEFUENTE_PRD,
                                      SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 2 THEN VALORRETENCION ELSE 0 END) AS RETEICA_PRD,
                                      SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 3 THEN VALORRETENCION ELSE 0 END) AS RETEIVA_PRD,
                                      SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 4 THEN VALORRETENCION ELSE 0 END) AS RETECREE_PRD
                               FROM WSXML_SFG.DETALLEFACTURACIONRETDIFE DFR
                               GROUP BY CODMAESTROFACTURACIONPDV,
                                        CODDETALLEFACTURACIONPDV) RET_PRD ON (RET_PRD.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV
                                                                      AND RET_PRD.CODDETALLEFACTURACIONPDV = DFP.ID_DETALLEFACTURACIONPDV)

              LEFT OUTER JOIN (SELECT CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV,
                                      SUM(CASE WHEN CODRETENCIONUVT = 1 THEN VALORRETENCION ELSE 0 END) AS RETEUVT
                               FROM WSXML_SFG.DETALLEFACTURACIONRETUVT DFU
                               GROUP BY CODMAESTROFACTURACIONPDV,
                                        CODDETALLEFACTURACIONPDV) RTU ON (RTU.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV
                                                                      AND RTU.CODDETALLEFACTURACIONPDV = DFP.ID_DETALLEFACTURACIONPDV)
              GROUP BY MFP.CODPUNTODEVENTA,
                       PRD.CODCOMPANIA,
                       PCT.CODTIPOCONTRATOPRODUCTO,
                       DFP.ID_DETALLEFACTURACIONPDV,
                       RSC.CODTIPOCONTRATOPDV) INV
      INNER JOIN WSXML_SFG.COMPANIA                  CIA ON (CIA.ID_COMPANIA             = INV.CODCOMPANIA)
      LEFT OUTER JOIN WSXML_SFG.TIPOCONTRATOPRODUCTO TPC ON (TPC.ID_TIPOCONTRATOPRODUCTO = INV.CODTIPOCONTRATOPRODUCTO)
      GROUP BY INV.ID_PUNTODEVENTA,
               CIA.ID_COMPANIA,
               INV.CODTIPOCONTRATOPRODUCTO,
               CIA.CODIGO,
               CIA.NOMCOMPANIA,
               CIA.IDENTIFICACION,
               CIA.DIGITOVERIFICACION,
               TPC.NOMTIPOCONTRATOPRODUCTO
      ORDER BY ID_PUNTODEVENTA,
               ID_COMPANIA,
               CODTIPOCONTRATOPRODUCTO;
	
	END TRY
	BEGIN CATCH
	
		DECLARE @l_TIPOINFORMATIVO TINYINT, @l_TIPOERROR TINYINT, @l_TIPOADVERTENCIA TINYINT, @l_TIPOCUALQUIERA TINYINT, @l_PROCESONOTIFICACION TINYINT, @l_ESTADOABIERTA TINYINT, @l_ESTADOCERRADA TINYINT 
		EXEC WSXML_SFG.SFGALERTA_CONSTANT @l_TIPOINFORMATIVO OUT, @l_TIPOERROR OUT, @l_TIPOADVERTENCIA OUT, @l_TIPOCUALQUIERA OUT, @l_PROCESONOTIFICACION OUT, @l_ESTADOABIERTA OUT, @l_ESTADOCERRADA OUT 
		SET @msg = 'No se pudo obtener la informaci?n tributaria para los reportes de puntos de venta: ' + isnull(ERROR_MESSAGE(), '');
		EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @l_TIPOADVERTENCIA, 'GENERACIONXMLUNIFICADA', @msg, 1
		
		
	END CATCH
  END;
 GO
 

  -- Lista de Invoice Report para cadena
IF OBJECT_ID('WSXML_SFG.SFGREPORTESTERMINAL_GetInvoiceReportItmLstForChain', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREPORTESTERMINAL_GetInvoiceReportItmLstForChain;
GO
CREATE     PROCEDURE WSXML_SFG.SFGREPORTESTERMINAL_GetInvoiceReportItmLstForChain(@p_SECUENCIACICLO NUMERIC(22,0)) AS
 BEGIN
	  SET NOCOUNT ON;
	  
    DECLARE @cCODCICLOFACTURACIONPDV NUMERIC(22,0);
    DECLARE @cFECHAULTIMAEJECUCION   DATETIME;
    DECLARE @msg VARCHAR(2000);
   
	BEGIN TRY
    EXEC WSXML_SFG.SFGREPORTESTERMINAL_ExpectedCycleID @p_SECUENCIACICLO, @cCODCICLOFACTURACIONPDV, @cFECHAULTIMAEJECUCION OUT
    -- Info per contract type for each product
    /* Dynamic behaviour could be accomplished with a previous list of taxes */
	 
      SELECT ID_AGRUPACIONPUNTODEVENTA                                            AS ID_AGRUPACIONPUNTODEVENTA,
             ID_COMPANIA                                                          AS ID_COMPANIA,
             CODTIPOCONTRATOPRODUCTO                                              AS ID_TIPOCONTRATOPRODUCTO,
             CODIGO                                                               AS CODIGO,
             NOMCOMPANIA                                                          AS NOMCOMPANIA,
             SFGCOMPANIA.FormatIdentification(IDENTIFICACION, DIGITOVERIFICACION) AS IDENTIFICACION,
             ISNULL(NOMTIPOCONTRATOPRODUCTO, 'ADMINISTRACION PDV')                   AS NOMTIPOCONTRATOPRODUCTO,
             ROUND(SUM(INGRESO), 0)                                                         AS INGRESO,
             ROUND(SUM(IVAINGRESO), 0)                                                      AS IVAINGRESO,

             ROUND(SUM(RETEFUENTE_PRD), 0)                                                      AS RETEFUENTE_PRD,
             ROUND(SUM(RETEICA_PRD), 0)                                                         AS RETEICA_PRD,
             ROUND(SUM(RETEIVA_PRD), 0)                                                         AS RETEIVA_PRD,
             ROUND(SUM(RETECREE_PRD), 0)                                                        AS RETECREE_PRD,

             ROUND(SUM(RETEFUENTE), 0)                                                      AS RETEFUENTE,
             ROUND(SUM(RETEICA), 0)                                                         AS RETEICA,
             ROUND(SUM(RETEIVA), 0)                                                         AS RETEIVA,
             ROUND(SUM(RETECREE), 0)                                                        AS RETECREE,
             ROUND(SUM(INGRESONETO), 0)                                                     AS INGRESONETO
        FROM (
              SELECT /* Informaci?n de control */
                     MFC.CODAGRUPACIONPUNTODEVENTA AS ID_AGRUPACIONPUNTODEVENTA,
                     PRD.CODCOMPANIA               AS CODCOMPANIA,
                     -- Solo los contratos de Colaboracion Empresarial despliegan tipos de contrato
                     CASE WHEN ISNULL(RSC.CODTIPOCONTRATOPDV, 1) = 3
                          THEN PCT.CODTIPOCONTRATOPRODUCTO
                          ELSE 0 END               AS CODTIPOCONTRATOPRODUCTO,
                     DFP.ID_DETALLEFACTURACIONPDV,
                     /* Valores */
                     SUM(CASE WHEN DFP.COMISIONANTICIPO = 0 THEN DFP.VALORCOMISION ELSE 0 END)     AS INGRESO,
                     SUM(DFP.IVACOMISION)                                                          AS IVAINGRESO,

                     SUM(ISNULL(RET_PRD.RETEFUENTE_PRD, 0))                             AS RETEFUENTE_PRD,
                     SUM(ISNULL(RET_PRD.RETEICA_PRD, 0))                                                      AS RETEICA_PRD,
                     SUM(ISNULL(RET_PRD.RETEIVA_PRD, 0))                                                      AS RETEIVA_PRD,
                     SUM(ISNULL(RET_PRD.RETECREE_PRD, 0))                                                      AS RETECREE_PRD,

                     SUM(ISNULL(RET.RETEFUENTE, 0) + ISNULL(RTU.RETEUVT, 0))                             AS RETEFUENTE,
                     SUM(ISNULL(RET.RETEICA, 0))                                                      AS RETEICA,
                     SUM(ISNULL(RET.RETEIVA, 0))                                                      AS RETEIVA,
                     SUM(ISNULL(RET.RETECREE, 0))                                                     AS RETECREE,
                     SUM(CASE WHEN DFP.COMISIONANTICIPO = 0 THEN DFP.VALORCOMISIONNETA ELSE 0 END) AS INGRESONETO
              FROM WSXML_SFG.AGRUPACIONPUNTODEVENTA AGR
              INNER JOIN MAESTROFACTURACIONCOMPCONSIG MFC ON (MFC.CODCICLOFACTURACIONPDV         = @cCODCICLOFACTURACIONPDV
                                                          AND MFC.CODAGRUPACIONPUNTODEVENTA      = AGR.ID_AGRUPACIONPUNTODEVENTA)
              INNER JOIN WSXML_SFG.MAESTROFACTURACIONPDV        MFP ON (MFP.CODMAESTROFACTURACIONCOMPCONSI = MFC.ID_MAESTROFACTCOMPCONSIG)
              INNER JOIN WSXML_SFG.DETALLEFACTURACIONPDV        DFP ON (DFP.CODMAESTROFACTURACIONPDV       = MFP.ID_MAESTROFACTURACIONPDV)
              INNER JOIN WSXML_SFG.PRODUCTO                     PRD ON (PRD.ID_PRODUCTO                    = DFP.CODPRODUCTO)
              INNER JOIN WSXML_SFG.PRODUCTOCONTRATO             PCT ON (PCT.CODPRODUCTO                    = PRD.ID_PRODUCTO)
              -- Razon Social tomar de cabecera. Tipo de contrato por compania, ya que es independiente el servicio
              LEFT OUTER JOIN (SELECT PDV.CODAGRUPACIONPUNTODEVENTA AS CODAGRUPACIONPUNTODEVENTA,
                                      PDV.ID_PUNTODEVENTA           AS CODPUNTODEVENTA,
                                      RSC.CODCOMPANIA               AS CODCOMPANIA,
                                      MAX(CODTIPOCONTRATOPDV)       AS CODTIPOCONTRATOPDV
                               FROM WSXML_SFG.PUNTODEVENTA PDV
                               INNER JOIN RAZONSOCIALCONTRATO RSC ON (RSC.CODRAZONSOCIAL = PDV.CODRAZONSOCIAL)
                               GROUP BY PDV.CODAGRUPACIONPUNTODEVENTA, PDV.ID_PUNTODEVENTA, RSC.CODCOMPANIA) RSC ON (RSC.CODAGRUPACIONPUNTODEVENTA = AGR.ID_AGRUPACIONPUNTODEVENTA
                                                                                                                 AND RSC.CODPUNTODEVENTA           = AGR.CODPUNTODEVENTACABEZA
                                                                                                                 AND RSC.CODCOMPANIA               = PRD.CODCOMPANIA)
              LEFT OUTER JOIN (SELECT CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV,
                                      SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 1 THEN VALORRETENCION ELSE 0 END) AS RETEFUENTE,
                                      SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 2 THEN VALORRETENCION ELSE 0 END) AS RETEICA,
                                      SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 3 THEN VALORRETENCION ELSE 0 END) AS RETEIVA,
                                      SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 4 THEN VALORRETENCION ELSE 0 END) AS RETECREE
                               FROM WSXML_SFG.DETALLEFACTURACIONRETENCION DFR
                               GROUP BY CODMAESTROFACTURACIONPDV,
                                        CODDETALLEFACTURACIONPDV) RET ON (RET.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV
                                                                      AND RET.CODDETALLEFACTURACIONPDV = DFP.ID_DETALLEFACTURACIONPDV)
               -- Retencion Taxes over product
               LEFT OUTER JOIN (SELECT CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV,
                                      SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 1 THEN VALORRETENCION ELSE 0 END) AS RETEFUENTE_PRD,
                                      SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 2 THEN VALORRETENCION ELSE 0 END) AS RETEICA_PRD,
                                      SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 3 THEN VALORRETENCION ELSE 0 END) AS RETEIVA_PRD,
                                      SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 4 THEN VALORRETENCION ELSE 0 END) AS RETECREE_PRD
                               FROM WSXML_SFG.DETALLEFACTURACIONRETDIFE DFR
                               GROUP BY CODMAESTROFACTURACIONPDV,
                                        CODDETALLEFACTURACIONPDV) RET_PRD ON (RET_PRD.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV
                                                                      AND RET_PRD.CODDETALLEFACTURACIONPDV = DFP.ID_DETALLEFACTURACIONPDV)

              LEFT OUTER JOIN (SELECT CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV,
                                      SUM(CASE WHEN CODRETENCIONUVT = 1 THEN VALORRETENCION ELSE 0 END) AS RETEUVT
                               FROM WSXML_SFG.DETALLEFACTURACIONRETUVT DFU
                               GROUP BY CODMAESTROFACTURACIONPDV,
                                        CODDETALLEFACTURACIONPDV) RTU ON (RTU.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV
                                                                      AND RTU.CODDETALLEFACTURACIONPDV = DFP.ID_DETALLEFACTURACIONPDV)
              WHERE AGR.CODTIPOPUNTODEVENTA <> 3
              GROUP BY MFC.CODAGRUPACIONPUNTODEVENTA,
                       PRD.CODCOMPANIA,
                       PCT.CODTIPOCONTRATOPRODUCTO,
                       DFP.ID_DETALLEFACTURACIONPDV,
                       RSC.CODTIPOCONTRATOPDV) INV
      INNER JOIN WSXML_SFG.COMPANIA                  CIA ON (CIA.ID_COMPANIA             = INV.CODCOMPANIA)
      LEFT OUTER JOIN TIPOCONTRATOPRODUCTO TPC ON (TPC.ID_TIPOCONTRATOPRODUCTO = INV.CODTIPOCONTRATOPRODUCTO)
      GROUP BY INV.ID_AGRUPACIONPUNTODEVENTA,
               CIA.ID_COMPANIA,
               INV.CODTIPOCONTRATOPRODUCTO,
               CIA.CODIGO,
               CIA.NOMCOMPANIA,
               CIA.IDENTIFICACION,
               CIA.DIGITOVERIFICACION,
               TPC.NOMTIPOCONTRATOPRODUCTO
      ORDER BY ID_AGRUPACIONPUNTODEVENTA,
               ID_COMPANIA,
               INV.CODTIPOCONTRATOPRODUCTO;
	
	END TRY
	BEGIN CATCH
		DECLARE @l_TIPOINFORMATIVO TINYINT, @l_TIPOERROR TINYINT, @l_TIPOADVERTENCIA TINYINT, @l_TIPOCUALQUIERA TINYINT, @l_PROCESONOTIFICACION TINYINT, @l_ESTADOABIERTA TINYINT, @l_ESTADOCERRADA TINYINT 
		EXEC WSXML_SFG.SFGALERTA_CONSTANT @l_TIPOINFORMATIVO OUT, @l_TIPOERROR OUT, @l_TIPOADVERTENCIA OUT, @l_TIPOCUALQUIERA OUT, @l_PROCESONOTIFICACION OUT, @l_ESTADOABIERTA OUT, @l_ESTADOCERRADA OUT 
		SET @msg = 'No se pudo obtener la información tributaria para los reportes de cadenas: ' + isnull(ERROR_MESSAGE(), '');
		EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @l_TIPOADVERTENCIA, 'GENERACIONXMLUNIFICADA', @msg, 1
	END CATCH
  END;
 GO

  /********************************************************************************
  ****************** METODOS DE CONSULTA UNITARIA: SFGConsole *********************
  ********************************************************************************/
IF OBJECT_ID('WSXML_SFG.SFGREPORTESTERMINAL_GetDepositSlipInfo', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREPORTESTERMINAL_GetDepositSlipInfo;
GO
CREATE     PROCEDURE WSXML_SFG.SFGREPORTESTERMINAL_GetDepositSlipInfo(@p_SECUENCIACICLO NUMERIC(22,0), @p_CODIGOGTECHPUNTODEVENTA NVARCHAR(2000)) AS
 BEGIN
	  SET NOCOUNT ON;
    DECLARE @cCODCICLOFACTURACIONPDV NUMERIC(22,0);
    DECLARE @cFECHAULTIMAEJECUCION   DATETIME;

    DECLARE @xINSTALL NUMERIC(22,0) = 5; -- Linea de negocio Retiros
    DECLARE @xWITHDRW NUMERIC(22,0) = 4; -- Linea de negocio Retiros
    DECLARE @xBILLPAY NUMERIC(22,0) = 3; -- Linea de negocio Bill Payment
    DECLARE @xPREPAID NUMERIC(22,0) = 2; -- Linea de negocio Pines y Recargas
    DECLARE @xLOTTERY NUMERIC(22,0) = 1; -- Linea de negocio Juegos

    DECLARE @xTAXRENTA NUMERIC(22,0) = 1; -- Retencion Tributaria RENTA
    DECLARE @xTAXICA   NUMERIC(22,0) = 2; -- Retencion Tributaria ICA
    DECLARE @xTAXIVA   NUMERIC(22,0) = 3; -- Retencion Tributaria IVA
    DECLARE @xTAXCREE  NUMERIC(22,0) = 4; -- Retencion Tributaria CREE

    DECLARE @xPRODTX   NUMERIC(22,0) = 1; -- Impuesto IVA

    DECLARE @vAccountGTECH VARCHAR(4000)    /* Use -meta option PARAMETRO.VALOR%TYPE */;
    DECLARE @vAccountFiducia VARCHAR(4000)  /* Use -meta option PARAMETRO.VALOR%TYPE */;
    DECLARE @vBarcodeGTECH VARCHAR(4000)    /* Use -meta option PARAMETRO.VALOR%TYPE */;
    DECLARE @vBarcodeFiducia VARCHAR(4000)  /* Use -meta option PARAMETRO.VALOR%TYPE */;

    DECLARE @msg              VARCHAR(2000);
   
   BEGIN TRY

    EXEC SFGREPORTESTERMINAL_ExpectedCycleID @p_SECUENCIACICLO, @cCODCICLOFACTURACIONPDV, @cFECHAULTIMAEJECUCION OUT
    -- Default Barcodes. Override with unified
    EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'AccountNumberGTECH', @vAccountGTECH OUT
    EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'AccountNumberFiducia', @vAccountFiducia OUT
    EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'BarcodeGTECH', @vBarcodeGTECH OUT
    EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'BarcodeFiducia', @vBarcodeFiducia OUT
	 
      SELECT @cFECHAULTIMAEJECUCION            AS LASTBILLINGDATE,
             CFP.FECHAEJECUCION               AS BILLINGDATE,
             AGR.CODIGOAGRUPACIONGTECH        AS CHAINNUMBER,
             PDV.CODIGOGTECHPUNTODEVENTA      AS POSNUMBER,
             PDV.NUMEROTERMINAL               AS TERMINALNUMBER,
             MFT.ID_MAESTROFACTURACIONTIRILLA AS SLIPID,
             REFERENCIAGTECH                  AS REFERENCENUMBER,

             -- No longer per LDN
             @vAccountGTECH                    AS GTECHBANKACCOUNTNUMBER,
             @vAccountFiducia                  AS FIDUCIABANKACCOUNTNUMBER,
             @vBarcodeGTECH                    AS GTECHBARCODE,
             @vBarcodeFiducia                  AS FIDUCIABARCODE,

             -- Consolidated Previous Balances
             ROUND(ISNULL(SALDOANTERIORGTECHx1, 0), 0)      AS GPREVIOUSBALANCELOTTERY,
             ROUND(ISNULL(SALDOANTERIORGTECHx2, 0), 0)      AS GPREVIOUSBALANCEPREPAID,
             ROUND(ISNULL(SALDOANTERIORGTECHx3, 0), 0)      AS GPREVIOUSBALANCEBILLPAY,
             ROUND(ISNULL(SALDOANTERIORGTECHx4, 0), 0)      AS GPREVIOUSBALANCEWITHDRW,
             ROUND(ISNULL(SALDOANTERIORGTECHx5, 0), 0)      AS GPREVIOUSBALANCEINSTALL,
             ROUND(ISNULL(SALDOANTERIORGTECH, 0), 0)        AS GPREVIOUSBALANCETOTAL,
             ROUND(ISNULL(SALDOANTERIORFIDUCIAx1, 0), 0)    AS FPREVIOUSBALANCELOTTERY,
             ROUND(ISNULL(SALDOANTERIORFIDUCIA, 0), 0)      AS FPREVIOUSBALANCETOTAL,
             ROUND(ISNULL(SALDOANTERIORGTECH, 0), 0) +
             ROUND(ISNULL(SALDOANTERIORFIDUCIA, 0), 0)      AS PREVIOUSBALANCETOTAL,

             ROUND(ISNULL(FACTURACIONGTECHx1, 0), 0)        AS GTOTALBILLINGLOTTERY,
             ROUND(ISNULL(FACTURACIONGTECHx2, 0), 0)        AS GTOTALBILLINGPREPAID,
             ROUND(ISNULL(FACTURACIONGTECHx3, 0), 0)        AS GTOTALBILLINGBILLPAY,
             ROUND(ISNULL(FACTURACIONGTECHx4, 0), 0)        AS GTOTALBILLINGWITHDRW,
             ROUND(ISNULL(FACTURACIONGTECHx5, 0), 0)        AS GTOTALBILLINGINSTALL,
             ROUND(ISNULL(FACTURACIONGTECH, 0), 0)          AS GTOTALBILLINGTOTAL,
             ROUND(ISNULL(FACTURACIONFIDUCIAx1, 0), 0)      AS FTOTALBILLINGLOTTERY,
             ROUND(ISNULL(FACTURACIONFIDUCIA, 0), 0)        AS FTOTALBILLINGTOTAL,
             ROUND(ISNULL(FACTURACIONGTECH, 0), 0) +
             ROUND(ISNULL(FACTURACIONFIDUCIA, 0), 0)        AS TOTALBILLINGTOTAL,

             ROUND(ISNULL(NUEVOSALDOGTECHx1, 0), 0)         AS GCURRENTBALANCELOTTERY,
             ROUND(ISNULL(NUEVOSALDOGTECHx2, 0), 0)         AS GCURRENTBALANCEPREPAID,
             ROUND(ISNULL(NUEVOSALDOGTECHx3, 0), 0)         AS GCURRENTBALANCEBILLPAY,
             ROUND(ISNULL(NUEVOSALDOGTECHx4, 0), 0)         AS GCURRENTBALANCEWITHDRW,
             ROUND(ISNULL(NUEVOSALDOGTECHx5, 0), 0)         AS GCURRENTBALANCEINSTALL,
             ROUND(ISNULL(NUEVOSALDOGTECH, 0), 0)           AS GCURRENTBALANCETOTAL,
             ROUND(ISNULL(NUEVOSALDOFIDUCIAx1, 0), 0)       AS FCURRENTBALANCELOTTERY,
             ROUND(ISNULL(NUEVOSALDOFIDUCIA, 0), 0)         AS FCURRENTBALANCETOTAL,
             ROUND(ISNULL(NUEVOSALDOGTECH, 0), 0) +
             ROUND(ISNULL(NUEVOSALDOFIDUCIA, 0), 0)         AS CURRENTBALANCETOTAL,

             ROUND(ISNULL(CANTIDADVENTA, 0), 0)             AS SALESQUANTITY,
             ROUND(ISNULL(VALORVENTA, 0), 0)                AS SALESAMOUNT,
             ROUND(ISNULL(CANTIDADANULACION, 0), 0)         AS ANNULMENTQUANTITY,
             ROUND(ISNULL(VALORANULACION, 0), 0)            AS ANNULMENTAMOUNT,
             ROUND(ISNULL(CANTIDADGRATUITO, 0), 0)          AS FREETKQUANTITY,
             ROUND(ISNULL(VALORGRATUITO, 0), 0)             AS FREETKAMOUNT,
             ROUND(ISNULL(CANTIDADPREMIOPAGO, 0), 0)        AS AWARDPAIDQUANTITY,
             ROUND(ISNULL(VALORPREMIOPAGO, 0), 0)           AS AWARDPAIDAMOUNT,
             ROUND(ISNULL(RETENCIONPREMIOSPAGADOS, 0), 0)   AS AWARDTAXDISCOUNT,

             ROUND(ISNULL(IMPVALORx1, 0), 0)                AS PRODUCTTAXIVA,
             ROUND(ISNULL(VALORVENTABRUTA, 0), 0)           AS GROSSSALES,
             ROUND(ISNULL(VALORCOMISION, 0), 0)             AS GROSSCOMMISSION,
             ROUND(ISNULL(IVACOMISION, 0), 0)               AS VATCOMMISSION,

             ROUND(ISNULL(RETVALOR_PRDx1, 0), 0)                AS TAXRENTA_PRD,
             ROUND(ISNULL(RETVALOR_PRDx2, 0), 0)                AS TAXICA_PRD,
             ROUND(ISNULL(RETVALOR_PRDx3, 0), 0)                AS TAXIVA_PRD,
             ROUND(ISNULL(RETVALOR_PRDx4, 0), 0)                AS TAXCREE_PRD,


             ROUND(ISNULL(RETVALORx1, 0), 0) +
             ROUND(ISNULL(RETVALORxUVT, 0), 0)              AS TAXRENTA,
             ROUND(ISNULL(RETVALORx2, 0), 0)                AS TAXICA,
             ROUND(ISNULL(RETVALORx3, 0), 0)                AS TAXIVA,
             ROUND(ISNULL(RETVALORx4, 0), 0)                AS TAXCREE,
             ROUND(ISNULL(VALORCOMISIONNETA, 0), 0)         AS FINALCOMMISSION,

             ROUND(ISNULL(FACTURACIONGTECH, 0), 0)          AS GCURRENTWEEK,
             ROUND(ISNULL(FACTURACIONGTECH105, 0), 0)       AS GCURRENTWEEK105,
             ROUND(ISNULL(FACTURACIONGTECH161, 0), 0)       AS GCURRENTWEEK161,
             ROUND(ISNULL(FACTURACIONFIDUCIA, 0), 0)        AS FCURRENTWEEK,
             ROUND(ISNULL(FACTURACIONGTECH, 0), 0) +
             ROUND(ISNULL(FACTURACIONFIDUCIA, 0), 0)        AS TOTALCURRENTWEEK,

             ROUND(ISNULL(NUEVOSALDOGTECH, 0), 0)           AS GCURRENTBALANCE,
             ROUND(ISNULL(NUEVOSALDOFIDUCIA, 0), 0)         AS FCURRENTBALANCE,

             /* Informaci?n de control */
             PDV.ID_PUNTODEVENTA,
             AGR.ID_AGRUPACIONPUNTODEVENTA,
             GLOBALBILLING.CODTIPOPUNTODEVENTA    AS CODTIPOPUNTODEVENTA,
             GLOBALBILLING.CODPUNTODEVENTACABEZA  AS CODPUNTODEVENTACABEZA,
             0 AS NUMEROPAGOS, 0 AS PAGOSAPLICADOS
      FROM WSXML_SFG.PUNTODEVENTA PDV
      INNER JOIN WSXML_SFG.CICLOFACTURACIONPDV CFP ON (CFP.ID_CICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV)
      INNER JOIN WSXML_SFG.MAESTROFACTURACIONTIRILLA MFT ON (MFT.CODCICLOFACTURACIONPDV = CFP.ID_CICLOFACTURACIONPDV
                                               AND MFT.CODPUNTODEVENTA = PDV.ID_PUNTODEVENTA)

      /* Facturacion Globalizada */
      LEFT OUTER JOIN (SELECT /*+ index(MAESTROFACTURACIONPDV MAESTROFACT_CICLOTIRILLA_IX) */
                              MFP.CODCICLOFACTURACIONPDV       AS CODCICLOFACTURACIONPDV,
                              MFP.CODMAESTROFACTURACIONTIRILLA AS CODMAESTROFACTURACIONTIRILLA,
                              MIN(MFP.CODPUNTODEVENTA)              AS CODPUNTODEVENTA,
                              MIN(MFC.CODAGRUPACIONPUNTODEVENTA)    AS CODAGRUPACIONPUNTODEVENTA,
                              MIN(MFC.CODPUNTODEVENTA)              AS CODPUNTODEVENTACABEZA,
                              MIN(MFC.CODTIPOPUNTODEVENTA)          AS CODTIPOPUNTODEVENTA,

                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xLOTTERY THEN ISNULL(MFP.SALDOANTERIORENCONTRAGTECH - MFP.SALDOANTERIORAFAVORGTECH, 0) ELSE 0 END)     AS SALDOANTERIORGTECHx1,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xPREPAID THEN ISNULL(MFP.SALDOANTERIORENCONTRAGTECH - MFP.SALDOANTERIORAFAVORGTECH, 0) ELSE 0 END)     AS SALDOANTERIORGTECHx2,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xBILLPAY THEN ISNULL(MFP.SALDOANTERIORENCONTRAGTECH - MFP.SALDOANTERIORAFAVORGTECH, 0) ELSE 0 END)     AS SALDOANTERIORGTECHx3,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xWITHDRW THEN ISNULL(MFP.SALDOANTERIORENCONTRAGTECH - MFP.SALDOANTERIORAFAVORGTECH, 0) ELSE 0 END)     AS SALDOANTERIORGTECHx4,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xINSTALL THEN ISNULL(MFP.SALDOANTERIORENCONTRAGTECH - MFP.SALDOANTERIORAFAVORGTECH, 0) ELSE 0 END)     AS SALDOANTERIORGTECHx5,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xLOTTERY THEN ISNULL(MFP.SALDOANTERIORENCONTRAFIDUCIA - MFP.SALDOANTERIORAFAVORFIDUCIA, 0) ELSE 0 END) AS SALDOANTERIORFIDUCIAx1,

                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xLOTTERY THEN ISNULL(DFP.TOTALFACTURACIONGTECH, 0) ELSE 0 END)     AS FACTURACIONGTECHx1,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xPREPAID THEN ISNULL(DFP.TOTALFACTURACIONGTECH, 0) ELSE 0 END)     AS FACTURACIONGTECHx2,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xBILLPAY THEN ISNULL(DFP.TOTALFACTURACIONGTECH, 0) ELSE 0 END)     AS FACTURACIONGTECHx3,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xWITHDRW THEN ISNULL(DFP.TOTALFACTURACIONGTECH, 0) ELSE 0 END)     AS FACTURACIONGTECHx4,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xINSTALL THEN ISNULL(DFP.VALORVENTANETA, 0) ELSE 0 END)     AS FACTURACIONGTECHx5,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xLOTTERY THEN ISNULL(DFP.TOTALFACTURACIONFIDUCIA, 0) ELSE 0 END)   AS FACTURACIONFIDUCIAx1,

                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xLOTTERY THEN ISNULL(MFP.NUEVOSALDOENCONTRAGTECH - MFP.NUEVOSALDOAFAVORGTECH, 0) ELSE 0 END)     AS NUEVOSALDOGTECHx1,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xPREPAID THEN ISNULL(MFP.NUEVOSALDOENCONTRAGTECH - MFP.NUEVOSALDOAFAVORGTECH, 0) ELSE 0 END)     AS NUEVOSALDOGTECHx2,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xBILLPAY THEN ISNULL(MFP.NUEVOSALDOENCONTRAGTECH - MFP.NUEVOSALDOAFAVORGTECH, 0) ELSE 0 END)     AS NUEVOSALDOGTECHx3,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xWITHDRW THEN ISNULL(MFP.NUEVOSALDOENCONTRAGTECH - MFP.NUEVOSALDOAFAVORGTECH, 0) ELSE 0 END)     AS NUEVOSALDOGTECHx4,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xINSTALL THEN ISNULL(MFP.NUEVOSALDOENCONTRAGTECH - MFP.NUEVOSALDOAFAVORGTECH, 0) ELSE 0 END)     AS NUEVOSALDOGTECHx5,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xLOTTERY THEN ISNULL(MFP.NUEVOSALDOENCONTRAFIDUCIA - MFP.NUEVOSALDOAFAVORFIDUCIA, 0) ELSE 0 END) AS NUEVOSALDOFIDUCIAx1,

                              SUM(ISNULL(DFP.TOTALFACTURACIONGTECH, 0))                                         AS FACTURACIONGTECH,
                              SUM(ISNULL(MFP.SALDOANTERIORENCONTRAGTECH - MFP.SALDOANTERIORAFAVORGTECH, 0))     AS SALDOANTERIORGTECH,
                              SUM(ISNULL((ISNULL(MFP.NUEVOSALDOENCONTRAGTECH,0)- ISNULL(RET_PRD.VALORRETENCION_PRDx1, 0) - ISNULL(RET_PRD.VALORRETENCION_PRDx2, 0) - ISNULL(RET_PRD.VALORRETENCION_PRDx3,0)) - MFP.NUEVOSALDOAFAVORGTECH, 0))           AS NUEVOSALDOGTECH,
                              --SUM(NVL(MFP.NUEVOSALDOENCONTRAGTECH - MFP.NUEVOSALDOAFAVORGTECH, 0))           AS NUEVOSALDOGTECH,
                              MIN(MFC.REFERENCIAGTECH)                                                       AS REFERENCIAGTECH,
                              SUM(ISNULL(DFP.TOTALFACTURACIONFIDUCIA, 0))                                       AS FACTURACIONFIDUCIA,
                              SUM(ISNULL(MFP.SALDOANTERIORENCONTRAFIDUCIA - MFP.SALDOANTERIORAFAVORFIDUCIA, 0)) AS SALDOANTERIORFIDUCIA,
                              SUM(ISNULL(MFP.NUEVOSALDOENCONTRAFIDUCIA - MFP.NUEVOSALDOAFAVORFIDUCIA, 0))       AS NUEVOSALDOFIDUCIA,
                              MIN(MFC.REFERENCIAFIDUCIA)                                                     AS REFERENCIAFIDUCIA,

                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = 1
                                       THEN ISNULL(DFP.TOTALFACTURACIONGTECH, 0) ELSE 0 END)                    AS FACTURACIONGTECH105,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO IN (2, 3, 4)
                                       THEN ISNULL(DFP.TOTALFACTURACIONGTECH, 0) ELSE 0 END)                    AS FACTURACIONGTECH161,

                              SUM(ISNULL(DFP.CANTIDADVENTA, 0))           AS CANTIDADVENTA,
                              SUM(ISNULL(DFP.VALORVENTA, 0))              AS VALORVENTA,
                              SUM(ISNULL(DFP.CANTIDADANULACION, 0))       AS CANTIDADANULACION,
                              SUM(ISNULL(DFP.VALORANULACION, 0))          AS VALORANULACION,
                              SUM(ISNULL(DFP.CANTIDADGRATUITO, 0))        AS CANTIDADGRATUITO,
                              SUM(ISNULL(DFP.VALORGRATUITO, 0))           AS VALORGRATUITO,
                              SUM(ISNULL(DFP.CANTIDADPREMIOPAGO, 0))      AS CANTIDADPREMIOPAGO,
                              SUM(ISNULL(DFP.VALORPREMIOPAGO, 0))         AS VALORPREMIOPAGO,
                              SUM(ISNULL(DFP.RETENCIONPREMIOSPAGADOS, 0)) AS RETENCIONPREMIOSPAGADOS,

                              SUM(ISNULL(DFP.VALORVENTANETA, 0))              AS VALORVENTANETA,

                              SUM(ISNULL(IMP.VALORIMPUESTOx1, 0))         AS IMPVALORx1,
                              SUM(ISNULL(DFP.VALORVENTABRUTA, 0))         AS VALORVENTABRUTA,
                              SUM(ISNULL(DFP.VALORCOMISION, 0))           AS VALORCOMISION,
                              SUM(ISNULL(DFP.IVACOMISION, 0))             AS IVACOMISION,

                              SUM(ISNULL(RET_PRD.VALORRETENCION_PRDx1, 0))        AS RETVALOR_PRDx1,
                              SUM(ISNULL(RET_PRD.VALORRETENCION_PRDx2, 0))        AS RETVALOR_PRDx2,
                              SUM(ISNULL(RET_PRD.VALORRETENCION_PRDx3, 0))        AS RETVALOR_PRDx3,
                              SUM(ISNULL(RET_PRD.VALORRETENCION_PRDx4, 0))        AS RETVALOR_PRDx4,

                              SUM(ISNULL(RET.VALORRETENCIONx1, 0))        AS RETVALORx1,
                              SUM(ISNULL(RET.VALORRETENCIONx2, 0))        AS RETVALORx2,
                              SUM(ISNULL(RET.VALORRETENCIONx3, 0))        AS RETVALORx3,
                              SUM(ISNULL(RET.VALORRETENCIONx4, 0))        AS RETVALORx4,

                              SUM(ISNULL(RUV.VALORRETENCIONUVT, 0))       AS RETVALORxUVT,
                              SUM(ISNULL(DFP.VALORCOMISIONNETA, 0))       AS VALORCOMISIONNETA

                       FROM WSXML_SFG.MAESTROFACTURACIONPDV MFP
                       INNER JOIN WSXML_SFG.MAESTROFACTURACIONCOMPCONSIG MFC ON (MFC.ID_MAESTROFACTCOMPCONSIG = MFP.CODMAESTROFACTURACIONCOMPCONSI)
                       -- Details of Billing
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONPDV XMLGENERACION_DFP_IX) */
                                               DFP.CODMAESTROFACTURACIONPDV,
                                               SUM(DFP.CANTIDADVENTA)           AS CANTIDADVENTA,
                                               SUM(DFP.VALORVENTA)              AS VALORVENTA,
                                               SUM(DFP.CANTIDADANULACION)       AS CANTIDADANULACION,
                                               SUM(DFP.VALORANULACION)          AS VALORANULACION,
                                               SUM(DFP.CANTIDADGRATUITO)        AS CANTIDADGRATUITO,
                                               SUM(DFP.VALORGRATUITO)           AS VALORGRATUITO,
                                               SUM(DFP.CANTIDADPREMIOPAGO)      AS CANTIDADPREMIOPAGO,
                                               SUM(DFP.VALORPREMIOPAGO)         AS VALORPREMIOPAGO,
                                               SUM(DFP.RETENCIONPREMIOSPAGADOS) AS RETENCIONPREMIOSPAGADOS,

                                               SUM(DFP.VALORVENTANETA)              AS VALORVENTANETA,

                                               SUM(DFP.VALORVENTABRUTA)         AS VALORVENTABRUTA,
                                               SUM(DFP.VALORCOMISION)           AS VALORCOMISION,
                                               SUM(DFP.VALORCOMISIONBRUTA)      AS VALORCOMISIONBRUTA,
                                               SUM(DFP.VALORCOMISIONNETA)       AS VALORCOMISIONNETA,
                                               SUM(DFP.IVACOMISION)             AS IVACOMISION,

                                               SUM(DFP.NUEVOSALDOENCONTRAGTECH - DFP.NUEVOSALDOAFAVORGTECH)     AS TOTALFACTURACIONGTECH,
                                               SUM(DFP.NUEVOSALDOENCONTRAFIDUCIA - DFP.NUEVOSALDOAFAVORFIDUCIA) AS TOTALFACTURACIONFIDUCIA

                                        FROM WSXML_SFG.DETALLEFACTURACIONPDV DFP
                                        GROUP BY DFP.CODMAESTROFACTURACIONPDV) DFP ON (DFP.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV)
                       -- Product Taxes
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONIMPUESTO GLOBALBILL_DETALLEFACTIMP_IX) */
                                               CODMAESTROFACTURACIONPDV,
                                               SUM(CASE WHEN CODIMPUESTO = @xPRODTX THEN VALORIMPUESTO ELSE 0 END) AS VALORIMPUESTOx1
                                        FROM WSXML_SFG.DETALLEFACTURACIONIMPUESTO
                                        GROUP BY CODMAESTROFACTURACIONPDV) IMP ON (IMP.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV)
                       -- Commission Taxes
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONRETENCION GLOBALBILL_DETALLEFACTRET_IX) */
                                               CODMAESTROFACTURACIONPDV,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXRENTA THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx1,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXICA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx2,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXIVA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx3,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXCREE  THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx4
                                        FROM VW_CONCILIA_FECHASDETALLEFACTURACIONRETENCION
                                        GROUP BY CODMAESTROFACTURACIONPDV) RET ON (RET.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV)
                      -- Retencion Taxes over product
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONRETDIFE GLOBALBILL_DETALLEFACTRTDF_IX) */
                                               CODMAESTROFACTURACIONPDV,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXRENTA THEN VALORRETENCION ELSE 0 END) AS VALORRETENCION_PRDx1,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXICA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCION_PRDx2,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXIVA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCION_PRDx3,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXCREE  THEN VALORRETENCION ELSE 0 END) AS VALORRETENCION_PRDx4
                                        FROM VW_CONCILIA_FECHASDETALLEFACTURACIONRETDIFE
                                        GROUP BY CODMAESTROFACTURACIONPDV) RET_PRD ON (RET.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV)

                       -- Special Taxes over Commission
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONRETUVT GLOBALBILL_DETALLEFACTUVT_IX) */
                                               CODMAESTROFACTURACIONPDV, SUM(VALORRETENCION) AS VALORRETENCIONUVT
                                        FROM VW_CONCILIA_FECHASDETALLEFACTURACIONRETUVT
                                        GROUP BY CODMAESTROFACTURACIONPDV) RUV ON (RUV.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV)
                       WHERE MFP.CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV
                       GROUP BY MFP.CODCICLOFACTURACIONPDV, MFP.CODMAESTROFACTURACIONTIRILLA
                       ) GLOBALBILLING ON (GLOBALBILLING.CODCICLOFACTURACIONPDV = CFP.ID_CICLOFACTURACIONPDV
                                       AND GLOBALBILLING.CODMAESTROFACTURACIONTIRILLA = MFT.ID_MAESTROFACTURACIONTIRILLA)
      LEFT OUTER JOIN VW_CONCILIA_FECHASAGRUPACIONPUNTODEVENTA AGR ON (GLOBALBILLING.CODAGRUPACIONPUNTODEVENTA = AGR.ID_AGRUPACIONPUNTODEVENTA)
      WHERE CAST(PDV.CODIGOGTECHPUNTODEVENTA AS INT) = CAST(@p_CODIGOGTECHPUNTODEVENTA AS INT);

	
	
	END TRY
	BEGIN CATCH
	
		DECLARE @l_TIPOINFORMATIVO TINYINT, @l_TIPOERROR TINYINT, @l_TIPOADVERTENCIA TINYINT, @l_TIPOCUALQUIERA TINYINT, @l_PROCESONOTIFICACION TINYINT, @l_ESTADOABIERTA TINYINT, @l_ESTADOCERRADA TINYINT 
		EXEC WSXML_SFG.SFGALERTA_CONSTANT @l_TIPOINFORMATIVO OUT, @l_TIPOERROR OUT, @l_TIPOADVERTENCIA OUT, @l_TIPOCUALQUIERA OUT, @l_PROCESONOTIFICACION OUT, @l_ESTADOABIERTA OUT, @l_ESTADOCERRADA OUT 
		SET @msg = 'No se pudo obtener la informaci?n base para los reportes de puntos de venta: ' + isnull(ERROR_MESSAGE(), '');
		EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @l_TIPOADVERTENCIA, 'GENERACIONXMLUNIFICADA', @msg, 1
	END CATCH
  END;
GO


IF OBJECT_ID('WSXML_SFG.SFGREPORTESTERMINAL_GetDepositSlipInfoXChain', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREPORTESTERMINAL_GetDepositSlipInfoXChain;
GO
CREATE     PROCEDURE WSXML_SFG.SFGREPORTESTERMINAL_GetDepositSlipInfoXChain(@p_SECUENCIACICLO NUMERIC(22,0), @p_CODIGOAGRUPACIONGTECH NVARCHAR(2000)) AS
 BEGIN
	  SET NOCOUNT ON;
    DECLARE @cCODCICLOFACTURACIONPDV NUMERIC(22,0);
    DECLARE @cFECHAULTIMAEJECUCION   DATETIME;

    DECLARE @xWITHDRW NUMERIC(22,0) = 4; -- Linea de negocio Retiros
    DECLARE @xBILLPAY NUMERIC(22,0) = 3; -- Linea de negocio Bill Payment
    DECLARE @xPREPAID NUMERIC(22,0) = 2; -- Linea de negocio Pines y Recargas
    DECLARE @xLOTTERY NUMERIC(22,0) = 1; -- Linea de negocio Juegos

    DECLARE @xTAXRENTA NUMERIC(22,0) = 1; -- Retencion Tributaria RENTA
    DECLARE @xTAXICA   NUMERIC(22,0) = 2; -- Retencion Tributaria ICA
    DECLARE @xTAXIVA   NUMERIC(22,0) = 3; -- Retencion Tributaria IVA
    DECLARE @xTAXCREE  NUMERIC(22,0) = 4; -- Retencion Tributaria CREE


    DECLARE @xPRODTX   NUMERIC(22,0) = 1; -- Impuesto IVA

    DECLARE @vAccountGTECH VARCHAR(4000)    /* Use -meta option PARAMETRO.VALOR%TYPE */;
    DECLARE @vAccountFiducia VARCHAR(4000)  /* Use -meta option PARAMETRO.VALOR%TYPE */;
    DECLARE @vBarcodeGTECH VARCHAR(4000)    /* Use -meta option PARAMETRO.VALOR%TYPE */;
    DECLARE @vBarcodeFiducia VARCHAR(4000)  /* Use -meta option PARAMETRO.VALOR%TYPE */;

    DECLARE @msg              VARCHAR(2000);
   
   BEGIN TRY

    EXEC WSXML_SFG.SFGREPORTESTERMINAL_ExpectedCycleID @p_SECUENCIACICLO, @cCODCICLOFACTURACIONPDV, @cFECHAULTIMAEJECUCION OUT
    -- Default Barcodes. Override with unified
    EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'AccountNumberGTECH', @vAccountGTECH OUT
    EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'AccountNumberFiducia', @vAccountFiducia OUT
    EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'BarcodeGTECH', @vBarcodeGTECH OUT
    EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'BarcodeFiducia', @vBarcodeFiducia OUT

	 
      SELECT @cFECHAULTIMAEJECUCION            AS LASTBILLINGDATE,
             CFP.FECHAEJECUCION               AS BILLINGDATE,
             AGR.CODIGOAGRUPACIONGTECH        AS CHAINNUMBER,
             REFERENCIAGTECH                  AS REFERENCENUMBER,

             -- No longer per LDN
             @vAccountGTECH                    AS GTECHBANKACCOUNTNUMBER,
             @vAccountFiducia                  AS FIDUCIABANKACCOUNTNUMBER,
             @vBarcodeGTECH                    AS GTECHBARCODE,
             @vBarcodeFiducia                  AS FIDUCIABARCODE,

             -- Consolidated Previous Balances
             ROUND(ISNULL(SALDOANTERIORGTECHx1, 0), 0)      AS GPREVIOUSBALANCELOTTERY,
             ROUND(ISNULL(SALDOANTERIORGTECHx2, 0), 0)      AS GPREVIOUSBALANCEPREPAID,
             ROUND(ISNULL(SALDOANTERIORGTECHx3, 0), 0)      AS GPREVIOUSBALANCEBILLPAY,
             ROUND(ISNULL(SALDOANTERIORGTECHx4, 0), 0)      AS GPREVIOUSBALANCEWITHDRW,
             ROUND(ISNULL(SALDOANTERIORGTECH, 0), 0)        AS GPREVIOUSBALANCETOTAL,
             ROUND(ISNULL(SALDOANTERIORFIDUCIAx1, 0), 0)    AS FPREVIOUSBALANCELOTTERY,
             ROUND(ISNULL(SALDOANTERIORFIDUCIA, 0), 0)      AS FPREVIOUSBALANCETOTAL,
             ROUND(ISNULL(SALDOANTERIORGTECH, 0), 0) +
             ROUND(ISNULL(SALDOANTERIORFIDUCIA, 0), 0)      AS PREVIOUSBALANCETOTAL,

             ROUND(ISNULL(FACTURACIONGTECHx1, 0), 0)        AS GTOTALBILLINGLOTTERY,
             ROUND(ISNULL(FACTURACIONGTECHx2, 0), 0)        AS GTOTALBILLINGPREPAID,
             ROUND(ISNULL(FACTURACIONGTECHx3, 0), 0)        AS GTOTALBILLINGBILLPAY,
             ROUND(ISNULL(FACTURACIONGTECHx4, 0), 0)        AS GTOTALBILLINGWITHDRW,
             ROUND(ISNULL(FACTURACIONGTECH, 0), 0)          AS GTOTALBILLINGTOTAL,
             ROUND(ISNULL(FACTURACIONFIDUCIAx1, 0), 0)      AS FTOTALBILLINGLOTTERY,
             ROUND(ISNULL(FACTURACIONFIDUCIA, 0), 0)        AS FTOTALBILLINGTOTAL,
             ROUND(ISNULL(FACTURACIONGTECH, 0), 0) +
             ROUND(ISNULL(FACTURACIONFIDUCIA, 0), 0)        AS TOTALBILLINGTOTAL,

             ROUND(ISNULL(NUEVOSALDOGTECHx1, 0), 0)         AS GCURRENTBALANCELOTTERY,
             ROUND(ISNULL(NUEVOSALDOGTECHx2, 0), 0)         AS GCURRENTBALANCEPREPAID,
             ROUND(ISNULL(NUEVOSALDOGTECHx3, 0), 0)         AS GCURRENTBALANCEBILLPAY,
             ROUND(ISNULL(NUEVOSALDOGTECHx4, 0), 0)         AS GCURRENTBALANCEWITHDRW,
             ROUND(ISNULL(NUEVOSALDOGTECH, 0), 0)           AS GCURRENTBALANCETOTAL,
             ROUND(ISNULL(NUEVOSALDOFIDUCIAx1, 0), 0)       AS FCURRENTBALANCELOTTERY,
             ROUND(ISNULL(NUEVOSALDOFIDUCIA, 0), 0)         AS FCURRENTBALANCETOTAL,
             ROUND(ISNULL(NUEVOSALDOGTECH, 0), 0) +
             ROUND(ISNULL(NUEVOSALDOFIDUCIA, 0), 0)         AS CURRENTBALANCETOTAL,

             ROUND(ISNULL(CANTIDADVENTA, 0), 0)             AS SALESQUANTITY,
             ROUND(ISNULL(VALORVENTA, 0), 0)                AS SALESAMOUNT,
             ROUND(ISNULL(CANTIDADANULACION, 0), 0)         AS ANNULMENTQUANTITY,
             ROUND(ISNULL(VALORANULACION, 0), 0)            AS ANNULMENTAMOUNT,
             ROUND(ISNULL(CANTIDADGRATUITO, 0), 0)          AS FREETKQUANTITY,
             ROUND(ISNULL(VALORGRATUITO, 0), 0)             AS FREETKAMOUNT,
             ROUND(ISNULL(CANTIDADPREMIOPAGO, 0), 0)        AS AWARDPAIDQUANTITY,
             ROUND(ISNULL(VALORPREMIOPAGO, 0), 0)           AS AWARDPAIDAMOUNT,
             ROUND(ISNULL(RETENCIONPREMIOSPAGADOS, 0), 0)   AS AWARDTAXDISCOUNT,

             ROUND(ISNULL(IMPVALORx1, 0), 0)                AS PRODUCTTAXIVA,
             ROUND(ISNULL(VALORVENTABRUTA, 0), 0)           AS GROSSSALES,
             ROUND(ISNULL(VALORCOMISION, 0), 0)             AS GROSSCOMMISSION,
             ROUND(ISNULL(IVACOMISION, 0), 0)               AS VATCOMMISSION,

             ROUND(ISNULL(RETVALOR_PRDx1, 0), 0)                AS TAXRENTA_PRD,
             ROUND(ISNULL(RETVALOR_PRDx2, 0), 0)                AS TAXICA_PRD,
             ROUND(ISNULL(RETVALOR_PRDx3, 0), 0)                AS TAXIVA_PRD,
             ROUND(ISNULL(RETVALOR_PRDx4, 0), 0)                AS TAXCREE_PRD,

             ROUND(ISNULL(RETVALORx1, 0), 0) +
             ROUND(ISNULL(RETVALORxUVT, 0), 0)              AS TAXRENTA,
             ROUND(ISNULL(RETVALORx2, 0), 0)                AS TAXICA,
             ROUND(ISNULL(RETVALORx3, 0), 0)                AS TAXIVA,
             ROUND(ISNULL(RETVALORx4, 0), 0)                AS TAXCREE,

             ROUND(ISNULL(VALORCOMISIONNETA, 0), 0)         AS FINALCOMMISSION,

             ROUND(ISNULL(FACTURACIONGTECH, 0), 0)          AS GCURRENTWEEK,
             ROUND(ISNULL(FACTURACIONGTECH105, 0), 0)       AS GCURRENTWEEK105,
             ROUND(ISNULL(FACTURACIONGTECH161, 0), 0)       AS GCURRENTWEEK161,
             ROUND(ISNULL(FACTURACIONFIDUCIA, 0), 0)        AS FCURRENTWEEK,
             ROUND(ISNULL(FACTURACIONGTECH, 0), 0) +
             ROUND(ISNULL(FACTURACIONFIDUCIA, 0), 0)        AS TOTALCURRENTWEEK,

             ROUND(ISNULL(NUEVOSALDOGTECH, 0), 0)           AS GCURRENTBALANCE,
             ROUND(ISNULL(NUEVOSALDOFIDUCIA, 0), 0)         AS FCURRENTBALANCE,

             /* Informaci?n de control */
             GLOBALBILLING.CODTIPOPUNTODEVENTA    AS CODTIPOPUNTODEVENTA,
             GLOBALBILLING.CODPUNTODEVENTACABEZA  AS CODPUNTODEVENTACABEZA,
             0 AS NUMEROPAGOS, 0 AS PAGOSAPLICADOS

      FROM WSXML_SFG.AGRUPACIONPUNTODEVENTA AGR
      INNER JOIN WSXML_SFG.CICLOFACTURACIONPDV CFP ON (CFP.ID_CICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV)
      /* Facturacion Globalizada */
      LEFT OUTER JOIN (SELECT /*+ index(MAESTROFACTURACIONPDV MAESTROFACT_CICLOTIRILLA_IX) */
                              MFC.CODCICLOFACTURACIONPDV            AS CODCICLOFACTURACIONPDV,
                              MFC.CODAGRUPACIONPUNTODEVENTA         AS CODAGRUPACIONPUNTODEVENTA,
                              MIN(MFC.CODPUNTODEVENTA)              AS CODPUNTODEVENTACABEZA,
                              MIN(MFC.CODTIPOPUNTODEVENTA)          AS CODTIPOPUNTODEVENTA,

                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xLOTTERY THEN ISNULL(MFP.SALDOANTERIORENCONTRAGTECH - MFP.SALDOANTERIORAFAVORGTECH, 0) ELSE 0 END)     AS SALDOANTERIORGTECHx1,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xPREPAID THEN ISNULL(MFP.SALDOANTERIORENCONTRAGTECH - MFP.SALDOANTERIORAFAVORGTECH, 0) ELSE 0 END)     AS SALDOANTERIORGTECHx2,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xBILLPAY THEN ISNULL(MFP.SALDOANTERIORENCONTRAGTECH - MFP.SALDOANTERIORAFAVORGTECH, 0) ELSE 0 END)     AS SALDOANTERIORGTECHx3,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xWITHDRW THEN ISNULL(MFP.SALDOANTERIORENCONTRAGTECH - MFP.SALDOANTERIORAFAVORGTECH, 0) ELSE 0 END)     AS SALDOANTERIORGTECHx4,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xLOTTERY THEN ISNULL(MFP.SALDOANTERIORENCONTRAFIDUCIA - MFP.SALDOANTERIORAFAVORFIDUCIA, 0) ELSE 0 END) AS SALDOANTERIORFIDUCIAx1,

                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xLOTTERY THEN ISNULL(DFP.TOTALFACTURACIONGTECH, 0) ELSE 0 END)     AS FACTURACIONGTECHx1,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xPREPAID THEN ISNULL(DFP.TOTALFACTURACIONGTECH, 0) ELSE 0 END)     AS FACTURACIONGTECHx2,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xBILLPAY THEN ISNULL(DFP.TOTALFACTURACIONGTECH, 0) ELSE 0 END)     AS FACTURACIONGTECHx3,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xWITHDRW THEN ISNULL(DFP.TOTALFACTURACIONGTECH, 0) ELSE 0 END)     AS FACTURACIONGTECHx4,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xLOTTERY THEN ISNULL(DFP.TOTALFACTURACIONFIDUCIA, 0) ELSE 0 END)   AS FACTURACIONFIDUCIAx1,

                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xLOTTERY THEN ISNULL(MFP.NUEVOSALDOENCONTRAGTECH - MFP.NUEVOSALDOAFAVORGTECH, 0) ELSE 0 END)     AS NUEVOSALDOGTECHx1,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xPREPAID THEN ISNULL(MFP.NUEVOSALDOENCONTRAGTECH - MFP.NUEVOSALDOAFAVORGTECH, 0) ELSE 0 END)     AS NUEVOSALDOGTECHx2,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xBILLPAY THEN ISNULL(MFP.NUEVOSALDOENCONTRAGTECH - MFP.NUEVOSALDOAFAVORGTECH, 0) ELSE 0 END)     AS NUEVOSALDOGTECHx3,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xWITHDRW THEN ISNULL(MFP.NUEVOSALDOENCONTRAGTECH - MFP.NUEVOSALDOAFAVORGTECH, 0) ELSE 0 END)     AS NUEVOSALDOGTECHx4,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = @xLOTTERY THEN ISNULL(MFP.NUEVOSALDOENCONTRAFIDUCIA - MFP.NUEVOSALDOAFAVORFIDUCIA, 0) ELSE 0 END) AS NUEVOSALDOFIDUCIAx1,

                              SUM(ISNULL(DFP.TOTALFACTURACIONGTECH, 0))                                         AS FACTURACIONGTECH,
                              SUM(ISNULL(MFP.SALDOANTERIORENCONTRAGTECH - MFP.SALDOANTERIORAFAVORGTECH, 0))     AS SALDOANTERIORGTECH,
                              SUM(ISNULL((ISNULL(MFP.NUEVOSALDOENCONTRAGTECH,0)- ISNULL(RET_PRD.VALORRETENCION_PRDx1, 0) - ISNULL(RET_PRD.VALORRETENCION_PRDx2, 0) - ISNULL(RET_PRD.VALORRETENCION_PRDx3,0)) - MFP.NUEVOSALDOAFAVORGTECH, 0))           AS NUEVOSALDOGTECH,
                              --SUM(NVL(MFP.NUEVOSALDOENCONTRAGTECH - MFP.NUEVOSALDOAFAVORGTECH, 0))           AS NUEVOSALDOGTECH,
                              MIN(MFC.REFERENCIAGTECH)                                                       AS REFERENCIAGTECH,
                              SUM(ISNULL(DFP.TOTALFACTURACIONFIDUCIA, 0))                                       AS FACTURACIONFIDUCIA,
                              SUM(ISNULL(MFP.SALDOANTERIORENCONTRAFIDUCIA - MFP.SALDOANTERIORAFAVORFIDUCIA, 0)) AS SALDOANTERIORFIDUCIA,
                              SUM(ISNULL(MFP.NUEVOSALDOENCONTRAFIDUCIA - MFP.NUEVOSALDOAFAVORFIDUCIA, 0))       AS NUEVOSALDOFIDUCIA,
                              MIN(MFC.REFERENCIAFIDUCIA)                                                     AS REFERENCIAFIDUCIA,

                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO = 1
                                       THEN ISNULL(DFP.TOTALFACTURACIONGTECH, 0) ELSE 0 END)                    AS FACTURACIONGTECH105,
                              SUM(CASE WHEN MFP.CODLINEADENEGOCIO IN (2, 3, 4)
                                       THEN ISNULL(DFP.TOTALFACTURACIONGTECH, 0) ELSE 0 END)                    AS FACTURACIONGTECH161,

                              SUM(ISNULL(DFP.CANTIDADVENTA, 0))           AS CANTIDADVENTA,
                              SUM(ISNULL(DFP.VALORVENTA, 0))              AS VALORVENTA,
                              SUM(ISNULL(DFP.CANTIDADANULACION, 0))       AS CANTIDADANULACION,
                              SUM(ISNULL(DFP.VALORANULACION, 0))          AS VALORANULACION,
                              SUM(ISNULL(DFP.CANTIDADGRATUITO, 0))        AS CANTIDADGRATUITO,
                              SUM(ISNULL(DFP.VALORGRATUITO, 0))           AS VALORGRATUITO,
                              SUM(ISNULL(DFP.CANTIDADPREMIOPAGO, 0))      AS CANTIDADPREMIOPAGO,
                              SUM(ISNULL(DFP.VALORPREMIOPAGO, 0))         AS VALORPREMIOPAGO,
                              SUM(ISNULL(DFP.RETENCIONPREMIOSPAGADOS, 0)) AS RETENCIONPREMIOSPAGADOS,

                              SUM(ISNULL(IMP.VALORIMPUESTOx1, 0))         AS IMPVALORx1,
                              SUM(ISNULL(DFP.VALORVENTABRUTA, 0))         AS VALORVENTABRUTA,
                              SUM(ISNULL(DFP.VALORCOMISION, 0))           AS VALORCOMISION,
                              SUM(ISNULL(DFP.IVACOMISION, 0))             AS IVACOMISION,

                              SUM(ISNULL(RET_PRD.VALORRETENCION_PRDx1, 0))        AS RETVALOR_PRDx1,
                              SUM(ISNULL(RET_PRD.VALORRETENCION_PRDx2, 0))        AS RETVALOR_PRDx2,
                              SUM(ISNULL(RET_PRD.VALORRETENCION_PRDx3, 0))        AS RETVALOR_PRDx3,
                              SUM(ISNULL(RET_PRD.VALORRETENCION_PRDx4, 0))        AS RETVALOR_PRDx4,

                              SUM(ISNULL(RET.VALORRETENCIONx1, 0))        AS RETVALORx1,
                              SUM(ISNULL(RET.VALORRETENCIONx2, 0))        AS RETVALORx2,
                              SUM(ISNULL(RET.VALORRETENCIONx3, 0))        AS RETVALORx3,
                              SUM(ISNULL(RET.VALORRETENCIONx4, 0))        AS RETVALORx4,

                              SUM(ISNULL(RUV.VALORRETENCIONUVT, 0))       AS RETVALORxUVT,
                              SUM(ISNULL(DFP.VALORCOMISIONNETA, 0))       AS VALORCOMISIONNETA

                       FROM WSXML_SFG.MAESTROFACTURACIONPDV MFP
                       INNER JOIN WSXML_SFG.MAESTROFACTURACIONCOMPCONSIG MFC ON (MFC.ID_MAESTROFACTCOMPCONSIG = MFP.CODMAESTROFACTURACIONCOMPCONSI)
                       -- Details of Billing
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONPDV XMLGENERACION_DFP_IX) */
                                               DFP.CODMAESTROFACTURACIONPDV,
                                               SUM(DFP.CANTIDADVENTA)           AS CANTIDADVENTA,
                                               SUM(DFP.VALORVENTA)              AS VALORVENTA,
                                               SUM(DFP.CANTIDADANULACION)       AS CANTIDADANULACION,
                                               SUM(DFP.VALORANULACION)          AS VALORANULACION,
                                               SUM(DFP.CANTIDADGRATUITO)        AS CANTIDADGRATUITO,
                                               SUM(DFP.VALORGRATUITO)           AS VALORGRATUITO,
                                               SUM(DFP.CANTIDADPREMIOPAGO)      AS CANTIDADPREMIOPAGO,
                                               SUM(DFP.VALORPREMIOPAGO)         AS VALORPREMIOPAGO,
                                               SUM(DFP.RETENCIONPREMIOSPAGADOS) AS RETENCIONPREMIOSPAGADOS,

                                               SUM(DFP.VALORVENTABRUTA)         AS VALORVENTABRUTA,
                                               SUM(DFP.VALORCOMISION)           AS VALORCOMISION,
                                               SUM(DFP.VALORCOMISIONBRUTA)      AS VALORCOMISIONBRUTA,
                                               SUM(DFP.VALORCOMISIONNETA)       AS VALORCOMISIONNETA,
                                               SUM(DFP.IVACOMISION)             AS IVACOMISION,

                                               SUM(DFP.NUEVOSALDOENCONTRAGTECH - DFP.NUEVOSALDOAFAVORGTECH) AS TOTALFACTURACIONGTECH,
                                               SUM(DFP.NUEVOSALDOENCONTRAFIDUCIA - DFP.NUEVOSALDOAFAVORFIDUCIA) AS TOTALFACTURACIONFIDUCIA

                                        FROM WSXML_SFG.DETALLEFACTURACIONPDV DFP
                                        GROUP BY DFP.CODMAESTROFACTURACIONPDV) DFP ON (DFP.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV)
                       -- Product Taxes
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONIMPUESTO GLOBALBILL_DETALLEFACTIMP_IX) */
                                               CODMAESTROFACTURACIONPDV,
                                               SUM(CASE WHEN CODIMPUESTO = @xPRODTX THEN VALORIMPUESTO ELSE 0 END) AS VALORIMPUESTOx1
                                        FROM WSXML_SFG.DETALLEFACTURACIONIMPUESTO
                                        GROUP BY CODMAESTROFACTURACIONPDV) IMP ON (IMP.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV)
                       -- Commission Taxes
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONRETENCION GLOBALBILL_DETALLEFACTRET_IX) */
                                               CODMAESTROFACTURACIONPDV,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXRENTA THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx1,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXICA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx2,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXIVA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx3,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXCREE  THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx4
                                        FROM WSXML_SFG.DETALLEFACTURACIONRETENCION
                                        GROUP BY CODMAESTROFACTURACIONPDV) RET ON (RET.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV)
                      -- Retencion Taxes over product
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONRETDIFE GLOBALBILL_DETALLEFACTRTDF_IX) */
                                               CODMAESTROFACTURACIONPDV,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXRENTA THEN VALORRETENCION ELSE 0 END) AS VALORRETENCION_PRDx1,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXICA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCION_PRDx2,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXIVA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCION_PRDx3,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXCREE  THEN VALORRETENCION ELSE 0 END) AS VALORRETENCION_PRDx4
                                        FROM WSXML_SFG.DETALLEFACTURACIONRETDIFE
                                        GROUP BY CODMAESTROFACTURACIONPDV) RET_PRD ON (RET_PRD.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV)

                       -- Special Taxes over Commission
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONRETUVT GLOBALBILL_DETALLEFACTUVT_IX) */
                                               CODMAESTROFACTURACIONPDV, SUM(VALORRETENCION) AS VALORRETENCIONUVT
                                        FROM WSXML_SFG.DETALLEFACTURACIONRETUVT
                                        GROUP BY CODMAESTROFACTURACIONPDV) RUV ON (RUV.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV)
                       WHERE MFP.CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV
                       GROUP BY MFC.CODCICLOFACTURACIONPDV, MFC.CODAGRUPACIONPUNTODEVENTA
                       ) GLOBALBILLING ON (GLOBALBILLING.CODCICLOFACTURACIONPDV = CFP.ID_CICLOFACTURACIONPDV
                                       AND GLOBALBILLING.CODAGRUPACIONPUNTODEVENTA = AGR.ID_AGRUPACIONPUNTODEVENTA)
      WHERE CAST(AGR.CODIGOAGRUPACIONGTECH AS INT) = CAST(@p_CODIGOAGRUPACIONGTECH AS INT);
	 
	END TRY
	BEGIN CATCH
		DECLARE @l_TIPOINFORMATIVO TINYINT, @l_TIPOERROR TINYINT, @l_TIPOADVERTENCIA TINYINT, @l_TIPOCUALQUIERA TINYINT, @l_PROCESONOTIFICACION TINYINT, @l_ESTADOABIERTA TINYINT, @l_ESTADOCERRADA TINYINT 
		EXEC WSXML_SFG.SFGALERTA_CONSTANT @l_TIPOINFORMATIVO OUT, @l_TIPOERROR OUT, @l_TIPOADVERTENCIA OUT, @l_TIPOCUALQUIERA OUT, @l_PROCESONOTIFICACION OUT, @l_ESTADOABIERTA OUT, @l_ESTADOCERRADA OUT 
		SET @msg = 'No se pudo obtener la informaci?n base para los reportes de de cadenas: ' + isnull(ERROR_MESSAGE(), '');
		EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @l_TIPOADVERTENCIA, 'GENERACIONXMLUNIFICADA', @msg, 1
	END CATCH
  END;
GO


IF OBJECT_ID('WSXML_SFG.SFGREPORTESTERMINAL_GetInvoiceReportInfo', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREPORTESTERMINAL_GetInvoiceReportInfo;
GO
CREATE     PROCEDURE WSXML_SFG.SFGREPORTESTERMINAL_GetInvoiceReportInfo(@p_SECUENCIACICLO NUMERIC(22,0), @p_CODIGOGTECHPUNTODEVENTA NVARCHAR(2000)) AS
 BEGIN
	 SET NOCOUNT ON;
    DECLARE @cCODCICLOFACTURACIONPDV NUMERIC(22,0);
    DECLARE @cFECHAULTIMAEJECUCION   DATETIME;
   

		EXEC WSXML_SFG.SFGREPORTESTERMINAL_ExpectedCycleID @p_SECUENCIACICLO, @cCODCICLOFACTURACIONPDV, @cFECHAULTIMAEJECUCION OUT
		
		DECLARE @l_PUNTODEVENTA_F NUMERIC(22,0)
		EXEC WSXML_SFG.PUNTODEVENTA_F @p_CODIGOGTECHPUNTODEVENTA, 0, @l_PUNTODEVENTA_F OUT
    -- Info per contract type for each product
    /* Dynamic behaviour could be accomplished with a previous list of taxes */
	 
	 
      SELECT ID_PUNTODEVENTA,
             ID_COMPANIA,
             ID_TIPOCONTRATOPRODUCTO,
             CODIGO,
             NOMCOMPANIA,
             IDENTIFICACION,
             NOMTIPOCONTRATOPRODUCTO,
             ROUND(SUM(INGRESO), 0)       AS INGRESO,
             ROUND(SUM(IVAINGRESO), 0)    AS IVAINGRESO,
             ROUND(SUM(RETEFUENTE), 0)    AS RETEFUENTE,
             ROUND(SUM(RETEICA), 0)       AS RETEICA,
             ROUND(SUM(RETEIVA), 0)       AS RETEIVA,
             ROUND(SUM(RETECREE), 0)      AS RETECREE,

             ROUND(SUM(RETEFUENTE_PRD), 0)    AS RETEFUENTE_PRD,
             ROUND(SUM(RETEICA_PRD), 0)       AS RETEICA_PRD,
             ROUND(SUM(RETEIVA_PRD), 0)       AS RETEIVA_PRD,
             ROUND(SUM(RETECREE_PRD), 0)      AS RETECREE_PRD,

             ROUND(SUM(INGRESONETO), 0)   AS INGRESONETO
        FROM (SELECT /* Informaci?n de control */
                     MFP.CODPUNTODEVENTA         AS ID_PUNTODEVENTA,
                     CIA.ID_COMPANIA             AS ID_COMPANIA,
                     CASE WHEN ISNULL(RSC.CODTIPOCONTRATOPDV, 1) = 3
                          THEN TCP.ID_TIPOCONTRATOPRODUCTO
                          ELSE 0 END             AS ID_TIPOCONTRATOPRODUCTO,
                     /* Informacion Base */
                     CIA.CODIGO,
                     CIA.NOMCOMPANIA,
                     WSXML_SFG.SFGCOMPANIA_FormatIdentification(CIA.IDENTIFICACION, CIA.DIGITOVERIFICACION) AS IDENTIFICACION,
                     CASE WHEN ISNULL(RSC.CODTIPOCONTRATOPDV, 1) = 3
                          THEN CONVERT(VARCHAR, TCP.NOMTIPOCONTRATOPRODUCTO)
                          ELSE CONVERT(VARCHAR, 'ADMINISTRACION PDV') END AS NOMTIPOCONTRATOPRODUCTO,
                     /* Valores */
                     SUM(DFP.VALORCOMISION)                            AS INGRESO,
                     SUM(DFP.IVACOMISION)                              AS IVAINGRESO,

                     SUM(ISNULL(RET_PRD.RETEFUENTE_PRD, 0))                       AS RETEFUENTE_PRD,
                     SUM(ISNULL(RET_PRD.RETEICA_PRD, 0))                          AS RETEICA_PRD,
                     SUM(ISNULL(RET_PRD.RETEIVA_PRD, 0))                          AS RETEIVA_PRD,
                     SUM(ISNULL(RET_PRD.RETECREE_PRD, 0))                          AS RETECREE_PRD,

                     SUM(ISNULL(RET.RETEFUENTE, 0) + ISNULL(RTU.RETEUVT, 0)) AS RETEFUENTE,
                     SUM(ISNULL(RET.RETEICA, 0))                          AS RETEICA,
                     SUM(ISNULL(RET.RETEIVA, 0))                          AS RETEIVA,
                     SUM(ISNULL(RET.RETECREE, 0))                         AS RETECREE,
                     SUM(DFP.VALORCOMISIONNETA)                        AS INGRESONETO
              FROM WSXML_SFG.PUNTODEVENTA PDV
              INNER JOIN WSXML_SFG.MAESTROFACTURACIONPDV MFP ON (MFP.CODCICLOFACTURACIONPDV   = @cCODCICLOFACTURACIONPDV
                                                   AND MFP.CODPUNTODEVENTA          = PDV.ID_PUNTODEVENTA)
              INNER JOIN WSXML_SFG.DETALLEFACTURACIONPDV DFP ON (DFP.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV)
              INNER JOIN WSXML_SFG.PRODUCTO              PRD ON (PRD.ID_PRODUCTO              = DFP.CODPRODUCTO)
              INNER JOIN WSXML_SFG.COMPANIA              CIA ON (CIA.ID_COMPANIA              = PRD.CODCOMPANIA)
              INNER JOIN WSXML_SFG.PRODUCTOCONTRATO      PCT ON (PCT.CODPRODUCTO              = PRD.ID_PRODUCTO)
              INNER JOIN WSXML_SFG.TIPOCONTRATOPRODUCTO  TCP ON (TCP.ID_TIPOCONTRATOPRODUCTO  = PCT.CODTIPOCONTRATOPRODUCTO)
              -- Tipo de contrato por compania, ya que es independiente el servicio
              LEFT OUTER JOIN WSXML_SFG.RAZONSOCIALCONTRATO RSC ON (RSC.CODRAZONSOCIAL        = PDV.CODRAZONSOCIAL
                                                      AND RSC.CODCOMPANIA           = CIA.ID_COMPANIA)
              LEFT OUTER JOIN (SELECT CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV,
                                      SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 1 THEN VALORRETENCION ELSE 0 END) AS RETEFUENTE,
                                      SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 2 THEN VALORRETENCION ELSE 0 END) AS RETEICA,
                                      SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 3 THEN VALORRETENCION ELSE 0 END) AS RETEIVA,
                                      SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 4 THEN VALORRETENCION ELSE 0 END) AS RETECREE
                               FROM WSXML_SFG.DETALLEFACTURACIONRETENCION DFR
                               GROUP BY CODMAESTROFACTURACIONPDV,
                                        CODDETALLEFACTURACIONPDV) RET ON (RET.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV
                                                                      AND RET.CODDETALLEFACTURACIONPDV = DFP.ID_DETALLEFACTURACIONPDV)
              -- Retencion Taxes over product
              LEFT OUTER JOIN (SELECT CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV,
                                      SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 1 THEN VALORRETENCION ELSE 0 END) AS RETEFUENTE_PRD,
                                      SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 2 THEN VALORRETENCION ELSE 0 END) AS RETEICA_PRD,
                                      SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 3 THEN VALORRETENCION ELSE 0 END) AS RETEIVA_PRD,
                                      SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 4 THEN VALORRETENCION ELSE 0 END) AS RETECREE_PRD
                               FROM WSXML_SFG.DETALLEFACTURACIONRETDIFE DFR
                               GROUP BY CODMAESTROFACTURACIONPDV,
                                        CODDETALLEFACTURACIONPDV) RET_PRD ON (RET_PRD.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV
                                                                      AND RET_PRD.CODDETALLEFACTURACIONPDV = DFP.ID_DETALLEFACTURACIONPDV)

              LEFT OUTER JOIN (SELECT CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV,
                                      SUM(CASE WHEN CODRETENCIONUVT = 1 THEN VALORRETENCION ELSE 0 END) AS RETEUVT
                               FROM WSXML_SFG.DETALLEFACTURACIONRETUVT DFU
                               GROUP BY CODMAESTROFACTURACIONPDV,
                                        CODDETALLEFACTURACIONPDV) RTU ON (RTU.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV
                                                                      AND RTU.CODDETALLEFACTURACIONPDV = DFP.ID_DETALLEFACTURACIONPDV)
              WHERE PDV.ID_PUNTODEVENTA = @l_PUNTODEVENTA_F
              GROUP BY MFP.CODPUNTODEVENTA,
                       CIA.ID_COMPANIA,
                       TCP.ID_TIPOCONTRATOPRODUCTO,
                       CIA.CODIGO,
                       CIA.NOMCOMPANIA,
                       CIA.IDENTIFICACION,
                       CIA.DIGITOVERIFICACION,
                       TCP.NOMTIPOCONTRATOPRODUCTO,
                       RSC.CODTIPOCONTRATOPDV) T
      GROUP BY ID_PUNTODEVENTA,
               ID_COMPANIA,
               ID_TIPOCONTRATOPRODUCTO,
               CODIGO,
               NOMCOMPANIA,
               IDENTIFICACION,
               NOMTIPOCONTRATOPRODUCTO
      ORDER BY ID_PUNTODEVENTA,
               ID_COMPANIA,
               ID_TIPOCONTRATOPRODUCTO;
	
  END;
GO


  
IF OBJECT_ID('WSXML_SFG.SFGREPORTESTERMINAL_GetInvoiceReportInfoXChain', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREPORTESTERMINAL_GetInvoiceReportInfoXChain;
GO
CREATE     PROCEDURE WSXML_SFG.SFGREPORTESTERMINAL_GetInvoiceReportInfoXChain(@p_SECUENCIACICLO NUMERIC(22,0), @p_CODIGOAGRUPACIONGTECH NVARCHAR(2000)) AS
 BEGIN
    DECLARE @cCODCICLOFACTURACIONPDV NUMERIC(22,0);
    DECLARE @cFECHAULTIMAEJECUCION   DATETIME;
   
  SET NOCOUNT ON;
    EXEC WSXML_SFG.SFGREPORTESTERMINAL_ExpectedCycleID @p_SECUENCIACICLO, @cCODCICLOFACTURACIONPDV, @cFECHAULTIMAEJECUCION OUT
    -- Info per contract type for each product
    /* Dynamic behaviour could be accomplished with a previous list of taxes */
	 
      SELECT ID_AGRUPACIONPUNTODEVENTA,
             ID_COMPANIA,
             ID_TIPOCONTRATOPRODUCTO,
             CODIGO,
             NOMCOMPANIA,
             IDENTIFICACION,
             NOMTIPOCONTRATOPRODUCTO,
             ROUND(SUM(INGRESO), 0)      AS INGRESO,
             ROUND(SUM(IVAINGRESO), 0)   AS IVAINGRESO,
             ROUND(SUM(RETEFUENTE), 0)   AS RETEFUENTE,
             ROUND(SUM(RETEICA), 0)      AS RETEICA,
             ROUND(SUM(RETEIVA), 0)      AS RETEIVA,
             ROUND(SUM(RETECREE), 0)     AS RETECREE,

             ROUND(SUM(RETEFUENTE_PRD), 0)   AS RETEFUENTE_PRD,
             ROUND(SUM(RETEICA_PRD), 0)      AS RETEICA_PRD,
             ROUND(SUM(RETEIVA_PRD), 0)      AS RETEIVA_PRD,
             ROUND(SUM(RETECREE_PRD), 0)     AS RETECREE_PRD,

             ROUND(SUM(INGRESONETO), 0)  AS INGRESONETO
        FROM (
              SELECT /* Informaci?n de control */
                     MFC.CODAGRUPACIONPUNTODEVENTA AS ID_AGRUPACIONPUNTODEVENTA,
                     CIA.ID_COMPANIA               AS ID_COMPANIA,
                     CASE WHEN ISNULL(RSC.CODTIPOCONTRATOPDV, 1) = 3
                          THEN TCP.ID_TIPOCONTRATOPRODUCTO
                          ELSE 0 END               AS ID_TIPOCONTRATOPRODUCTO,
                     /* Informacion Base */
                     CIA.CODIGO,
                     CIA.NOMCOMPANIA,
                     WSXML_SFG.SFGCOMPANIA_FormatIdentification(CIA.IDENTIFICACION, CIA.DIGITOVERIFICACION) AS IDENTIFICACION,
                     CASE WHEN ISNULL(RSC.CODTIPOCONTRATOPDV, 1) = 3
                          THEN CONVERT(VARCHAR, TCP.NOMTIPOCONTRATOPRODUCTO)
                          ELSE CONVERT(VARCHAR, 'ADMINISTRACION PDV') END AS NOMTIPOCONTRATOPRODUCTO,
                     /* Valores */
                     /* Valores */
                     SUM(CASE WHEN REG.ANTICIPO = 0 THEN DFP.VALORCOMISION ELSE 0 END)     AS INGRESO,
                     SUM(DFP.IVACOMISION)                                                  AS IVAINGRESO,
                     SUM(ISNULL(RET.RETEFUENTE, 0) + ISNULL(RTU.RETEUVT, 0))                     AS RETEFUENTE,
                     SUM(ISNULL(RET.RETEICA, 0))                                              AS RETEICA,
                     SUM(ISNULL(RET.RETEIVA, 0))                                              AS RETEIVA,
                     SUM(ISNULL(RET.RETECREE, 0))                                             AS RETECREE,

                     SUM(ISNULL(RET_PRD.RETEFUENTE_PRD, 0))                                           AS RETEFUENTE_PRD,
                     SUM(ISNULL(RET_PRD.RETEICA_PRD, 0))                                              AS RETEICA_PRD,
                     SUM(ISNULL(RET_PRD.RETEIVA_PRD, 0))                                              AS RETEIVA_PRD,
                     SUM(ISNULL(RET_PRD.RETECREE_PRD, 0))                                             AS RETECREE_PRD,

                     SUM(CASE WHEN REG.ANTICIPO = 0 THEN DFP.VALORCOMISIONNETA ELSE 0 END) AS INGRESONETO
              FROM WSXML_SFG.AGRUPACIONPUNTODEVENTA AGR
              INNER JOIN WSXML_SFG.MAESTROFACTURACIONCOMPCONSIG MFC ON (MFC.CODCICLOFACTURACIONPDV         = @cCODCICLOFACTURACIONPDV
                                                          AND MFC.CODAGRUPACIONPUNTODEVENTA      = AGR.ID_AGRUPACIONPUNTODEVENTA)
              INNER JOIN WSXML_SFG.MAESTROFACTURACIONPDV        MFP ON (MFP.CODMAESTROFACTURACIONCOMPCONSI = MFC.ID_MAESTROFACTCOMPCONSIG)
              INNER JOIN WSXML_SFG.DETALLEFACTURACIONPDV        DFP ON (DFP.CODMAESTROFACTURACIONPDV       = MFP.ID_MAESTROFACTURACIONPDV)
              INNER JOIN (SELECT CODDETALLEFACTURACIONPDV,
                                 MAX(COMISIONANTICIPO) AS ANTICIPO
                          FROM WSXML_SFG.REGISTROFACTURACION
                          GROUP BY CODDETALLEFACTURACIONPDV) REG ON (REG.CODDETALLEFACTURACIONPDV = DFP.ID_DETALLEFACTURACIONPDV)
              INNER JOIN WSXML_SFG.PRODUCTO                     PRD ON (PRD.ID_PRODUCTO                    = DFP.CODPRODUCTO)
              INNER JOIN WSXML_SFG.COMPANIA                     CIA ON (CIA.ID_COMPANIA                    = PRD.CODCOMPANIA)
              INNER JOIN WSXML_SFG.PRODUCTOCONTRATO             PCT ON (PCT.CODPRODUCTO                    = PRD.ID_PRODUCTO)
              INNER JOIN WSXML_SFG.TIPOCONTRATOPRODUCTO         TCP ON (TCP.ID_TIPOCONTRATOPRODUCTO        = PCT.CODTIPOCONTRATOPRODUCTO)
              -- Razon Social tomar de cabecera. Tipo de contrato por compania, ya que es independiente el servicio
              LEFT OUTER JOIN (SELECT PDV.CODAGRUPACIONPUNTODEVENTA AS CODAGRUPACIONPUNTODEVENTA,
                                      PDV.ID_PUNTODEVENTA           AS CODPUNTODEVENTA,
                                      RSC.CODCOMPANIA               AS CODCOMPANIA,
                                      MAX(CODTIPOCONTRATOPDV)       AS CODTIPOCONTRATOPDV
                               FROM WSXML_SFG.PUNTODEVENTA PDV
                               INNER JOIN WSXML_SFG.RAZONSOCIALCONTRATO RSC ON (RSC.CODRAZONSOCIAL = PDV.CODRAZONSOCIAL)
                               GROUP BY PDV.CODAGRUPACIONPUNTODEVENTA, PDV.ID_PUNTODEVENTA, RSC.CODCOMPANIA) RSC ON (RSC.CODAGRUPACIONPUNTODEVENTA = AGR.ID_AGRUPACIONPUNTODEVENTA
                                                                                                                 AND RSC.CODPUNTODEVENTA           = AGR.CODPUNTODEVENTACABEZA
                                                                                                                 AND RSC.CODCOMPANIA               = CIA.ID_COMPANIA)
              LEFT OUTER JOIN (SELECT CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV,
                                      SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 1 THEN VALORRETENCION ELSE 0 END) AS RETEFUENTE,
                                      SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 2 THEN VALORRETENCION ELSE 0 END) AS RETEICA,
                                      SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 3 THEN VALORRETENCION ELSE 0 END) AS RETEIVA,
                                      SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 4 THEN VALORRETENCION ELSE 0 END) AS RETECREE
                               FROM WSXML_SFG.DETALLEFACTURACIONRETENCION DFR
                               GROUP BY CODMAESTROFACTURACIONPDV,
                                        CODDETALLEFACTURACIONPDV) RET ON (RET.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV
                                                                      AND RET.CODDETALLEFACTURACIONPDV = DFP.ID_DETALLEFACTURACIONPDV)
              -- Retencion Taxes over product
              LEFT OUTER JOIN (SELECT CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV,
                                SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 1 THEN VALORRETENCION ELSE 0 END) AS RETEFUENTE_PRD,
                                SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 2 THEN VALORRETENCION ELSE 0 END) AS RETEICA_PRD,
                                SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 3 THEN VALORRETENCION ELSE 0 END) AS RETEIVA_PRD,
                                SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 4 THEN VALORRETENCION ELSE 0 END) AS RETECREE_PRD
                         FROM WSXML_SFG.DETALLEFACTURACIONRETDIFE DFR
                         GROUP BY CODMAESTROFACTURACIONPDV,
                                  CODDETALLEFACTURACIONPDV) RET_PRD ON (RET_PRD.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV
                                                                AND RET_PRD.CODDETALLEFACTURACIONPDV = DFP.ID_DETALLEFACTURACIONPDV)

              LEFT OUTER JOIN (SELECT CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV,
                                      SUM(CASE WHEN CODRETENCIONUVT = 1 THEN VALORRETENCION ELSE 0 END) AS RETEUVT
                               FROM WSXML_SFG.DETALLEFACTURACIONRETUVT DFU
                               GROUP BY CODMAESTROFACTURACIONPDV,
                                        CODDETALLEFACTURACIONPDV) RTU ON (RTU.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV
                                                                      AND RTU.CODDETALLEFACTURACIONPDV = DFP.ID_DETALLEFACTURACIONPDV)
              WHERE AGR.ID_AGRUPACIONPUNTODEVENTA = WSXML_SFG.AGRUPACION_F(@p_CODIGOAGRUPACIONGTECH)
              GROUP BY MFC.CODAGRUPACIONPUNTODEVENTA,
                       CIA.ID_COMPANIA,
                       TCP.ID_TIPOCONTRATOPRODUCTO,
                       CIA.CODIGO,
                       CIA.NOMCOMPANIA,
                       CIA.IDENTIFICACION,
                       CIA.DIGITOVERIFICACION,
                       TCP.NOMTIPOCONTRATOPRODUCTO,
                       RSC.CODTIPOCONTRATOPDV) T
      GROUP BY ID_AGRUPACIONPUNTODEVENTA,
               ID_COMPANIA,
               ID_TIPOCONTRATOPRODUCTO,
               CODIGO,
               NOMCOMPANIA,
               IDENTIFICACION,
               NOMTIPOCONTRATOPRODUCTO
      ORDER BY ID_AGRUPACIONPUNTODEVENTA,
               ID_COMPANIA,
               ID_TIPOCONTRATOPRODUCTO;
	
  END;
GO

IF OBJECT_ID('WSXML_SFG.SFGREPORTESTERMINAL_GetSalesSummaryInfo', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREPORTESTERMINAL_GetSalesSummaryInfo;
GO
CREATE     PROCEDURE WSXML_SFG.SFGREPORTESTERMINAL_GetSalesSummaryInfo(@p_SECUENCIACICLO NUMERIC(22,0), @p_CODIGOGTECHPUNTODEVENTA NVARCHAR(2000)) AS
 BEGIN
	 SET NOCOUNT ON;
    DECLARE @cCODCICLOFACTURACIONPDV NUMERIC(22,0);
    DECLARE @cFECHAULTIMAEJECUCION   DATETIME;
   
 
    EXEC WSXML_SFG.SFGREPORTESTERMINAL_ExpectedCycleID @p_SECUENCIACICLO, @cCODCICLOFACTURACIONPDV, @cFECHAULTIMAEJECUCION OUT
	
	DECLARE @l_PUNTODEVENTA_F NUMERIC(22,0)
	EXEC WSXML_SFG.PUNTODEVENTA_F @p_CODIGOGTECHPUNTODEVENTA, 0, @l_PUNTODEVENTA_F OUT
    -- Info for sales. Grouped by AGRUPACIONPRODUCTO, Partitioned by both Service and Type
	 
      SELECT ID_SERVICIO,
             NOMSERVICIO,
             ID_TIPOPRODUCTO,
             NOMTIPOPRODUCTO,
             ID_AGRUPACIONPRODUCTO,
             NOMAGRUPACIONPRODUCTO,
             ROUND(SUM(DFP.CANTIDADVENTA), 0)            AS QUANTITY,
             ROUND(SUM(DFP.VALORVENTA), 0)               AS AMOUNT,
             ROUND(SUM(DFP.CANTIDADANULACION), 0)        AS ANNULLEDQUANTITY,
             ROUND(SUM(DFP.VALORANULACION), 0)           AS ANNULLEDAMOUNT,
             ROUND(SUM(ISNULL(IMP.VALORIMPUESTOx1, 0)), 0)  AS TAXIVA,
             ROUND(SUM(DFP.VALORVENTABRUTA), 0)          AS GROSSSALES,
             ROUND(SUM(DFP.CANTIDADPREMIOPAGO), 0)       AS AWARDPAIDQUANTITY,
             ROUND(SUM(DFP.VALORPREMIOPAGO), 0)          AS AWARDPAIDAMOUNT,
             ROUND(SUM(DFP.RETENCIONPREMIOSPAGADOS), 0)  AS AWARDPAIDTAXDISCOUNTING,
             ROUND(SUM(DFP.VALORCOMISION), 0)            AS COMMISSION,
             ROUND(SUM(DFP.VALORCOMISIONBRUTA -
                       DFP.VALORCOMISION), 0)            AS VATCMS,

             ROUND(SUM(ISNULL(RET_PRD.VALORRETENCION_PRDx1, 0)), 0) AS RETRNT_PRD,
             ROUND(SUM(ISNULL(RET_PRD.VALORRETENCION_PRDx2, 0)), 0) AS RETICA_PRD,
             ROUND(SUM(ISNULL(RET_PRD.VALORRETENCION_PRDx3, 0)), 0) AS RETIVA_PRD,
             ROUND(SUM(ISNULL(RET_PRD.VALORRETENCION_PRDx4, 0)), 0) AS RETCREE_PRD,

                          ROUND(SUM(ISNULL(RET.VALORRETENCIONx1, 0) +
                       ISNULL(UVT.VALORRETUVTx1, 0)), 0)    AS RETRNT,
             ROUND(SUM(ISNULL(RET.VALORRETENCIONx2, 0)), 0) AS RETICA,
             ROUND(SUM(ISNULL(RET.VALORRETENCIONx3, 0)), 0) AS RETIVA,
             ROUND(SUM(ISNULL(RET.VALORRETENCIONx4, 0)), 0) AS RETCREE,
             ROUND(SUM(DFP.VALORCOMISIONNETA), 0)        AS FINALCOMMISSION,
             -- Cummulative
             ROUND(SUM(DFP.CANTIDADVENTA -
                       DFP.CANTIDADANULACION -
                       DFP.CANTIDADPREMIOPAGO), 0)       AS FINALQUANTITY,
             ROUND(SUM(DFP.VALORVENTA -
                       DFP.VALORANULACION -
                       DFP.VALORPREMIOPAGO), 0)          AS FINALAMOUNT
      FROM WSXML_SFG.MAESTROFACTURACIONPDV MFP
      INNER JOIN WSXML_SFG.DETALLEFACTURACIONPDV DFP ON (DFP.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV)
      INNER JOIN WSXML_SFG.PRODUCTO              PRD ON (DFP.CODPRODUCTO              = PRD.ID_PRODUCTO)
      INNER JOIN WSXML_SFG.AGRUPACIONPRODUCTO    AGR ON (PRD.CODAGRUPACIONPRODUCTO    = AGR.ID_AGRUPACIONPRODUCTO)
      INNER JOIN WSXML_SFG.TIPOPRODUCTO          TPR ON (AGR.CODTIPOPRODUCTO          = TPR.ID_TIPOPRODUCTO)
      INNER JOIN WSXML_SFG.LINEADENEGOCIO        LDN ON (TPR.CODLINEADENEGOCIO        = LDN.ID_LINEADENEGOCIO)
      INNER JOIN WSXML_SFG.SERVICIO              SRV ON (LDN.CODSERVICIO              = SRV.ID_SERVICIO)
      LEFT OUTER JOIN (SELECT CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV,
                              SUM(CASE WHEN CODIMPUESTO = 1 THEN VALORIMPUESTO ELSE 0 END) AS VALORIMPUESTOx1
                       FROM WSXML_SFG.WSXML_SFG.DETALLEFACTURACIONIMPUESTO
                       GROUP BY CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV) IMP ON (IMP.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV
                                                                                        AND IMP.CODDETALLEFACTURACIONPDV = DFP.ID_DETALLEFACTURACIONPDV)
      LEFT OUTER JOIN (SELECT CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV,
                              SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 1 THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx1,
                              SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 2 THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx2,
                              SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 3 THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx3,
                              SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 4 THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx4
                       FROM WSXML_SFG.DETALLEFACTURACIONRETENCION
                       GROUP BY CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV) RET ON (RET.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV
                                                                                        AND RET.CODDETALLEFACTURACIONPDV = DFP.ID_DETALLEFACTURACIONPDV)
      -- Retencion Taxes over product
      LEFT OUTER JOIN (SELECT CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV,
                              SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 1 THEN VALORRETENCION ELSE 0 END) AS VALORRETENCION_PRDx1,
                              SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 2 THEN VALORRETENCION ELSE 0 END) AS VALORRETENCION_PRDx2,
                              SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 3 THEN VALORRETENCION ELSE 0 END) AS VALORRETENCION_PRDx3,
                              SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 4 THEN VALORRETENCION ELSE 0 END) AS VALORRETENCION_PRDx4
                       FROM WSXML_SFG.DETALLEFACTURACIONRETDIFE
                       GROUP BY CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV) RET_PRD ON (RET_PRD.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV
                                                                                        AND RET_PRD.CODDETALLEFACTURACIONPDV = DFP.ID_DETALLEFACTURACIONPDV)

      LEFT OUTER JOIN (SELECT CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV,
                              SUM(CASE WHEN CODRETENCIONUVT = 1 THEN VALORRETENCION ELSE 0 END) AS VALORRETUVTx1
                       FROM WSXML_SFG.DETALLEFACTURACIONRETUVT
                       GROUP BY CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV) UVT ON (UVT.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV
                                                                                        AND UVT.CODDETALLEFACTURACIONPDV = DFP.ID_DETALLEFACTURACIONPDV)
      WHERE MFP.CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV
        AND MFP.CODPUNTODEVENTA = @l_PUNTODEVENTA_F
      GROUP BY ID_SERVICIO,
               NOMSERVICIO,
               ORDEN,
               ID_TIPOPRODUCTO,
               NOMTIPOPRODUCTO,
               ID_AGRUPACIONPRODUCTO,
               NOMAGRUPACIONPRODUCTO
      ORDER BY ORDEN, ID_TIPOPRODUCTO, NOMAGRUPACIONPRODUCTO, SUM(DFP.CANTIDADVENTA) DESC;
	
  END;
GO


IF OBJECT_ID('WSXML_SFG.SFGREPORTESTERMINAL_GetSalesSummaryInfoXChain', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREPORTESTERMINAL_GetSalesSummaryInfoXChain;
GO
CREATE     PROCEDURE WSXML_SFG.SFGREPORTESTERMINAL_GetSalesSummaryInfoXChain(@p_SECUENCIACICLO NUMERIC(22,0), @p_CODIGOAGRUPACIONGTECH NVARCHAR(2000)) AS
 BEGIN
    DECLARE @cCODCICLOFACTURACIONPDV NUMERIC(22,0);
    DECLARE @cFECHAULTIMAEJECUCION   DATETIME;
   
  SET NOCOUNT ON;
    EXEC WSXML_SFG.SFGREPORTESTERMINAL_ExpectedCycleID @p_SECUENCIACICLO, @cCODCICLOFACTURACIONPDV, @cFECHAULTIMAEJECUCION OUT
    -- Info for sales. Grouped by AGRUPACIONPRODUCTO, Partitioned by both Service and Type
	 
      SELECT ID_SERVICIO,
             NOMSERVICIO,
             ID_TIPOPRODUCTO,
             NOMTIPOPRODUCTO,
             ID_AGRUPACIONPRODUCTO,
             NOMAGRUPACIONPRODUCTO,
             ROUND(SUM(DFP.CANTIDADVENTA), 0)            AS QUANTITY,
             ROUND(SUM(DFP.VALORVENTA), 0)               AS AMOUNT,
             ROUND(SUM(DFP.CANTIDADANULACION), 0)        AS ANNULLEDQUANTITY,
             ROUND(SUM(DFP.VALORANULACION), 0)           AS ANNULLEDAMOUNT,
             ROUND(SUM(ISNULL(IMP.VALORIMPUESTOx1, 0)), 0)  AS TAXIVA,
             ROUND(SUM(DFP.VALORVENTABRUTA), 0)          AS GROSSSALES,
             ROUND(SUM(DFP.CANTIDADPREMIOPAGO), 0)       AS AWARDPAIDQUANTITY,
             ROUND(SUM(DFP.VALORPREMIOPAGO), 0)          AS AWARDPAIDAMOUNT,
             ROUND(SUM(DFP.RETENCIONPREMIOSPAGADOS), 0)  AS AWARDPAIDTAXDISCOUNTING,
             ROUND(SUM(DFP.VALORCOMISION), 0)            AS COMMISSION,
             ROUND(SUM(DFP.VALORCOMISIONBRUTA -
                       DFP.VALORCOMISION), 0)            AS VATCMS,

             ROUND(SUM(ISNULL(RET_PRD.VALORRETENCION_PRDx1, 0)), 0) AS RETRNT_PRD,
             ROUND(SUM(ISNULL(RET_PRD.VALORRETENCION_PRDx2, 0)), 0) AS RETICA_PRD,
             ROUND(SUM(ISNULL(RET_PRD.VALORRETENCION_PRDx3, 0)), 0) AS RETIVA_PRD,
             ROUND(SUM(ISNULL(RET_PRD.VALORRETENCION_PRDx4, 0)), 0) AS RETCREE_PRD,

             ROUND(SUM(ISNULL(RET.VALORRETENCIONx1, 0) +
                       ISNULL(UVT.VALORRETUVTx1, 0)), 0)    AS RETRNT,
             ROUND(SUM(ISNULL(RET.VALORRETENCIONx2, 0)), 0) AS RETICA,
             ROUND(SUM(ISNULL(RET.VALORRETENCIONx3, 0)), 0) AS RETIVA,
             ROUND(SUM(ISNULL(RET.VALORRETENCIONx4, 0)), 0) AS RETCREE,
             ROUND(SUM(DFP.VALORCOMISIONNETA), 0)        AS FINALCOMMISSION,
             -- Cummulative
             ROUND(SUM(DFP.CANTIDADVENTA -
                       DFP.CANTIDADANULACION -
                       DFP.CANTIDADPREMIOPAGO), 0)       AS FINALQUANTITY,
             ROUND(SUM(DFP.VALORVENTA -
                       DFP.VALORANULACION -
                       DFP.VALORPREMIOPAGO), 0)          AS FINALAMOUNT
      FROM WSXML_SFG.MAESTROFACTURACIONCOMPCONSIG MFC
      INNER JOIN WSXML_SFG.MAESTROFACTURACIONPDV MFP ON (MFP.CODMAESTROFACTURACIONCOMPCONSI = MFC.ID_MAESTROFACTCOMPCONSIG)
      INNER JOIN WSXML_SFG.DETALLEFACTURACIONPDV DFP ON (DFP.CODMAESTROFACTURACIONPDV       = MFP.ID_MAESTROFACTURACIONPDV)
      INNER JOIN WSXML_SFG.PRODUCTO              PRD ON (DFP.CODPRODUCTO                    = PRD.ID_PRODUCTO)
      INNER JOIN WSXML_SFG.AGRUPACIONPRODUCTO    AGR ON (PRD.CODAGRUPACIONPRODUCTO          = AGR.ID_AGRUPACIONPRODUCTO)
      INNER JOIN WSXML_SFG.TIPOPRODUCTO          TPR ON (AGR.CODTIPOPRODUCTO                = TPR.ID_TIPOPRODUCTO)
      INNER JOIN WSXML_SFG.LINEADENEGOCIO        LDN ON (TPR.CODLINEADENEGOCIO              = LDN.ID_LINEADENEGOCIO)
      INNER JOIN WSXML_SFG.SERVICIO              SRV ON (LDN.CODSERVICIO                    = SRV.ID_SERVICIO)
      LEFT OUTER JOIN (SELECT CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV,
                              SUM(CASE WHEN CODIMPUESTO = 1 THEN VALORIMPUESTO ELSE 0 END) AS VALORIMPUESTOx1
                       FROM WSXML_SFG.DETALLEFACTURACIONIMPUESTO
                       GROUP BY CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV) IMP ON (IMP.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV
                                                                                        AND IMP.CODDETALLEFACTURACIONPDV = DFP.ID_DETALLEFACTURACIONPDV)
      LEFT OUTER JOIN (SELECT CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV,
                              SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 1 THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx1,
                              SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 2 THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx2,
                              SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 3 THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx3,
                              SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 4 THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx4
                       FROM WSXML_SFG.DETALLEFACTURACIONRETENCION
                       GROUP BY CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV) RET ON (RET.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV
                                                                                        AND RET.CODDETALLEFACTURACIONPDV = DFP.ID_DETALLEFACTURACIONPDV)
      -- Retencion Taxes over product
      LEFT OUTER JOIN (SELECT CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV,
                              SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 1 THEN VALORRETENCION ELSE 0 END) AS VALORRETENCION_PRDx1,
                              SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 2 THEN VALORRETENCION ELSE 0 END) AS VALORRETENCION_PRDx2,
                              SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 3 THEN VALORRETENCION ELSE 0 END) AS VALORRETENCION_PRDx3,
                              SUM(CASE WHEN CODRETENCIONTRIBUTARIA = 4 THEN VALORRETENCION ELSE 0 END) AS VALORRETENCION_PRDx4
                       FROM WSXML_SFG.DETALLEFACTURACIONRETDIFE
                       GROUP BY CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV) RET_PRD ON (RET_PRD.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV
                                                                                        AND RET_PRD.CODDETALLEFACTURACIONPDV = DFP.ID_DETALLEFACTURACIONPDV)

      LEFT OUTER JOIN (SELECT CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV,
                              SUM(CASE WHEN CODRETENCIONUVT = 1 THEN VALORRETENCION ELSE 0 END) AS VALORRETUVTx1
                       FROM WSXML_SFG.DETALLEFACTURACIONRETUVT
                       GROUP BY CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV) UVT ON (UVT.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV
                                                                                        AND UVT.CODDETALLEFACTURACIONPDV = DFP.ID_DETALLEFACTURACIONPDV)
      WHERE MFC.CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV
        AND MFC.CODAGRUPACIONPUNTODEVENTA = WSXML_SFG.AGRUPACION_F(@p_CODIGOAGRUPACIONGTECH)
      GROUP BY ID_SERVICIO,
               NOMSERVICIO,
               ORDEN,
               ID_TIPOPRODUCTO,
               NOMTIPOPRODUCTO,
               ID_AGRUPACIONPRODUCTO,
               NOMAGRUPACIONPRODUCTO
      ORDER BY ORDEN, ID_TIPOPRODUCTO, NOMAGRUPACIONPRODUCTO, SUM(DFP.CANTIDADVENTA) DESC;
	
  END;
GO
