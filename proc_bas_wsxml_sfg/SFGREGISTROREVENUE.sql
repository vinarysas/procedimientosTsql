USE SFGPRODU;
--  DDL for Package Body SFGREGISTROREVENUE
--------------------------------------------------------

  /* PACKAGE BODY WSXML_SFG.SFGREGISTROREVENUE */ 

  IF OBJECT_ID('WSXML_SFG.SFGREGISTROREVENUE_AddRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_AddRecord;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_AddRecord(@p_CODENTRADAARCHIVOCONTROL NUMERIC(22,0),
                      @p_CODREGISTROFACTURACION   NUMERIC(22,0),
                      @p_CODTIPOREGISTRO          NUMERIC(22,0),
                      @p_FECHA                    DATETIME,
                      @p_CODPUNTODEVENTA          NUMERIC(22,0),
                      @p_CODTIPOCONTRATOPDV       NUMERIC(22,0),
                      @p_CODPRODUCTO              NUMERIC(22,0),
                      @p_CODTIPOCONTRATOPRODUCTO  NUMERIC(22,0),
                      @p_CODCOMPANIA              NUMERIC(22,0),
                      @p_CODRANGOCOMISION         NUMERIC(22,0),
                      @p_REVENUEBASE              FLOAT,
                      @p_CODPRODUCTOREVENUE       NUMERIC(22,0),
                      @p_VALORCOMISIONESTANDAR    FLOAT,
                      @p_ID_REGISTROREVENUE_out   NUMERIC(22,0) OUT) AS
  BEGIN
  SET NOCOUNT ON;

  BEGIN TRY
    INSERT INTO WSXML_SFG.REGISTROREVENUE
      (
       CODENTRADAARCHIVOCONTROL,
       CODREGISTROFACTURACION,
       CODTIPOREGISTRO,
       FECHA,
       CODPUNTODEVENTA,
       CODTIPOCONTRATOPDV,
       CODPRODUCTO,
       CODTIPOCONTRATOPRODUCTO,
       CODCOMPANIA,
       CODRANGOCOMISION,
       REVENUEBASE,
       REVENUETOTAL,
       CODPRODUCTOREVENUE,
       VALORCOMISIONESTANDAR)
    VALUES
      (
       @p_CODENTRADAARCHIVOCONTROL,
       @p_CODREGISTROFACTURACION,
       @p_CODTIPOREGISTRO,
       @p_FECHA,
       @p_CODPUNTODEVENTA,
       @p_CODTIPOCONTRATOPDV,
       @p_CODPRODUCTO,
       @p_CODTIPOCONTRATOPRODUCTO,
       @p_CODCOMPANIA,
       @p_CODRANGOCOMISION,
       @p_REVENUEBASE,
       @p_REVENUEBASE,
       @p_CODPRODUCTOREVENUE,
       @p_VALORCOMISIONESTANDAR);
    SET @p_ID_REGISTROREVENUE_out = SCOPE_IDENTITY();

	END TRY
	BEGIN CATCH
		DECLARE @msgRaiserror VARCHAR(2000) = '-20099 Ha ocurrido el siguiente Error en el calculo de revenue para el Registro Facturacion ' +
                              ISNULL(@p_CODREGISTROFACTURACION, '') + ' --> ' +
                              isnull(ERROR_MESSAGE() , '')  
      RAISERROR(@msgRaiserror, 16, 1);
	END CATCH
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGREGISTROREVENUE_AddReplaceRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_AddReplaceRecord;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_AddReplaceRecord(@p_CODENTRADAARCHIVOCONTROL NUMERIC(22,0),
                             @p_CODREGISTROFACTURACION   NUMERIC(22,0),
                             @p_CODTIPOREGISTRO          NUMERIC(22,0),
                             @p_FECHA                    DATETIME,
                             @p_CODPUNTODEVENTA          NUMERIC(22,0),
                             @p_CODTIPOCONTRATOPDV       NUMERIC(22,0),
                             @p_CODPRODUCTO              NUMERIC(22,0),
                             @p_CODTIPOCONTRATOPRODUCTO  NUMERIC(22,0),
                             @p_CODCOMPANIA              NUMERIC(22,0),
                             @p_CODRANGOCOMISION         NUMERIC(22,0),
                             @p_REVENUEBASE              FLOAT,
                             @p_CODPRODUCTOREVENUE       NUMERIC(22,0),
                             @p_VALORCOMISIONESTANDAR    FLOAT,
                             @p_ID_REGISTROREVENUE_out   NUMERIC(22,0) OUT) AS
  BEGIN
  SET NOCOUNT ON;

  BEGIN TRY
    SELECT @p_ID_REGISTROREVENUE_out = ID_REGISTROREVENUE
      FROM WSXML_SFG.REGISTROREVENUE
     WHERE CODENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL
       AND CODREGISTROFACTURACION = @p_CODREGISTROFACTURACION;

    UPDATE WSXML_SFG.REGISTROREVENUE
       SET CODTIPOCONTRATOPDV      = @p_CODTIPOCONTRATOPDV,
           CODTIPOCONTRATOPRODUCTO = @p_CODTIPOCONTRATOPRODUCTO,
           CODCOMPANIA             = @p_CODCOMPANIA,
           CODRANGOCOMISION        = @p_CODRANGOCOMISION,
           REVENUEBASE             = @p_REVENUEBASE,
           REVENUETOTAL            = @p_REVENUEBASE,
           CODPRODUCTOREVENUE      = @p_CODPRODUCTOREVENUE,
           VALORCOMISIONESTANDAR   = @p_VALORCOMISIONESTANDAR
     WHERE ID_REGISTROREVENUE = @p_ID_REGISTROREVENUE_out;
  
   IF @@ROWCOUNT = 0 BEGIN
	 INSERT INTO WSXML_SFG.REGISTROREVENUE
        (
         CODENTRADAARCHIVOCONTROL,
         CODREGISTROFACTURACION,
         CODTIPOREGISTRO,
         FECHA,
         CODPUNTODEVENTA,
         CODTIPOCONTRATOPDV,
         CODPRODUCTO,
         CODTIPOCONTRATOPRODUCTO,
         CODCOMPANIA,
         CODRANGOCOMISION,
         REVENUEBASE,
         REVENUETOTAL,
         CODPRODUCTOREVENUE,
         VALORCOMISIONESTANDAR)
      VALUES
        (
         @p_CODENTRADAARCHIVOCONTROL,
         @p_CODREGISTROFACTURACION,
         @p_CODTIPOREGISTRO,
         @p_FECHA,
         @p_CODPUNTODEVENTA,
         @p_CODTIPOCONTRATOPDV,
         @p_CODPRODUCTO,
         @p_CODTIPOCONTRATOPRODUCTO,
         @p_CODCOMPANIA,
         @p_CODRANGOCOMISION,
         @p_REVENUEBASE,
         @p_REVENUEBASE,
         @p_CODPRODUCTOREVENUE,
         @p_VALORCOMISIONESTANDAR);
      SET @p_ID_REGISTROREVENUE_out = SCOPE_IDENTITY();
   END
     
	END TRY
	BEGIN CATCH
		DECLARE @msgError varchar(2000) = '-20099 Ha ocurrido el siguiente Error en el calculo de revenue para el Registro Facturacion ' + ISNULL(@p_CODREGISTROFACTURACION, '') + ' --> ' + isnull(ERROR_MESSAGE() , '')
      RAISERROR(@msgError, 16, 1);

	END CATCH
   
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGREGISTROREVENUE_AddReplaceAppendRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_AddReplaceAppendRecord;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_AddReplaceAppendRecord(@p_CODENTRADAARCHIVOCONTROL NUMERIC(22,0),
                                   @p_CODREGISTROFACTURACION   NUMERIC(22,0),
                                   @p_CODTIPOREGISTRO          NUMERIC(22,0),
                                   @p_FECHA                    DATETIME,
                                   @p_CODPUNTODEVENTA          NUMERIC(22,0),
                                   @p_CODTIPOCONTRATOPDV       NUMERIC(22,0),
                                   @p_CODPRODUCTO              NUMERIC(22,0),
                                   @p_CODTIPOCONTRATOPRODUCTO  NUMERIC(22,0),
                                   @p_CODCOMPANIA              NUMERIC(22,0),
                                   @p_CODRANGOCOMISION         NUMERIC(22,0),
                                   @p_REVENUEBASE              FLOAT,
                                   @p_CODPRODUCTOREVENUE       NUMERIC(22,0),
                                   @p_VALORCOMISIONESTANDAR    FLOAT,
                                   @p_ID_REGISTROREVENUE_out   NUMERIC(22,0) OUT) AS
  BEGIN
  SET NOCOUNT ON;

  begin try

    SELECT @p_ID_REGISTROREVENUE_out = ID_REGISTROREVENUE
      FROM WSXML_SFG.REGISTROREVENUE
     WHERE CODENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL
       AND CODREGISTROFACTURACION = @p_CODREGISTROFACTURACION;
    UPDATE WSXML_SFG.REGISTROREVENUE
       SET CODTIPOCONTRATOPDV      = @p_CODTIPOCONTRATOPDV,
           CODTIPOCONTRATOPRODUCTO = @p_CODTIPOCONTRATOPRODUCTO,
           CODCOMPANIA             = @p_CODCOMPANIA,
           CODRANGOCOMISION        = @p_CODRANGOCOMISION,
           REVENUEBASE             = isnull(REVENUEBASE, 0) + @p_REVENUEBASE,
           REVENUETOTAL            = REVENUETOTAL + @p_REVENUEBASE,
           CODPRODUCTOREVENUE      = @p_CODPRODUCTOREVENUE,
           VALORCOMISIONESTANDAR   = VALORCOMISIONESTANDAR +
                                     @p_VALORCOMISIONESTANDAR
     WHERE ID_REGISTROREVENUE = @p_ID_REGISTROREVENUE_out;
	if @@ROWCOUNT  = 0 begin
   
		  INSERT INTO WSXML_SFG.REGISTROREVENUE
			(
			 CODENTRADAARCHIVOCONTROL,
			 CODREGISTROFACTURACION,
			 CODTIPOREGISTRO,
			 FECHA,
			 CODPUNTODEVENTA,
			 CODTIPOCONTRATOPDV,
			 CODPRODUCTO,
			 CODTIPOCONTRATOPRODUCTO,
			 CODCOMPANIA,
			 CODRANGOCOMISION,
			 REVENUEBASE,
			 REVENUETOTAL,
			 CODPRODUCTOREVENUE,
			 VALORCOMISIONESTANDAR)
		  VALUES
			(
			 @p_CODENTRADAARCHIVOCONTROL,
			 @p_CODREGISTROFACTURACION,
			 @p_CODTIPOREGISTRO,
			 @p_FECHA,
			 @p_CODPUNTODEVENTA,
			 @p_CODTIPOCONTRATOPDV,
			 @p_CODPRODUCTO,
			 @p_CODTIPOCONTRATOPRODUCTO,
			 @p_CODCOMPANIA,
			 @p_CODRANGOCOMISION,
			 @p_REVENUEBASE,
			 @p_REVENUEBASE,
			 @p_CODPRODUCTOREVENUE,
			 @p_VALORCOMISIONESTANDAR);
		  SET @p_ID_REGISTROREVENUE_out = SCOPE_IDENTITY();
	  end
	  end try
	  begin catch
		declare @msgError varchar(2000) = '-20099 Ha ocurrido el siguiente Error en el calculo de revenue para el Registro Facturacion ' +
                              ISNULL(@p_CODREGISTROFACTURACION, '') + ' --> ' +
                              isnull(ERROR_MESSAGE() , '')
		RAISERROR(@msgError, 16, 1);
	end catch
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGREGISTROREVENUE_AddEmptyRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_AddEmptyRecord;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_AddEmptyRecord(@p_CODENTRADAARCHIVOCONTROL NUMERIC(22,0),
                           @p_CODREGISTROFACTURACION   NUMERIC(22,0),
                           @p_CODTIPOREGISTRO          NUMERIC(22,0),
                           @p_FECHA                    DATETIME,
                           @p_CODPUNTODEVENTA          NUMERIC(22,0),
                           @p_CODTIPOCONTRATOPDV       NUMERIC(22,0),
                           @p_CODPRODUCTO              NUMERIC(22,0),
                           @p_CODTIPOCONTRATOPRODUCTO  NUMERIC(22,0),
                           @p_CODCOMPANIA              NUMERIC(22,0),
                           @p_CODRANGOCOMISION         NUMERIC(22,0),
                           @p_CODPRODUCTOREVENUE       NUMERIC(22,0),
                           @p_VALORCOMISIONESTANDAR    FLOAT,
                           @p_ID_REGISTROREVENUE_out   NUMERIC(22,0) OUT) AS
  BEGIN
  SET NOCOUNT ON;
    INSERT INTO WSXML_SFG.REGISTROREVENUE
      (
       CODENTRADAARCHIVOCONTROL,
       CODREGISTROFACTURACION,
       CODTIPOREGISTRO,
       FECHA,
       CODPUNTODEVENTA,
       CODTIPOCONTRATOPDV,
       CODPRODUCTO,
       CODTIPOCONTRATOPRODUCTO,
       CODCOMPANIA,
       CODRANGOCOMISION,
       CODPRODUCTOREVENUE,
       VALORCOMISIONESTANDAR)
    VALUES
      (
       @p_CODENTRADAARCHIVOCONTROL,
       @p_CODREGISTROFACTURACION,
       @p_CODTIPOREGISTRO,
       @p_FECHA,
       @p_CODPUNTODEVENTA,
       @p_CODTIPOCONTRATOPDV,
       @p_CODPRODUCTO,
       @p_CODTIPOCONTRATOPRODUCTO,
       @p_CODCOMPANIA,
       @p_CODRANGOCOMISION,
       @p_CODPRODUCTOREVENUE,
       @p_VALORCOMISIONESTANDAR);
    SET @p_ID_REGISTROREVENUE_out = SCOPE_IDENTITY();
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGREGISTROREVENUE_AddReplaceEmptyRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_AddReplaceEmptyRecord;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_AddReplaceEmptyRecord(@p_CODENTRADAARCHIVOCONTROL NUMERIC(22,0),
                                  @p_CODREGISTROFACTURACION   NUMERIC(22,0),
                                  @p_CODTIPOREGISTRO          NUMERIC(22,0),
                                  @p_FECHA                    DATETIME,
                                  @p_CODPUNTODEVENTA          NUMERIC(22,0),
                                  @p_CODTIPOCONTRATOPDV       NUMERIC(22,0),
                                  @p_CODPRODUCTO              NUMERIC(22,0),
                                  @p_CODTIPOCONTRATOPRODUCTO  NUMERIC(22,0),
                                  @p_CODCOMPANIA              NUMERIC(22,0),
                                  @p_CODRANGOCOMISION         NUMERIC(22,0),
                                  @p_CODPRODUCTOREVENUE       NUMERIC(22,0),
                                  @p_VALORCOMISIONESTANDAR    FLOAT,
                                  @p_ID_REGISTROREVENUE_out   NUMERIC(22,0) OUT) AS
  BEGIN
  SET NOCOUNT ON;
    SELECT @p_ID_REGISTROREVENUE_out = ID_REGISTROREVENUE
      FROM WSXML_SFG.REGISTROREVENUE
     WHERE CODENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL
       AND CODREGISTROFACTURACION = @p_CODREGISTROFACTURACION;
    DELETE FROM REGISTROREVENUETRANSACCION
     WHERE CODREGISTROREVENUE = @p_ID_REGISTROREVENUE_out;

    UPDATE WSXML_SFG.REGISTROREVENUE
       SET CODTIPOCONTRATOPDV      = @p_CODTIPOCONTRATOPDV,
           CODTIPOCONTRATOPRODUCTO = @p_CODTIPOCONTRATOPRODUCTO,
           CODCOMPANIA             = @p_CODCOMPANIA,
           CODRANGOCOMISION        = @p_CODRANGOCOMISION,
           REVENUEBASE             = 0,
           REVENUETOTAL            = 0,
           CODPRODUCTOREVENUE      = @p_CODPRODUCTOREVENUE,
           VALORCOMISIONESTANDAR   = @p_VALORCOMISIONESTANDAR
     WHERE ID_REGISTROREVENUE = @p_ID_REGISTROREVENUE_out;
  
	IF @@ROWCOUNT  = 0 BEGIN
   
      INSERT INTO WSXML_SFG.REGISTROREVENUE
        (
         CODENTRADAARCHIVOCONTROL,
         CODREGISTROFACTURACION,
         CODTIPOREGISTRO,
         FECHA,
         CODPUNTODEVENTA,
         CODTIPOCONTRATOPDV,
         CODPRODUCTO,
         CODTIPOCONTRATOPRODUCTO,
         CODCOMPANIA,
         CODRANGOCOMISION,
         CODPRODUCTOREVENUE,
         VALORCOMISIONESTANDAR)
      VALUES
        (
         @p_CODENTRADAARCHIVOCONTROL,
         @p_CODREGISTROFACTURACION,
         @p_CODTIPOREGISTRO,
         @p_FECHA,
         @p_CODPUNTODEVENTA,
         @p_CODTIPOCONTRATOPDV,
         @p_CODPRODUCTO,
         @p_CODTIPOCONTRATOPRODUCTO,
         @p_CODCOMPANIA,
         @p_CODRANGOCOMISION,
         @p_CODPRODUCTOREVENUE,
         @p_VALORCOMISIONESTANDAR);
      SET @p_ID_REGISTROREVENUE_out = SCOPE_IDENTITY();
	  END
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGREGISTROREVENUE_AddReplaceAppendEmptyRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_AddReplaceAppendEmptyRecord;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_AddReplaceAppendEmptyRecord(@p_CODENTRADAARCHIVOCONTROL NUMERIC(22,0),
                                        @p_CODREGISTROFACTURACION   NUMERIC(22,0),
                                        @p_CODTIPOREGISTRO          NUMERIC(22,0),
                                        @p_FECHA                    DATETIME,
                                        @p_CODPUNTODEVENTA          NUMERIC(22,0),
                                        @p_CODTIPOCONTRATOPDV       NUMERIC(22,0),
                                        @p_CODPRODUCTO              NUMERIC(22,0),
                                        @p_CODTIPOCONTRATOPRODUCTO  NUMERIC(22,0),
                                        @p_CODCOMPANIA              NUMERIC(22,0),
                                        @p_CODRANGOCOMISION         NUMERIC(22,0),
                                        @p_CODPRODUCTOREVENUE       NUMERIC(22,0),
                                        @p_VALORCOMISIONESTANDAR    FLOAT,
                                        @p_ID_REGISTROREVENUE_out   NUMERIC(22,0) OUT) AS
  BEGIN
  SET NOCOUNT ON;
    SELECT @p_ID_REGISTROREVENUE_out = ID_REGISTROREVENUE
      FROM WSXML_SFG.REGISTROREVENUE
     WHERE CODENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL
       AND CODREGISTROFACTURACION = @p_CODREGISTROFACTURACION;
    UPDATE WSXML_SFG.REGISTROREVENUE
       SET CODTIPOCONTRATOPDV      = @p_CODTIPOCONTRATOPDV,
           CODTIPOCONTRATOPRODUCTO = @p_CODTIPOCONTRATOPRODUCTO,
           CODCOMPANIA             = @p_CODCOMPANIA,
           CODRANGOCOMISION        = @p_CODRANGOCOMISION,
           CODPRODUCTOREVENUE      = @p_CODPRODUCTOREVENUE,
           VALORCOMISIONESTANDAR   = VALORCOMISIONESTANDAR +
                                     @p_VALORCOMISIONESTANDAR
     WHERE ID_REGISTROREVENUE = @p_ID_REGISTROREVENUE_out;
  
	IF @@ROWCOUNT  = 0 BEGIN
      INSERT INTO WSXML_SFG.REGISTROREVENUE
        (
         CODENTRADAARCHIVOCONTROL,
         CODREGISTROFACTURACION,
         CODTIPOREGISTRO,
         FECHA,
         CODPUNTODEVENTA,
         CODTIPOCONTRATOPDV,
         CODPRODUCTO,
         CODTIPOCONTRATOPRODUCTO,
         CODCOMPANIA,
         CODRANGOCOMISION,
         CODPRODUCTOREVENUE,
         VALORCOMISIONESTANDAR)
      VALUES
        (
         @p_CODENTRADAARCHIVOCONTROL,
         @p_CODREGISTROFACTURACION,
         @p_CODTIPOREGISTRO,
         @p_FECHA,
         @p_CODPUNTODEVENTA,
         @p_CODTIPOCONTRATOPDV,
         @p_CODPRODUCTO,
         @p_CODTIPOCONTRATOPRODUCTO,
         @p_CODCOMPANIA,
         @p_CODRANGOCOMISION,
         @p_CODPRODUCTOREVENUE,
         @p_VALORCOMISIONESTANDAR);
      SET @p_ID_REGISTROREVENUE_out = SCOPE_IDENTITY();
	END
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGREGISTROREVENUE_SetRevenueComisionEstandar', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_SetRevenueComisionEstandar;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_SetRevenueComisionEstandar(@pk_ID_REGISTROREVENUE   NUMERIC(22,0),
                                       @p_VALORCOMISIONESTANDAR FLOAT) AS
  BEGIN
  SET NOCOUNT ON;
    UPDATE WSXML_SFG.REGISTROREVENUE
       SET VALORCOMISIONESTANDAR = @p_VALORCOMISIONESTANDAR
     WHERE ID_REGISTROREVENUE = @pk_ID_REGISTROREVENUE;
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGREGISTROREVENUE_UpdateRevenueBaseValue', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_UpdateRevenueBaseValue;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_UpdateRevenueBaseValue(@pk_ID_REGISTROREVENUE NUMERIC(22,0),
                                   @p_REVENUEBASE         FLOAT) AS
  BEGIN
  SET NOCOUNT ON;
    UPDATE WSXML_SFG.REGISTROREVENUE
       SET REVENUEBASE = @p_REVENUEBASE, REVENUETOTAL = @p_REVENUEBASE
     WHERE ID_REGISTROREVENUE = @pk_ID_REGISTROREVENUE;
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGREGISTROREVENUE_UpdateRevenueTotalValue', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_UpdateRevenueTotalValue;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_UpdateRevenueTotalValue(@pk_ID_REGISTROREVENUE NUMERIC(22,0),
                                    @p_REVENUETOTAL        FLOAT) AS
  BEGIN
  SET NOCOUNT ON;
    UPDATE WSXML_SFG.REGISTROREVENUE
       SET REVENUETOTAL = @p_REVENUETOTAL
     WHERE ID_REGISTROREVENUE = @pk_ID_REGISTROREVENUE;
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGREGISTROREVENUE_UpdateRevenueUtilidadParcial', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_UpdateRevenueUtilidadParcial;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_UpdateRevenueUtilidadParcial(@pk_ID_REGISTROREVENUE NUMERIC(22,0),
                                         @p_UTILIDADPARCIAL     FLOAT) AS
  BEGIN
  SET NOCOUNT ON;
    UPDATE WSXML_SFG.REGISTROREVENUE
       SET UTILIDADPARCIAL = @p_UTILIDADPARCIAL
     WHERE ID_REGISTROREVENUE = @pk_ID_REGISTROREVENUE;
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGREGISTROREVENUE_UpdateAppendRevenueTotalValue', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_UpdateAppendRevenueTotalValue;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_UpdateAppendRevenueTotalValue(@pk_ID_REGISTROREVENUE NUMERIC(22,0),
                                          @p_REVENUETOTAL        FLOAT) AS
  BEGIN
  SET NOCOUNT ON;
    UPDATE WSXML_SFG.REGISTROREVENUE
       SET REVENUETOTAL = REVENUETOTAL + @p_REVENUETOTAL
     WHERE ID_REGISTROREVENUE = @pk_ID_REGISTROREVENUE;
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGREGISTROREVENUE_UpdateRevenueFromAdjustment', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_UpdateRevenueFromAdjustment;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_UpdateRevenueFromAdjustment(@pk_ID_REGISTROREVENUE   NUMERIC(22,0),
                                        @p_DIFERENCIAREVENUE     FLOAT,
                                        @p_DIFERENCIACOMESTANDAR FLOAT,
                                        @p_DIFERENCIAINGRCORP    FLOAT,
                                        @p_DIFERENCIAEGRCORP     FLOAT,
                                        @p_DIFERENCIAINGRLOCAL   FLOAT,
                                        @p_DIFERENCIAEGRLOCAL    FLOAT) AS
  BEGIN
  SET NOCOUNT ON;
    UPDATE WSXML_SFG.REGISTROREVENUE
       SET REVENUETOTAL          = REVENUETOTAL + @p_DIFERENCIAREVENUE,
           VALORCOMISIONESTANDAR = VALORCOMISIONESTANDAR +
                                   @p_DIFERENCIACOMESTANDAR,
           INGRESOCORPORATIVO    = INGRESOCORPORATIVO + @p_DIFERENCIAINGRCORP,
           EGRESOCORPORATIVO     = EGRESOCORPORATIVO + @p_DIFERENCIAEGRCORP,
           INGRESOLOCAL          = INGRESOLOCAL + @p_DIFERENCIAINGRLOCAL,
           EGRESOLOCAL           = EGRESOLOCAL + @p_DIFERENCIAEGRLOCAL
     WHERE ID_REGISTROREVENUE = @pk_ID_REGISTROREVENUE;
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGREGISTROREVENUE_UpdateRecordPyGValues', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_UpdateRecordPyGValues;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_UpdateRecordPyGValues(@pk_ID_REGISTROREVENUE NUMERIC(22,0),
                                  @p_INGRESOCORPORATIVO  FLOAT,
                                  @p_EGRESOCORPORATIVO   FLOAT,
                                  @p_INGRESOLOCAL        FLOAT,
                                  @p_EGRESOLOCAL         FLOAT) AS
  BEGIN
  SET NOCOUNT ON;
    UPDATE WSXML_SFG.REGISTROREVENUE
       SET INGRESOCORPORATIVO = @p_INGRESOCORPORATIVO,
           EGRESOCORPORATIVO  = @p_EGRESOCORPORATIVO,
           INGRESOLOCAL       = @p_INGRESOLOCAL,
           EGRESOLOCAL        = @p_EGRESOLOCAL
     WHERE ID_REGISTROREVENUE = @pk_ID_REGISTROREVENUE;
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGREGISTROREVENUE_UpdateRecordPYGValuesFromCosts', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_UpdateRecordPYGValuesFromCosts;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_UpdateRecordPYGValuesFromCosts(@pk_ID_REGISTROREVENUE   NUMERIC(22,0),
                                           @p_DESCUENTOINGRESOLOCAL NUMERIC(22,0),
                                           @p_DESCUENTOEGRESOLOCAL  NUMERIC(22,0),
                                           @p_VALORCOSTO            FLOAT,
                                           @n_INGRESOLOCAL          FLOAT OUT,
                                           @n_EGRESOLOCAL           FLOAT OUT) AS
  BEGIN
  SET NOCOUNT ON;
    UPDATE WSXML_SFG.REGISTROREVENUE
       SET @n_INGRESOLOCAL = INGRESOLOCAL = INGRESOLOCAL - CASE
                            WHEN @p_DESCUENTOINGRESOLOCAL = 1 THEN
                             @p_VALORCOSTO
                            ELSE
                             0
                          END,
           @n_EGRESOLOCAL = EGRESOLOCAL = EGRESOLOCAL - CASE
                           WHEN @p_DESCUENTOEGRESOLOCAL = 1 THEN
                            @p_VALORCOSTO
                           ELSE
                            0
                         END
     WHERE ID_REGISTROREVENUE = @pk_ID_REGISTROREVENUE
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGREGISTROREVENUE_UpdateAppendRecordPYGValues', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_UpdateAppendRecordPYGValues;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_UpdateAppendRecordPYGValues(@pk_ID_REGISTROREVENUE NUMERIC(22,0),
                                        @p_INGRESOCORPORATIVO  FLOAT,
                                        @p_EGRESOCORPORATIVO   FLOAT,
                                        @p_INGRESOLOCAL        FLOAT,
                                        @p_EGRESOLOCAL         FLOAT) AS
  BEGIN
  SET NOCOUNT ON;
    UPDATE WSXML_SFG.REGISTROREVENUE
       SET INGRESOCORPORATIVO = INGRESOCORPORATIVO + @p_INGRESOCORPORATIVO,
           EGRESOCORPORATIVO  = EGRESOCORPORATIVO + @p_EGRESOCORPORATIVO,
           INGRESOLOCAL       = INGRESOLOCAL + @p_INGRESOLOCAL,
           EGRESOLOCAL        = EGRESOLOCAL + @p_EGRESOLOCAL
     WHERE ID_REGISTROREVENUE = @pk_ID_REGISTROREVENUE;
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGREGISTROREVENUE_AppendRecordValues', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_AppendRecordValues;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_AppendRecordValues(@pk_ID_REGISTROREVENUE NUMERIC(22,0),
                               @p_REVENUE             FLOAT) AS
  BEGIN
  SET NOCOUNT ON;
    UPDATE WSXML_SFG.REGISTROREVENUE
       SET REVENUETOTAL = REVENUETOTAL + @p_REVENUE
     WHERE ID_REGISTROREVENUE = @pk_ID_REGISTROREVENUE;
  END;
GO


  IF OBJECT_ID('WSXML_SFG.SFGREGISTROREVENUE_GetCalculatedRevenueValues', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_GetCalculatedRevenueValues;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_GetCalculatedRevenueValues(@pk_ID_REGISTROFACTURACION   NUMERIC(22,0),
                                       @p_CANTIDADVENTA             NUMERIC(22,0) OUT,
                                       @p_VALORVENTA                FLOAT OUT,
                                       @p_VALORVENTABRUTA           FLOAT OUT,
                                       @p_VALORINGRESOPDV           FLOAT OUT,
                                       @p_VALORIVAINGRESOPDV        FLOAT OUT,
                                       @p_REVENUECALCULADO          FLOAT OUT,
                                       @p_VALORCOMISIONESTANDAR     FLOAT OUT,
                                       @p_VALORDESCUENTOS           FLOAT OUT,
                                       @p_CODCOMPANIA               NUMERIC(22,0) OUT,
                                       @p_CODSERVICIO               NUMERIC(22,0) OUT,
                                       @p_CODTIPOCONTRATOPDV        NUMERIC(22,0) OUT,
                                       @p_CODTIPOCONTRATOPRODUCTO   NUMERIC(22,0) OUT,
                                       @p_CODPUNTODEVENTA           NUMERIC(22,0) OUT,
                                       @p_CODPRODUCTO               NUMERIC(22,0) OUT,
                                       @p_CODREDPDV                 NUMERIC(22,0) OUT,
                                       @p_CODAGRUPACIONPUNTODEVENTA NUMERIC(22,0) OUT,
                                       @p_CODCIUDAD                 NUMERIC(22,0) OUT,
                                       @p_CODREGISTROREVENUE_out    NUMERIC(22,0) OUT,
                                       @p_CODPRODUCTOREVENUE_out    NUMERIC(22,0) OUT) AS
 BEGIN

    DECLARE @V_VRCOMISION float = 0;
    DECLARE @V_NREFRERENCIAS NUMERIC(22,0) =0;
    DECLARE @V_CODTIPOREGISTRO NUMERIC(22,0);
   
  SET NOCOUNT ON;
    SELECT @p_CANTIDADVENTA = REG.NUMTRANSACCIONES,
           @p_VALORVENTA = REG.VALORTRANSACCION,
           @p_VALORVENTABRUTA = REG.VALORVENTABRUTANOREDONDEADO,
           @p_VALORINGRESOPDV = CASE
             WHEN REG.COMISIONANTICIPO = 1 THEN
              0
             ELSE
              REG.VALORCOMISION
           END,
           @p_VALORIVAINGRESOPDV = REG.IVACOMISION,
           @p_REVENUECALCULADO = REV.REVENUETOTAL,
           @p_VALORCOMISIONESTANDAR = REV.VALORCOMISIONESTANDAR,
           @p_VALORDESCUENTOS = ISNULL(REG.VALORDESCUENTOS,0),
           @p_CODCOMPANIA = REV.CODCOMPANIA,
           @p_CODSERVICIO = CTR.TIPOARCHIVO,
           @p_CODTIPOCONTRATOPDV = REV.CODTIPOCONTRATOPDV,
           @p_CODTIPOCONTRATOPRODUCTO = REV.CODTIPOCONTRATOPRODUCTO,
           @p_CODPUNTODEVENTA = REG.CODPUNTODEVENTA,
           @p_CODPRODUCTO = REG.CODPRODUCTO,
           @p_CODREDPDV = REG.CODREDPDV,
           @p_CODAGRUPACIONPUNTODEVENTA = REG.CODAGRUPACIONPUNTODEVENTA,
           @p_CODCIUDAD = reg.codciudad,
           @p_CODREGISTROREVENUE_out = REV.ID_REGISTROREVENUE,
           @p_CODPRODUCTOREVENUE_out = REV.CODPRODUCTOREVENUE,
           @V_CODTIPOREGISTRO = REG.CODTIPOREGISTRO
           FROM WSXML_SFG.REGISTROFACTURACION REG
     INNER JOIN WSXML_SFG.ENTRADAARCHIVOCONTROL CTR
        ON (CTR.ID_ENTRADAARCHIVOCONTROL = REG.CODENTRADAARCHIVOCONTROL)
     INNER JOIN WSXML_SFG.REGISTROREVENUE REV
        ON (REV.CODENTRADAARCHIVOCONTROL = REG.CODENTRADAARCHIVOCONTROL AND
           REV.CODREGISTROFACTURACION = REG.ID_REGISTROFACTURACION)
     WHERE REG.ID_REGISTROFACTURACION = @pk_ID_REGISTROFACTURACION;


     SELECT @V_NREFRERENCIAS = COUNT(1)
                FROM WSXML_SFG.REGISTROFACTREFERENCIA
     WHERE CODREGISTROFACTURACION = @pk_ID_REGISTROFACTURACION;

    --Giros Colpatria
    IF @p_CODPRODUCTO IN (1255 --GIRO DEPOSITO COLPA
                        ,
                         1256 --GIRO RETIRO COLPA
                         ) BEGIN  --AND V_NREFRERENCIAS>0 THEN

      SELECT @V_VRCOMISION = SUM(RFR.VRCOMISION)
        FROM WSXML_SFG.REGISTROFACTREFERENCIA RFR
       WHERE RFR.CODREGISTROFACTURACION = @pk_ID_REGISTROFACTURACION;

      SET @p_VALORVENTA      = @V_VRCOMISION;
      SET @p_VALORVENTABRUTA = @V_VRCOMISION;

    END 

 --Giros Matrix
    IF @p_CODPRODUCTO IN (1872,1871,1870,1869) BEGIN -- AND V_NREFRERENCIAS>0 THEN

       IF @V_CODTIPOREGISTRO = 2 BEGIN
         SELECT @V_VRCOMISION = SUM(isnull(AJF.FLETEANULACION,0))
         FROM WSXML_SFG.AJUSTEFACTURACION AJF
         WHERE AJF.CODREGISTROFACTDESTINO = @pk_ID_REGISTROFACTURACION;

       END
       ELSE BEGIN

          SELECT @V_VRCOMISION = COUNT(isnull(RFR.Suscriptor,0)) --SUM(isnull(RFR.Suscriptor,0))
            FROM WSXML_SFG.REGISTROFACTREFERENCIA RFR
           WHERE RFR.CODREGISTROFACTURACION = @pk_ID_REGISTROFACTURACION;

       END 

      SET @p_VALORVENTA      = @V_VRCOMISION;
      SET @p_VALORVENTABRUTA = @V_VRCOMISION;

    END 
    --Verificar si existen excepciones para la compania y el servicio del producto

      DECLARE @xCOUNT NUMERIC(22,0);
    BEGIN
      SELECT @xCOUNT = COUNT(1)
        FROM WSXML_SFG.PRODUCTOEXCEPCOMPANIAREV
       WHERE CODPRODUCTO = @p_CODPRODUCTO;

      IF @xCOUNT > 0 BEGIN

        SELECT @p_CODSERVICIO = CODSERVICIOEXCEP, @p_CODCOMPANIA = CODCOMPANIAEXCEP
          FROM WSXML_SFG.PRODUCTOEXCEPCOMPANIAREV
         WHERE CODPRODUCTO = @p_CODPRODUCTO;

      END 

    END;
    -- Incluir tarifas de producto
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGREGISTROREVENUE_GetCalculatedPyGValues', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_GetCalculatedPyGValues;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_GetCalculatedPyGValues(@pk_ID_REGISTROREVENUE NUMERIC(22,0),
                                   @p_INGRESOCORPORATIVO  FLOAT OUT,
                                   @p_EGRESOCORPORATIVO   FLOAT OUT,
                                   @p_INGRESOLOCAL        FLOAT OUT,
                                   @p_EGRESOLOCAL         FLOAT OUT) AS
  BEGIN
  SET NOCOUNT ON;
    SELECT @p_INGRESOCORPORATIVO = INGRESOCORPORATIVO, @p_EGRESOCORPORATIVO = EGRESOCORPORATIVO, @p_INGRESOLOCAL = INGRESOLOCAL, @p_EGRESOLOCAL = EGRESOLOCAL
           FROM WSXML_SFG.REGISTROREVENUE
     WHERE ID_REGISTROREVENUE = @pk_ID_REGISTROREVENUE;
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGREGISTROREVENUE_ReverseRevenueByFile', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_ReverseRevenueByFile;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_ReverseRevenueByFile(@p_CODENTRADAARCHIVOCONTROL NUMERIC(22,0)) AS
 BEGIN
    DECLARE @lstREVENUEREGISTRIES WSXML_SFG.LONGNUMBERARRAY;
    DECLARE @countCOMMITRECORDS   NUMERIC(22,0) = 0;
   
  SET NOCOUNT ON;
	INSERT INTO @lstREVENUEREGISTRIES
    SELECT CODPRODUCTOREVENUE
    FROM WSXML_SFG.REGISTROREVENUE
    WHERE CODENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;

    --Ingresamos los productos para el reproceso de carga de revenue a la bodega de datos
      DECLARE @cCODPRODUCTO NUMERIC(22,0);
      DECLARE @cFECHA       DATETIME;
    BEGIN

      DECLARE Reg CURSOR for SELECT REGISTROFACTURACION.CODPRODUCTO,
                         ENTRADAARCHIVOCONTROL.FECHAARCHIVO
                    FROM WSXML_SFG.REGISTROFACTURACION
						INNER JOIN WSXML_SFG.ENTRADAARCHIVOCONTROL
                      ON REGISTROFACTURACION.CODENTRADAARCHIVOCONTROL =
                         ENTRADAARCHIVOCONTROL.ID_ENTRADAARCHIVOCONTROL
                   WHERE ENTRADAARCHIVOCONTROL.ID_ENTRADAARCHIVOCONTROL =
                         @p_CODENTRADAARCHIVOCONTROL
                   GROUP BY REGISTROFACTURACION.CODPRODUCTO,
                            ENTRADAARCHIVOCONTROL.FECHAARCHIVO; 
		OPEN Reg;
		DECLARE @l_CODPRODUCTO numeric(38,0),  @l_FECHAARCHIVO DATETIME
		
		 FETCH NEXT FROM Reg INTO @l_CODPRODUCTO,@l_FECHAARCHIVO
		 WHILE @@FETCH_STATUS=0
		 BEGIN
				--EXEC DWH_REPTRANS.DWHSFGREPROCESOREVENUE_AddRecord @l_CODPRODUCTO, @l_FECHAARCHIVO
			FETCH NEXT FROM Reg INTO @l_CODPRODUCTO,@l_FECHAARCHIVO
		END;

      CLOSE Reg;
      DEALLOCATE Reg;

    END;





    IF @@ROWCOUNT > 0 BEGIN
		DECLARE ix CURSOR FOR SELECT IDVALUE FROM @lstREVENUEREGISTRIES
		OPEN ix;

		DECLARE @l_IDVALUE NUMERIC(38,0)
		FETCH NEXT FROM ix INTO @l_IDVALUE
		
		WHILE @@FETCH_STATUS=0
		BEGIN

		DELETE FROM WSXML_SFG.PRODUCTOREVENUE
        WHERE ID_PRODUCTOREVENUE = @l_IDVALUE;

        SET @countCOMMITRECORDS = @countCOMMITRECORDS + 1;

        IF (@countCOMMITRECORDS % 20) = 0 BEGIN
          COMMIT;
        END 
		FETCH NEXT FROM ix INTO @l_IDVALUE
      END;

      CLOSE ix;
      DEALLOCATE ix;
    END 
    UPDATE WSXML_SFG.ENTRADAARCHIVOCONTROL
       SET REVENUECALCULADO = 0
     WHERE ID_ENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;
  END;
GO


  IF OBJECT_ID('WSXML_SFG.SFGREGISTROREVENUE_ReverseRevenueByDate', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_ReverseRevenueByDate;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_ReverseRevenueByDate(@p_FECHA                    DATETIME,
                                 @p_CODDETALLETAREAEJECUTADA NUMERIC(22,0),
                                 @p_RETVALUE_out             NUMERIC(22,0) OUT) AS
 BEGIN
    DECLARE @lstCALCULATEDRVFILES   NUMBERARRAY;
    DECLARE @totalrecords           NUMERIC(22,0) = 100;
    DECLARE @countrecords           NUMERIC(22,0) = 0;
    DECLARE @waitnrecords           NUMERIC(22,0) = 20;
    DECLARE @dblstREVENUEREGISTRIES WSXML_SFG.LONGNUMBERARRAY;
    DECLARE @dblstREVENUEPRODREGIST WSXML_SFG.LONGNUMBERARRAY;
   
  SET NOCOUNT ON;
  
	insert INTO @lstCALCULATEDRVFILES
    SELECT ID_ENTRADAARCHIVOCONTROL
      
     FROM WSXML_SFG.ENTRADAARCHIVOCONTROL
     WHERE FECHAARCHIVO = CONVERT(DATETIME, CONVERT(DATE,@p_FECHA))
       AND REVERSADO = 0
       AND REVENUECALCULADO = 1;
    SELECT @totalrecords = COUNT(1)
      FROM WSXML_SFG.REGISTROREVENUE
     WHERE CODENTRADAARCHIVOCONTROL IN
		   (SELECT IDValue FROM @lstCALCULATEDRVFILES)

    EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_SetTotalRecords @p_CODDETALLETAREAEJECUTADA, @totalrecords


    IF (SELECT COUNT(*) FROM @lstCALCULATEDRVFILES) > 0 BEGIN

      DECLARE ix CURSOR FOR SELECT IDValue FROM  @lstCALCULATEDRVFILES
	  OPEN ix;
		
		DECLARE @l_idvalue NUMERIC(38,0);

		FETCH NEXT FROM ix INTO @l_idvalue

		WHILE @@FETCH_STATUS=0
		BEGIN
			DECLARE @lstREVENUEREGISTRIES WSXML_SFG.LONGNUMBERARRAY;
			DECLARE @lstREVENUEPRODREGIST WSXML_SFG.LONGNUMBERARRAY;
			BEGIN

          --Ingresamos los productos para el reproceso de carga de revenue a la bodega de datos
            DECLARE @cCODPRODUCTO NUMERIC(22,0);
            DECLARE @cFECHA       DATETIME;
          
			BEGIN

				DECLARE Reg CURSOR for 
					SELECT REGISTROFACTURACION.CODPRODUCTO,
                       ENTRADAARCHIVOCONTROL.FECHAARCHIVO
	                FROM WSXML_SFG.REGISTROFACTURACION
                         INNER JOIN WSXML_SFG.ENTRADAARCHIVOCONTROL
                            ON REGISTROFACTURACION.CODENTRADAARCHIVOCONTROL = ENTRADAARCHIVOCONTROL.ID_ENTRADAARCHIVOCONTROL
                         WHERE ENTRADAARCHIVOCONTROL.ID_ENTRADAARCHIVOCONTROL = @l_idvalue
                         GROUP BY REGISTROFACTURACION.CODPRODUCTO, ENTRADAARCHIVOCONTROL.FECHAARCHIVO; 
				OPEN Reg;

				DECLARE @l_CODPRODUCTO NUMERIC(38,0), @l_FECHAARCHIVO DATETIME

				FETCH NEXT FROM ix INTO @l_CODPRODUCTO, @l_FECHAARCHIVO

				WHILE @@FETCH_STATUS=0
				BEGIN
					--EXEC DWH_REPTRANS.DWHSFGREPROCESOREVENUE_AddRecord @l_CODPRODUCTO, @l_FECHAARCHIVO
					FETCH NEXT FROM ix INTO @l_CODPRODUCTO, @l_FECHAARCHIVO
				END;

				CLOSE Reg;
				DEALLOCATE Reg;
			END;


			-- BY file
			INSERT INTO @lstREVENUEREGISTRIES -- @lstCALCULATEDRVFILES
			SELECT ID_REGISTROREVENUE 
			FROM WSXML_SFG.REGISTROREVENUE
			WHERE CODENTRADAARCHIVOCONTROL = @l_idvalue
          
			IF (SELECT COUNT(*) FROM @lstREVENUEREGISTRIES) > 0 BEGIN
				-- Manual deletion of child objects, to ensure consistency
				DELETE FROM AJUSTEREVENUE
				WHERE CODREGISTROREVNORIGEN IN
                   (SELECT IDVALUE FROM @lstREVENUEREGISTRIES)
            
				COMMIT;
				DELETE FROM AJUSTEREVENUE
				WHERE CODREGISTROREVNDESTINO IN
                   (SELECT IDVALUE FROM @lstREVENUEREGISTRIES)
				
				COMMIT;
				
				DELETE FROM WSXML_SFG.REGISTROREVENUEINCENTIVO
				WHERE CODREGISTROREVENUE IN
					(SELECT IDVALUE FROM @lstREVENUEREGISTRIES)
				
				COMMIT;
				DELETE FROM WSXML_SFG.REGISTROREVCOSTOCALCULADO	
				WHERE CODREGISTROREVENUE IN 
                   (SELECT IDVALUE FROM @lstREVENUEREGISTRIES)
            
				COMMIT;
				DELETE FROM WSXML_SFG.REGISTROREVENUETRANSACCION
				WHERE CODREGISTROREVENUE IN
                   (SELECT IDVALUE FROM @lstREVENUEREGISTRIES)
				
				COMMIT;
				-- Progressive deletion of referenced records
				DECLARE ir CURSOR FOR SELECT IDVALUE FROM @lstREVENUEREGISTRIES
				OPEN ir;
				
				DECLARE @l_ir_idvalue NUMERIC(38,0)

				FETCH NEXT FROM ir INTO @l_ir_idvalue
	
				 WHILE @@FETCH_STATUS=0
				 BEGIN
			          DELETE FROM WSXML_SFG.REGISTROREVENUE WHERE ID_REGISTROREVENUE = @l_ir_idvalue
				
	   				  SET @countrecords = @countrecords + 1;

					  IF (@countrecords % @waitnrecords) = 0 BEGIN
						EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA, @countrecords
						COMMIT;
		              END 
				    FETCH NEXT FROM ir INTO @l_ir_idvalue
				  END;	

				 CLOSE ir;
				 DEALLOCATE ir;
			END 

          -- Check if deletion must be performed also through date
			INSERT INTO @lstREVENUEREGISTRIES
			SELECT ID_REGISTROREVENUE
            FROM WSXML_SFG.REGISTROREVENUE
			WHERE FECHA = @p_FECHA;

			IF (SELECT COUNT(*) FROM @lstREVENUEREGISTRIES) > 0 BEGIN
            -- Manual deletion of child objects, to ensure consistency
            DELETE FROM WSXML_SFG.REGISTROREVENUEINCENTIVO
             WHERE CODREGISTROREVENUE IN
                   (SELECT IDVALUE FROM @lstREVENUEREGISTRIES);
            
			COMMIT;
            
			DELETE FROM WSXML_SFG.REGISTROREVCOSTOCALCULADO
             WHERE CODREGISTROREVENUE IN
                   (SELECT IDVALUE FROM @lstREVENUEREGISTRIES)

            COMMIT;
            DELETE FROM WSXML_SFG.REGISTROREVENUETRANSACCION
             WHERE CODREGISTROREVENUE IN
                   (SELECT IDVALUE FROM @lstREVENUEREGISTRIES)
            
			COMMIT;
            -- Progressive deletion of referenced records
            DECLARE it CURSOR FOR SELECT IDVALUE FROM @lstREVENUEREGISTRIES
			
			OPEN it;

			DECLARE @l_it_idvalue NUMERIC(38,0)
			
			FETCH NEXT FROM it INTO @l_it_idvalue

			 WHILE @@FETCH_STATUS=0
			 BEGIN
				DELETE FROM WSXML_SFG.REGISTROREVENUE
				WHERE ID_REGISTROREVENUE = @l_it_idvalue
				
				COMMIT;
				
				FETCH NEXT FROM it INTO @l_it_idvalue
			  END;

              CLOSE it;
              DEALLOCATE it;
          END 

			DELETE FROM WSXML_SFG.PRODUCTOREVENUE WHERE FECHA = @p_FECHA;
        

			UPDATE WSXML_SFG.ENTRADAARCHIVOCONTROL SET REVENUECALCULADO = 0
			WHERE ID_ENTRADAARCHIVOCONTROL = @l_idvalue
			COMMIT;
      
			FETCH NEXT FROM ix INTO @l_idvalue
      END;

      CLOSE ix;
      DEALLOCATE ix;
    END 
    -- Double check:
	INSERT INTO @dblstREVENUEREGISTRIES
    SELECT ID_REGISTROREVENUE
      FROM WSXML_SFG.REGISTROREVENUE
     WHERE FECHA = @p_FECHA;

    IF (SELECT COUNT(*) FROM @dblstREVENUEREGISTRIES) > 0 BEGIN
		DECLARE it CURSOR FOR SELECT IDVALUE FROM @dblstREVENUEREGISTRIES
		OPEN it;

		DECLARE @_l_it_idvalue NUMERIC(38,0)
 
	   	FETCH NEXT FROM it INTO @_l_it_idvalue

		WHILE @@FETCH_STATUS=0
		
		BEGIN
			DELETE FROM WSXML_SFG.REGISTROREVENUE
			WHERE ID_REGISTROREVENUE = @_l_it_idvalue
			
			COMMIT;
			FETCH NEXT FROM it INTO @_l_it_idvalue
		END;

		CLOSE it;
		DEALLOCATE it;
    END 

    -- Product consolidation from date
	INSERT INTO @dblstREVENUEPRODREGIST
    SELECT ID_PRODUCTOREVENUE
      FROM WSXML_SFG.PRODUCTOREVENUE
     WHERE FECHA = @p_FECHA;
    IF (SELECT COUNT(*) FROM @dblstREVENUEPRODREGIST) > 0 BEGIN

		DECLARE _ip CURSOR FOR SELECT IDVALUE FROM @dblstREVENUEPRODREGIST
		OPEN _ip;
		DECLARE @l_ip_idvalue NUMERIC(38,0)

		FETCH NEXT FROM _ip INTO @l_ip_idvalue
		
		WHILE @@FETCH_STATUS=0
		BEGIN
			DELETE FROM WSXML_SFG.PRODUCTOREVENUE
			WHERE ID_PRODUCTOREVENUE = @l_ip_idvalue
			
			COMMIT;
			FETCH NEXT FROM _ip INTO @l_ip_idvalue
		END;

      CLOSE _ip;
      DEALLOCATE _ip;
    END 

	DECLARE 	@p_REGISTRADA      			TINYINT ,
                    @p_INICIADA         		TINYINT ,
                    @p_FINALIZADAOK 			TINYINT ,
                    @p_FINALIZADAFALLO  		TINYINT ,
					@p_ABORTADA  				TINYINT ,
					@p_NOINICIADA  				TINYINT ,
					@p_FINALIZADAADVERTENCIA  	TINYINT 

	EXEC WSXML_SFG.SFGESTADOTAREAEJECUTADA_CONSTANT   
					@p_REGISTRADA      			 OUT,
                    @p_INICIADA         		 OUT,
                    @p_FINALIZADAOK 			 OUT,
                    @p_FINALIZADAFALLO  		 OUT,
					@p_ABORTADA  				 OUT,
					@p_NOINICIADA  				 OUT,
					@p_FINALIZADAADVERTENCIA  	 OUT

    SET @p_RETVALUE_out = @p_FINALIZADAOK
  END;
END
GO


  IF OBJECT_ID('WSXML_SFG.SFGREGISTROREVENUE_SetRevenueMultipleDiferencial', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_SetRevenueMultipleDiferencial;
GO

  CREATE PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_SetRevenueMultipleDiferencial(@p_CODREGISTROREVENUE        NUMERIC(22,0),
                                          @p_CODREGISTROFACTURACION    NUMERIC(22,0),
                                          @p_CODPRODUCTO               NUMERIC(22,0),
                                          @p_CODREDPDV                 NUMERIC(22,0),
                                          @p_CODAGRUPACIONPUNTODEVENTA NUMERIC(22,0),
                                          @p_CODCIUDAD                 NUMERIC(22,0)) AS
 BEGIN
    DECLARE @V_DepartamentoDiferencial NUMERIC(22,0);
    DECLARE @V_PRODUCTOCONTRATO        NUMERIC(22,0);
    DECLARE @V_PRODUCTOCONTRATOCOMDIF  NUMERIC(22,0);
    DECLARE @V_CODREDPDVCOMDIF         NUMERIC(22,0);
    DECLARE @V_CODAGRUPACIONPDVCOMDIF  NUMERIC(22,0);
    DECLARE @V_CODDEPARTAMENTOCOMDIF   NUMERIC(22,0);
    DECLARE @v_nombrecorto             varchar(1000);
   
  SET NOCOUNT ON;

	BEGIN TRY

		--BUSCA EL PRODUCTOCONTRATO

		SELECT @V_PRODUCTOCONTRATO = PC.ID_PRODUCTOCONTRATO
		  FROM WSXML_SFG.PRODUCTOCONTRATO PC
		 WHERE PC.CODPRODUCTO = @p_CODPRODUCTO;

		--BUSCA EL DEPARTAMENTO DE LA CIUDAD
		BEGIN

		  SELECT @V_DepartamentoDiferencial = D.CODDEPARTAMENTO
			FROM WSXML_SFG.PRODUCTOCONTRATOCOMDIFCIUDAD C, WSXML_SFG.PRODUCTOCONTRATOCOMDIF D
		   WHERE C.CODPRODUCTOCONTRATOCOMDIF = D.ID_PRODUCTOCONTRATOCOMDIF
			 AND C.ACTIVE = 1
			 and C.CODCIUDAD = @p_CODCIUDAD
			 AND D.CODPRODUCTOCONTRATO = @V_PRODUCTOCONTRATO;

			IF @@ROWCOUNT = 0 
				SET @V_DepartamentoDiferencial = 0;
		END;

		--Setea comisiones diferenciales multiples, dejando valida solo la de menor prioridad

		BEGIN
		  SELECT @V_CODREDPDVCOMDIF = CASE
				   WHEN ISNULL(CD1.CODREDPDV, 0) = 0 THEN 0 ELSE CODREDPDV END ,
				 @V_CODAGRUPACIONPDVCOMDIF = CASE WHEN ISNULL(CD1.CODAGRUPACIONPUNTODEVENTA, 0) = 0 THEN 0 ELSE CODAGRUPACIONPUNTODEVENTA END,
				 @V_CODDEPARTAMENTOCOMDIF = CASE WHEN ISNULL(CD1.CODDEPARTAMENTO, 0) = 0 THEN 0
				   ELSE
					CODDEPARTAMENTO
				 END,
				 @V_PRODUCTOCONTRATOCOMDIF = CD1.ID_PRODUCTOCONTRATOCOMDIF
				   FROM WSXML_SFG.PRODUCTOCONTRATOCOMDIF CD1
		   WHERE CD1.PRIORIDAD =
				 (SELECT MIN(CD.PRIORIDAD)
					FROM WSXML_SFG.PRODUCTOCONTRATOCOMDIF CD
				   WHERE CD.CODPRODUCTOCONTRATO = CD1.CODPRODUCTOCONTRATO
					 AND (CD.CODREDPDV = @p_CODREDPDV OR
						 CD.CODAGRUPACIONPUNTODEVENTA =
						 @p_CODAGRUPACIONPUNTODEVENTA OR
						 CD.CODDEPARTAMENTO = @V_DepartamentoDiferencial)
					 AND CD.CODPRODUCTOCONTRATO = @V_PRODUCTOCONTRATO
					 AND CD.PRIORIDAD > 0)
			 AND (CD1.CODREDPDV = @p_CODREDPDV OR
				 CD1.CODAGRUPACIONPUNTODEVENTA = @p_CODAGRUPACIONPUNTODEVENTA OR
				 CD1.CODDEPARTAMENTO = @V_DepartamentoDiferencial)
			 AND CD1.CODPRODUCTOCONTRATO = @V_PRODUCTOCONTRATO
			 --AND ;

			IF @@ROWCOUNT = 0 BEGIN
				SET @V_CODREDPDVCOMDIF        = 0;
				SET @V_CODAGRUPACIONPDVCOMDIF = 0;
				SET @V_CODDEPARTAMENTOCOMDIF  = 0;
			END
		END;


		if @V_CODREDPDVCOMDIF > 0 begin

		  select @V_NOMBRECORTO = 'RED : ' + ISNULL(R.NOMREDPDV, '')
			from WSXML_SFG.redpdv r
		   WHERE R.ID_REDPDV = @V_CODREDPDVCOMDIF;

		end
		else if @V_CODAGRUPACIONPDVCOMDIF > 0 begin

		  select @V_NOMBRECORTO = 'CADENA : ' + ISNULL(A.NOMAGRUPACIONPUNTODEVENTA, '')
			from WSXML_SFG.AGRUPACIONPUNTODEVENTA A
		   WHERE A.ID_AGRUPACIONPUNTODEVENTA = @V_CODAGRUPACIONPDVCOMDIF;

		end
		else if @V_CODDEPARTAMENTOCOMDIF > 0 begin

		  select @V_NOMBRECORTO = 'DEPARTAMENTO : ' + ISNULL(D.NOMDEPARTAMENTO, '')
			from WSXML_SFG.DEPARTAMENTO D
		   WHERE D.ID_DEPARTAMENTO = @V_CODDEPARTAMENTOCOMDIF;

		end 
		begin

			IF EXISTS(
				SELECT * FROM WSXML_SFG.REGISTROREVENUECOMDIF
				WHERE CODREGISTROREVENUE = @p_CODREGISTROREVENUE
					--AND CODREGISTROFACTURACION = @p_CODREGISTROFACTURACION
					--AND CODPRODUCTOCONTRATOCOMDIF = @V_PRODUCTOCONTRATOCOMDIF
					--AND NOMBRECORTO = @v_nombrecorto
			) BEGIN
				UPDATE WSXML_SFG.REGISTROREVENUECOMDIF
				SET CODPRODUCTOCONTRATOCOMDIF = @V_PRODUCTOCONTRATOCOMDIF,
				   NOMBRECORTO               = @v_nombrecorto
				WHERE CODREGISTROREVENUE = @p_CODREGISTROREVENUE;
			END ELSE BEGIN

				INSERT INTO WSXML_SFG.REGISTROREVENUECOMDIF
				(CODREGISTROREVENUE,
				 CODREGISTROFACTURACION,
				 CODPRODUCTOCONTRATOCOMDIF,
				 NOMBRECORTO)
			  VALUES
				(@p_CODREGISTROREVENUE,
				 @p_CODREGISTROFACTURACION,
				 @V_PRODUCTOCONTRATOCOMDIF,
				 @v_nombrecorto);
			END

		END;
	END TRY
	BEGIN CATCH
  
		DECLARE @msg VARCHAR(2000) = 'Se ha producido un error durante la insercion de Tarifa diferencial para el CODREGISTROREVENUE # ' +
                           ISNULL(@p_CODREGISTROREVENUE, '') +
                           ' y  CODREGISTROFACTURACION ' +
                           ISNULL(@p_CODREGISTROFACTURACION, '') + ' Error : ' +
                           ISNULL(ERROR_MESSAGE ( ) , '')
		EXEC WSXML_SFG.SFGTMPTRACE_TraceLog @msg
	    
		RAISERROR(@msg, 16, 1);
	END CATCH

  END;
GO


IF OBJECT_ID('WSXML_SFG.SFGREGISTROREVENUE_ReprocesarTarifaFija', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_ReprocesarTarifaFija;
GO

  CREATE PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_ReprocesarTarifaFija(@p_CODPRODUCTO NUMERIC(22,0),
                                 @p_FECHAINICIO DATETIME,
                                 @p_FECHAFIN    DATETIME) AS
 BEGIN
    DECLARE @c_CODPRODUCTOCONTRATO NUMERIC(22,0);
    DECLARE @c_CODINCENTIVO        NUMERIC(22,0);
    DECLARE @c_VALORINCENTIVO      FLOAT;
    DECLARE @c_CODPERIODICIDAD     NUMERIC(22,0);
    DECLARE @c_NUMTRANSACCIONES    NUMERIC(22,0);
    DECLARE @c_COUNTREFFA          NUMERIC(22,0);
    DECLARE @c_TMPFECHA            DATETIME;
    DECLARE @c_VALORDIARIO         FLOAT;
    DECLARE @c_VALORXTRX           FLOAT;
    DECLARE @v_COUNT               NUMERIC(22,0);
    DECLARE @v_COUNTINC            INT;--Numero de razones sociales con el mismo incentivo
    DECLARE @v_CODPRODUCTODEFT     NUMERIC(22,0);
   
  SET NOCOUNT ON;

    SELECT @v_COUNT = COUNT(1)
      FROM WSXML_SFG.PRODUCTOCONTRATO
     INNER JOIN WSXML_SFG.RANGOCOMISION
        ON PRODUCTOCONTRATO.CODRANGOCOMISION =
           RANGOCOMISION.ID_RANGOCOMISION
     INNER JOIN WSXML_SFG.INCENTIVOCOMISIONGLOBAL
        ON RANGOCOMISION.CODINCENTIVOCOMISIONGLOBAL =
           INCENTIVOCOMISIONGLOBAL.ID_INCENTIVOCOMISIONGLOBAL
     WHERE PRODUCTOCONTRATO.CODPRODUCTO = @p_CODPRODUCTO;

    IF @v_COUNT > 0 BEGIN

      DELETE FROM REGISTROREVENUEINCENTIVO
       WHERE REGISTROREVENUEINCENTIVO.ID_REGISTROREVENUEINCENTIVO IN
             (SELECT REGISTROREVENUEINCENTIVO.ID_REGISTROREVENUEINCENTIVO
                FROM WSXML_SFG.REGISTROREVENUEINCENTIVO
               INNER JOIN WSXML_SFG.REGISTROREVENUE
                  ON REGISTROREVENUEINCENTIVO.CODREGISTROREVENUE =
                     REGISTROREVENUE.ID_REGISTROREVENUE
               INNER JOIN WSXML_SFG.REGISTROFACTURACION
                  ON REGISTROREVENUE.CODREGISTROFACTURACION =
                     REGISTROFACTURACION.ID_REGISTROFACTURACION
               INNER JOIN WSXML_SFG.ENTRADAARCHIVOCONTROL
                  ON REGISTROFACTURACION.CODENTRADAARCHIVOCONTROL =
                     ENTRADAARCHIVOCONTROL.ID_ENTRADAARCHIVOCONTROL
               WHERE ENTRADAARCHIVOCONTROL.FECHAARCHIVO BETWEEN
                     @p_FECHAINICIO AND @p_FECHAFIN
                 AND REGISTROFACTURACION.CODPRODUCTO = @p_CODPRODUCTO);

      SELECT @c_CODPERIODICIDAD = INCENTIVOCOMISIONGLOBAL.CODPERIODICIDAD,
             @c_VALORINCENTIVO = INCENTIVOCOMISIONGLOBAL.VALORFIJO,
             @c_CODINCENTIVO = INCENTIVOCOMISIONGLOBAL.ID_INCENTIVOCOMISIONGLOBAL,
             @c_CODPRODUCTOCONTRATO = PRODUCTOCONTRATO.Id_Productocontrato,
             @v_CODPRODUCTODEFT = INCENTIVOCOMISIONGLOBAL.CODPRODUCTOTRANSACCION
               FROM WSXML_SFG.PRODUCTOCONTRATO
       INNER JOIN WSXML_SFG.RANGOCOMISION
          ON PRODUCTOCONTRATO.CODRANGOCOMISION =
             RANGOCOMISION.ID_RANGOCOMISION
       INNER JOIN WSXML_SFG.INCENTIVOCOMISIONGLOBAL
          ON RANGOCOMISION.CODINCENTIVOCOMISIONGLOBAL =
             INCENTIVOCOMISIONGLOBAL.ID_INCENTIVOCOMISIONGLOBAL
       WHERE PRODUCTOCONTRATO.CODPRODUCTO = @p_CODPRODUCTO;

      SET @c_TMPFECHA = @p_FECHAINICIO;

      WHILE @c_TMPFECHA <= @p_FECHAFIN BEGIN
        IF @c_CODPERIODICIDAD = 1 BEGIN
          SET @c_VALORDIARIO = @c_VALORINCENTIVO;
        END
        ELSE IF @c_CODPERIODICIDAD = 2 BEGIN
          SET @c_VALORDIARIO = @c_VALORINCENTIVO / 7;
        END
        ELSE IF @c_CODPERIODICIDAD = 3 BEGIN
          SET @c_VALORDIARIO = @c_VALORINCENTIVO / WSXML_SFG.SFG_PACKAGE_DaysInMonth(@c_TMPFECHA);
        END
        ELSE BEGIN
          SET @c_VALORDIARIO = 0;
        END 


        BEGIN
          SELECT @v_COUNTINC = COUNT(1)
            FROM WSXML_SFG.PRODUCTOCONTRATO
           INNER JOIN WSXML_SFG.RANGOCOMISION
              ON PRODUCTOCONTRATO.CODRANGOCOMISION =
                 RANGOCOMISION.ID_RANGOCOMISION
           WHERE RANGOCOMISION.CODINCENTIVOCOMISIONGLOBAL = @c_CODINCENTIVO;

          IF @v_COUNTINC > 1 BEGIN
            SELECT @c_NUMTRANSACCIONES = SUM(CASE
                         WHEN REGISTROFACTURACION.CODTIPOREGISTRO IN (1, 3) THEN
                          ISNULL(REGISTROFACTURACION.NUMTRANSACCIONES, 0)
                         WHEN REGISTROFACTURACION.CODTIPOREGISTRO = 2 THEN
                          ISNULL(REGISTROFACTURACION.NUMTRANSACCIONES, 0) * -1
                         ELSE
                          0
                       END),
                   @c_COUNTREFFA = COUNT(1)
              FROM WSXML_SFG.REGISTROFACTURACION
             INNER JOIN WSXML_SFG.ENTRADAARCHIVOCONTROL
                ON REGISTROFACTURACION.CODENTRADAARCHIVOCONTROL =
                   ENTRADAARCHIVOCONTROL.ID_ENTRADAARCHIVOCONTROL
             WHERE ENTRADAARCHIVOCONTROL.FECHAARCHIVO = @c_TMPFECHA
               AND REGISTROFACTURACION.CODPRODUCTO IN
                   (SELECT CODPRODUCTO
                      FROM WSXML_SFG.PRODUCTOCONTRATO
                     INNER JOIN WSXML_SFG.RANGOCOMISION
                        ON PRODUCTOCONTRATO.CODRANGOCOMISION =
                           RANGOCOMISION.ID_RANGOCOMISION
                     WHERE RANGOCOMISION.CODINCENTIVOCOMISIONGLOBAL =
                           @c_CODINCENTIVO)
               AND REGISTROFACTURACION.CODTIPOREGISTRO in (1, 2)
               AND NOT
                    (REGISTROFACTURACION.CODREDPDV IN
                    (SELECT ISNULL(PRODUCTOCONTRATOCOMDIF.CODREDPDV, 0)
                        FROM WSXML_SFG.PRODUCTOCONTRATOCOMDIF
                       WHERE CODPRODUCTOCONTRATO = @c_CODPRODUCTOCONTRATO))
               AND NOT
                    (REGISTROFACTURACION.CODAGRUPACIONPUNTODEVENTA IN
                    (SELECT ISNULL(PRODUCTOCONTRATOCOMDIF.CODAGRUPACIONPUNTODEVENTA,
                                 0)
                        FROM WSXML_SFG.PRODUCTOCONTRATOCOMDIF
                       WHERE CODPRODUCTOCONTRATO = @c_CODPRODUCTOCONTRATO));

          END
          ELSE BEGIN

            SELECT @c_NUMTRANSACCIONES = SUM(CASE
                         WHEN REGISTROFACTURACION.CODTIPOREGISTRO IN (1, 3) THEN
                          ISNULL(REGISTROFACTURACION.NUMTRANSACCIONES, 0)
                         WHEN REGISTROFACTURACION.CODTIPOREGISTRO = 2 THEN
                          ISNULL(REGISTROFACTURACION.NUMTRANSACCIONES, 0) * -1
                         ELSE
                          0
                       END),
                   @c_COUNTREFFA = COUNT(1)
              FROM WSXML_SFG.REGISTROFACTURACION
             INNER JOIN WSXML_SFG.ENTRADAARCHIVOCONTROL
                ON REGISTROFACTURACION.CODENTRADAARCHIVOCONTROL =
                   ENTRADAARCHIVOCONTROL.ID_ENTRADAARCHIVOCONTROL
             WHERE ENTRADAARCHIVOCONTROL.FECHAARCHIVO = @c_TMPFECHA
               AND REGISTROFACTURACION.CODPRODUCTO = @p_CODPRODUCTO
               AND REGISTROFACTURACION.CODTIPOREGISTRO in (1, 2)
                AND NOT
                    (REGISTROFACTURACION.CODREDPDV IN
                    (SELECT ISNULL(PRODUCTOCONTRATOCOMDIF.CODREDPDV, 0)
                        FROM WSXML_SFG.PRODUCTOCONTRATOCOMDIF
                       WHERE CODPRODUCTOCONTRATO = @c_CODPRODUCTOCONTRATO))
               AND NOT
                    (REGISTROFACTURACION.CODAGRUPACIONPUNTODEVENTA IN
                    (SELECT ISNULL(PRODUCTOCONTRATOCOMDIF.CODAGRUPACIONPUNTODEVENTA,
                                 0)
                        FROM WSXML_SFG.PRODUCTOCONTRATOCOMDIF
                       WHERE CODPRODUCTOCONTRATO = @c_CODPRODUCTOCONTRATO));
          END 

        END;

        IF @c_COUNTREFFA = 0 BEGIN
            DECLARE @cCODENTRADAARCHIVOCONTROL NUMERIC(22,0);
            DECLARE @cCODPUNTODEVENTA          NUMERIC(22,0);
            DECLARE @cCODPRODUCTO              NUMERIC(22,0);
            DECLARE @tmpFctRegistry            NUMERIC(22,0);
            DECLARE @tmpCODREGISTROREVENUE     NUMERIC(22,0);
            
			BEGIN
				SELECT @cCODENTRADAARCHIVOCONTROL = ID_ENTRADAARCHIVOCONTROL
				  FROM WSXML_SFG.ENTRADAARCHIVOCONTROL
				 WHERE TIPOARCHIVO = 1
				   AND FECHAARCHIVO = @c_TMPFECHA;


				 SELECT @cCODPUNTODEVENTA = CODPUNTODEVENTATRANSACCION
				 FROM WSXML_SFG.INCENTIVOCOMISIONGLOBAL
				 WHERE ID_INCENTIVOCOMISIONGLOBAL = @c_CODINCENTIVO;

				 EXEC WSXML_SFG.SFGREVENUERANGOTIEMPO_CrearRegistroFacturacionVacio  
																@cCODPUNTODEVENTA,
                                                                @p_CODPRODUCTO,
                                                                @c_TMPFECHA,
                                                                1,
                                                                1,
                                                                @tmpFctRegistry OUT

				 -- Aqui vamos

  
			     EXEC WSXML_SFG.SFGREGISTROREVENUE_CalcularRevenueRegistro @tmpFctRegistry, NULL, NULL

				 SELECT @tmpCODREGISTROREVENUE = REGISTROREVENUE.ID_REGISTROREVENUE
				  FROM WSXML_SFG.REGISTROREVENUE
				 WHERE REGISTROREVENUE.CODREGISTROFACTURACION = @tmpFctRegistry;

				 DECLARE @p_revenue float = @c_VALORDIARIO/@v_COUNTINC
				 EXEC WSXML_SFG.SFGREGISTROREVENUEINCENTIVO_AddRecord @tmpCODREGISTROREVENUE, @c_CODINCENTIVO, @p_revenue
                                                  

			END;

            SET @c_VALORXTRX = @c_VALORDIARIO;

        END
        ELSE 
		BEGIN
          IF @c_NUMTRANSACCIONES > 0 BEGIN
            SET @c_VALORXTRX = @c_VALORDIARIO / @c_NUMTRANSACCIONES;
          END
          ELSE BEGIN
            SET @c_VALORXTRX = @c_VALORDIARIO/@v_COUNTINC;
          END 

		  
		  DECLARE Registros CURSOR FOR 
		  SELECT REGISTROFACTURACION.ID_REGISTROFACTURACION,
                                   (CASE
                                     WHEN REGISTROFACTURACION.CODTIPOREGISTRO IN
                                          (1, 3) THEN
                                      REGISTROFACTURACION.NUMTRANSACCIONES
                                     WHEN REGISTROFACTURACION.CODTIPOREGISTRO = 2 THEN
                                      REGISTROFACTURACION.NUMTRANSACCIONES * -1
                                     ELSE
                                      0
                                   END) AS NUMTRANSACCIONES,
                                   REGISTROFACTURACION.CODPRODUCTO
                FROM WSXML_SFG.REGISTROFACTURACION
                INNER JOIN WSXML_SFG.ENTRADAARCHIVOCONTROL
                ON REGISTROFACTURACION.CODENTRADAARCHIVOCONTROL =
                    ENTRADAARCHIVOCONTROL.ID_ENTRADAARCHIVOCONTROL
                WHERE ENTRADAARCHIVOCONTROL.FECHAARCHIVO =
                    @c_TMPFECHA
                AND REGISTROFACTURACION.CODPRODUCTO =
                    @p_CODPRODUCTO
                AND REGISTROFACTURACION.CODTIPOREGISTRO in
                    (1, 2)
                AND NOT (REGISTROFACTURACION.CODREDPDV IN
                    (SELECT ISNULL(PRODUCTOCONTRATOCOMDIF.CODREDPDV,
                                    0)
                            FROM WSXML_SFG.PRODUCTOCONTRATOCOMDIF
                            WHERE CODPRODUCTOCONTRATO =
                                @c_CODPRODUCTOCONTRATO))
                AND NOT (REGISTROFACTURACION.CODAGRUPACIONPUNTODEVENTA IN
                    (SELECT ISNULL(PRODUCTOCONTRATOCOMDIF.CODAGRUPACIONPUNTODEVENTA,
                                    0)
                            FROM PRODUCTOCONTRATOCOMDIF
                            WHERE CODPRODUCTOCONTRATO =
                                @c_CODPRODUCTOCONTRATO))
			  
		  OPEN Registros;

		  DECLARE @Registros__ID_REGISTROFACTURACION numeric(38,0)
				, @Registros__NUMTRANSACCIONES numeric(22,0)
				, @Registros__CODPRODUCTO numeric(38,0)

          DECLARE @v_ID_REGISTROREVENUEINCENTIVO NUMERIC(22,0);
          DECLARE @v_VRINCENTIVO                 FLOAT;
          DECLARE @v_CODREGISTROREVENUE          NUMERIC(22,0);
          DECLARE @v_COUNTREGISTROS              NUMERIC(22,0);

		  FETCH NEXT FROM Registros INTO @Registros__ID_REGISTROFACTURACION, @Registros__NUMTRANSACCIONES, @Registros__CODPRODUCTO

		  WHILE (@@FETCH_STATUS = 0)
			  
		  BEGIN
              
				  SELECT @v_COUNTREGISTROS = COUNT(REGISTROREVENUEINCENTIVO.ID_REGISTROREVENUEINCENTIVO)
					FROM WSXML_SFG.REGISTROREVENUEINCENTIVO
				   INNER JOIN WSXML_SFG.REGISTROREVENUE
					  ON REGISTROREVENUEINCENTIVO.CODREGISTROREVENUE =
						 REGISTROREVENUE.ID_REGISTROREVENUE
				   INNER JOIN WSXML_SFG.REGISTROFACTURACION
					  ON REGISTROREVENUE.CODREGISTROFACTURACION =
						 REGISTROFACTURACION.ID_REGISTROFACTURACION
				   WHERE REGISTROFACTURACION.ID_REGISTROFACTURACION = @Registros__ID_REGISTROFACTURACION
					 AND NOT
						  (REGISTROREVENUEINCENTIVO.CODINCENTIVOCOMISIONGLOBAL IS NULL);

				   IF @v_COUNTREGISTROS = 0 BEGIN
						IF @Registros__NUMTRANSACCIONES = 0 BEGIN
						   IF @Registros__CODPRODUCTO = @v_CODPRODUCTODEFT AND @c_NUMTRANSACCIONES=0 BEGIN
							  SET @v_VRINCENTIVO = @c_VALORDIARIO ;--c_VALORXTRX * ;
						   END
						   ELSE BEGIN
							  SET @v_VRINCENTIVO=0;
						   END 
						END
						ELSE BEGIN
						  SET @v_VRINCENTIVO = @Registros__NUMTRANSACCIONES * @c_VALORXTRX;
						END 

						SELECT @v_CODREGISTROREVENUE = REGISTROREVENUE.ID_REGISTROREVENUE
						FROM WSXML_SFG.REGISTROREVENUE
						WHERE REGISTROREVENUE.CODREGISTROFACTURACION = @Registros__ID_REGISTROFACTURACION;

						EXEC WSXML_SFG.SFGREGISTROREVENUEINCENTIVO_AddRecord @v_CODREGISTROREVENUE, @c_CODINCENTIVO, @v_VRINCENTIVO
				   END
				   ELSE BEGIN
					IF @Registros__NUMTRANSACCIONES = 0 BEGIN
					  SET @v_VRINCENTIVO = @c_VALORXTRX;
					END
					ELSE BEGIN
					  SET @v_VRINCENTIVO = @Registros__NUMTRANSACCIONES * @c_VALORXTRX;
					END 

					SELECT @v_ID_REGISTROREVENUEINCENTIVO = REGISTROREVENUEINCENTIVO.ID_REGISTROREVENUEINCENTIVO
					  FROM WSXML_SFG.REGISTROREVENUEINCENTIVO
					 INNER JOIN WSXML_SFG.REGISTROREVENUE
						ON REGISTROREVENUEINCENTIVO.CODREGISTROREVENUE =
						   REGISTROREVENUE.ID_REGISTROREVENUE
					 INNER JOIN WSXML_SFG.REGISTROFACTURACION
						ON REGISTROREVENUE.CODREGISTROFACTURACION =
						   REGISTROFACTURACION.ID_REGISTROFACTURACION
					 WHERE REGISTROFACTURACION.ID_REGISTROFACTURACION = @Registros__ID_REGISTROFACTURACION
					   AND NOT
							(REGISTROREVENUEINCENTIVO.CODINCENTIVOCOMISIONGLOBAL IS NULL);

					 UPDATE WSXML_SFG.REGISTROREVENUEINCENTIVO SET REVENUE = @v_VRINCENTIVO
					 WHERE ID_REGISTROREVENUEINCENTIVO = @v_ID_REGISTROREVENUEINCENTIVO;
				  END 
			  FETCH NEXT FROM Registros INTO @Registros__ID_REGISTROFACTURACION, @Registros__NUMTRANSACCIONES, @Registros__CODPRODUCTO
              END;
		  CLOSE Registros;
		  DEALLOCATE Registros; 
		END	  
	

        SET @c_TMPFECHA = @c_TMPFECHA + 1;
      END
	END
    ELSE 
	BEGIN
      DELETE FROM WSXML_SFG.REGISTROREVENUEINCENTIVO
       WHERE REGISTROREVENUEINCENTIVO.ID_REGISTROREVENUEINCENTIVO IN
             (SELECT REGISTROREVENUEINCENTIVO.ID_REGISTROREVENUEINCENTIVO
                FROM WSXML_SFG.REGISTROREVENUEINCENTIVO
               INNER JOIN WSXML_SFG.REGISTROREVENUE
                  ON REGISTROREVENUEINCENTIVO.CODREGISTROREVENUE =
                     REGISTROREVENUE.ID_REGISTROREVENUE
               INNER JOIN WSXML_SFG.REGISTROFACTURACION
                  ON REGISTROREVENUE.CODREGISTROFACTURACION =
                     REGISTROFACTURACION.ID_REGISTROFACTURACION
               INNER JOIN WSXML_SFG.ENTRADAARCHIVOCONTROL
                  ON REGISTROFACTURACION.CODENTRADAARCHIVOCONTROL =
                     ENTRADAARCHIVOCONTROL.ID_ENTRADAARCHIVOCONTROL
               WHERE ENTRADAARCHIVOCONTROL.FECHAARCHIVO BETWEEN
                     @p_FECHAINICIO AND @p_FECHAFIN
                 AND REGISTROFACTURACION.CODPRODUCTO = @p_CODPRODUCTO);
    END

  END;
GO


  IF OBJECT_ID('WSXML_SFG.SFGREGISTROREVENUE_GetRegistryRevenueValues', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_GetRegistryRevenueValues;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_GetRegistryRevenueValues(@p_FECHAARCHIVO               DATETIME,
                                     @pk_ID_REGISTROFACTURACION    NUMERIC(22,0),
                                     @p_CODENTRADAARCHIVOCONTROL   NUMERIC(22,0) OUT,
                                     @p_CODTIPOREGISTRO            NUMERIC(22,0) OUT,
                                     @p_CODPUNTODEVENTA            NUMERIC(22,0) OUT,
                                     @p_CODTIPOCONTRATOPDV         NUMERIC(22,0) OUT,
                                     @p_CODPRODUCTO                NUMERIC(22,0) OUT,
                                     @p_CODTIPOCONTRATOPRODUCTO    NUMERIC(22,0) OUT,
                                     @p_CODCOMPANIA                NUMERIC(22,0) OUT,
                                     @p_NUMTRANSACCIONES           NUMERIC(22,0) OUT,
                                     @p_VALORTRANSACCION           FLOAT OUT,
                                     @p_TOTALVENTASBRUTAS          FLOAT OUT,
                                     @p_CODAGRUPACIONPUNTODEVENTA  NUMERIC(22,0) OUT,
                                     @p_CODREDPDV                  NUMERIC(22,0) OUT,
                                     @p_CODCIUDAD                  NUMERIC(22,0) OUT,
                                     @p_CODRANGOCOMISION           NUMERIC(22,0) OUT,
                                     @p_CODTIPOCOMISION            NUMERIC(22,0) OUT,
                                     @p_CODTIPORANGO               NUMERIC(22,0) OUT,
                                     @p_CODRANGOCOMISIONDIFAGR     NUMERIC(22,0) OUT,
                                     @p_CODRANGOCOMISIONDIFRED     NUMERIC(22,0) OUT,
                                     @p_CODRANGOCOMISIONDIFDTO     NUMERIC(22,0) OUT,
                                     @p_FLAGCOMISIONDIFERENCIALBIN NUMERIC(22,0) OUT,
                                     @p_LISTCOMISIONDIFERENCIALBIN CURSOR VARYING OUT,  --WSXML_SFG.IDSTRINGFLOATVALUE
									 @p_COUNTCOMISIONDIFERENCIALBIN NUMERIC(22,0) OUT,
                                     @p_LISTADVTRANSACCIONES       CURSOR VARYING OUT , -- WSXML_SFG.IDSTRINGVALUE
									 @p_COUNTADVTRANSACCIONES       NUMERIC(22,0) OUT ,
                                     @p_CODRANGOCOMISIONESTANDAR   NUMERIC(22,0) OUT) AS
 BEGIN
    DECLARE @registryMasterContract    NUMERIC(22,0);
    DECLARE @flagHistoricalContract    NUMERIC(22,0);
    DECLARE @flagCurrentSetContract    NUMERIC(22,0);
    DECLARE @flagHistoricalDifAgrup    NUMERIC(22,0);
    DECLARE @flagCurrentSetDifAgrup    NUMERIC(22,0);
    DECLARE @flagHistoricalDifRedPv    NUMERIC(22,0);
    DECLARE @flagCurrentSetDifRedPv    NUMERIC(22,0);
    DECLARE @flagHistoricalCommissn    NUMERIC(22,0);
    DECLARE @V_VRCOMISION              float = 0;
    DECLARE @V_DepartamentoDiferencial NUMERIC(22,0);
    DECLARE @v_CODTIPOPRODUCTO         NUMERIC(22,0);
	DECLARE @msg VARCHAR(2000)

   
  SET NOCOUNT ON;

    SELECT @p_CODENTRADAARCHIVOCONTROL = REG.CODENTRADAARCHIVOCONTROL,
           @p_CODTIPOREGISTRO = REG.CODTIPOREGISTRO,
           @p_CODPUNTODEVENTA = REG.CODPUNTODEVENTA,
           @p_CODTIPOCONTRATOPDV = REG.CODTIPOCONTRATOPDV,
           @p_CODPRODUCTO = REG.CODPRODUCTO,
           @p_CODTIPOCONTRATOPRODUCTO = COALESCE(HST.CODTIPOCONTRATOPRODUCTO,
                    PCT.CODTIPOCONTRATOPRODUCTO),
           @p_CODCOMPANIA = REG.CODCOMPANIA,
           @p_NUMTRANSACCIONES = REG.NUMTRANSACCIONES,
           @p_VALORTRANSACCION = REG.VALORTRANSACCION,
           @p_TOTALVENTASBRUTAS = REG.VALORVENTABRUTANOREDONDEADO,
           @p_CODAGRUPACIONPUNTODEVENTA = REG.CODAGRUPACIONPUNTODEVENTA,
           @p_CODREDPDV = REG.CODREDPDV,
           @p_CODCIUDAD = REG.CODCIUDAD,
           @p_CODRANGOCOMISION = RCM.ID_RANGOCOMISION,
           @p_CODTIPOCOMISION = RCM.CODTIPOCOMISION,
           @p_CODTIPORANGO = RCM.CODTIPORANGO,
           @p_CODRANGOCOMISIONDIFAGR = COALESCE(HSTA.CODRANGOCOMISION, PCDA.CODRANGOCOMISION, 0),
           @p_CODRANGOCOMISIONDIFRED = COALESCE(HSTR.CODRANGOCOMISION, PCDR.CODRANGOCOMISION, 0),
           @p_CODRANGOCOMISIONDIFDTO = COALESCE(HSTR.CODRANGOCOMISION, PCDD.CODRANGOCOMISION, 0),
           @p_FLAGCOMISIONDIFERENCIALBIN = ISNULL(PBIN.CANTIDAD, 0),
           @p_CODRANGOCOMISIONESTANDAR = COALESCE(CSTH.CODRANGOCOMISIONESTANDAR,
                    PCT.CODRANGOCOMISIONESTANDAR),
           -- Flags de actualizacion
           @flagHistoricalContract = HST.ID_PRODCONTRATOHISTORICO,
           @flagCurrentSetContract = PCT.ID_PRODUCTOCONTRATO,
           @flagHistoricalDifAgrup = HSTA.ID_PRODCONTRATOCOMDIFHISTORICO,
           @flagCurrentSetDifAgrup = PCDA.ID_PRODUCTOCONTRATOCOMDIF,
           @flagHistoricalDifRedPv = HSTR.ID_PRODCONTRATOCOMDIFHISTORICO,
           @flagCurrentSetDifRedPv = PCDR.ID_PRODUCTOCONTRATOCOMDIF,
           @flagHistoricalCommissn = CSTH.ID_PRODCONTRATOESTANDARHISTORI,
           @registryMasterContract = PCT.ID_PRODUCTOCONTRATO
           FROM WSXML_SFG.REGISTROFACTURACION REG
     INNER JOIN WSXML_SFG.PRODUCTOCONTRATO PCT
        ON (REG.CODPRODUCTO = PCT.CODPRODUCTO)
    -- Regular commission is determined by fixed commission union historical dependences
      LEFT OUTER JOIN WSXML_SFG.PRODCONTRATOHISTORICO HST
        ON (HST.CODPRODUCTOCONTRATO = PCT.ID_PRODUCTOCONTRATO AND
           HST.FECHAINICIOVALIDEZ = @p_FECHAARCHIVO)
      LEFT OUTER JOIN WSXML_SFG.RANGOCOMISION RCM
        ON (RCM.ID_RANGOCOMISION =
           COALESCE(HST.CODRANGOCOMISION, PCT.CODRANGOCOMISION))
    -- Differential commission identifiers determined by differential records plus historical dependences
      LEFT OUTER JOIN WSXML_SFG.PRODUCTOCONTRATOCOMDIF PCDA
        ON (PCDA.CODPRODUCTOCONTRATO = PCT.ID_PRODUCTOCONTRATO AND
           PCDA.CODAGRUPACIONPUNTODEVENTA = REG.CODAGRUPACIONPUNTODEVENTA and
           PCDA.PRIORIDAD = 1)
      LEFT OUTER JOIN WSXML_SFG.PRODCONTRATOCOMDIFHISTORICO HSTA
        ON (HSTA.CODPRODUCTOCONTRATOCOMDIF = PCDA.ID_PRODUCTOCONTRATOCOMDIF AND
           HSTA.FECHAINICIOVALIDEZ = @p_FECHAARCHIVO)
      LEFT OUTER JOIN WSXML_SFG.PRODUCTOCONTRATOCOMDIF PCDR
        ON (PCDR.CODPRODUCTOCONTRATO = PCT.ID_PRODUCTOCONTRATO AND
           PCDR.CODREDPDV = REG.CODREDPDV and PCDR.PRIORIDAD = 1)

      LEFT OUTER JOIN (SELECT D.*, C.CODCIUDAD
                         FROM WSXML_SFG.PRODUCTOCONTRATOCOMDIFCIUDAD C,
                              WSXML_SFG.PRODUCTOCONTRATOCOMDIF       D
                        WHERE C.CODPRODUCTOCONTRATOCOMDIF =
                              D.ID_PRODUCTOCONTRATOCOMDIF
                          AND C.ACTIVE = 1) PCDD
        ON (PCDD.CODPRODUCTOCONTRATO = PCT.ID_PRODUCTOCONTRATO AND
           PCDD.CODCIUDAD = REG.CODCIUDAD and PCDD.PRIORIDAD = 1)

      LEFT OUTER JOIN WSXML_SFG.PRODCONTRATOCOMDIFHISTORICO HSTR
        ON (HSTR.CODPRODUCTOCONTRATOCOMDIF = PCDR.ID_PRODUCTOCONTRATOCOMDIF AND
           HSTR.FECHAINICIOVALIDEZ = @p_FECHAARCHIVO)
      LEFT OUTER JOIN (SELECT CODPRODUCTOCONTRATO, COUNT(1) AS CANTIDAD
                         FROM WSXML_SFG.PRODUCTOCONTRATOCOMDIF
                        WHERE BINTARJETA IS NOT NULL
                        GROUP BY CODPRODUCTOCONTRATO) PBIN
        ON (PBIN.CODPRODUCTOCONTRATO = PCT.ID_PRODUCTOCONTRATO)
    -- Historical dependence of Standard Commission for agents
      LEFT OUTER JOIN WSXML_SFG.PRODCONTRATOESTANDARHISTORICO CSTH
        ON (CSTH.CODPRODUCTOCONTRATO = PCT.ID_PRODUCTOCONTRATO AND
           CSTH.FECHAINICIOVALIDEZ = @p_FECHAARCHIVO)
     WHERE ID_REGISTROFACTURACION = @pk_ID_REGISTROFACTURACION
     --AND ;

    --Giros Colpatria
    IF @p_CODPRODUCTO IN (1255 --GIRO DEPOSITO COLPA
                        ,
                         1256 --GIRO RETIRO COLPA
                         ) BEGIN
       IF @p_CODTIPOREGISTRO = 2 BEGIN
         SELECT @p_VALORTRANSACCION = SUM(AJF.VALORCOMISION), @p_TOTALVENTASBRUTAS = SUM(AJF.VALORCOMISION)
         FROM WSXML_SFG.AJUSTEFACTURACION AJF
         WHERE AJF.CODREGISTROFACTDESTINO = @pk_ID_REGISTROFACTURACION;
       END
       ELSE BEGIN
        SELECT @p_VALORTRANSACCION = ISNULL(SUM(RFR.VRCOMISION), 0), @p_TOTALVENTASBRUTAS = ISNULL(SUM(RFR.VRCOMISION), 0)
        FROM WSXML_SFG.REGISTROFACTREFERENCIA RFR
        WHERE RFR.CODREGISTROFACTURACION = @pk_ID_REGISTROFACTURACION;
       END 


      --      p_VALORTRANSACCION  := V_VRCOMISION;
      --      p_TOTALVENTASBRUTAS := V_VRCOMISION;

    END 
    
     SELECT @v_CODTIPOPRODUCTO = PRODUCTO.CODTIPOPRODUCTO 
     FROM WSXML_SFG.PRODUCTO 
     WHERE ID_PRODUCTO = @p_CODPRODUCTO;

 --Giros Deposito y Giro Retiro
    IF @v_CODTIPOPRODUCTO IN (14,15) BEGIN--- P_CODPRODUCTO IN (1255/*GIRO DEPOSITO COLPA*/,1256 /*GIRO RETIRO COLPA*/) OR

     --  IF p_CODTIPOREGISTRO = 2 THEN
     --    
     --    SELECT SUM(AJF.VALORCOMISION), SUM(AJF.VALORCOMISION)
     --    INTO p_VALORTRANSACCION, p_TOTALVENTASBRUTAS
     --    FROM AJUSTEFACTURACION AJF
     --    WHERE AJF.CODREGISTROFACTDESTINO = pk_ID_REGISTROFACTURACION;
     --    
     --  ELSE
         
          SELECT @p_VALORTRANSACCION = ISNULL(SUM(RFR.VRCOMISION), 0), @p_TOTALVENTASBRUTAS = ISNULL(SUM(RFR.VRCOMISION), 0)
          FROM WSXML_SFG.REGISTROFACTREFERENCIA RFR
          WHERE RFR.CODREGISTROFACTURACION = @pk_ID_REGISTROFACTURACION;
        
      -- END IF;
      --      p_VALORTRANSACCION  := V_VRCOMISION;
      --      p_TOTALVENTASBRUTAS := V_VRCOMISION;

    END 

     --Giros MATRIX
    IF @p_CODPRODUCTO IN (1872,1873,1874,1875) BEGIN

       IF @p_CODTIPOREGISTRO = 2 BEGIN
         SELECT @p_VALORTRANSACCION = ISNULL(SUM(AJF.FLETEANULACION),0), @p_TOTALVENTASBRUTAS = ISNULL(SUM(AJF.FLETEANULACION),0)
         FROM WSXML_SFG.AJUSTEFACTURACION AJF
         WHERE AJF.CODREGISTROFACTDESTINO = @pk_ID_REGISTROFACTURACION;
       END
       ELSE BEGIN
           SELECT @p_VALORTRANSACCION = ISNULL(SUM(CAST(RFR.Suscriptor AS NUMERIC(38,0))), 0), @p_TOTALVENTASBRUTAS = ISNULL(SUM(CAST(RFR.Suscriptor AS NUMERIC(38,0))), 0)
           FROM WSXML_SFG.REGISTROFACTREFERENCIA RFR
           WHERE RFR.CODREGISTROFACTURACION = @pk_ID_REGISTROFACTURACION;
       END 
      --      p_VALORTRANSACCION  := V_VRCOMISION;
      --      p_TOTALVENTASBRUTAS := V_VRCOMISION;

    END 

    --Verificar si existen excepciones para la compania y el servicio del producto
      DECLARE @xCOUNT NUMERIC(22,0);
    BEGIN
      SELECT @xCOUNT = COUNT(1)
        FROM WSXML_SFG.PRODUCTOEXCEPCOMPANIAREV
       WHERE CODPRODUCTO = @p_CODPRODUCTO;

      IF @xCOUNT > 0 BEGIN

        SELECT @p_CODCOMPANIA = CODCOMPANIAEXCEP
          FROM WSXML_SFG.PRODUCTOEXCEPCOMPANIAREV
         WHERE CODPRODUCTO = @p_CODPRODUCTO;

      END 

    END;


    -- Overwriting of fixed values and deletion of dependences goes here.
    IF @flagHistoricalContract IS NOT NULL AND
       @p_FECHAARCHIVO = CONVERT(DATETIME, CONVERT(DATE,GETDATE() - 1)) BEGIN
      UPDATE WSXML_SFG.PRODUCTOCONTRATO
         SET CODTIPOCONTRATOPRODUCTO = @p_CODTIPOCONTRATOPRODUCTO,
             CODRANGOCOMISION        = @p_CODRANGOCOMISION
       WHERE ID_PRODUCTOCONTRATO = @flagCurrentSetContract;
      -- Drop Historical Dependence
      --DELETE FROM PRODCONTRATOHISTORICO WHERE ID_PRODCONTRATOHISTORICO = flagHistoricalContract;
    END 
    IF @flagHistoricalCommissn IS NOT NULL AND
       @p_FECHAARCHIVO = CONVERT(DATETIME, CONVERT(DATE,GETDATE() - 1)) BEGIN
      UPDATE WSXML_SFG.PRODUCTOCONTRATO
         SET CODRANGOCOMISIONESTANDAR = @p_CODRANGOCOMISIONESTANDAR
       WHERE ID_PRODUCTOCONTRATO = @flagCurrentSetContract;
      -- Drop Historical Dependence
      --DELETE FROM PRODCONTRATOESTANDARHISTORICO WHERE ID_PRODCONTRATOESTANDARHISTORI = flagHistoricalCommissn;
    END 
    IF @flagHistoricalDifAgrup IS NOT NULL AND
       @p_FECHAARCHIVO = CONVERT(DATETIME, CONVERT(DATE,GETDATE() - 1)) OR
       @flagHistoricalDifRedPv IS NOT NULL BEGIN
      IF @flagHistoricalDifAgrup IS NOT NULL BEGIN
        UPDATE WSXML_SFG.PRODUCTOCONTRATOCOMDIF
           SET CODRANGOCOMISION = @p_CODRANGOCOMISIONDIFAGR
         WHERE ID_PRODUCTOCONTRATOCOMDIF = @flagCurrentSetDifAgrup;
        -- Drop Historical Dependence
        --DELETE FROM PRODCONTRATOCOMDIFHISTORICO WHERE ID_PRODCONTRATOCOMDIFHISTORICO = flagHistoricalDifAgrup;
      END
      ELSE IF @flagHistoricalDifRedPv IS NOT NULL AND
            @p_FECHAARCHIVO = CONVERT(DATETIME, CONVERT(DATE,GETDATE() - 1)) BEGIN
        UPDATE WSXML_SFG.PRODUCTOCONTRATOCOMDIF
           SET CODRANGOCOMISION = @p_CODRANGOCOMISIONDIFRED
         WHERE ID_PRODUCTOCONTRATOCOMDIF = @flagCurrentSetDifRedPv;
        -- Drop Historical Dependence
        --DELETE FROM PRODCONTRATOCOMDIFHISTORICO WHERE ID_PRODCONTRATOCOMDIFHISTORICO = flagHistoricalDifRedPv;
      END 
    END 
    IF @p_FLAGCOMISIONDIFERENCIALBIN <> 0 BEGIN

		SELECT @p_COUNTCOMISIONDIFERENCIALBIN = COUNT(*)
		FROM WSXML_SFG.PRODUCTOCONTRATOCOMDIF
			WHERE CODPRODUCTOCONTRATO = @registryMasterContract;

		SET  @p_LISTCOMISIONDIFERENCIALBIN = CURSOR FORWARD_ONLY STATIC FOR 
			SELECT ID_PRODUCTOCONTRATOCOMDIF,BINTARJETA, CODRANGOCOMISION 
			FROM WSXML_SFG.PRODUCTOCONTRATOCOMDIF
			WHERE CODPRODUCTOCONTRATO = @registryMasterContract;
		OPEN @p_LISTCOMISIONDIFERENCIALBIN

		SET  @p_LISTADVTRANSACCIONES = CURSOR FORWARD_ONLY STATIC FOR 
			SELECT 
				CASE WHEN RCD.VALORPORCENTUAL + RCD.VALORTRANSACCIONAL = 0 THEN 0  ELSE  1 END,
                CASE WHEN PDA.CODTIPOTRANSAVANZADO = 1 THEN 'I' WHEN PDA.CODTIPOTRANSAVANZADO = 2 THEN 'F'  ELSE '-' END
			FROM WSXML_SFG.PLANTILLAPRODUCTO PLP
			   INNER JOIN WSXML_SFG.PLANTILLAPRODUCTODETALLE PPD
				  ON (PPD.CODPLANTILLAPRODUCTO = PLP.ID_PLANTILLAPRODUCTO AND
					 CODPRODUCTO = WSXML_SFG.PRODUCTO_F(9999))
			   INNER JOIN WSXML_SFG.PLANTILLAPRODUCTODETALLEAVANZA PDA
				  ON (PDA.CODPLANTILLAPRODUCTODETALLE =
					 PPD.ID_PLANTILLAPRODUCTODETALLE)
			   INNER JOIN WSXML_SFG.RANGOCOMISION RCM
				  ON (RCM.ID_RANGOCOMISION = PDA.CODRANGOCOMISION)
			   INNER JOIN (SELECT CODRANGOCOMISION,
								  SUM(VALORPORCENTUAL) AS VALORPORCENTUAL,
								  SUM(VALORTRANSACCIONAL) AS VALORTRANSACCIONAL
							 FROM WSXML_SFG.RANGOCOMISIONDETALLE
							GROUP BY CODRANGOCOMISION) RCD
				  ON (RCD.CODRANGOCOMISION = RCM.ID_RANGOCOMISION)
			   WHERE MASTERPLANTILLA = 1
				 AND PDA.CODTIPOTRANSAVANZADO IN (1, 2); /* Matched with 'I', 'F'. Improve */
		OPEN @p_LISTADVTRANSACCIONES

		SELECT @p_COUNTADVTRANSACCIONES = COUNT(*)
		FROM WSXML_SFG.PLANTILLAPRODUCTO PLP
			   INNER JOIN WSXML_SFG.PLANTILLAPRODUCTODETALLE PPD
				  ON (PPD.CODPLANTILLAPRODUCTO = PLP.ID_PLANTILLAPRODUCTO AND
					 CODPRODUCTO = WSXML_SFG.PRODUCTO_F(9999))
			   INNER JOIN WSXML_SFG.PLANTILLAPRODUCTODETALLEAVANZA PDA
				  ON (PDA.CODPLANTILLAPRODUCTODETALLE =
					 PPD.ID_PLANTILLAPRODUCTODETALLE)
			   INNER JOIN WSXML_SFG.RANGOCOMISION RCM
				  ON (RCM.ID_RANGOCOMISION = PDA.CODRANGOCOMISION)
			   INNER JOIN (SELECT CODRANGOCOMISION,
								  SUM(VALORPORCENTUAL) AS VALORPORCENTUAL,
								  SUM(VALORTRANSACCIONAL) AS VALORTRANSACCIONAL
							 FROM WSXML_SFG.RANGOCOMISIONDETALLE
							GROUP BY CODRANGOCOMISION) RCD
				  ON (RCD.CODRANGOCOMISION = RCM.ID_RANGOCOMISION)
			   WHERE MASTERPLANTILLA = 1
				 AND PDA.CODTIPOTRANSAVANZADO IN (1, 2); /* Matched with 'I', 'F'. Improve */
    END 

    /*Adicion para controlar multiples comisiones diferenciales de productos*/
    --BUSCA EL DEPARTAMENTO DE LA CIUDAD
    BEGIN

      SELECT @V_DepartamentoDiferencial = D.CODDEPARTAMENTO
        FROM WSXML_SFG.PRODUCTOCONTRATOCOMDIFCIUDAD C, WSXML_SFG.PRODUCTOCONTRATOCOMDIF D
       WHERE C.CODPRODUCTOCONTRATOCOMDIF = D.ID_PRODUCTOCONTRATOCOMDIF
         AND C.ACTIVE = 1
         and C.CODCIUDAD = @p_CODCIUDAD
         AND D.CODPRODUCTOCONTRATO = @flagCurrentSetContract;

		IF @@ROWCOUNT = 0
			SET @V_DepartamentoDiferencial = 0;
    END;

    --Setea comisiones diferenciales multiples, dejando valida solo la de menor prioridad

    BEGIN

      SET @p_CODRANGOCOMISIONDIFRED = 0;
      SET @p_CODRANGOCOMISIONDIFAGR = 0;
      SET @p_CODRANGOCOMISIONDIFDTO = 0;

      SELECT @p_CODRANGOCOMISIONDIFRED = CASE WHEN ISNULL(CD1.CODREDPDV, 0) = 0 THEN  0 ELSE CODRANGOCOMISION END,
             @p_CODRANGOCOMISIONDIFAGR = CASE WHEN ISNULL(CD1.CODAGRUPACIONPUNTODEVENTA, 0) = 0 THEN 0 ELSE CODRANGOCOMISION END,
             @p_CODRANGOCOMISIONDIFDTO = CASE WHEN ISNULL(CD1.CODDEPARTAMENTO, 0) = 0 THEN 0 ELSE CODRANGOCOMISION END
       FROM WSXML_SFG.PRODUCTOCONTRATOCOMDIF CD1
       WHERE CD1.PRIORIDAD =
             (
				SELECT MIN(CD.PRIORIDAD)
                FROM WSXML_SFG.PRODUCTOCONTRATOCOMDIF CD
				WHERE CD.CODPRODUCTOCONTRATO = CD1.CODPRODUCTOCONTRATO
					 AND (CD.CODREDPDV = @p_CODREDPDV OR CD.CODAGRUPACIONPUNTODEVENTA =@p_CODAGRUPACIONPUNTODEVENTA 
						OR CD.CODDEPARTAMENTO = @V_DepartamentoDiferencial)
					AND CD.CODPRODUCTOCONTRATO = @flagCurrentSetContract
					AND CD.PRIORIDAD > 0
			)
			AND (CD1.CODREDPDV = @p_CODREDPDV OR
				CD1.CODAGRUPACIONPUNTODEVENTA = @p_CODAGRUPACIONPUNTODEVENTA OR
				CD1.CODDEPARTAMENTO = @V_DepartamentoDiferencial)
			AND CD1.CODPRODUCTOCONTRATO = @flagCurrentSetContract
				--AND ;
			 
		IF @@ROWCOUNT = 0  BEGIN
			SET @p_CODRANGOCOMISIONDIFRED = @p_CODRANGOCOMISIONDIFRED;
			SET @p_CODRANGOCOMISIONDIFAGR = @p_CODRANGOCOMISIONDIFAGR;
			SET @p_CODRANGOCOMISIONDIFDTO = @p_CODRANGOCOMISIONDIFDTO;
		END
    END;

	  IF @@ROWCOUNT = 0
	  BEGIN
			DECLARE @msgCODIGOGTECHPRODUCTO VARCHAR(4000) /* Use -meta option PRODUCTO.CODIGOGTECHPRODUCTO%TYPE */;
			DECLARE @msgNOMPRODUCTO VARCHAR(4000)         /* Use -meta option PRODUCTO.NOMPRODUCTO%TYPE */;
		  BEGIN
			SELECT @msgCODIGOGTECHPRODUCTO = CODIGOGTECHPRODUCTO, @msgNOMPRODUCTO = NOMPRODUCTO
			  FROM WSXML_SFG.REGISTROFACTURACION
			 INNER JOIN WSXML_SFG.PRODUCTO ON (CODPRODUCTO = ID_PRODUCTO)
			 WHERE ID_REGISTROFACTURACION = @pk_ID_REGISTROFACTURACION;

			SET @msg = '-20054 No existe informacion de contrato para el producto ' +
									ISNULL(@msgCODIGOGTECHPRODUCTO, '') + ' ' +
									ISNULL(@msgNOMPRODUCTO, '') +
									'. No se puede continuar con el calculo de revenue para la fecha'
			RAISERROR(@msg, 16, 1);
		  END;
		END

  END;
GO




IF OBJECT_ID('WSXML_SFG.SFGREGISTROREVENUE_CalcularRevenueProducto', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_CalcularRevenueProducto;
GO


  /* Recalculo de Producto */
  CREATE PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_CalcularRevenueProducto(@p_FECHAARCHIVO        DATETIME,
                                    @p_CODPRODUCTO         NUMERIC(22,0),
                                    @p_REPEVALUACIONVENTAS INT = 1) AS
 BEGIN
    DECLARE @errormsg         VARCHAR(2000);
    DECLARE @cFECHA           DATETIME = CONVERT(DATETIME, CONVERT(DATE,@p_FECHAARCHIVO));
    DECLARE @cCODSERVICIO     NUMERIC(22,0);
    DECLARE @cCODSERVICIOREAL NUMERIC(22,0);
    DECLARE @cREGISTRYFILEID  NUMERIC(22,0);
    DECLARE @cFILECALCFLAG    NUMERIC(22,0);

    --nueva variable
    DECLARE @COD_INCENCOMISION NUMERIC(22,0);

    DECLARE @lstproductregistries WSXML_SFG.LONGNUMBERARRAY;

    --cachetarifa      PRODUCTTARIFALIST;
    DECLARE @cachetarifadif   WSXML_SFG.PRODUCTTARIFA;
    DECLARE @cacheconfigpyg   WSXML_SFG.CONFIGPYGREGISTRY;
    DECLARE @cacheconfigdsc   WSXML_SFG.CONFIGPYGDISCOUNT;
    DECLARE @costoscalculados WSXML_SFG.FORMULA;
    DECLARE @msg VARCHAR(2000);
	DECLARE @contenido VARCHAR(2000);
	
	
	DECLARE @VENTAFACT SMALLINT, @ANULACION SMALLINT, @FREETICKT SMALLINT, @PREMIOPAG SMALLINT, @RGSTOTROS SMALLINT, @VENNOFACT SMALLINT
		
	EXEC WSXML_SFG.SFGTIPOREGISTRO_CONSTANT 
		  @VENTAFACT OUT, @ANULACION OUT,
		  @FREETICKT OUT, @PREMIOPAG OUT,
		  @RGSTOTROS OUT, @VENNOFACT OUT

	DECLARE @p_TIPOINFORMATIVO TINYINT, @p_TIPOERROR TINYINT,
		@p_TIPOADVERTENCIA TINYINT, @p_TIPOCUALQUIERA TINYINT,
		@p_PROCESONOTIFICACION TINYINT, @p_ESTADOABIERTA TINYINT,
		@p_ESTADOCERRADA TINYINT

	EXEC WSXML_SFG.SFGALERTA_CONSTANT
			@p_TIPOINFORMATIVO OUT,
			@p_TIPOERROR OUT,
			@p_TIPOADVERTENCIA OUT,
			@p_TIPOCUALQUIERA OUT,
			@p_PROCESONOTIFICACION OUT,
			@p_ESTADOABIERTA OUT,
			@p_ESTADOCERRADA OUT
   
    DECLARE @tCommission__ID_RANGOCOMISIONDETALLE NUMERIC(38,0), @tCommission__RANGOINICIAL FLOAT
										, @tCommission__RANGOFINAL FLOAT, @tCommission__VALORPORCENTUAL FLOAT, @tCommission__VALORTRANSACCIONAL FLOAT

	SET NOCOUNT ON;
    
	SET @msg = 'Invoked Product Revenue Calculation for ' + ISNULL(FORMAT(@p_FECHAARCHIVO, 'dd/MM/yyyy'), '') + ' ' + ISNULL(CONVERT(VARCHAR,@p_CODPRODUCTO), '')
	EXEC WSXML_SFG.sfgtmptrace_tracelog @msg

    --Resetea el almacen de tarifas diferenciales para el dia en curso
    delete from WSXML_SFG.registrorevenuecomdif
    where codregistrorevenue in
           (SELECT cd.id_registrorevenuecomdif
              FROM WSXML_SFG.REGISTROFACTURACION   R,
                   WSXML_SFG.ENTRADAARCHIVOCONTROL A,
                   WSXML_SFG.REGISTROREVENUE       RR,
                   WSXML_SFG.REGISTROREVENUECOMDIF CD
             WHERE R.CODPRODUCTO = @p_CODPRODUCTO
               AND A.ID_ENTRADAARCHIVOCONTROL = R.CODENTRADAARCHIVOCONTROL
               AND A.FECHAARCHIVO = @p_FECHAARCHIVO
               AND RR.CODREGISTROFACTURACION = R.ID_REGISTROFACTURACION
               AND RR.ID_REGISTROREVENUE = CD.CODREGISTROREVENUE);

    BEGIN
		BEGIN TRY

		  --Reprocesar Tarifas Fijas
		  --IF NOT COD_INCENCOMISION IS NULL THEN
		  BEGIN
			BEGIN TRY

				EXEC WSXML_SFG.SFGREGISTROREVENUE_ReprocesarTarifaFija @p_CODPRODUCTO, @p_FECHAARCHIVO, @p_FECHAARCHIVO
			END TRY
			BEGIN CATCH

				SET @msg = '-20020 El producto '+ ISNULL(CONVERT(VARCHAR, @p_CODPRODUCTO), '') +' no se encuentra en el sistema o no esta correctamente configurado. Se presento el siguiente error : ' +
										ISNULL(ERROR_MESSAGE ( ) , '')
				RAISERROR(@msg, 16, 1);
			END CATCH
		  END;

		  --END IF;


		  --Reprocesar tarifas de rangos de tiempo
		  IF ISNULL(@p_REPEVALUACIONVENTAS,1) = 1 BEGIN
			EXEC WSXML_SFG.SFGREVENUERANGOTIEMPO_CalRevenueRangoTiempoProducto @p_FECHAARCHIVO,@p_CODPRODUCTO
		  END 

		  SELECT @cCODSERVICIO = CODSERVICIO
			FROM WSXML_SFG.PRODUCTO, WSXML_SFG.TIPOPRODUCTO, WSXML_SFG.LINEADENEGOCIO
		   WHERE ID_PRODUCTO = @p_CODPRODUCTO
			 AND CODTIPOPRODUCTO = ID_TIPOPRODUCTO
			 AND CODLINEADENEGOCIO = ID_LINEADENEGOCIO;

		  --Verificar si existen excepciones para servicio y /compania
		  SET @cCODSERVICIOREAL = @cCODSERVICIO;
      
		  DECLARE @xCOUNT NUMERIC(22,0);
      
		  BEGIN
			SELECT @xCOUNT = COUNT(1)
			  FROM WSXML_SFG.PRODUCTOEXCEPCOMPANIAREV
			 WHERE CODPRODUCTO = @p_CODPRODUCTO;

			IF @xCOUNT > 0 BEGIN

			  SELECT @cCODSERVICIO = CODSERVICIOEXCEP
				FROM WSXML_SFG.PRODUCTOEXCEPCOMPANIAREV
			   WHERE CODPRODUCTO = @p_CODPRODUCTO;

			END 

		  END;

		END TRY
		BEGIN CATCH
		  SET @msg = '-20020 El producto '+ ISNULL(CONVERT(VARCHAR, @p_CODPRODUCTO), '') +'  no se encuentra en el sistema o no esta correctamente configurado. Se presento el siguiente error : ' +ISNULL(ERROR_MESSAGE() , '')
			RAISERROR(@msg, 16, 1);
		END CATCH

    END;


    -- Tarifas por contrato, Configuracion P y G y Costos Calculados
    --cachetarifa      := 
    EXEC WSXML_SFG.SFGPRODUCTOCONTRATO_GetTarifaCacheList @cFECHA, @p_CODPRODUCTO
	
    --SET @cachetarifadif   = SFGPRODUCTOCONTRATO.GetTarifaDiferencialCacheList(@cFECHA);
	UPDATE WSXML_SFG.PRODUCTOCONTRATOCOMDIFTARIFA
	SET VALOR = COALESCE((SELECT PTH.VALOR FROM WSXML_SFG.PRODCONTRATOCOMDIFTARIFAHISTOR PTH
						  WHERE PTH.CODPRODUCTOCONTRATOCOMDIFTARIF = ID_PRODUCTOCONTRATOCOMDIFTARIF
							AND PTH.CODTARIFAVALOR                 = CODTARIFAVALOR
							AND PTH.FECHAINICIOVALIDEZ             = CONVERT(DATETIME, CONVERT(DATE,@cFECHA))), VALOR);

	INSERT INTO @cachetarifadif
	SELECT * 
	FROM WSXML_SFG.SFGPRODUCTOCONTRATO_GetTarifaDiferencialCacheList(@cFECHA)
	
    INSERT INTO @cacheconfigpyg 
	SELECT * FROM WSXML_SFG.SFGCONFIGURACIONPYG_GetConfiguracionCache();

    INSERT INTO @cacheconfigdsc   
	SELECT * FROM WSXML_SFG.SFGCONFIGURACIONPYG_GetDescuentoCache();

    INSERT INTO @costoscalculados
	SELECT * FROM WSXML_SFG.SFGCOSTOCALCULADO_GetCurrentCostoList(@cCODSERVICIO);

    -- Obtain file and transactions
    BEGIN
		BEGIN TRY

		  SELECT @cREGISTRYFILEID = ID_ENTRADAARCHIVOCONTROL, @cFILECALCFLAG = REVENUECALCULADO
			FROM WSXML_SFG.ENTRADAARCHIVOCONTROL
		   WHERE REVERSADO = 0
			 AND FECHAARCHIVO = @cFECHA
			 AND TIPOARCHIVO = @cCODSERVICIOREAL;
		END TRY
		BEGIN CATCH
			RAISERROR('-20021 No se han cargado las ventas de la fecha especificada. No se puede calcular', 16, 1);
		END CATCH
    END;

    IF @cFILECALCFLAG = 0 BEGIN
      RAISERROR('-20022 No se puede calcular el revenue de un solo producto para la fecha. El revenue general no se ha calculado', 16, 1);
    END 

	INSERT INTO @lstproductregistries
    SELECT ID_REGISTROFACTURACION 
    FROM WSXML_SFG.REGISTROFACTURACION
    WHERE CODENTRADAARCHIVOCONTROL = @cREGISTRYFILEID
       AND CODTIPOREGISTRO IN (1, 2, 3)
       AND CODPRODUCTO = @p_CODPRODUCTO;

    IF (SELECT COUNT(*) FROM @lstproductregistries) > 0 BEGIN
		DECLARE irx CURSOR FOR SELECT IDVALUE FROM @lstproductregistries
		OPEN irx;

		DECLARE @irx_IDVALUE NUMERIC(38,0)

		FETCH NEXT FROM irx INTO @irx_IDVALUE

		WHILE @@FETCH_STATUS=0
		BEGIN
        /* Recalcular revenue bruto */
          DECLARE @cCODREGISTROREVENUE       NUMERIC(22,0); -- Final Registry Output
          DECLARE @cCODENTRADAARCHIVOCONTROL NUMERIC(22,0);
          DECLARE @cCODTIPOREGISTRO          NUMERIC(22,0);
          DECLARE @cCODPUNTODEVENTA          NUMERIC(22,0);
          DECLARE @cCODTIPOCONTRATOPDV       NUMERIC(22,0);
          DECLARE @cCODPRODUCTO              NUMERIC(22,0);
          DECLARE @cCODTIPOCONTRATOPRODUCTO  NUMERIC(22,0);
          DECLARE @cCODCOMPANIA              NUMERIC(22,0);
          -- Valores para calcular y considerar
          DECLARE @cNUMTRANSACCIONES          NUMERIC(22,0);
          DECLARE @cVALORTRANSACCION          FLOAT;
          DECLARE @cTOTALVENTASBRUTAS         FLOAT;
          DECLARE @cCODAGRUPACIONPUNTODEVENTA NUMERIC(22,0);
          DECLARE @cCODREDPDV                 NUMERIC(22,0);
          DECLARE @cCODCIUDAD                 NUMERIC(22,0);
          -- Valores de Tarifa (Ignorar valor de Anticipo)
          DECLARE @cCODRANGOCOMISION           NUMERIC(22,0);
          DECLARE @cCODTIPOCOMISION            NUMERIC(22,0);
          DECLARE @cCODTIPORANGO               NUMERIC(22,0);
          DECLARE @cCODRANGOCOMISIONDIFAGR     NUMERIC(22,0);
          DECLARE @cCODRANGOCOMISIONDIFRED     NUMERIC(22,0);
          DECLARE @cCODRANGOCOMISIONDIFDTO     NUMERIC(22,0);
          DECLARE @cFLAGCOMISIONDIFERENCIALBIN NUMERIC(22,0);
          DECLARE @cLISTCOMISIONDIFERENCIALBIN CURSOR --WSXML_SFG.IDSTRINGFLOATVALUE;
		  DECLARE @cCOUNTCOMISIONDIFERENCIALBIN NUMERIC(22,0)
          DECLARE @cLISTADVTRANSACCIONES       CURSOR --WSXML_SFG.IDSTRINGVALUE;
		  DECLARE @cCOUNTADVTRANSACCIONES       NUMERIC(22,0)
          DECLARE @cCODRANGOCOMISIONESTANDAR   NUMERIC(22,0);
          -- Calculation value
          DECLARE @vCOMISIONPOSESTANDAR FLOAT = 0;
          DECLARE @vREVENUE             FLOAT = 0;

          -- Output control values
          DECLARE @cCODPRODUCTOREVENUE   NUMERIC(22,0);
          DECLARE @cANULACIONDIFERENCIAL NUMERIC(22,0) = 0;
		  
		  -- Calcular (Emular) Comision POS Estandar
		  DECLARE @cpsvcodeTIPOCOMISION   NUMERIC(22,0);
		  DECLARE @cpsvcalcVALORPORCENTUA FLOAT = 0;
		  DECLARE @cpsvcalcVALORTRANSCCNL FLOAT = 0;
		  


		  BEGIN
          -- Obtencion unificada de valores y calculos
			BEGIN

				BEGIN TRY

						EXEC WSXML_SFG.SFGREGISTROREVENUE_GetRegistryRevenueValues
											 @cFECHA,
											 @irx_IDVALUE,
											 @cCODENTRADAARCHIVOCONTROL OUT,
											 @cCODTIPOREGISTRO OUT,
											 @cCODPUNTODEVENTA OUT,
											 @cCODTIPOCONTRATOPDV OUT,
											 @cCODPRODUCTO OUT,
											 @cCODTIPOCONTRATOPRODUCTO OUT,
											 @cCODCOMPANIA OUT,
											 @cNUMTRANSACCIONES OUT,
											 @cVALORTRANSACCION OUT,
											 @cTOTALVENTASBRUTAS OUT,
											 @cCODAGRUPACIONPUNTODEVENTA OUT,
											 @cCODREDPDV OUT,
											 @cCODCIUDAD OUT,
											 @cCODRANGOCOMISION OUT,
											 @cCODTIPOCOMISION OUT,
											 @cCODTIPORANGO OUT,
											 @cCODRANGOCOMISIONDIFAGR OUT,
											 @cCODRANGOCOMISIONDIFRED OUT,
											 @cCODRANGOCOMISIONDIFDTO OUT,
											 @cFLAGCOMISIONDIFERENCIALBIN OUT,
											 @cLISTCOMISIONDIFERENCIALBIN OUT, -- Cursor varying
											 @cCOUNTCOMISIONDIFERENCIALBIN OUT,
											 @cLISTADVTRANSACCIONES OUT, -- Cursor varying 
											 @cCOUNTADVTRANSACCIONES OUT, 
											 @cCODRANGOCOMISIONESTANDAR OUT

				

						-- En caso de ser una anulacion y tener referencias dependientes, buscar con fecha de transacciones
						IF @cCODTIPOREGISTRO = @ANULACION BEGIN
						
							SELECT @cANULACIONDIFERENCIAL = CASE WHEN COUNT(ID_REGISTROFACTREFERENCIA) > 0 THEN 1 ELSE 0 END
							FROM WSXML_SFG.REGISTROFACTREFERENCIA
							WHERE CODREGISTROFACTURACION = @irx_IDVALUE;

		 --Guillermo Ni?o 29 Julio 2013
					  --Modificacion calcular en una anulacion si el ajuste es de castigo o no
						BEGIN
							 DECLARE Ajustes CURSOR FOR SELECT ID_AJUSTEFACTURACION
											  FROM WSXML_SFG.AJUSTEFACTURACION
											 WHERE AJUSTEFACTURACION.CODREGISTROFACTREFDESTINO =@irx_IDVALUE; 
							 OPEN Ajustes;

							 DECLARE @Ajustes__ID_AJUSTEFACTURACION NUMERIC(38,0)
							 FETCH NEXT FROM Ajustes INTO @Ajustes__ID_AJUSTEFACTURACION;
							 WHILE @@FETCH_STATUS=0
							 BEGIN
									  BEGIN
										EXEC WSXML_SFG.SFGAJUSTEFACTURACION_AnalizeAndSetWriteOff @Ajustes__ID_AJUSTEFACTURACION
									  END;

									FETCH NEXT FROM Ajustes INTO @Ajustes__ID_AJUSTEFACTURACION;
							 END;

							 CLOSE Ajustes;
							 DEALLOCATE Ajustes;
						END;
					END 

				END TRY
				BEGIN CATCH
						SET @errormsg = 'No es posible calcular el revenue para la entrada ' +
											  isnull(convert(varchar,@irx_IDVALUE), '') +
											  '. Puede existir un error en la configuracion del contrato para el producto. ' +
											  isnull(ERROR_MESSAGE ( ),'')

						EXEC SFGALERTA_GenerarAlerta   @p_TIPOADVERTENCIA, 'REVENUE', @errormsg, 1
						SET @errormsg = '-20060 Maximo numero de advertencias alcanzado: ' + 
											  isnull(ERROR_MESSAGE ( ),'')
						RAISERROR(@errormsg, 16, 1);
				END CATCH
			END;

			EXEC WSXML_SFG.SFGPRODUCTOREVENUE_FindProductEntry 
				@cFECHA, @cCODPRODUCTO, @cCODPRODUCTOREVENUE OUT

			EXEC WSXML_SFG.SFGPRODUCTOREVENUE_ClearProductEntry @cCODPRODUCTOREVENUE

			IF @cANULACIONDIFERENCIAL = 1 BEGIN
				DECLARE @cmlCOMISIONPOSESTANDAR FLOAT = 0;
				DECLARE @cmlREVENUE             FLOAT = 0;
				
				BEGIN
				-- Empty Record. El registro se marca con los identificadores del registro anulacion, pero no necesariamente corresponde
					EXEC WSXML_SFG.SFGREGISTROREVENUE_AddReplaceEmptyRecord 
														@cCODENTRADAARCHIVOCONTROL,
                                                       @irx_IDVALUE,
                                                       @cCODTIPOREGISTRO,
                                                       @cFECHA,
                                                       @cCODPUNTODEVENTA,
                                                       @cCODTIPOCONTRATOPDV,
                                                       @cCODPRODUCTO,
                                                       @cCODTIPOCONTRATOPRODUCTO,
                                                       @cCODCOMPANIA,
                                                       @cCODRANGOCOMISION,
                                                       @cCODPRODUCTOREVENUE,
                                                       @cmlCOMISIONPOSESTANDAR,
                                                       @cCODREGISTROREVENUE OUT

					--Guarda la informacion de la comision diferencial a la que halla lugar
					IF @cCODRANGOCOMISIONDIFAGR > 0 OR @cCODRANGOCOMISIONDIFRED > 0 OR @cCODRANGOCOMISIONDIFDTO > 0 
					BEGIN


						EXEC WSXML_SFG.SFGREGISTROREVENUE_SETREVENUEMULTIPLEDIFERENCIAL 
																@cCODREGISTROREVENUE,
                                                                @irx_IDVALUE,
                                                                @cCODPRODUCTO,
                                                                @cCODREDPDV,
                                                                @cCODAGRUPACIONPUNTODEVENTA,
                                                                @cCODCIUDAD 

					END 

				-- Obtener reglas de cada una de las referencias adjuntas
					
					DECLARE treference CURSOR FOR SELECT ID_REGISTROFACTREFERENCIA AS ID_REGISTROFACTREFERENCIA,
                                        CONVERT(DATETIME, CONVERT(DATE,FECHAHORATRANSACCION)) AS FECHA,
                                        CASE
                                          WHEN REGISTROFACTURACION.CODPRODUCTO IN
                                               (1255, 1256) THEN
                                           REGISTROFACTREFERENCIA.Vrcomision
                                          WHEN REGISTROFACTURACION.CODPRODUCTO IN
                                           (1872,1873,1874,1875) THEN
                                           CAST(REGISTROFACTREFERENCIA.Suscriptor AS NUMERIC(38,0))
                                          ELSE
                                           REGISTROFACTREFERENCIA.VALORTRANSACCION
                                        END AS VALORTRANSACCION,
                                        CODREGISTROANULADO AS CODREGISTROANULADO,
                                        BINTARJETA AS BINTARJETA,
                                        TIPOTRANSACCION AS TIPOTRANSACCION
                                   FROM WSXML_SFG.REGISTROFACTREFERENCIA
                                  INNER JOIN WSXML_SFG.REGISTROFACTURACION
                                     ON REGISTROFACTREFERENCIA.CODREGISTROFACTURACION =
                                        REGISTROFACTURACION.ID_REGISTROFACTURACION
                                  WHERE CODREGISTROFACTURACION = @irx_IDVALUE; 
								-- aQUI		
					OPEN treference;
					DECLARE @treference__ID_REGISTROFACTREFERENCIA NUMERIC(38,0), @treference__FECHA DATETIME, @treference__VALORTRANSACCION FLOAT
						, @treference__CODREGISTROANULADO numeric(22,0), @treference__BINTARJETA NVARCHAR(10), @treference__TIPOTRANSACCION NVARCHAR(10)
				
					FETCH NEXT FROM treference INTO @treference__ID_REGISTROFACTREFERENCIA, @treference__FECHA, @treference__VALORTRANSACCION
						, @treference__CODREGISTROANULADO, @treference__BINTARJETA, @treference__TIPOTRANSACCION
				
					WHILE @@FETCH_STATUS=0
					BEGIN
					-- Obtener reglas nuevamente para la transaccion de la anulacion - Utiliza registro original (reglas guardadas - cadena, red, etc)
					  DECLARE @orgCODREGISTROFACTURACION   NUMERIC(22,0);
					  DECLARE @dmyCODENTRADAARCHIVOCONTROL NUMERIC(22,0);
					  DECLARE @dmyCODTIPOREGISTRO          NUMERIC(22,0);
					  DECLARE @tmpvCOMISIONPOSESTANDAR     FLOAT = 0;
					  DECLARE @tmpvREVENUE                 FLOAT = 0;
					  DECLARE @tmpvCODRANGOCOMISIONDETALLE NUMERIC(22,0);
					  DECLARE @outCODREGISTROREVENUETRANSC NUMERIC(22,0);
						
						DECLARE @cvalcalcVALORPORCENTUA FLOAT = 0;
						DECLARE @cvalcalcVALORTRANSCCNL FLOAT = 0;

						BEGIN
							
							BEGIN

								BEGIN TRY					  
									  
										--IF @treference__CODREGISTROANULADO IS NULL BEGIN
										--  RAISE NO_DATA_FOUND;
										--END 
										SELECT @orgCODREGISTROFACTURACION = ID_REGISTROFACTURACION
										  FROM WSXML_SFG.REGISTROFACTURACION
										 INNER JOIN WSXML_SFG.REGISTROFACTREFERENCIA
											ON (CODREGISTROFACTURACION = ID_REGISTROFACTURACION)
										 WHERE ID_REGISTROFACTREFERENCIA = @treference__CODREGISTROANULADO;

										EXEC WSXML_SFG.SFGREGISTROREVENUE_GetRegistryRevenueValues 
																 @treference__FECHA,
																 @orgCODREGISTROFACTURACION,
																 @dmyCODENTRADAARCHIVOCONTROL OUT,
																 @dmyCODTIPOREGISTRO OUT,
																 @cCODPUNTODEVENTA OUT,
																 @cCODTIPOCONTRATOPDV OUT,
																 @cCODPRODUCTO OUT,
																 @cCODTIPOCONTRATOPRODUCTO OUT,
																 @cCODCOMPANIA OUT,
																 @cNUMTRANSACCIONES OUT,
																 @cVALORTRANSACCION OUT,
																 @cTOTALVENTASBRUTAS OUT,
																 @cCODAGRUPACIONPUNTODEVENTA OUT,
																 @cCODREDPDV OUT,
																 @cCODCIUDAD OUT,
																 @cCODRANGOCOMISION OUT,
																 @cCODTIPOCOMISION OUT,
																 @cCODTIPORANGO OUT,
																 @cCODRANGOCOMISIONDIFAGR OUT,
																 @cCODRANGOCOMISIONDIFRED OUT,
																 @cCODRANGOCOMISIONDIFDTO OUT,
																 @cFLAGCOMISIONDIFERENCIALBIN OUT,
																 @cLISTCOMISIONDIFERENCIALBIN OUT,
																 @cLISTADVTRANSACCIONES OUT,
																 @cCODRANGOCOMISIONESTANDAR OUT
								END TRY
								BEGIN CATCH
								
										SET @msg = 'No se pudo obtener los valores originales de transaccion para la referencia anulacion de id ' +
															   ISNULL(@treference__ID_REGISTROFACTREFERENCIA, '')
									  
										EXEC WSXML_SFG.SFGTMPTRACE_TraceLog @msg;
										EXEC WSXML_SFG.SFGREGISTROREVENUE_GetRegistryRevenueValues
																   @treference__FECHA,
																   @irx_IDVALUE,
																   @dmyCODENTRADAARCHIVOCONTROL OUT,
																   @dmyCODTIPOREGISTRO OUT,
																   @cCODPUNTODEVENTA OUT,
																   @cCODTIPOCONTRATOPDV OUT,
																   @cCODPRODUCTO OUT,
																   @cCODTIPOCONTRATOPRODUCTO OUT,
																   @cCODCOMPANIA OUT,
																   @cNUMTRANSACCIONES OUT,
																   @cVALORTRANSACCION OUT,
																   @cTOTALVENTASBRUTAS OUT,
																   @cCODAGRUPACIONPUNTODEVENTA OUT,
																   @cCODREDPDV OUT,
																   @cCODCIUDAD OUT,
																   @cCODRANGOCOMISION OUT,
																   @cCODTIPOCOMISION OUT,
																   @cCODTIPORANGO OUT,
																   @cCODRANGOCOMISIONDIFAGR OUT,
																   @cCODRANGOCOMISIONDIFRED OUT,
																   @cCODRANGOCOMISIONDIFDTO OUT,
																   @cFLAGCOMISIONDIFERENCIALBIN OUT,
																   @cLISTCOMISIONDIFERENCIALBIN OUT,
																   @cLISTADVTRANSACCIONES OUT,
																   @cCODRANGOCOMISIONESTANDAR OUT
								END CATCH
							  END;

						  -- Verificar si se encontro comision (tarifa) diferencial
							BEGIN
								BEGIN TRY
							  
									  
										IF @cCODRANGOCOMISIONDIFAGR <> 0 BEGIN
											SELECT @cCODRANGOCOMISION = ID_RANGOCOMISION,
												 @cCODTIPOCOMISION = CODTIPOCOMISION,
												 @cCODTIPORANGO = CODTIPORANGO
											FROM WSXML_SFG.RANGOCOMISION
											WHERE ID_RANGOCOMISION = @cCODRANGOCOMISIONDIFAGR;
										END
										ELSE IF @cCODRANGOCOMISIONDIFRED <> 0 BEGIN
										  SELECT @cCODRANGOCOMISION = ID_RANGOCOMISION,
												 @cCODTIPOCOMISION = CODTIPOCOMISION,
												 @cCODTIPORANGO = CODTIPORANGO
																   FROM WSXML_SFG.RANGOCOMISION
										   WHERE ID_RANGOCOMISION = @cCODRANGOCOMISIONDIFRED;
										END
										ELSE IF @cCODRANGOCOMISIONDIFDTO <> 0 BEGIN
										  SELECT @cCODRANGOCOMISION = ID_RANGOCOMISION,
												 @cCODTIPOCOMISION = CODTIPOCOMISION,
												 @cCODTIPORANGO = CODTIPORANGO
																   FROM WSXML_SFG.RANGOCOMISION
										   WHERE ID_RANGOCOMISION = @cCODRANGOCOMISIONDIFDTO;
										END
										ELSE IF @cFLAGCOMISIONDIFERENCIALBIN <> 0 BEGIN
										  IF @cCOUNTADVTRANSACCIONES > 0 BEGIN 
											DECLARE @idv__ID NUMERIC(38,0), @idv__VALUE NVARCHAR(2000)
											FETCH NEXT FROM @cLISTADVTRANSACCIONES INTO @idv__ID, @idv__VALUE;
											WHILE @@FETCH_STATUS=0
											BEGIN
												IF @idv__VALUE = @treference__TIPOTRANSACCION AND @idv__ID = 0 BEGIN
													SET @cCODTIPOCOMISION = 0; /* Parameter forces zero value */
													BREAK;
												END
												FETCH NEXT FROM @cLISTADVTRANSACCIONES INTO @idv__ID, @idv__VALUE;
											END
											CLOSE idv;
											DEALLOCATE idv; 
										  
										  END ELSE
											SET @cCODTIPOCOMISION = 0; /* Parameter forces zero value */
										END;
										IF @cCODTIPOCOMISION <> 0 AND @cCOUNTCOMISIONDIFERENCIALBIN > 0 BEGIN
									  
											DECLARE @cLISTCOMISIONDIFERENCIALBIN_ID NUMERIC(38,0), @cLISTCOMISIONDIFERENCIALBIN__STRINGVALUE NVARCHAR(50), @cLISTCOMISIONDIFERENCIALBIN__FLOATVALUE FLOAT
											FETCH NEXT FROM @cLISTCOMISIONDIFERENCIALBIN INTO @cLISTCOMISIONDIFERENCIALBIN_ID, @cLISTCOMISIONDIFERENCIALBIN__STRINGVALUE, @cLISTCOMISIONDIFERENCIALBIN__FLOATVALUE
						
											WHILE (@@FETCH_STATUS = 0)
											BEGIN
												IF @cLISTCOMISIONDIFERENCIALBIN__STRINGVALUE = @treference__BINTARJETA BEGIN
													SELECT @cCODRANGOCOMISION = ID_RANGOCOMISION,
														   @cCODTIPOCOMISION = CODTIPOCOMISION,
														   @cCODTIPORANGO = CODTIPORANGO
													FROM WSXML_SFG.RANGOCOMISION
													WHERE ID_RANGOCOMISION = CAST(@cLISTCOMISIONDIFERENCIALBIN__FLOATVALUE AS NUMERIC(22,0));
													BREAK;
												END;
												FETCH NEXT FROM @cLISTCOMISIONDIFERENCIALBIN INTO @cLISTCOMISIONDIFERENCIALBIN_ID, @cLISTCOMISIONDIFERENCIALBIN__STRINGVALUE, @cLISTCOMISIONDIFERENCIALBIN__FLOATVALUE
											END
													
											CLOSE @cLISTCOMISIONDIFERENCIALBIN
											DEALLOCATE @cLISTCOMISIONDIFERENCIALBIN
										END;
								END TRY
								BEGIN CATCH

									  SET @msg = 'No se pudo obtener valores para tarifa diferencial: Se prosigue con tarifa normal. ' + isnull(ERROR_MESSAGE ( ) , '');
									  EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @p_TIPOADVERTENCIA, 'REVENUE', @msg, 1
															  
									  SET @msg = '-20060 Maximo numero de advertencias alcanzado: ' + isnull(ERROR_MESSAGE ( ) , '')
									  RAISERROR(@msg, 16, 1);
								END CATCH
							  END 
							  
						  -- Calcular (Emular) Comision POS Estandar
							--DECLARE @cpsvcodeTIPOCOMISION   NUMERIC(22,0);
							--DECLARE @cpsvcalcVALORPORCENTUA FLOAT = 0;
							--DECLARE @cpsvcalcVALORTRANSCCNL FLOAT = 0;
							
							BEGIN
								BEGIN TRY
									-- Obtain Values. Mathematical operation goes against transaction values
									SELECT @cpsvcodeTIPOCOMISION = CODTIPOCOMISION,
										   @cpsvcalcVALORPORCENTUA = VALORPORCENTUAL,
										   @cpsvcalcVALORTRANSCCNL = VALORTRANSACCIONAL
														   FROM WSXML_SFG.RANGOCOMISION
									 INNER JOIN RANGOCOMISIONDETALLE
										ON (CODRANGOCOMISION = ID_RANGOCOMISION)
									 WHERE ID_RANGOCOMISION = @cCODRANGOCOMISIONESTANDAR;
									IF @cpsvcodeTIPOCOMISION IN (1, 2, 3) BEGIN
									  IF @cpsvcodeTIPOCOMISION = 1 BEGIN
										-- Porcentual
										SET @tmpvCOMISIONPOSESTANDAR = (@cpsvcalcVALORPORCENTUA *
																   @treference__VALORTRANSACCION) / 100;
									  END
									  ELSE IF @cpsvcodeTIPOCOMISION = 2 BEGIN
										-- Transaccional
										SET @tmpvCOMISIONPOSESTANDAR = @cpsvcalcVALORTRANSCCNL * (1);
									  END
									  ELSE IF @cpsvcodeTIPOCOMISION = 3 BEGIN
										-- Mixto
										SET @tmpvCOMISIONPOSESTANDAR = ((@cpsvcalcVALORPORCENTUA *
																   @treference__VALORTRANSACCION) / 100) +
																   (@cpsvcalcVALORTRANSCCNL * (1));
									  END 
									END
									ELSE BEGIN
									  SET @tmpvCOMISIONPOSESTANDAR = 0;
									END 
								
									IF @@ROWCOUNT > 1
										SET @tmpvCOMISIONPOSESTANDAR = 0;
									  
								END TRY
								BEGIN CATCH
									SET @msg = '-20080 No existe comision estandar configurada para el producto ' + ISNULL(WSXML_SFG.PRODUCTO_CODIGO_F(@cCODPRODUCTO), '') + '. No se puede continuar'
									RAISERROR(@msg, 16, 1);
								END CATCH
							END;

							SET @cmlCOMISIONPOSESTANDAR = @cmlCOMISIONPOSESTANDAR + @tmpvCOMISIONPOSESTANDAR;
							-- Forcefully calculate reference level. Mathematical operation goes against transaction values
							IF @cCODTIPOCOMISION IN (1, 2, 3) BEGIN
								  --DECLARE @cvalcalcVALORPORCENTUA FLOAT = 0;
								  --DECLARE @cvalcalcVALORTRANSCCNL FLOAT = 0;
								BEGIN
									SELECT @tmpvCODRANGOCOMISIONDETALLE = ID_RANGOCOMISIONDETALLE,
										 @cvalcalcVALORPORCENTUA = VALORPORCENTUAL,
										 @cvalcalcVALORTRANSCCNL = VALORTRANSACCIONAL
									FROM WSXML_SFG.RANGOCOMISIONDETALLE
								   WHERE CODRANGOCOMISION = @cCODRANGOCOMISION;
								  IF @cCODTIPOCOMISION = 1 BEGIN
									-- Porcentual
									SET @tmpvREVENUE = (@cvalcalcVALORPORCENTUA *
												   @treference__VALORTRANSACCION) / 100;
								  END
								  ELSE IF @cCODTIPOCOMISION = 2 BEGIN
									-- Transaccional
									SET @tmpvREVENUE = @cvalcalcVALORTRANSCCNL * (1);
								  END
								  ELSE IF @cCODTIPOCOMISION = 3 BEGIN
									-- Mixto
									SET @tmpvREVENUE = ((@cvalcalcVALORPORCENTUA *@treference__VALORTRANSACCION) / 100) + (@cvalcalcVALORTRANSCCNL * (1));
								  END 
								
								END;

							END ELSE IF @cCODTIPOCOMISION IN (4, 5, 6)
								BEGIN
									BEGIN
										DECLARE tCommission CURSOR FOR SELECT ID_RANGOCOMISIONDETALLE,
                                                   RANGOINICIAL,
                                                   RANGOFINAL,
                                                   VALORPORCENTUAL,
                                                   VALORTRANSACCIONAL
                                              FROM WSXML_SFG.RANGOCOMISIONDETALLE
                                             WHERE CODRANGOCOMISION =
                                                   @cCODRANGOCOMISION
                                             ORDER BY RANGOINICIAL; OPEN tCommission;
									--DECLARE  @tCommission__ID_RANGOCOMISIONDETALLE NUMERIC(38,0), 
									--	@tCommission__RANGOINICIAL FLOAT, @tCommission__RANGOFINAL FLOAT, @tCommission__VALORPORCENTUAL FLOAT, @tCommission__VALORTRANSACCIONAL FLOAT
									 
									 FETCH tCommission INTO @tCommission__ID_RANGOCOMISIONDETALLE , 
										@tCommission__RANGOINICIAL, @tCommission__RANGOFINAL, @tCommission__VALORPORCENTUAL, @tCommission__VALORTRANSACCIONAL
									 
									 WHILE @@FETCH_STATUS=0
									 BEGIN
									  IF @treference__VALORTRANSACCION >= @tCommission__RANGOINICIAL AND
										 (@treference__VALORTRANSACCION <= @tCommission__RANGOFINAL OR
										 @tCommission__RANGOFINAL IS NULL) BEGIN
										IF @cCODTIPOCOMISION = 4 BEGIN
										  -- Rangos Porcentual
										  SET @tmpvREVENUE = (@tCommission__VALORPORCENTUAL *
														 @treference__VALORTRANSACCION) / 100;
										END
										ELSE IF @cCODTIPOCOMISION = 5 BEGIN
										  -- Rangos Transaccional
										  SET @tmpvREVENUE = @tCommission__VALORTRANSACCIONAL * (1);
										END
										ELSE IF @cCODTIPOCOMISION = 6 BEGIN
										  -- Rangos Mixto
										  SET @tmpvREVENUE = ((@tCommission__VALORPORCENTUAL *
														 @treference__VALORTRANSACCION) / 100) +
														 (@tCommission__VALORTRANSACCIONAL * (1));
										END 
										SET @tmpvCODRANGOCOMISIONDETALLE = @tCommission__ID_RANGOCOMISIONDETALLE;
										BREAK
									  END 
										FETCH tCommission INTO @tCommission__ID_RANGOCOMISIONDETALLE , 
											@tCommission__RANGOINICIAL, @tCommission__RANGOFINAL, @tCommission__VALORPORCENTUAL, @tCommission__VALORTRANSACCIONAL
									 END;

									CLOSE tCommission;
									DEALLOCATE tCommission;
								  END;

								END;

						END 
                  
							SET @cmlREVENUE = @cmlREVENUE + @tmpvREVENUE;
							IF @cCODTIPOCOMISION <> 0 BEGIN
								EXEC WSXML_SFG.SFGREGISTROREVENUETRANSACCION_AddReplaceRecord
																	@cCODREGISTROREVENUE,
																	@treference__ID_REGISTROFACTREFERENCIA,
                                                                   @cCODRANGOCOMISION,
                                                                   @tmpvCODRANGOCOMISIONDETALLE,
                                                                   @tmpvREVENUE,
                                                                   @outCODREGISTROREVENUETRANSC OUT
							END 
					END 
					
					  FETCH NEXT FROM treference INTO @treference__ID_REGISTROFACTREFERENCIA, @treference__FECHA, @treference__VALORTRANSACCION
						, @treference__CODREGISTROANULADO, @treference__BINTARJETA, @treference__TIPOTRANSACCION
				END
					
					CLOSE treference
					DEALLOCATE treference
					
					-- Actualizar Revenue nivel registro
					EXEC WSXML_SFG.SFGREGISTROREVENUE_SetRevenueComisionEstandar @cCODREGISTROREVENUE, @cmlCOMISIONPOSESTANDAR
					EXEC WSXML_SFG.SFGREGISTROREVENUE_UpdateRevenueBaseValue @cCODREGISTROREVENUE, @cmlREVENUE
			END;

			ELSE BEGIN
			-- Verificar si se encontro comision (tarifa) diferencial
					BEGIN TRY
					  IF @cCODRANGOCOMISIONDIFAGR <> 0 BEGIN
						SELECT @cCODRANGOCOMISION = ID_RANGOCOMISION, @cCODTIPOCOMISION = CODTIPOCOMISION, @cCODTIPORANGO = CODTIPORANGO
						  FROM WSXML_SFG.RANGOCOMISION
						 WHERE ID_RANGOCOMISION = @cCODRANGOCOMISIONDIFAGR;
					  END
					  ELSE IF @cCODRANGOCOMISIONDIFRED <> 0 BEGIN
						SELECT @cCODRANGOCOMISION = ID_RANGOCOMISION, @cCODTIPOCOMISION = CODTIPOCOMISION, @cCODTIPORANGO = CODTIPORANGO
						  FROM WSXML_SFG.RANGOCOMISION
						 WHERE ID_RANGOCOMISION = @cCODRANGOCOMISIONDIFRED;
					  END
					  ELSE IF @cCODRANGOCOMISIONDIFDTO <> 0 BEGIN
						SELECT @cCODRANGOCOMISION = ID_RANGOCOMISION, @cCODTIPOCOMISION = CODTIPOCOMISION, @cCODTIPORANGO = CODTIPORANGO
						  FROM WSXML_SFG.RANGOCOMISION
						 WHERE ID_RANGOCOMISION = @cCODRANGOCOMISIONDIFDTO;
					  END 
					END TRY
					BEGIN CATCH
					
					
						SET @errormsg = 'No se pudo obtener valores para tarifa diferencial: Se prosigue con tarifa normal. ' + isnull(ERROR_MESSAGE ( ) , '');
						EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @p_TIPOADVERTENCIA, 'REVENUE', @errormsg, 1
						SET @errormsg = '-20060 Maximo numero de advertencias alcanzado: ' + isnull(ERROR_MESSAGE ( ) , '')
						RAISERROR(@errormsg, 16, 1);
					END CATCH
			END;


            -- Calcular (Emular) Comision POS Estandar
            --  DECLARE @cpsvcodeTIPOCOMISION   NUMERIC(22,0);
            --  DECLARE @cpsvcalcVALORPORCENTUA FLOAT = 0;
            --  DECLARE @cpsvcalcVALORTRANSCCNL FLOAT = 0;
			DECLARE @vtxREVENUE                     FLOAT = 0;
            BEGIN
				BEGIN TRY
				  -- Obtain Values
				  SELECT @cpsvcodeTIPOCOMISION = CODTIPOCOMISION, @cpsvcalcVALORPORCENTUA = VALORPORCENTUAL, @cpsvcalcVALORTRANSCCNL = VALORTRANSACCIONAL
								   FROM WSXML_SFG.RANGOCOMISION
				   INNER JOIN WSXML_SFG.RANGOCOMISIONDETALLE
					  ON (CODRANGOCOMISION = ID_RANGOCOMISION)
				   WHERE ID_RANGOCOMISION = @cCODRANGOCOMISIONESTANDAR;
				  -- Emular
				  IF @cpsvcodeTIPOCOMISION IN (1, 2, 3) BEGIN
					IF @cpsvcodeTIPOCOMISION = 1 BEGIN
					  -- Porcentual
					  SET @vCOMISIONPOSESTANDAR = (@cpsvcalcVALORPORCENTUA *
											  @cTOTALVENTASBRUTAS) / 100;
					END
					ELSE IF @cpsvcodeTIPOCOMISION = 2 BEGIN
					  -- Transaccional
					  SET @vCOMISIONPOSESTANDAR = @cpsvcalcVALORTRANSCCNL *
											  @cNUMTRANSACCIONES;
					END
					ELSE IF @cpsvcodeTIPOCOMISION = 3 BEGIN
					  -- Mixto
					  SET @vCOMISIONPOSESTANDAR = ((@cpsvcalcVALORPORCENTUA *
											  @cTOTALVENTASBRUTAS) / 100) +
											  (@cpsvcalcVALORTRANSCCNL *
											  @cNUMTRANSACCIONES);
					END 
				  END
				  ELSE BEGIN
					SET @vCOMISIONPOSESTANDAR = 0;
				  END 
				
					IF @@ROWCOUNT > 1
						SET @vCOMISIONPOSESTANDAR = 0;
					
				END TRY
				BEGIN CATCH
				    SET @msg = '-20080 No existe comision estandar configurada para el producto ' + ISNULL(WSXML_SFG.PRODUCTO_CODIGO_F(@cCODPRODUCTO), '') + '. No se puede continuar' 
					RAISERROR(@msg, 16, 1);
				END CATCH
            END;


            -- A partir de este punto se tiene las reglas correctas:
            IF @cFLAGCOMISIONDIFERENCIALBIN <> 0 AND @cCOUNTCOMISIONDIFERENCIALBIN > 0 
			BEGIN
				/* Empty Record */
				EXEC WSXML_SFG.SFGREGISTROREVENUE_AddReplaceEmptyRecord 
													   @cCODENTRADAARCHIVOCONTROL,
                                                       @irx_IDVALUE,
                                                       @cCODTIPOREGISTRO,
                                                       @cFECHA,
                                                       @cCODPUNTODEVENTA,
                                                       @cCODTIPOCONTRATOPDV,
                                                       @cCODPRODUCTO,
                                                       @cCODTIPOCONTRATOPRODUCTO,
                                                       @cCODCOMPANIA,
                                                       @cCODRANGOCOMISION,
                                                       @cCODPRODUCTOREVENUE,
                                                       @vCOMISIONPOSESTANDAR,
                                                       @cCODREGISTROREVENUE OUT

				--Guarda la informacion de la comision diferencial a la que halla lugar
				IF @cCODRANGOCOMISIONDIFAGR > 0 OR @cCODRANGOCOMISIONDIFRED > 0 OR @cCODRANGOCOMISIONDIFDTO > 0 
				BEGIN

					EXEC WSXML_SFG.SFGREGISTROREVENUE_SETREVENUEMULTIPLEDIFERENCIAL
																 @cCODREGISTROREVENUE,
                                                                 @irx_IDVALUE,
                                                                 @cCODPRODUCTO,
                                                                 @cCODREDPDV,
                                                                 @cCODAGRUPACIONPUNTODEVENTA,
                                                                 @cCODCIUDAD

              END 

              /* Iterate every reference, making the diferencial check first */
                DECLARE @lstTRANSACCIONES WSXML_SFG.IDSTRINGFLOATVALUE;
				
				BEGIN
					INSERT INTO @lstTRANSACCIONES
					SELECT ID_REGISTROFACTREFERENCIA, BINTARJETA, VALORTRANSACCION
					FROM WSXML_SFG.REGISTROFACTREFERENCIA
					WHERE CODREGISTROFACTURACION = @irx_IDVALUE; -- AND ANULADO = 0;

					IF (SELECT COUNT(*) FROM @lstTRANSACCIONES) > 0 BEGIN
						DECLARE itx CURSOR FOR SELECT ID, STRINGVALUE, FLOATVALUE FROM @lstTRANSACCIONES
						
						OPEN itx;
						
						DECLARE @itx_ID NUMERIC(38,0),@itx_STRINGVALUE NVARCHAR(50),@itx_FLOATVALUE FLOAT
						
						FETCH itx INTO @itx_ID, @itx_STRINGVALUE, @itx_FLOATVALUE
						
						WHILE @@FETCH_STATUS=0
						BEGIN
                      
							  DECLARE @ctxCODRANGOCOMISION            NUMERIC(22,0) = @cCODRANGOCOMISION;
							  DECLARE @ctxCODTIPOCOMISION             NUMERIC(22,0) = @cCODTIPOCOMISION;
							  DECLARE @ctxCODTIPORANGO                NUMERIC(22,0) = @cCODTIPORANGO;
							  --DECLARE @vtxREVENUE                     FLOAT = 0;
							  DECLARE @ctxCODRANGOCOMISIONDETALLE     NUMERIC(22,0) = 0;
							  DECLARE @ctxCODREGISTROREVENUETRANSACCI NUMERIC(22,0);
							
							/* Check for type */
							IF @cCOUNTADVTRANSACCIONES > 0 BEGIN
								DECLARE @txTipoTransaccion CHAR(1);
							
							
                          
								SELECT @txTipoTransaccion = TIPOTRANSACCION
								FROM WSXML_SFG.REGISTROFACTREFERENCIA
								WHERE ID_REGISTROFACTREFERENCIA = @itx_ID;
								
								DECLARE @idv2__ID NUMERIC(38,0), @idv2__VALUE NVARCHAR(2000)
								FETCH NEXT FROM @cLISTADVTRANSACCIONES INTO @idv2__ID, @idv2__VALUE;
								
								WHILE @@FETCH_STATUS=0
								BEGIN
									IF @idv2__VALUE = @txTipoTransaccion AND @idv2__ID = 0 BEGIN
										SET @ctxCODTIPOCOMISION = 0; /* Parameter forces zero value */
										BREAK;
									END
									FETCH NEXT FROM @cLISTADVTRANSACCIONES INTO @idv2__ID, @idv2__VALUE;
								END
								CLOSE @cLISTADVTRANSACCIONES;
								DEALLOCATE @cLISTADVTRANSACCIONES;
								
							END ELSE BEGIN
								SET @ctxCODTIPOCOMISION = 0; /* Parameter forces zero value */
							END
						
							/* Get info */
							IF @ctxCODTIPOCOMISION <> 0 BEGIN
							
							DECLARE @ibx__ID NUMERIC(38,0), @ibx__STRINGVALUE NVARCHAR(50), @ibx__FLOATVALUE FLOAT
							FETCH NEXT FROM @cLISTCOMISIONDIFERENCIALBIN INTO @ibx__ID, @ibx__STRINGVALUE, @ibx__FLOATVALUE;
								
							WHILE @@FETCH_STATUS=0
							BEGIN

							  IF @ibx__STRINGVALUE = @itx_STRINGVALUE BEGIN
									SELECT @ctxCODRANGOCOMISION = ID_RANGOCOMISION,
									   @ctxCODTIPOCOMISION = CODTIPOCOMISION,
									   @ctxCODTIPORANGO = CODTIPORANGO
									FROM WSXML_SFG.RANGOCOMISION
									WHERE ID_RANGOCOMISION = CAST(@ibx__FLOATVALUE AS NUMERIC(38,0));
								BREAK;
							  END;
							  FETCH NEXT FROM @cLISTCOMISIONDIFERENCIALBIN INTO @ibx__ID, @ibx__STRINGVALUE, @ibx__FLOATVALUE; 
							END
						END;
                      
							IF @ctxCODTIPOCOMISION IN (1, 2, 3) BEGIN
									DECLARE @ctxvalcalcVALORPORCENTUA FLOAT = 0,
									  @ctxvalcalcVALORTRANSCCNL FLOAT = 0;
									BEGIN
										SELECT @ctxCODRANGOCOMISIONDETALLE = ID_RANGOCOMISIONDETALLE,
											 @ctxvalcalcVALORPORCENTUA = VALORPORCENTUAL,
											 @ctxvalcalcVALORTRANSCCNL = VALORTRANSACCIONAL
										FROM WSXML_SFG.RANGOCOMISIONDETALLE
										WHERE CODRANGOCOMISION = @ctxCODRANGOCOMISION;
										
										SELECT @vtxREVENUE = 
												CASE
													WHEN @ctxCODTIPOCOMISION IN (1, 3) THEN (@ctxvalcalcVALORPORCENTUA * @itx_FLOATVALUE) / 100  ELSE 0 END 
													+ 
												CASE 
													WHEN @ctxCODTIPOCOMISION IN (2, 3) THEN (@ctxvalcalcVALORTRANSCCNL * 1)  ELSE 0 END;

									END
							END
							ELSE IF @ctxCODTIPOCOMISION IN (4, 5, 6) 
							BEGIN
								DECLARE ttxCommission CURSOR FOR 
									SELECT ID_RANGOCOMISIONDETALLE,
										 RANGOINICIAL,
										 RANGOFINAL,
										 VALORPORCENTUAL,
										 VALORTRANSACCIONAL
									FROM WSXML_SFG.RANGOCOMISIONDETALLE
									WHERE CODRANGOCOMISION = @ctxCODRANGOCOMISION
									ORDER BY RANGOINICIAL; 
								
								OPEN ttxCommission;
								
								DECLARE @ttxCommission__ID_RANGOCOMISIONDETALLE NUMERIC(38,0),
										 @ttxCommission__RANGOINICIAL FLOAT,
										 @ttxCommission__RANGOFINAL FLOAT,
										 @ttxCommission__VALORPORCENTUAL FLOAT,
										 @ttxCommission__VALORTRANSACCIONAL FLOAT
								
								FETCH ttxCommission INTO @ttxCommission__ID_RANGOCOMISIONDETALLE,
										 @ttxCommission__RANGOINICIAL,
										 @ttxCommission__RANGOFINAL,
										 @ttxCommission__VALORPORCENTUAL,
										 @ttxCommission__VALORTRANSACCIONAL
										 
								WHILE @@FETCH_STATUS=0
								BEGIN
								
									IF @itx_FLOATVALUE >= @ttxCommission__RANGOINICIAL AND @itx_FLOATVALUE <= @ttxCommission__RANGOFINAL OR @ttxCommission__RANGOFINAL IS NULL 
									BEGIN
										SELECT @vtxREVENUE  = 
															CASE WHEN @ctxCODTIPOCOMISION IN (4, 6) THEN (@ttxCommission__VALORPORCENTUAL * @itx_FLOATVALUE) / 100 ELSE 0 END 
															+ 
															CASE WHEN @ctxCODTIPOCOMISION IN (5, 6) THEN (@ttxCommission__VALORTRANSACCIONAL * 1) ELSE  0 END;

										SET @ctxCODRANGOCOMISIONDETALLE = @ttxCommission__ID_RANGOCOMISIONDETALLE;
										BREAK
									END;
								
									FETCH ttxCommission INTO @ttxCommission__ID_RANGOCOMISIONDETALLE,
										 @ttxCommission__RANGOINICIAL,
										 @ttxCommission__RANGOFINAL,
										 @ttxCommission__VALORPORCENTUAL,
										 @ttxCommission__VALORTRANSACCIONAL
								END
								
								CLOSE ttxCommission;
								DEALLOCATE ttxCommission;
							
							END;
						
							SET @vREVENUE = @vREVENUE + @vtxREVENUE;
							IF @ctxCODTIPOCOMISION <> 0 BEGIN
								EXEC WSXML_SFG.SFGREGISTROREVENUETRANSACCION_AddReplaceRecord @cCODREGISTROREVENUE,
																		   @itx_ID,
																		   @ctxCODRANGOCOMISION,
																		   @ctxCODRANGOCOMISIONDETALLE,
																		   @vtxREVENUE,
																		   @ctxCODREGISTROREVENUETRANSACCI OUT
							END 
							
							FETCH itx INTO @itx_ID,@itx_STRINGVALUE,@itx_FLOATVALUE
						END;

						CLOSE itx;
						DEALLOCATE itx;
					END
                END;
                -- Actualizar Revenue nivel registro
                EXEC WSXML_SFG.SFGREGISTROREVENUE_UpdateRevenueTotalValue @cCODREGISTROREVENUE, @vREVENUE
            END;

            ELSE BEGIN
              IF @cCODTIPOCOMISION IN (1, 2, 3) BEGIN
                  DECLARE @tmpIDRANGOCOMISIONDET  NUMERIC(22,0);
                  --DECLARE @cvalcalcVALORPORCENTUA FLOAT = 0;
                  --DECLARE @cvalcalcVALORTRANSCCNL FLOAT = 0;
                BEGIN
                  SELECT @tmpIDRANGOCOMISIONDET = ID_RANGOCOMISIONDETALLE,
                         @cvalcalcVALORPORCENTUA = VALORPORCENTUAL,
                         @cvalcalcVALORTRANSCCNL = VALORTRANSACCIONAL
                                       FROM WSXML_SFG.RANGOCOMISIONDETALLE
                   WHERE CODRANGOCOMISION = @cCODRANGOCOMISION;
                  IF @cCODTIPOCOMISION = 1 BEGIN
                    -- Porcentual
                    SET @vREVENUE = (@cvalcalcVALORPORCENTUA *
                                @cTOTALVENTASBRUTAS) / 100;
                  END
                  ELSE IF @cCODTIPOCOMISION = 2 BEGIN
                    -- Transaccional
                    SET @vREVENUE = @cvalcalcVALORTRANSCCNL * @cNUMTRANSACCIONES;
                  END
                  ELSE IF @cCODTIPOCOMISION = 3 BEGIN
                    -- Mixto
                    SET @vREVENUE = ((@cvalcalcVALORPORCENTUA *
                                @cTOTALVENTASBRUTAS) / 100) +
                                (@cvalcalcVALORTRANSCCNL * @cNUMTRANSACCIONES);
                  END 

                  EXEC WSXML_SFG.SFGREGISTROREVENUE_AddReplaceRecord
													  @cCODENTRADAARCHIVOCONTROL,
                                                      @irx_IDVALUE,
                                                      @cCODTIPOREGISTRO,
                                                      @cFECHA,
                                                      @cCODPUNTODEVENTA,
                                                      @cCODTIPOCONTRATOPDV,
                                                      @cCODPRODUCTO,
                                                      @cCODTIPOCONTRATOPRODUCTO,
                                                      @cCODCOMPANIA,
                                                      @cCODRANGOCOMISION,
                                                      @vREVENUE,
                                                      @cCODPRODUCTOREVENUE,
                                                      @vCOMISIONPOSESTANDAR,
                                                      @cCODREGISTROREVENUE OUT

                  --Guarda la informacion de la comision diferencial a la que halla lugar
                  IF @cCODRANGOCOMISIONDIFAGR > 0 OR @cCODRANGOCOMISIONDIFRED > 0 OR @cCODRANGOCOMISIONDIFDTO > 0 
				  BEGIN

                    EXEC WSXML_SFG.SFGREGISTROREVENUE_SETREVENUEMULTIPLEDIFERENCIAL
																	 @cCODREGISTROREVENUE,
                                                                     @irx_IDVALUE,
                                                                     @cCODPRODUCTO,
                                                                     @cCODREDPDV,
                                                                     @cCODAGRUPACIONPUNTODEVENTA,
                                                                     @cCODCIUDAD

                  END 

                END;

              END
              ELSE IF @cCODTIPOCOMISION IN (4, 5, 6) BEGIN
					EXEC WSXML_SFG.SFGREGISTROREVENUE_AddReplaceEmptyRecord
														 @cCODENTRADAARCHIVOCONTROL,
                                                         @irx_IDVALUE,
                                                         @cCODTIPOREGISTRO,
                                                         @cFECHA,
                                                         @cCODPUNTODEVENTA,
                                                         @cCODTIPOCONTRATOPDV,
                                                         @cCODPRODUCTO,
                                                         @cCODTIPOCONTRATOPRODUCTO,
                                                         @cCODCOMPANIA,
                                                         @cCODRANGOCOMISION,
                                                         @cCODPRODUCTOREVENUE,
                                                         @vCOMISIONPOSESTANDAR,
                                                         @cCODREGISTROREVENUE OUT

					--Guarda la informacion de la comision diferencial a la que halla lugar
					IF @cCODRANGOCOMISIONDIFAGR > 0 OR @cCODRANGOCOMISIONDIFRED > 0 OR @cCODRANGOCOMISIONDIFDTO > 0 
					BEGIN

                  EXEC WSXML_SFG.SFGREGISTROREVENUE_SETREVENUEMULTIPLEDIFERENCIAL 
																	@cCODREGISTROREVENUE,
                                                                    @irx_IDVALUE,
																	@cCODPRODUCTO,
																	@cCODREDPDV,
																	@cCODAGRUPACIONPUNTODEVENTA,
																	@cCODCIUDAD

                END 

                -- Iterar transacciones
				DECLARE @lstTRANSACCIONES2 WSXML_SFG.TRANSACCIONVALOR;
				
				BEGIN
					INSERT INTO @lstTRANSACCIONES2
					SELECT ID_REGISTROFACTREFERENCIA,VALORTRANSACCION
                    FROM WSXML_SFG.REGISTROFACTREFERENCIA
                    WHERE CODREGISTROFACTURACION = @irx_IDVALUE;
                    IF (SELECT COUNT(*) FROM @lstTRANSACCIONES2) > 0 BEGIN
					
						DECLARE itx CURSOR FOR SELECT ID_REGISTROFACTREFERENCIA, VALORTRANSACCION FROM @lstTRANSACCIONES2
						OPEN itx;
						DECLARE @itx__ID_REGISTROFACTREFERENCIA NUMERIC(38,0), @itx__VALORTRANSACCION FLOAT
						FETCH itx INTO @itx__ID_REGISTROFACTREFERENCIA, @itx__VALORTRANSACCION;
						WHILE @@FETCH_STATUS=0
						BEGIN
							--DECLARE @vtxREVENUE                     FLOAT = 0;
							DECLARE @cCODRANGOCOMISIONDETALLE       NUMERIC(22,0) = 0;
							DECLARE @cCODREGISTROREVENUETRANSACCION NUMERIC(22,0);
							
							BEGIN
								DECLARE tCommission CURSOR FOR SELECT ID_RANGOCOMISIONDETALLE,
														   RANGOINICIAL,
														   RANGOFINAL,
														   VALORPORCENTUAL,
														   VALORTRANSACCIONAL
													  FROM WSXML_SFG.RANGOCOMISIONDETALLE
													 WHERE CODRANGOCOMISION =
														   @cCODRANGOCOMISION
													 ORDER BY RANGOINICIAL; 
								OPEN tCommission;
								--DECLARE @tCommission__ID_RANGOCOMISIONDETALLE NUMERIC(38,0), @tCommission__RANGOINICIAL FLOAT
								--		, @tCommission__RANGOFINAL FLOAT, @tCommission__VALORPORCENTUAL FLOAT, @tCommission__VALORTRANSACCIONAL FLOAT
								
								FETCH NEXT FROM tCommission INTO @tCommission__ID_RANGOCOMISIONDETALLE, @tCommission__RANGOINICIAL
										, @tCommission__RANGOFINAL, @tCommission__VALORPORCENTUAL, @tCommission__VALORTRANSACCIONAL
								WHILE @@FETCH_STATUS=0
								BEGIN
									IF @itx__VALORTRANSACCION >= @tCommission__RANGOINICIAL AND @itx__VALORTRANSACCION <= @tCommission__RANGOFINAL OR
										@tCommission__RANGOFINAL IS NULL
									BEGIN
										IF @cCODTIPOCOMISION = 4 BEGIN
										  -- Rangos Porcentual
										  SET @vtxREVENUE = (@tCommission__VALORPORCENTUAL * @itx__VALORTRANSACCION) / 100;
										END
										ELSE IF @cCODTIPOCOMISION = 5 BEGIN
										  -- Rangos Transaccional
										  SET @vtxREVENUE = @tCommission__VALORTRANSACCIONAL * (1);
										END
										ELSE IF @cCODTIPOCOMISION = 6 BEGIN
										  -- Rangos Mixto
										  SET @vtxREVENUE = ((@tCommission__VALORPORCENTUAL * @itx__VALORTRANSACCION) / 100) + (@tCommission__VALORTRANSACCIONAL * (1));
										END 
										SET @cCODRANGOCOMISIONDETALLE = @tCommission__ID_RANGOCOMISIONDETALLE;
										BREAK
									END
									
									FETCH NEXT FROM tCommission INTO @tCommission__ID_RANGOCOMISIONDETALLE, @tCommission__RANGOINICIAL
										, @tCommission__RANGOFINAL, @tCommission__VALORPORCENTUAL, @tCommission__VALORTRANSACCIONAL
								END
								CLOSE tCommission;
								DEALLOCATE tCommission;
								
							SET @vREVENUE = @vREVENUE + @vtxREVENUE;
							EXEC WSXML_SFG.SFGREGISTROREVENUETRANSACCION_AddReplaceRecord
													@cCODREGISTROREVENUE,
  												    @itx__ID_REGISTROFACTREFERENCIA,
												    @cCODRANGOCOMISION,
												    @cCODRANGOCOMISIONDETALLE,
												    @vtxREVENUE,
												    @cCODREGISTROREVENUETRANSACCION OUT
						

					  -- Actualizar Revenue nivel registro
							EXEC WSXML_SFG.SFGREGISTROREVENUE_UpdateRevenueTotalValue @cCODREGISTROREVENUE, @vREVENUE
							FETCH itx INTO @itx__ID_REGISTROFACTREFERENCIA, @itx__VALORTRANSACCION;
						END;

						CLOSE itx;
						DEALLOCATE itx;
					END 
 
				END 
				-- Actualizar Valores de Padre (Producto)
				EXEC WSXML_SFG.SFGPRODUCTOREVENUE_UpdateProductEntry @cCODPRODUCTOREVENUE, @vREVENUE
          /* Si existe calculo de fijo, adjuntar al revenue base */
				DECLARE @vtotalfijo FLOAT = 0;
				BEGIN
					SELECT @vtotalfijo = ISNULL(SUM(REVENUE), 0)
					  FROM WSXML_SFG.REGISTROREVENUEINCENTIVO
					 WHERE CODREGISTROREVENUE = @cCODREGISTROREVENUE;

					IF @vtotalfijo <> 0 BEGIN
					  UPDATE WSXML_SFG.REGISTROREVENUE
						 SET REVENUETOTAL = REVENUETOTAL + @vtotalfijo
					   WHERE ID_REGISTROREVENUE = @cCODREGISTROREVENUE;
					END 
				END;

        END 

					/* Recalcular Ingresos y Egresos, Locales y Corporativos, y Costos Variables*/
					  -- Importes Iniciales
					  DECLARE @vCANTIDADVENTA         NUMERIC(22,0) = 0;
					  DECLARE @vVALORVENTA            FLOAT = 0;
					  DECLARE @vVALORVENTABRUTA       FLOAT = 0;
					  DECLARE @vVALORINGRESOPDV       FLOAT = 0;
					  DECLARE @vVALORIVAINGRESOPDV    FLOAT = 0;
					  DECLARE @vREVENUECALCULADO      FLOAT = 0;
					  DECLARE @vVALORCOMISIONESTANDAR FLOAT = 0;
					  DECLARE @vVALORVENTASINAJUSTES  FLOAT = 0;
					  DECLARE @vVALORDESCUENTOS       FLOAT = 0;
					  -- Reglas
					  --DECLARE @cCODCOMPANIA               NUMERIC(22,0);
					  --DECLARE @cCODSERVICIO               NUMERIC(22,0);
					  --DECLARE @cCODTIPOCONTRATOPDV        NUMERIC(22,0);
					  --DECLARE @cCODTIPOCONTRATOPRODUCTO   NUMERIC(22,0);
					  --DECLARE @cCODPUNTODEVENTA           NUMERIC(22,0);
					  --DECLARE @cCODPRODUCTO               NUMERIC(22,0);
					  --DECLARE @cCODREDPDV                 NUMERIC(22,0);
					  --DECLARE @cCODAGRUPACIONPUNTODEVENTA NUMERIC(22,0);
					  --DECLARE @cCODCIUDAD                 NUMERIC(22,0);
					  --DECLARE @cCODTIPOREGISTRO           NUMERIC(22,0);
					  -- Identificadores
					  DECLARE @xCODREGISTROREVENUE NUMERIC(22,0);
					  DECLARE @xCODPRODUCTOREVENUE NUMERIC(22,0);
					  -- Importes segundo nivel
					  DECLARE @vINGRESOCORPORATIVO FLOAT = 0;
					  DECLARE @vEGRESOCORPORATIVO  FLOAT = 0;
					  DECLARE @vINGRESOLOCAL       FLOAT = 0;
					  DECLARE @vEGRESOLOCAL        FLOAT = 0;
					  
					BEGIN
			EXEC WSXML_SFG.SFGREGISTROREVENUE_GetCalculatedRevenueValues
									 @irx_IDVALUE,
                                     @vCANTIDADVENTA,
                                     @vVALORVENTA,
                                     @vVALORVENTABRUTA,
                                     @vVALORINGRESOPDV,
                                     @vVALORIVAINGRESOPDV,
                                     @vREVENUECALCULADO,
                                     @vVALORCOMISIONESTANDAR,
                                     @vVALORDESCUENTOS,
                                     @cCODCOMPANIA OUT,
                                     @cCODSERVICIO OUT,
                                     @cCODTIPOCONTRATOPDV OUT,
                                     @cCODTIPOCONTRATOPRODUCTO OUT,
                                     @cCODPUNTODEVENTA OUT,
                                     @cCODPRODUCTO OUT,
                                     @cCODREDPDV OUT,
                                     @cCODAGRUPACIONPUNTODEVENTA OUT,
                                     @cCODCIUDAD OUT,
                                     @xCODREGISTROREVENUE OUT,
                                     @xCODPRODUCTOREVENUE OUT

          -- Configuracion P y G para calcular ingresos y egresos
            DECLARE @xCONFIGURACIONINGRESOCORP  NUMERIC(22,0);
            DECLARE @xCONFIGURACIONEGRESOCORP   NUMERIC(22,0);
            DECLARE @xCONFIGURACIONINGRESOLOCAL NUMERIC(22,0);
            DECLARE @xCONFIGURACIONEGRESOLOCAL  NUMERIC(22,0);
			
            BEGIN
            BEGIN
				BEGIN TRY
					EXEC WSXML_SFG.SFGCONFIGURACIONPYG_GetConfiguracionRegistro
															@cacheconfigpyg,
															@cCODSERVICIO,
															@cCODTIPOCONTRATOPRODUCTO,
															@cCODTIPOCONTRATOPDV,
															@xCONFIGURACIONINGRESOCORP OUT,
															@xCONFIGURACIONEGRESOCORP OUT,
															@xCONFIGURACIONINGRESOLOCAL OUT,
															@xCONFIGURACIONEGRESOLOCAL OUT
				END TRY
				BEGIN CATCH
						SET @xCONFIGURACIONINGRESOCORP  = 0;
						SET @xCONFIGURACIONEGRESOCORP   = 0;
						SET @xCONFIGURACIONINGRESOLOCAL = 0;
						SET @xCONFIGURACIONEGRESOLOCAL  = 0;
				END CATCH
            END;

			--Guillermo Ni?o 30 07 2013
			--Modificacion calculo de ventas sin ajustes
			SELECT @cCODTIPOREGISTRO = CODTIPOREGISTRO
			FROM WSXML_SFG.REGISTROFACTURACION
			WHERE ID_REGISTROFACTURACION = @irx_IDVALUE--lstproductregistries(irx) ;

			IF @cCODTIPOREGISTRO in (1,3) /*Ventas*/ BEGIN
              SET @vVALORVENTASINAJUSTES= @vVALORVENTABRUTA;
            END
            ELSE BEGIN
              SET @vVALORVENTASINAJUSTES= 0;
            END 
            -- Calcular y actualizar REGISTROREVENUE
            SET @vINGRESOCORPORATIVO = WSXML_SFG.SFGCONFIGURACIONPYG_TranslateFigure(@xCONFIGURACIONINGRESOCORP,
                                                                       @cCODTIPOCONTRATOPDV,
                                                                       @vCANTIDADVENTA,
                                                                       @vVALORVENTABRUTA,
                                                                       @vVALORINGRESOPDV,
                                                                       @vVALORIVAINGRESOPDV,
                                                                       @vREVENUECALCULADO,
                                                                       @vVALORCOMISIONESTANDAR,
                                                                       @vINGRESOCORPORATIVO,
                                                                       @vEGRESOCORPORATIVO,
                                                                       @vINGRESOLOCAL,
                                                                       @vEGRESOLOCAL,
                                                                       @vVALORVENTASINAJUSTES,
                                                                       @vVALORDESCUENTOS);
            SET @vEGRESOCORPORATIVO  = WSXML_SFG.SFGCONFIGURACIONPYG_TranslateFigure(@xCONFIGURACIONEGRESOCORP,
                                                                       @cCODTIPOCONTRATOPDV,
                                                                       @vCANTIDADVENTA,
                                                                       @vVALORVENTABRUTA,
                                                                       @vVALORINGRESOPDV,
                                                                       @vVALORIVAINGRESOPDV,
                                                                       @vREVENUECALCULADO,
                                                                       @vVALORCOMISIONESTANDAR,
                                                                       @vINGRESOCORPORATIVO,
                                                                       @vEGRESOCORPORATIVO,
                                                                       @vINGRESOLOCAL,
                                                                       @vEGRESOLOCAL,
                                                                       @vVALORVENTASINAJUSTES,
                                                                       @vVALORDESCUENTOS);
            SET @vINGRESOLOCAL       = WSXML_SFG.SFGCONFIGURACIONPYG_TranslateFigure(@xCONFIGURACIONINGRESOLOCAL,
                                                                       @cCODTIPOCONTRATOPDV,
                                                                       @vCANTIDADVENTA,
                                                                       @vVALORVENTABRUTA,
                                                                       @vVALORINGRESOPDV,
                                                                       @vVALORIVAINGRESOPDV,
                                                                       @vREVENUECALCULADO,
                                                                       @vVALORCOMISIONESTANDAR,
                                                                       @vINGRESOCORPORATIVO,
                                                                       @vEGRESOCORPORATIVO,
                                                                       @vINGRESOLOCAL,
                                                                       @vEGRESOLOCAL,
                                                                       @vVALORVENTASINAJUSTES,
                                                                       @vVALORDESCUENTOS);
            SET @vEGRESOLOCAL        = WSXML_SFG.SFGCONFIGURACIONPYG_TranslateFigure(@xCONFIGURACIONEGRESOLOCAL,
                                                                       @cCODTIPOCONTRATOPDV,
                                                                       @vCANTIDADVENTA,
                                                                       @vVALORVENTABRUTA,
                                                                       @vVALORINGRESOPDV,
                                                                       @vVALORIVAINGRESOPDV,
                                                                       @vREVENUECALCULADO,
                                                                       @vVALORCOMISIONESTANDAR,
                                                                       @vINGRESOCORPORATIVO,
                                                                       @vEGRESOCORPORATIVO,
                                                                       @vINGRESOLOCAL,
                                                                       @vEGRESOLOCAL,
                                                                       @vVALORVENTASINAJUSTES,
                                                                       @vVALORDESCUENTOS);
            EXEC WSXML_SFG.SFGREGISTROREVENUE_UpdateRecordPyGValues
													 @xCODREGISTROREVENUE,
                                                     @vINGRESOCORPORATIVO,
                                                     @vEGRESOCORPORATIVO,
                                                     @vINGRESOLOCAL,
                                                     @vEGRESOLOCAL
													 
            EXEC WSXML_SFG.SFGPRODUCTOREVENUE_UpdateProductPyG
												@xCODPRODUCTOREVENUE,
                                                @vINGRESOCORPORATIVO,
                                                @vEGRESOCORPORATIVO,
                                                @vINGRESOLOCAL,
                                                @vEGRESOLOCAL
		  END;


          -- Costos Calculados
            DECLARE @cCODPRODUCTOCONTRATO       NUMERIC(22,0);
            DECLARE @cCODPRODUCTOCONTRATOCOMDIF NUMERIC(22,0);
            DECLARE @currentcalculatedcosts     WSXML_SFG.IDVALUE;
            DECLARE @xREVENUEUTILIDADPARCIAL    FLOAT = @vREVENUECALCULADO - @vVALORINGRESOPDV;
			BEGIN
            --SET @currentcalculatedcosts = IDVALUELIST();
            -- Obtener identificadores padres y diferenciales para el producto
				EXEC WSXML_SFG.SFGPRODUCTOCONTRATO_GetTarifasProductoMaster 
														 @cCODPRODUCTO,
                                                         @cCODREDPDV,
                                                         @cCODAGRUPACIONPUNTODEVENTA,
                                                         @cCODCIUDAD,
                                                         @cCODPRODUCTOCONTRATO OUT,
                                                         @cCODPRODUCTOCONTRATOCOMDIF OUT
				-- Calcular todos los costos asociados
				-- OJO: Si hay que totalizar, desactivar algunos de resta
				
				DECLARE icst CURSOR FOR SELECT ID, DESCONTABLE, DEFINITION FROM @costoscalculados
				
				OPEN icst;
				
				DECLARE @icst__ID NUMERIC(38,0), @icst__DESCONTABLE NUMERIC(38,0), @icst__DEFINITION VARCHAR(MAX)
				
				FETCH icst INTO @icst__ID,  @icst__DESCONTABLE, @icst__DEFINITION ;
				WHILE @@FETCH_STATUS=0
				BEGIN
				
					DECLARE @cout                NUMERIC(22,0);
					DECLARE @idcosto             NUMERIC(22,0) 	= @icst__ID
					DECLARE @descontable         INT 			= @icst__DESCONTABLE;
					DECLARE @costvalue           FLOAT = 0;
					DECLARE @discounting         INT = 0;
					DECLARE @discountegr         INT = 0;
					DECLARE @formulacalculations VARCHAR = @icst__DEFINITION
				
					BEGIN
				
						DECLARE iclc CURSOR FOR SELECT VALUE FROM STRING_SPLIT(@formulacalculations, '|'); 
						OPEN iclc;
				
				
						DECLARE @currentcalculatedcosts_Count NUMERIC(22,0)= @@CURSOR_ROWS;
						
						DECLARE @iclc__VALUE varchar(MAX);
				
				
						FETCH NEXT FROM iclc INTO @iclc__VALUE;
					
						WHILE @@FETCH_STATUS=0
						BEGIN
                    DECLARE @operador VARCHAR(1) =  dbo.SEPARAR_COLUMNAS_F(@iclc__VALUE,3,';') --formulacalculations(iclc).OPERADOR;
                    DECLARE @tipovalr NUMERIC(38,0) = CAST(dbo.SEPARAR_COLUMNAS_F(@iclc__VALUE,1,';') AS NUMERIC(38,0)) --formulacalculations(iclc).CODTIPOVALOR;
                    DECLARE @valor    FLOAT = CAST(dbo.SEPARAR_COLUMNAS_F(@iclc__VALUE,2,';') AS FLOAT) --formulacalculations(iclc).VALOR;
                    DECLARE @actualv   FLOAT = 0;
					
					DECLARE @p_VALORUSUARIO TINYINT, @p_VALORFIGURAP  TINYINT, @p_VALORTARIFAV TINYINT, @p_VALORCOSTOPV TINYINT, @p_VALORCOSTASO TINYINT
					EXEC WSXML_SFG.SFGCOSTOCALCULADO_CONSTANT  @p_VALORUSUARIO 	OUT, @p_VALORFIGURAP  OUT, @p_VALORTARIFAV 	OUT, @p_VALORCOSTOPV OUT, @p_VALORCOSTASO  OUT
					
					BEGIN
						BEGIN TRY
							-- Actual value depends on type
							IF @tipovalr = @p_VALORUSUARIO BEGIN
							  SET @actualv = @valor;
							END
							ELSE IF @tipovalr = @p_VALORFIGURAP
							BEGIN
							  SET @actualv = WSXML_SFG.SFGCONFIGURACIONPYG_TranslateFigure(@valor,
																			 @cCODTIPOCONTRATOPDV,
																			 @vCANTIDADVENTA,
																			 @vVALORVENTABRUTA,
																			 @vVALORINGRESOPDV,
																			 @vVALORIVAINGRESOPDV,
																			 @vREVENUECALCULADO,
																			 @vVALORCOMISIONESTANDAR,
																			 @vINGRESOCORPORATIVO,
																			 @vEGRESOCORPORATIVO,
																			 @vINGRESOLOCAL,
																			 @vEGRESOLOCAL,
																			 @vVALORVENTASINAJUSTES,
																			 @vVALORDESCUENTOS);
							END
							ELSE IF @tipovalr = @p_VALORTARIFAV BEGIN
							  SET @actualv = WSXML_SFG.SFGPRODUCTOCONTRATO_TranslateTarifaFromMaster(--cachetarifa,
																					   @cachetarifadif,
																					   @cCODPRODUCTOCONTRATO,
																					   @cCODPRODUCTOCONTRATOCOMDIF,
																					   @valor);

							END
							ELSE IF @tipovalr = @p_VALORCOSTOPV BEGIN
							  IF @currentcalculatedcosts_Count > 0 BEGIN
								DECLARE ccpv CURSOR FOR SELECT VALUE FROM STRING_SPLIT(@formulacalculations, '|')
								OPEN ccpv;
								DECLARE @ccpv__VALUE VARCHAR(MAX), @ccpv__ID NUMERIC(38,0), @ccpv__VALOR    FLOAT
								
								FETCH NEXT FROM ccpv INTO @ccpv__VALUE;
								
								WHILE @@FETCH_STATUS=0
								BEGIN
									SET @ccpv__ID  = CAST(dbo.SEPARAR_COLUMNAS_F(@ccpv__VALUE,1,';') AS NUMERIC(38,0)) --formulacalculations(iclc).CODTIPOVALOR;
									SET @ccpv__VALOR    = CAST(dbo.SEPARAR_COLUMNAS_F(@ccpv__VALUE,2,';') AS FLOAT) --formulacalculations(iclc).VALOR;
								
								  IF @ccpv__ID = @valor BEGIN
										SET @actualv = @ccpv__VALOR;
										BREAK;
								  END
								  FETCH NEXT FROM ccpv INTO @ccpv__VALUE;
								END
								CLOSE ccpv;
								DEALLOCATE ccpv
								
							  END;
							  
							--Modificacion Guillermo Ni�o 25 de septiembre del 2015 -- calculo de costos calculados por costos asociados
							END ELSE IF @tipovalr = @p_VALORCOSTASO BEGIN-- Si es un costo asociado
							  SET @actualv = WSXML_SFG.SFGCOSTOASOCIADO_GetValorPorRegistroyCosto(@irx_IDVALUE,@valor);
							END 
							-- Calculate agains actual value depending on operator
							IF @operador = '+' BEGIN
							  SET @costvalue = @costvalue + @actualv;
							END
							ELSE IF @operador = '-' BEGIN
							  SET @costvalue = @costvalue - @actualv;
							END
							ELSE IF @operador = '*' BEGIN
							  SET @costvalue = @costvalue * @actualv;
							END
							ELSE IF @operador = '/' BEGIN
							  SET @costvalue = @costvalue / @actualv;
							END
							ELSE BEGIN
							  SET @costvalue = @actualv;
							END 
						END TRY
						BEGIN CATCH
							
							RAISERROR('-20054 No se pueden calcular las formulas de costos a partir de las configuraciones', 16, 1);
						END CATCH
					END 
				  
				  
					BEGIN
					-- At the end, save value in database and add to array for future consulting
						EXEC WSXML_SFG.SFGCONFIGURACIONPYG_GetDescuentoRegistro
															@cacheconfigdsc,
															@cCODSERVICIO,
															@cCODTIPOCONTRATOPRODUCTO,
															@cCODTIPOCONTRATOPDV,
															@idcosto,
															@discounting OUT,
															@discountegr OUT
						EXEC WSXML_SFG.SFGREGISTROREVENUE_UpdateRecordPYGValuesFromCosts
													@xCODREGISTROREVENUE,
												   discounting,
												   discountegr,
												   costvalue,
												   @vINGRESOLOCAL OUT,
												   @vEGRESOLOCAL OUT
					--currentcalculatedcosts.Extend(1);
						INSERT INTO @currentcalculatedcosts VALUES(@idcosto, @costvalue);
					
						EXEC WSXML_SFG.SFGREGISTROREVCOSTOCALCULADO_AddReplaceRecord
																	@xCODREGISTROREVENUE,
																	@idcosto,
																	costvalue,
																	@cout OUT
						IF @descontable = 1 BEGIN
						  SET @xREVENUEUTILIDADPARCIAL = @xREVENUEUTILIDADPARCIAL - @costvalue;
						END 
					END

					FETCH NEXT FROM iclc INTO @iclc__VALUE;
				END;

						CLOSE iclc;
						DEALLOCATE iclc;
						EXEC WSXML_SFG.SFGREGISTROREVENUE_UpdateRevenueUtilidadParcial @xCODREGISTROREVENUE, @xREVENUEUTILIDADPARCIAL
					END;

					FETCH icst INTO @icst__ID,  @icst__DESCONTABLE, @icst__DEFINITION ;
				END;

				CLOSE icst;
				DEALLOCATE icst;

				--Marcar el producto y la fecha para verificacion en la carga a la bodega de datos
				--BEGIN
				--	DWH_REPTRANS.DWHSFGREPROCESOREVENUE_AddRecord @p_CODPRODUCTO ,@p_FECHAARCHIV
				--END;


			END
			
		END
					--19 11 2013 SP 000087 Determinar si los ajustes son de castigo o no
					EXEC WSXML_SFG.SFGAJUSTEFACTURACION_AnalizeAndSetWriteOffByDate @p_FECHAARCHIVO,@p_CODPRODUCTO
      --
			 END;

		  END;

		END	

			FETCH NEXT FROM irx INTO @irx_IDVALUE
		END
		CLOSE irx
		DEALLOCATE irx
	END
END
GO



  IF OBJECT_ID('WSXML_SFG.SFGREGISTROREVENUE_CalcularRevenueRegistro', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_CalcularRevenueRegistro;
GO

  /* Consolida el calculo del revenue en un solo registro, para efectos de ajustes y anulaciones */
  CREATE PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_CalcularRevenueRegistro(@pk_ID_REGISTROFACTURACION   NUMERIC(22,0),
                                    @p_CODAJUSTEFACTURACION      NUMERIC(22,0) = NULL,
                                    @p_CODREGISTROFACTREFERENCIA NUMERIC(22,0) = NULL) AS
 BEGIN
    SET NOCOUNT ON;

    DECLARE @errormsg            VARCHAR(2000);
    DECLARE @cFECHA              DATETIME;
    DECLARE @cCODSERVICIOARCHIVO NUMERIC(22,0);
    DECLARE @cCODPRODUCTO        NUMERIC(22,0);
    --cachetarifa         PRODUCTTARIFALIST;
    DECLARE @cachetarifadif      WSXML_SFG.PRODUCTTARIFA;
    DECLARE @cacheconfigpyg      WSXML_SFG.CONFIGPYGREGISTRY;
    DECLARE @cacheconfigdsc      WSXML_SFG.CONFIGPYGDISCOUNT;
    DECLARE @costoscalculados    WSXML_SFG.FORMULA;
    DECLARE @cCODREGISTROREVENUE NUMERIC(22,0);
    -- Annulment adjustment values
    DECLARE @annulmntTX            NUMERIC(22,0) = 0;
    DECLARE @annulmntVALOR         FLOAT = 0;
    DECLARE @annulmntVALORVENTAB   FLOAT = 0;
    DECLARE @annulmntINGRESOPDV    FLOAT = 0;
    DECLARE @annulmntIVAINGRESOPDV FLOAT = 0;
    DECLARE @annulmntFECHAORIGEN   DATETIME;
    DECLARE @annulmntREVENUEBASE   FLOAT = 0;
    DECLARE @annulmntVCOMESTANDAR  FLOAT = 0;
    DECLARE @annulmntCODRGRVTRANS  NUMERIC(22,0);
   


	DECLARE @VENTAFACT SMALLINT, @ANULACION SMALLINT, @FREETICKT SMALLINT, @PREMIOPAG SMALLINT, @RGSTOTROS SMALLINT, @VENNOFACT SMALLINT
		
	EXEC WSXML_SFG.SFGTIPOREGISTRO_CONSTANT 
		  @VENTAFACT OUT, @ANULACION OUT,
		  @FREETICKT OUT, @PREMIOPAG OUT,
		  @RGSTOTROS OUT, @VENNOFACT OUT

	DECLARE @p_TIPOINFORMATIVO TINYINT, @p_TIPOERROR TINYINT,
		@p_TIPOADVERTENCIA TINYINT, @p_TIPOCUALQUIERA TINYINT,
		@p_PROCESONOTIFICACION TINYINT, @p_ESTADOABIERTA TINYINT,
		@p_ESTADOCERRADA TINYINT

	EXEC WSXML_SFG.SFGALERTA_CONSTANT
			@p_TIPOINFORMATIVO OUT,
			@p_TIPOERROR OUT,
			@p_TIPOADVERTENCIA OUT,
			@p_TIPOCUALQUIERA OUT,
			@p_PROCESONOTIFICACION OUT,
			@p_ESTADOABIERTA OUT,
			@p_ESTADOCERRADA OUT

	
	DECLARE @p_VALORUSUARIO 	TINYINT,
	  @p_VALORFIGURAP  	TINYINT,
	  @p_VALORTARIFAV 	TINYINT,
	  @p_VALORCOSTOPV 	TINYINT,
	  @p_VALORCOSTASO 	TINYINT

	EXEC WSXML_SFG.SFGCOSTOCALCULADO_CONSTANT
	  @p_VALORUSUARIO  OUT,
	  @p_VALORFIGURAP  OUT,
	  @p_VALORTARIFAV  OUT,
	  @p_VALORCOSTOPV  OUT,
	  @p_VALORCOSTASO  OUT
    --Resetea el almacen de tarifas diferenciales para el dia en curso
    delete from WSXML_SFG.registrorevenuecomdif
     where codregistrorevenue in
           (SELECT cd.id_registrorevenuecomdif
              FROM WSXML_SFG.REGISTROREVENUE RR, WSXML_SFG.REGISTROREVENUECOMDIF CD
             WHERE RR.CODREGISTROFACTURACION = @pk_ID_REGISTROFACTURACION
               AND RR.ID_REGISTROREVENUE = CD.CODREGISTROREVENUE);

    -- Obtain values from adjustment. Could go through parameter
    IF @p_CODAJUSTEFACTURACION IS NOT NULL
      BEGIN
        SELECT @annulmntTX = CANTIDADAJUSTE,
               @annulmntVALOR = VALORAJUSTE,
               @annulmntVALORVENTAB = AJS.VALORVENTABRUTANOREDONDEADO,
               @annulmntINGRESOPDV = CASE
                 WHEN COMISIONANTICIPO = 0 THEN
                  AJS.VALORCOMISION
                 ELSE
                  0
               END,
               @annulmntIVAINGRESOPDV = AJS.IVACOMISION,
               @annulmntFECHAORIGEN = FECHAARCHIVO
                   FROM WSXML_SFG.AJUSTEFACTURACION AJS
         INNER JOIN WSXML_SFG.ENTRADAARCHIVOCONTROL
            ON (CODENTRADAARCHIVOORIGEN = ID_ENTRADAARCHIVOCONTROL)
         INNER JOIN WSXML_SFG.REGISTROFACTURACION
            ON (CODREGISTROFACTORIGEN = ID_REGISTROFACTURACION)
         WHERE ID_AJUSTEFACTURACION = @p_CODAJUSTEFACTURACION;
		
		IF @@ROWCOUNT = 0
          RAISERROR('-20010 No se pudo resolver los valores del ajuste para el calculo de revenue', 16, 1);
      END;

    

    SELECT @cFECHA = CONVERT(DATETIME, CONVERT(DATE,FECHAARCHIVO)), @cCODSERVICIOARCHIVO = TIPOARCHIVO , @cCODPRODUCTO = REGISTROFACTURACION.CODPRODUCTO 
      FROM WSXML_SFG.ENTRADAARCHIVOCONTROL
     INNER JOIN WSXML_SFG.REGISTROFACTURACION
        ON (CODENTRADAARCHIVOCONTROL = ID_ENTRADAARCHIVOCONTROL)
     WHERE ID_REGISTROFACTURACION = @pk_ID_REGISTROFACTURACION;

    -- Tarifas por contrato
    --cachetarifa    := 
    EXEC WSXML_SFG.SFGPRODUCTOCONTRATO_GetTarifaCacheList @cFECHA,@cCODPRODUCTO

    INSERT INTO @cachetarifadif
	SELECT * FROM WSXML_SFG.SFGPRODUCTOCONTRATO_GetTarifaDiferencialCacheList(@cFECHA);

    -- Configuracion P y G
    INSERT INTO @cacheconfigpyg
	SELECT * FROM WSXML_SFG.SFGCONFIGURACIONPYG_GetConfiguracionCache()

    INSERT INTO @cacheconfigdsc
	SELECT * FROM WSXML_SFG.SFGCONFIGURACIONPYG_GetDescuentoCache();
    -- COstos Calculados
    INSERT INTO @costoscalculados
	SELECT * FROM WSXML_SFG.SFGCOSTOCALCULADO_GetCurrentCostoList(@cCODSERVICIOARCHIVO);

    /* Recalcular revenue bruto */
      DECLARE @cCODENTRADAARCHIVOCONTROL NUMERIC(22,0);
      DECLARE @cCODTIPOREGISTRO          NUMERIC(22,0);
      DECLARE @cCODPUNTODEVENTA          NUMERIC(22,0);
      DECLARE @cCODTIPOCONTRATOPDV       NUMERIC(22,0);
      --DECLARE @cCODPRODUCTO              NUMERIC(22,0);
      DECLARE @cCODTIPOCONTRATOPRODUCTO  NUMERIC(22,0);
      DECLARE @cCODCOMPANIA              NUMERIC(22,0);
      -- Valores para calcular y considerar
      DECLARE @cNUMTRANSACCIONES          NUMERIC(22,0);
      DECLARE @cVALORTRANSACCION          FLOAT;
      DECLARE @cTOTALVENTASBRUTAS         FLOAT;
      DECLARE @cCODAGRUPACIONPUNTODEVENTA NUMERIC(22,0);
      DECLARE @cCODREDPDV                 NUMERIC(22,0);
      DECLARE @cCODCIUDAD                 NUMERIC(22,0);
      -- Valores de Tarifa (Ignorar valor de Anticipo)
      DECLARE @cCODRANGOCOMISION           NUMERIC(22,0);
      DECLARE @cCODTIPOCOMISION            NUMERIC(22,0);
      DECLARE @cCODTIPORANGO               NUMERIC(22,0);
      DECLARE @cCODRANGOCOMISIONDIFAGR     NUMERIC(22,0);
      DECLARE @cCODRANGOCOMISIONDIFRED     NUMERIC(22,0);
      DECLARE @cCODRANGOCOMISIONDIFDTO     NUMERIC(22,0);
      DECLARE @cFLAGCOMISIONDIFERENCIALBIN NUMERIC(22,0);
      DECLARE @cLISTCOMISIONDIFERENCIALBIN CURSOR--WSXML_SFG.IDSTRINGFLOATVALUE;
	  DECLARE @cCOUNTCOMISIONDIFERENCIALBIN NUMERIC(22,0)
      DECLARE @cLISTADVTRANSACCIONES       CURSOR--WSXML_SFG.IDSTRINGVALUE;
	  DECLARE @cCOUNTADVTRANSACCIONES       NUMERIC(22,0)
      DECLARE @cCODRANGOCOMISIONESTANDAR   NUMERIC(22,0);
      -- Calculation value
      DECLARE @vCOMISIONPOSESTANDAR FLOAT = 0;
      DECLARE @vREVENUE             FLOAT = 0;
      -- Output control values
      DECLARE @cCODPRODUCTOREVENUE   NUMERIC(22,0);
      DECLARE @cANULACIONDIFERENCIAL NUMERIC(22,0) = 0;


	  -- Calcular (Emular) Comision POS Estandar
        DECLARE @cpsvcodeTIPOCOMISION   NUMERIC(22,0);
        DECLARE @cpsvcalcVALORPORCENTUA FLOAT = 0;
        DECLARE @cpsvcalcVALORTRANSCCNL FLOAT = 0;

		DECLARE @cvalcalcVALORPORCENTUA FLOAT = 0;
        DECLARE @cvalcalcVALORTRANSCCNL FLOAT = 0;


		--DECLARE @tCommission__ID_RANGOCOMISIONDETALLE NUMERIC(38,0), @tCommission__RANGOINICIAL FLOAT, @tCommission__RANGOFINAL FLOAT,
		--		@tCommission__VALORPORCENTUAL FLOAT, @tCommission__VALORTRANSACCIONAL FLOAT

		DECLARE @vtxREVENUE                     FLOAT = 0;



    BEGIN
      -- Obtencion unificada de valores y calculos
      BEGIN
		BEGIN TRY
			-- Si el recalculo es producto de un ajuste de anulacion, obtener mediante la fecha de la transaccion original
			IF @p_CODAJUSTEFACTURACION IS NOT NULL BEGIN
			  EXEC WSXML_SFG.SFGREGISTROREVENUE_GetRegistryRevenueValues   
										@annulmntFECHAORIGEN,
									   @pk_ID_REGISTROFACTURACION,
									   @cCODENTRADAARCHIVOCONTROL OUT, 
									   @cCODTIPOREGISTRO OUT, 
									   @cCODPUNTODEVENTA OUT, 
									   @cCODTIPOCONTRATOPDV OUT, 
									   @cCODPRODUCTO OUT, 
									   @cCODTIPOCONTRATOPRODUCTO OUT, 
									   @cCODCOMPANIA OUT, 
									   @cNUMTRANSACCIONES OUT, 
									   @cVALORTRANSACCION OUT, 
									   @cTOTALVENTASBRUTAS OUT, 
									   @cCODAGRUPACIONPUNTODEVENTA OUT, 
									   @cCODREDPDV OUT, 
									   @cCODCIUDAD OUT, 
									   @cCODRANGOCOMISION OUT, 
									   @cCODTIPOCOMISION OUT, 
									   @cCODTIPORANGO OUT, 
									   @cCODRANGOCOMISIONDIFAGR OUT, 
									   @cCODRANGOCOMISIONDIFRED OUT, 
									   @cCODRANGOCOMISIONDIFDTO OUT, 
									   @cFLAGCOMISIONDIFERENCIALBIN OUT, 
									   @cLISTCOMISIONDIFERENCIALBIN OUT, 
									   @cCOUNTCOMISIONDIFERENCIALBIN OUT, 
									   @cLISTADVTRANSACCIONES OUT, 
									   @cCOUNTADVTRANSACCIONES OUT, 
									   @cCODRANGOCOMISIONESTANDAR OUT
			END
			ELSE BEGIN
			  EXEC WSXML_SFG.SFGREGISTROREVENUE_GetRegistryRevenueValues 
									   @cFECHA,
									   @pk_ID_REGISTROFACTURACION,
									   @cCODENTRADAARCHIVOCONTROL OUT, 
									   @cCODTIPOREGISTRO OUT, 
									   @cCODPUNTODEVENTA OUT, 
									   @cCODTIPOCONTRATOPDV OUT, 
									   @cCODPRODUCTO OUT, 
									   @cCODTIPOCONTRATOPRODUCTO OUT, 
									   @cCODCOMPANIA OUT, 
									   @cNUMTRANSACCIONES OUT, 
									   @cVALORTRANSACCION OUT, 
									   @cTOTALVENTASBRUTAS OUT, 
									   @cCODAGRUPACIONPUNTODEVENTA OUT, 
									   @cCODREDPDV OUT, 
									   @cCODCIUDAD OUT, 
									   @cCODRANGOCOMISION OUT, 
									   @cCODTIPOCOMISION OUT, 
									   @cCODTIPORANGO OUT, 
									   @cCODRANGOCOMISIONDIFAGR OUT, 
									   @cCODRANGOCOMISIONDIFRED OUT, 
									   @cCODRANGOCOMISIONDIFDTO OUT, 
									   @cFLAGCOMISIONDIFERENCIALBIN OUT, 
									   @cLISTCOMISIONDIFERENCIALBIN OUT, 
									   @cCOUNTCOMISIONDIFERENCIALBIN OUT, 
									   @cLISTADVTRANSACCIONES OUT, 
									   @cCOUNTADVTRANSACCIONES OUT, 
									   @cCODRANGOCOMISIONESTANDAR OUT
			END 

			IF @cCODPRODUCTO IN (1872,1873,1874,1875) BEGIN
				 SET @annulmntVALORVENTAB=@cTOTALVENTASBRUTAS;
			END  

	--Guillermo Ni?o 29 Julio 2013
			--Modificacion calcular en una anulacion si el ajuste es de castigo o no
			IF @cCODTIPOREGISTRO = @ANULACION
			  BEGIN
				DECLARE Ajustes CURSOR FOR SELECT ID_AJUSTEFACTURACION
								  FROM WSXML_SFG.AJUSTEFACTURACION
								 WHERE AJUSTEFACTURACION.CODREGISTROFACTREFDESTINO =
									   @pk_ID_REGISTROFACTURACION; OPEN Ajustes;
				DECLARE @Ajustes__ID_AJUSTEFACTURACION NUMERIC(38,0)
				 FETCH NEXT FROM Ajustes INTO @Ajustes__ID_AJUSTEFACTURACION;
				 WHILE @@FETCH_STATUS=0
				 BEGIN
				  BEGIN
					EXEC WSXML_SFG.SFGAJUSTEFACTURACION_AnalizeAndSetWriteOff @AJUSTES__ID_AJUSTEFACTURACION
				  END;

				FETCH NEXT FROM Ajustes INTO @Ajustes__ID_AJUSTEFACTURACION;
				END;

				CLOSE Ajustes;
				DEALLOCATE Ajustes;
			  END;

        
			-- En caso de ser una anulacion NO AJUSTE, y tener referencias dependientes, buscar con fecha de transacciones
			IF @p_CODAJUSTEFACTURACION IS NULL AND
			   @cCODTIPOREGISTRO = @ANULACION BEGIN
				DECLARE @xCountReferences NUMERIC(22,0) = 0;
			  BEGIN
				SELECT @xCountReferences = COUNT(ID_REGISTROFACTREFERENCIA)
				  FROM WSXML_SFG.REGISTROFACTREFERENCIA
				 WHERE CODREGISTROFACTURACION = @pk_ID_REGISTROFACTURACION;
				IF @xCountReferences > 0 BEGIN
				  SET @cANULACIONDIFERENCIAL = 1;
				END 
			  END;

			END 
		END TRY
		BEGIN CATCH

          SET @errormsg = 'No es posible calcular el revenue para la entrada ' +
                                  CONVERT(VARCHAR,@pk_ID_REGISTROFACTURACION) +
                                  '. Puede existir un error en la configuracion del contrato para el producto. ' +
                                  isnull(ERROR_MESSAGE ( )  , '');
          EXEC WSXML_SFG.SFGALERTA_GenerarAlerta 
								@p_TIPOADVERTENCIA,
                                  'REVENUE',
                                  @errormsg,
                                  1
		 SET @errormsg = '-20060 Maximo numero de advertencias alcanzado: ' +
                                  isnull(ERROR_MESSAGE ( )  , '')
          RAISERROR(@errormsg, 16, 1);
		END CATCH
      END;


      EXEC WSXML_SFG.SFGPRODUCTOREVENUE_FindProductEntry @cFECHA,
                                          @cCODPRODUCTO,
                                          @cCODPRODUCTOREVENUE OUT
      EXEC WSXML_SFG.SFGPRODUCTOREVENUE_ClearProductEntry @cCODPRODUCTOREVENUE

      IF @cANULACIONDIFERENCIAL = 1 BEGIN
          DECLARE @cmlCOMISIONPOSESTANDAR FLOAT = 0;
          DECLARE @cmlREVENUE             FLOAT = 0;
        BEGIN
          -- Empty Record. El registro se marca con los identificadores del registro anulacion, pero no necesariamente corresponde
          EXEC WSXML_SFG.SFGREGISTROREVENUE_AddReplaceEmptyRecord 
												   @cCODENTRADAARCHIVOCONTROL,
                                                   @pk_ID_REGISTROFACTURACION,
                                                   @cCODTIPOREGISTRO,
                                                   @cFECHA,
                                                   @cCODPUNTODEVENTA,
                                                   @cCODTIPOCONTRATOPDV,
                                                   @cCODPRODUCTO,
                                                   @cCODTIPOCONTRATOPRODUCTO,
                                                   @cCODCOMPANIA,
                                                   @cCODRANGOCOMISION,
                                                   @cCODPRODUCTOREVENUE,
                                                   @cmlCOMISIONPOSESTANDAR,
                                                   @cCODREGISTROREVENUE OUT

          -- Obtener reglas de cada una de las referencias adjuntas
          DECLARE treference CURSOR FOR SELECT ID_REGISTROFACTREFERENCIA,
                                    CONVERT(DATETIME, CONVERT(DATE,FECHAHORATRANSACCION)) AS FECHA,
                                    CASE
                                      WHEN REGISTROFACTURACION.CODPRODUCTO IN
                                           (1255, 1256) THEN
                                       REGISTROFACTREFERENCIA.Vrcomision
                                       WHEN REGISTROFACTURACION.CODPRODUCTO IN
                                           (1872,1873,1874,1875) THEN
                                       CONVERT(NUMERIC,REGISTROFACTREFERENCIA.Suscriptor)
                                       WHEN PRODUCTO.CODTIPOPRODUCTO IN (14,15)THEN 
                                            REGISTROFACTREFERENCIA.Vrcomision
                                      ELSE
                                       REGISTROFACTREFERENCIA.VALORTRANSACCION
                                    END AS VALORTRANSACCION,
                                    CODREGISTROANULADO,
                                    BINTARJETA,
                                    TIPOTRANSACCION
                               FROM WSXML_SFG.REGISTROFACTREFERENCIA
                              INNER JOIN WSXML_SFG.REGISTROFACTURACION
                                 ON REGISTROFACTREFERENCIA.CODREGISTROFACTURACION =
                                    REGISTROFACTURACION.ID_REGISTROFACTURACION
                              INNER JOIN WSXML_SFG.PRODUCTO ON REGISTROFACTURACION.CODPRODUCTO = PRODUCTO.ID_PRODUCTO
                              WHERE CODREGISTROFACTURACION =
                                    @pk_ID_REGISTROFACTURACION; OPEN treference;

			DECLARE @treference__ID_REGISTROFACTREFERENCIA NUMERIC(38,0), @treference__FECHA DATETIME, 
				@treference__VALORTRANSACCION FLOAT, @treference__CODREGISTROANULADO NUMERIC(38,0)
				, @treference__BINTARJETA NVARCHAR(10), @treference__TIPOTRANSACCION NVARCHAR(10)

			FETCH NEXT FROM treference INTO @treference__ID_REGISTROFACTREFERENCIA, @treference__FECHA, 
				@treference__VALORTRANSACCION, @treference__CODREGISTROANULADO, @treference__BINTARJETA,@treference__TIPOTRANSACCION
			WHILE @@FETCH_STATUS=0
			BEGIN
            -- Obtener reglas nuevamente para la transaccion de la anulacion
            -- Utiliza registro original (reglas guardadas - cadena, red, etc)
              DECLARE @orgCODREGISTROFACTURACION   NUMERIC(22,0);
              DECLARE @dmyCODENTRADAARCHIVOCONTROL NUMERIC(22,0);
              DECLARE @dmyCODTIPOREGISTRO          NUMERIC(22,0);
              DECLARE @tmpvCOMISIONPOSESTANDAR     FLOAT = 0;
              DECLARE @tmpvREVENUE                 FLOAT = 0;
              DECLARE @tmpvCODRANGOCOMISIONDETALLE NUMERIC(22,0);
              DECLARE @outCODREGISTROREVENUETRANSC NUMERIC(22,0);
			  BEGIN
              BEGIN
				BEGIN TRY
				  
					IF @treference__CODREGISTROANULADO IS NULL BEGIN
						 --RAISE NO FOUND DATA
						  SET @errormsg = 'No se pudo obtener los valores originales de transaccion para la referencia anulacion de id ' + CONVERT(VARCHAR,@treference__ID_REGISTROFACTREFERENCIA)
						  EXEC WSXML_SFG.SFGTMPTRACE_TraceLog @errormsg;
						  EXEC WSXML_SFG.SFGREGISTROREVENUE_GetRegistryRevenueValues 
												   @treference__FECHA,
												   @pk_ID_REGISTROFACTURACION,
												   @dmyCODENTRADAARCHIVOCONTROL OUT,
												   @dmyCODTIPOREGISTRO OUT,
												   @cCODPUNTODEVENTA OUT,
												   @cCODTIPOCONTRATOPDV OUT,
												   @cCODPRODUCTO OUT,
												   @cCODTIPOCONTRATOPRODUCTO OUT,
												   @cCODCOMPANIA OUT,
												   @cNUMTRANSACCIONES OUT,
												   @cVALORTRANSACCION OUT,
												   @cTOTALVENTASBRUTAS OUT,
												   @cCODAGRUPACIONPUNTODEVENTA OUT,
												   @cCODREDPDV OUT,
												   @cCODCIUDAD OUT,
												   @cCODRANGOCOMISION OUT,
												   @cCODTIPOCOMISION OUT,
												   @cCODTIPORANGO OUT,
												   @cCODRANGOCOMISIONDIFAGR OUT,
												   @cCODRANGOCOMISIONDIFRED OUT,
												   @cCODRANGOCOMISIONDIFDTO OUT,
												   @cFLAGCOMISIONDIFERENCIALBIN OUT,
												   @cLISTCOMISIONDIFERENCIALBIN OUT,
												   @cCOUNTCOMISIONDIFERENCIALBIN OUT,
												   @cLISTADVTRANSACCIONES OUT,
												   @cCOUNTADVTRANSACCIONES OUT,
												   @cCODRANGOCOMISIONESTANDAR OUT



					END 
					SELECT @orgCODREGISTROFACTURACION = ID_REGISTROFACTURACION
					  FROM WSXML_SFG.REGISTROFACTURACION
					 INNER JOIN WSXML_SFG.REGISTROFACTREFERENCIA
						ON (CODREGISTROFACTURACION = ID_REGISTROFACTURACION)
					 WHERE ID_REGISTROFACTREFERENCIA =
						   @treference__CODREGISTROANULADO;
					EXEC WSXML_SFG.SFGREGISTROREVENUE_GetRegistryRevenueValues   
											 @treference__FECHA,
											 @orgCODREGISTROFACTURACION,
											 @dmyCODENTRADAARCHIVOCONTROL OUT,
											 @dmyCODTIPOREGISTRO OUT,
											 @cCODPUNTODEVENTA OUT,
											 @cCODTIPOCONTRATOPDV OUT,
											 @cCODPRODUCTO OUT,
											 @cCODTIPOCONTRATOPRODUCTO OUT,
											 @cCODCOMPANIA OUT,
											 @cNUMTRANSACCIONES OUT,
											 @cVALORTRANSACCION OUT,
											 @cTOTALVENTASBRUTAS OUT,
											 @cCODAGRUPACIONPUNTODEVENTA OUT,
											 @cCODREDPDV OUT,
											 @cCODCIUDAD OUT,
											 @cCODRANGOCOMISION OUT,
											 @cCODTIPOCOMISION OUT,
											 @cCODTIPORANGO OUT,
											 @cCODRANGOCOMISIONDIFAGR OUT,
											 @cCODRANGOCOMISIONDIFRED OUT,
											 @cCODRANGOCOMISIONDIFDTO OUT,
											 @cFLAGCOMISIONDIFERENCIALBIN OUT,
											 @cLISTCOMISIONDIFERENCIALBIN OUT,
											 @cCOUNTCOMISIONDIFERENCIALBIN OUT,
											 @cLISTADVTRANSACCIONES OUT,
											 @cCOUNTADVTRANSACCIONES OUT,
											 @cCODRANGOCOMISIONESTANDAR OUT
				END TRY
				BEGIN CATCH
				  
					  SET @errormsg = 'No se pudo obtener los valores originales de transaccion para la referencia anulacion de id ' + CONVERT(VARCHAR,@treference__ID_REGISTROFACTREFERENCIA)
					  EXEC WSXML_SFG.SFGTMPTRACE_TraceLog @errormsg;
					  EXEC WSXML_SFG.SFGREGISTROREVENUE_GetRegistryRevenueValues 
											   @treference__FECHA,
											   @pk_ID_REGISTROFACTURACION,
											   @dmyCODENTRADAARCHIVOCONTROL OUT,
											   @dmyCODTIPOREGISTRO OUT,
											   @cCODPUNTODEVENTA OUT,
											   @cCODTIPOCONTRATOPDV OUT,
											   @cCODPRODUCTO OUT,
											   @cCODTIPOCONTRATOPRODUCTO OUT,
											   @cCODCOMPANIA OUT,
											   @cNUMTRANSACCIONES OUT,
											   @cVALORTRANSACCION OUT,
											   @cTOTALVENTASBRUTAS OUT,
											   @cCODAGRUPACIONPUNTODEVENTA OUT,
											   @cCODREDPDV OUT,
											   @cCODCIUDAD OUT,
											   @cCODRANGOCOMISION OUT,
											   @cCODTIPOCOMISION OUT,
											   @cCODTIPORANGO OUT,
											   @cCODRANGOCOMISIONDIFAGR OUT,
											   @cCODRANGOCOMISIONDIFRED OUT,
											   @cCODRANGOCOMISIONDIFDTO OUT,
											   @cFLAGCOMISIONDIFERENCIALBIN OUT,
											   @cLISTCOMISIONDIFERENCIALBIN OUT,
											   @cCOUNTCOMISIONDIFERENCIALBIN OUT,
											   @cLISTADVTRANSACCIONES OUT,
											   @cCOUNTADVTRANSACCIONES OUT,
											   @cCODRANGOCOMISIONESTANDAR OUT
				END CATCH
              END;

              -- Verificar si se encontro comision (tarifa) diferencial
              BEGIN
				BEGIN TRY
					IF @cCODRANGOCOMISIONDIFAGR <> 0 BEGIN
					  SELECT @cCODRANGOCOMISION = ID_RANGOCOMISION, @cCODTIPOCOMISION = CODTIPOCOMISION, @cCODTIPORANGO = CODTIPORANGO
						FROM WSXML_SFG.RANGOCOMISION
					   WHERE ID_RANGOCOMISION = @cCODRANGOCOMISIONDIFAGR;
					END
					ELSE IF @cCODRANGOCOMISIONDIFRED <> 0 BEGIN
					  SELECT @cCODRANGOCOMISION = ID_RANGOCOMISION, @cCODTIPOCOMISION = CODTIPOCOMISION, @cCODTIPORANGO = CODTIPORANGO
						FROM WSXML_SFG.RANGOCOMISION
					   WHERE ID_RANGOCOMISION = @cCODRANGOCOMISIONDIFRED;
					END
					ELSE IF @cCODRANGOCOMISIONDIFDTO <> 0 BEGIN
					  SELECT @cCODRANGOCOMISION = ID_RANGOCOMISION, @cCODTIPOCOMISION = CODTIPOCOMISION, @cCODTIPORANGO = CODTIPORANGO
						FROM WSXML_SFG.RANGOCOMISION
					   WHERE ID_RANGOCOMISION = @cCODRANGOCOMISIONDIFDTO;
					END
					ELSE IF @cFLAGCOMISIONDIFERENCIALBIN <> 0 BEGIN
					  IF @cCOUNTADVTRANSACCIONES > 0 BEGIN
						  --DECLARE idv CURSOR FOR cLISTADVTRANSACCIONES.First .. cLISTADVTRANSACCIONES.Last OPEN idv;
						
						DECLARE @idv__ID NUMERIC(38,0), @idv__VALUE NVARCHAR(2000)
						FETCH NEXT FROM @cLISTADVTRANSACCIONES INTO @idv__ID, @idv__VALUE;
						
						WHILE @@FETCH_STATUS=0
						BEGIN
							IF @idv__VALUE = @treference__TIPOTRANSACCION AND @idv__ID = 0 BEGIN
								SET @cCODTIPOCOMISION = 0; /* Parameter forces zero value */
								BREAK;
							 END
							FETCH NEXT FROM @cLISTADVTRANSACCIONES INTO @idv__ID, @idv__VALUE;
						END
						CLOSE idv;
						DEALLOCATE idv;
						
						--END WHILE 1=1 BEGIN;
					  END ELSE BEGIN
						SET @cCODTIPOCOMISION = 0; /* Parameter forces zero value */
					  END
					  
					  IF @cCODTIPOCOMISION <> 0 AND @cCOUNTCOMISIONDIFERENCIALBIN > 0 BEGIN
					  
						DECLARE @cLISTCOMISIONDIFERENCIALBIN_ID NUMERIC(38,0), @cLISTCOMISIONDIFERENCIALBIN__STRINGVALUE NVARCHAR(50), @cLISTCOMISIONDIFERENCIALBIN__FLOATVALUE FLOAT
						FETCH NEXT FROM @cLISTCOMISIONDIFERENCIALBIN INTO @cLISTCOMISIONDIFERENCIALBIN_ID, @cLISTCOMISIONDIFERENCIALBIN__STRINGVALUE, @cLISTCOMISIONDIFERENCIALBIN__FLOATVALUE
						WHILE (@@FETCH_STATUS = 0) BEGIN
						--FOR ibx IN cLISTCOMISIONDIFERENCIALBIN.First .. cLISTCOMISIONDIFERENCIALBIN.Last WHILE 1=1 BEGIN
						  IF @cLISTCOMISIONDIFERENCIALBIN__STRINGVALUE = @treference__BINTARJETA BEGIN
							SELECT @cCODRANGOCOMISION = ID_RANGOCOMISION,
								   @cCODTIPOCOMISION = CODTIPOCOMISION,
								   @cCODTIPORANGO = CODTIPORANGO
							FROM WSXML_SFG.RANGOCOMISION
							WHERE ID_RANGOCOMISION = CONVERT(NUMERIC,@cLISTCOMISIONDIFERENCIALBIN__FLOATVALUE);
							BREAK
						  END
						  FETCH NEXT FROM @cLISTCOMISIONDIFERENCIALBIN INTO @cLISTCOMISIONDIFERENCIALBIN_ID, @cLISTCOMISIONDIFERENCIALBIN__STRINGVALUE, @cLISTCOMISIONDIFERENCIALBIN__FLOATVALUE
						END 
						CLOSE @cLISTCOMISIONDIFERENCIALBIN
						DEALLOCATE @cLISTCOMISIONDIFERENCIALBIN
						
						--WHILE 1=1 BEGIN;
					  END
					END
				END TRY
				BEGIN CATCH
                  SET @errormsg = 'No se pudo obtener valores para tarifa diferencial: Se prosigue con tarifa normal. ' +
                                          isnull(ERROR_MESSAGE ( )  , '');
                  EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @p_TIPOADVERTENCIA,
                                          'REVENUE',
                                          @errormsg,
                                          1
				  SET @errormsg = '-20060 Maximo numero de advertencias alcanzado: ' +
                                          isnull(ERROR_MESSAGE ( )  , '')					  
                  RAISERROR(@errormsg, 16, 1);
				END CATCH 
              END 
              -- Calcular (Emular) Comision POS Estandar
                --DECLARE @cpsvcodeTIPOCOMISION   NUMERIC(22,0);
                SET @cpsvcalcVALORPORCENTUA = 0;
                SET @cpsvcalcVALORTRANSCCNL = 0;
              BEGIN
                -- Obtain Values. Mathematical operation goes against transaction values
                SELECT @cpsvcodeTIPOCOMISION = CODTIPOCOMISION, @cpsvcalcVALORPORCENTUA = VALORPORCENTUAL, @cpsvcalcVALORTRANSCCNL = VALORTRANSACCIONAL
				FROM WSXML_SFG.RANGOCOMISION
                 INNER JOIN WSXML_SFG.RANGOCOMISIONDETALLE
                    ON (CODRANGOCOMISION = ID_RANGOCOMISION)
                 WHERE ID_RANGOCOMISION = @cCODRANGOCOMISIONESTANDAR;
				 
                IF @cpsvcodeTIPOCOMISION IN (1, 2, 3) BEGIN
                  IF @cpsvcodeTIPOCOMISION = 1 BEGIN
                    -- Porcentual
                    SET @tmpvCOMISIONPOSESTANDAR = (@cpsvcalcVALORPORCENTUA *
                                               @treference__VALORTRANSACCION) / 100;
                  END
                  ELSE IF @cpsvcodeTIPOCOMISION = 2 BEGIN
                    -- Transaccional
                    SET @tmpvCOMISIONPOSESTANDAR = @cpsvcalcVALORTRANSCCNL * (1);
                  END
                  ELSE IF @cpsvcodeTIPOCOMISION = 3 BEGIN
                    -- Mixto
                    SET @tmpvCOMISIONPOSESTANDAR = ((@cpsvcalcVALORPORCENTUA *
                                               @treference__VALORTRANSACCION) / 100) +
                                               (@cpsvcalcVALORTRANSCCNL * (1));
                  END 
                END
                ELSE BEGIN
                  SET @tmpvCOMISIONPOSESTANDAR = 0;
                END 
				
				IF @@ROWCOUNT > 1 BEGIN
					SET @tmpvCOMISIONPOSESTANDAR = 0;
				END
              
				IF @@ROWCOUNT = 0 BEGIN
					SET @errormsg = '-20080 No existe comision estandar configurada para el producto ' +
                                          WSXML_SFG.PRODUCTO_CODIGO_F(@cCODPRODUCTO) + '. No se puede continuar'
					RAISERROR(@errormsg, 16, 1);
				END
                
                  
              END;

              SET @cmlCOMISIONPOSESTANDAR = @cmlCOMISIONPOSESTANDAR +
                                        @tmpvCOMISIONPOSESTANDAR;
              -- Forcefully calculate reference level. Mathematical operation goes against transaction values
              IF @cCODTIPOCOMISION IN (1, 2, 3) BEGIN
                  SET @cvalcalcVALORPORCENTUA = 0;
                  SET @cvalcalcVALORTRANSCCNL = 0;
                BEGIN
                  SELECT @tmpvCODRANGOCOMISIONDETALLE = ID_RANGOCOMISIONDETALLE,
                         @cvalcalcVALORPORCENTUA = VALORPORCENTUAL,
                         @cvalcalcVALORTRANSCCNL = VALORTRANSACCIONAL
                                       FROM WSXML_SFG.RANGOCOMISIONDETALLE
                   WHERE CODRANGOCOMISION = @cCODRANGOCOMISION;
                  IF @cCODTIPOCOMISION = 1 BEGIN
                    -- Porcentual
                    SET @tmpvREVENUE = (@cvalcalcVALORPORCENTUA *
                                   @treference__VALORTRANSACCION) / 100;
                  END
                  ELSE IF @cCODTIPOCOMISION = 2 BEGIN
                    -- Transaccional
                    SET @tmpvREVENUE = @cvalcalcVALORTRANSCCNL * (1);
                  END
                  ELSE IF @cCODTIPOCOMISION = 3 BEGIN
                    -- Mixto
                    SET @tmpvREVENUE = ((@cvalcalcVALORPORCENTUA *
                                   @treference__VALORTRANSACCION) / 100) +
                                   (@cvalcalcVALORTRANSCCNL * (1));
                  END 
                END;

              END
              ELSE IF @cCODTIPOCOMISION IN (4, 5, 6)
                BEGIN
                  BEGIN
                    DECLARE tCommission CURSOR FOR SELECT ID_RANGOCOMISIONDETALLE,
                                               RANGOINICIAL,
                                               RANGOFINAL,
                                               VALORPORCENTUAL,
                                               VALORTRANSACCIONAL
                                          FROM WSXML_SFG.RANGOCOMISIONDETALLE
                                         WHERE CODRANGOCOMISION =
                                               @cCODRANGOCOMISION
                                         ORDER BY RANGOINICIAL; OPEN tCommission;
					DECLARE @tCommission__ID_RANGOCOMISIONDETALLE NUMERIC(38,0), @tCommission__RANGOINICIAL FLOAT, @tCommission__RANGOFINAL FLOAT, @tCommission__VALORPORCENTUAL FLOAT, @tCommission__VALORTRANSACCIONAL FLOAT
					FETCH NEXT FROM tCommission INTO @tCommission__ID_RANGOCOMISIONDETALLE, @tCommission__RANGOINICIAL, @tCommission__RANGOFINAL, @tCommission__VALORPORCENTUAL, @tCommission__VALORTRANSACCIONAL;
					WHILE @@FETCH_STATUS=0
					BEGIN
                      IF @treference__VALORTRANSACCION >=
                         @tCommission__RANGOINICIAL AND
                         (@treference__VALORTRANSACCION <=
                         @tCommission__RANGOFINAL OR
                         @tCommission__RANGOFINAL IS NULL) BEGIN
                        IF @cCODTIPOCOMISION = 4 BEGIN
                          -- Rangos Porcentual
                          SET @tmpvREVENUE = (@tCommission__VALORPORCENTUAL *
                                         @treference__VALORTRANSACCION) / 100;
                        END
                        ELSE IF @cCODTIPOCOMISION = 5 BEGIN
                          -- Rangos Transaccional
                          SET @tmpvREVENUE = @tCommission__VALORTRANSACCIONAL * (1);
                        END
                        ELSE IF @cCODTIPOCOMISION = 6 BEGIN
                          -- Rangos Mixto
                          SET @tmpvREVENUE = ((@tCommission__VALORPORCENTUAL *
                                         @treference__VALORTRANSACCION) / 100) +
                                         (@tCommission__VALORTRANSACCIONAL * (1));
                        END 
                        SET @tmpvCODRANGOCOMISIONDETALLE = @tCommission__ID_RANGOCOMISIONDETALLE;
                        BREAK;
                      END 
                    FETCH NEXT FROM tCommission INTO @tCommission__ID_RANGOCOMISIONDETALLE, @tCommission__RANGOINICIAL, @tCommission__RANGOFINAL, @tCommission__VALORPORCENTUAL, @tCommission__VALORTRANSACCIONAL;
                    END;

                    CLOSE tCommission;
                    DEALLOCATE tCommission;
                  END;

                END;

               
              SET @cmlREVENUE = @cmlREVENUE + @tmpvREVENUE;
              IF @cCODTIPOCOMISION <> 0 BEGIN
                EXEC WSXML_SFG.SFGREGISTROREVENUETRANSACCION_AddReplaceRecord 
															   @cCODREGISTROREVENUE,
                                                               @treference__ID_REGISTROFACTREFERENCIA,
                                                               @cCODRANGOCOMISION,
                                                               @tmpvCODRANGOCOMISIONDETALLE,
                                                               @tmpvREVENUE,
                                                               @outCODREGISTROREVENUETRANSC OUT
              END 
            END 
					FETCH NEXT FROM treference INTO @treference__ID_REGISTROFACTREFERENCIA, @treference__FECHA, 
				@treference__VALORTRANSACCION, @treference__CODREGISTROANULADO, @treference__BINTARJETA,@treference__TIPOTRANSACCION
		    END --WHILE 1=1 BEGIN;
			CLOSE treference
			DEALLOCATE treference
			
			-- Actualizar Revenue nivel registro
			EXEC WSXML_SFG.SFGREGISTROREVENUE_SetRevenueComisionEstandar @cCODREGISTROREVENUE,@cmlCOMISIONPOSESTANDAR
			EXEC WSXML_SFG.SFGREGISTROREVENUE_UpdateRevenueBaseValue @cCODREGISTROREVENUE,@cmlREVENUE
        END;

      END ELSE
        -- Verificar si se encontro comision (tarifa) diferencial
        BEGIN
          IF @cCODRANGOCOMISIONDIFAGR <> 0 BEGIN
            SELECT @cCODRANGOCOMISION = ID_RANGOCOMISION, @cCODTIPOCOMISION = CODTIPOCOMISION, @cCODTIPORANGO = CODTIPORANGO
              FROM WSXML_SFG.RANGOCOMISION
             WHERE ID_RANGOCOMISION = @cCODRANGOCOMISIONDIFAGR;
          END
          ELSE IF @cCODRANGOCOMISIONDIFRED <> 0 BEGIN
            SELECT @cCODRANGOCOMISION = ID_RANGOCOMISION, @cCODTIPOCOMISION = CODTIPOCOMISION, @cCODTIPORANGO = CODTIPORANGO
              FROM WSXML_SFG.RANGOCOMISION
             WHERE ID_RANGOCOMISION = @cCODRANGOCOMISIONDIFRED;
          END
          ELSE IF @cCODRANGOCOMISIONDIFDTO <> 0 BEGIN
            SELECT @cCODRANGOCOMISION = ID_RANGOCOMISION, @cCODTIPOCOMISION = CODTIPOCOMISION, @cCODTIPORANGO = CODTIPORANGO
              FROM WSXML_SFG.RANGOCOMISION
             WHERE ID_RANGOCOMISION = @cCODRANGOCOMISIONDIFDTO;
          END 
		  
           IF @@ROWCOUNT = 0 BEGIN
				SET @errormsg = 'No se pudo obtener valores para tarifa diferencial: Se prosigue con tarifa normal. ' + isnull(ERROR_MESSAGE ( )  , '');
				EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @p_TIPOADVERTENCIA,
										'REVENUE',
										@errormsg,
										1
				SET @errormsg = '-20060 Maximo numero de advertencias alcanzado: ' + isnull(ERROR_MESSAGE ( )  , '')
				RAISERROR(@errormsg, 16, 1);
			END 
        END;


        -- Calcular (Emular) Comision POS Estandar
        --DECLARE @cpsvcodeTIPOCOMISION   NUMERIC(22,0);
        SET @cpsvcalcVALORPORCENTUA = 0;
        SET @cpsvcalcVALORTRANSCCNL = 0;
        
		BEGIN
          -- Obtain Values
          SELECT @cpsvcodeTIPOCOMISION = CODTIPOCOMISION, @cpsvcalcVALORPORCENTUA = VALORPORCENTUAL, @cpsvcalcVALORTRANSCCNL = VALORTRANSACCIONAL
                       FROM WSXML_SFG.RANGOCOMISION
           INNER JOIN WSXML_SFG.RANGOCOMISIONDETALLE
              ON (CODRANGOCOMISION = ID_RANGOCOMISION)
           WHERE ID_RANGOCOMISION = @cCODRANGOCOMISIONESTANDAR;
          -- Emular
          IF @cpsvcodeTIPOCOMISION IN (1, 2, 3) BEGIN
            IF @cpsvcodeTIPOCOMISION = 1 BEGIN
              -- Porcentual
              SET @vCOMISIONPOSESTANDAR = (@cpsvcalcVALORPORCENTUA *
                                      @cTOTALVENTASBRUTAS) / 100;
              SET @annulmntVCOMESTANDAR = (@cpsvcalcVALORPORCENTUA *
                                      @annulmntVALORVENTAB) / 100;
            END
            ELSE IF @cpsvcodeTIPOCOMISION = 2 BEGIN
              -- Transaccional
              SET @vCOMISIONPOSESTANDAR = @cpsvcalcVALORTRANSCCNL *
                                      @cNUMTRANSACCIONES;
              SET @annulmntVCOMESTANDAR = @cpsvcalcVALORTRANSCCNL * @annulmntTX;
            END
            ELSE IF @cpsvcodeTIPOCOMISION = 3 BEGIN
              -- Mixto
              SET @vCOMISIONPOSESTANDAR = ((@cpsvcalcVALORPORCENTUA *
                                      @cTOTALVENTASBRUTAS) / 100) +
                                      (@cpsvcalcVALORTRANSCCNL *
                                      @cNUMTRANSACCIONES);
              SET @annulmntVCOMESTANDAR = ((@cpsvcalcVALORPORCENTUA *
                                      @annulmntVALORVENTAB) / 100) +
                                      (@cpsvcalcVALORTRANSCCNL * @annulmntTX);
            END 
          END
          ELSE BEGIN
            SET @vCOMISIONPOSESTANDAR = 0;
            SET @annulmntVCOMESTANDAR = 0;
          END 
        
		
		  IF @@ROWCOUNT > 1 BEGIN
            SET @vCOMISIONPOSESTANDAR = 0;
            SET @annulmntVCOMESTANDAR = 0;
		  END
		  IF @@ROWCOUNT = 0 BEGIN
			  SET @errormsg = '-20080 No existe comision estandar configurada para el producto ' +
										ISNULL(WSXML_SFG.PRODUCTO_CODIGO_F(@cCODPRODUCTO), '') +
										'. No se puede continuar'
				RAISERROR(@errormsg, 16, 1);
		  END
        END;


        -- A partir de este punto se tiene las reglas correctas:
        IF @cFLAGCOMISIONDIFERENCIALBIN <> 0 AND @cCOUNTCOMISIONDIFERENCIALBIN > 0 BEGIN
          /* Empty Record */
		  
          EXEC WSXML_SFG.SFGREGISTROREVENUE_AddEmptyRecord 
											@cCODENTRADAARCHIVOCONTROL,
                                            @pk_ID_REGISTROFACTURACION,
                                            @cCODTIPOREGISTRO,
                                            @cFECHA,
                                            @cCODPUNTODEVENTA,
                                            @cCODTIPOCONTRATOPDV,
                                            @cCODPRODUCTO,
                                            @cCODTIPOCONTRATOPRODUCTO,
                                            @cCODCOMPANIA,
                                            @cCODRANGOCOMISION,
                                            @cCODPRODUCTOREVENUE,
                                            @vCOMISIONPOSESTANDAR,
                                            @cCODREGISTROREVENUE OUT

          --Guarda la informacion de la comision diferencial a la que halla lugar
          IF @cCODRANGOCOMISIONDIFAGR > 0 OR @cCODRANGOCOMISIONDIFRED > 0 OR @cCODRANGOCOMISIONDIFDTO > 0 BEGIN

            EXEC WSXML_SFG.SFGREGISTROREVENUE_SETREVENUEMULTIPLEDIFERENCIAL
															@cCODREGISTROREVENUE,
                                                            @pk_ID_REGISTROFACTURACION,
                                                            @cCODPRODUCTO,
                                                            @cCODREDPDV,
                                                            @cCODAGRUPACIONPUNTODEVENTA,
                                                            @cCODCIUDAD

          END 

          /* Iterate every reference, making the diferencial check first */
            DECLARE @lstTRANSACCIONES WSXML_SFG.IDSTRINGFLOATVALUE;
          BEGIN
            INSERT INTO @lstTRANSACCIONES
			SELECT ID_REGISTROFACTREFERENCIA,
                   BINTARJETA,
                   VALORTRANSACCION
            FROM WSXML_SFG.REGISTROFACTREFERENCIA
            WHERE CODREGISTROFACTURACION = @pk_ID_REGISTROFACTURACION; -- AND ANULADO = 0;

            IF @@ROWCOUNT >  0 BEGIN
              DECLARE itx CURSOR FOR SELECT ID, STRINGVALUE, FLOATVALUE FROM @lstTRANSACCIONES--.First .. lstTRANSACCIONES.Last 
			  OPEN itx;
			  
			  DECLARE @itx__ID NUMERIC(38,0), @itx__STRINGVALUE NVARCHAR(50), @itx__FLOATVALUE FLOAT
				 FETCH NEXT FROM itx INTO @itx__ID, @itx__STRINGVALUE, @itx__FLOATVALUE;
				 WHILE @@FETCH_STATUS=0
				 BEGIN
                  DECLARE @ctxCODRANGOCOMISION            NUMERIC(22,0) = @cCODRANGOCOMISION;
                  DECLARE @ctxCODTIPOCOMISION             NUMERIC(22,0) = @cCODTIPOCOMISION;
                  DECLARE @ctxCODTIPORANGO                NUMERIC(22,0) = @cCODTIPORANGO;
                  SET @vtxREVENUE                     = 0;
                  DECLARE @ctxCODRANGOCOMISIONDETALLE     NUMERIC(22,0) = 0;
                  DECLARE @ctxCODREGISTROREVENUETRANSACCI NUMERIC(22,0);

                  /* Check for type */
                  IF @cCOUNTADVTRANSACCIONES > 0 BEGIN
                      DECLARE @txTipoTransaccion CHAR(1);
                    BEGIN
                      SELECT @txTipoTransaccion = TIPOTRANSACCION
                        FROM WSXML_SFG.REGISTROFACTREFERENCIA
                       WHERE ID_REGISTROFACTREFERENCIA = @itx__ID;
					   
                      --DECLARE idv CURSOR FOR cLISTADVTRANSACCIONES.First .. cLISTADVTRANSACCIONES.Last OPEN idv;
					 DECLARE @idv2__ID NUMERIC(38,0), @idv2__VALUE NVARCHAR(2000)
					 FETCH NEXT FROM @cLISTADVTRANSACCIONES INTO @idv2__ID, @idv2__VALUE;
					 WHILE @@FETCH_STATUS=0
					 BEGIN
                        IF @idv2__VALUE = @txTipoTransaccion AND @idv2__ID = 0 BEGIN
                          SET @ctxCODTIPOCOMISION = 0; /* Parameter forces zero value */
                          BREAK;
						END
						FETCH NEXT FROM @cLISTADVTRANSACCIONES INTO @idv2__ID, @idv2__VALUE;
					 END
					 CLOSE @cLISTADVTRANSACCIONES;
					 DEALLOCATE @cLISTADVTRANSACCIONES;
                     --  END WHILE 1=1 BEGIN;
                    END;

                  END ELSE BEGIN
                    SET @ctxCODTIPOCOMISION = 0; /* Parameter forces zero value */
                  END
                  /* Get info */
                  IF @ctxCODTIPOCOMISION <> 0 BEGIN
					
					DECLARE @ibx__ID NUMERIC(38,0), @ibx__STRINGVALUE NVARCHAR(50), @ibx__FLOATVALUE FLOAT
					FETCH NEXT FROM @cLISTCOMISIONDIFERENCIALBIN INTO @ibx__ID, @ibx__STRINGVALUE, @ibx__FLOATVALUE;
                    WHILE @@FETCH_STATUS=0 BEGIN
					--FOR ibx IN cLISTCOMISIONDIFERENCIALBIN.First .. cLISTCOMISIONDIFERENCIALBIN.Last WHILE 1=1 BEGIN
                      IF @ibx__STRINGVALUE = @itx__STRINGVALUE BEGIN
                        SELECT @ctxCODRANGOCOMISION = ID_RANGOCOMISION,
                               @ctxCODTIPOCOMISION = CODTIPOCOMISION,
                               @ctxCODTIPORANGO = CODTIPORANGO
						   FROM WSXML_SFG.RANGOCOMISION
                         WHERE ID_RANGOCOMISION =
                               CONVERT(NUMERIC,@ibx__FLOATVALUE);
                        BREAK;
                      END
					  FETCH NEXT FROM @cLISTCOMISIONDIFERENCIALBIN INTO @ibx__ID, @ibx__STRINGVALUE, @ibx__FLOATVALUE;
                    END --WHILE 1=1 BEGIN;
					CLOSE @cLISTCOMISIONDIFERENCIALBIN
					DEALLOCATE @cLISTCOMISIONDIFERENCIALBIN
					
                  END
				  
                  IF @ctxCODTIPOCOMISION IN (1, 2, 3) BEGIN
                    DECLARE @ctxvalcalcVALORPORCENTUA FLOAT = 0;
                    DECLARE @ctxvalcalcVALORTRANSCCNL FLOAT = 0;
                    BEGIN
                      SELECT @ctxCODRANGOCOMISIONDETALLE = ID_RANGOCOMISIONDETALLE,
                             @ctxvalcalcVALORPORCENTUA = VALORPORCENTUAL,
                             @ctxvalcalcVALORTRANSCCNL = VALORTRANSACCIONAL
                                               FROM WSXML_SFG.RANGOCOMISIONDETALLE
                       WHERE CODRANGOCOMISION = @ctxCODRANGOCOMISION;
                      SET @vtxREVENUE = CASE WHEN @ctxCODTIPOCOMISION IN (1, 3) THEN (@ctxvalcalcVALORPORCENTUA * @itx__FLOATVALUE) / 100 ELSE 0 END 
									 + CASE WHEN @ctxCODTIPOCOMISION IN (2, 3) THEN (@ctxvalcalcVALORTRANSCCNL * 1) ELSE 0 END;

                    END 
                  END ELSE IF @ctxCODTIPOCOMISION IN (4, 5, 6) BEGIN
                    DECLARE ttxCommission CURSOR FOR SELECT ID_RANGOCOMISIONDETALLE,
                                                 RANGOINICIAL,
                                                 RANGOFINAL,
                                                 VALORPORCENTUAL,
                                                 VALORTRANSACCIONAL
                                            FROM WSXML_SFG.RANGOCOMISIONDETALLE
                                           WHERE CODRANGOCOMISION =
                                                 @ctxCODRANGOCOMISION
                                           ORDER BY RANGOINICIAL; OPEN ttxCommission;
					 DECLARE @ttxCommission__ID_RANGOCOMISIONDETALLE NUMERIC(38,0), @ttxCommission__RANGOINICIAL FLOAT, @ttxCommission__RANGOFINAL FLOAT, @ttxCommission__VALORPORCENTUAL FLOAT, @ttxCommission__VALORTRANSACCIONAL FLOAT
					 FETCH NEXT FROM ttxCommission INTO @ttxCommission__ID_RANGOCOMISIONDETALLE, @ttxCommission__RANGOINICIAL, @ttxCommission__RANGOFINAL, @ttxCommission__VALORPORCENTUAL, @ttxCommission__VALORTRANSACCIONAL					   ;
					 WHILE @@FETCH_STATUS=0
					 BEGIN
                      IF @itx__FLOATVALUE >= @ttxCommission__RANGOINICIAL AND
                          (@itx__FLOATVALUE <= @ttxCommission__RANGOFINAL OR
                            @ttxCommission__RANGOFINAL IS NULL) BEGIN
                        SET @vtxREVENUE  = CASE WHEN @ctxCODTIPOCOMISION IN (4, 6) THEN (@ttxCommission__VALORPORCENTUAL * @itx__FLOATVALUE) / 100 ELSE 0 END
                                                + CASE WHEN @ctxCODTIPOCOMISION IN (5, 6) THEN  (@ttxCommission__VALORTRANSACCIONAL * 1)  ELSE 0 END;
                        SET @ctxCODRANGOCOMISIONDETALLE = @ttxCommission__ID_RANGOCOMISIONDETALLE;
                        BREAK;
                      END
												
					  FETCH NEXT FROM ttxCommission INTO @ttxCommission__ID_RANGOCOMISIONDETALLE, @ttxCommission__RANGOINICIAL, @ttxCommission__RANGOFINAL, @ttxCommission__VALORPORCENTUAL, @ttxCommission__VALORTRANSACCIONAL					   ;
					 CLOSE ttxCommission;
					 DEALLOCATE ttxCommission; 

                  END
                  SET @vREVENUE = @vREVENUE + @vtxREVENUE;
				  
                  IF @ctxCODTIPOCOMISION <> 0 BEGIN
                    EXEC WSXML_SFG.SFGREGISTROREVENUETRANSACCION_AddRecord 
															@cCODREGISTROREVENUE,
                                                            @itx__ID,
                                                            @ctxCODRANGOCOMISION,
                                                            @ctxCODRANGOCOMISIONDETALLE,
                                                            @vtxREVENUE,
                                                            @ctxCODREGISTROREVENUETRANSACCI OUT
                  END 
                
				END

					FETCH NEXT FROM itx INTO @itx__ID, @itx__STRINGVALUE, @itx__FLOATVALUE;
                 END;
                 CLOSE itx;
                 DEALLOCATE itx;
            END
            -- Actualizar Revenue nivel registro
            EXEC WSXML_SFG.SFGREGISTROREVENUE_UpdateRevenueTotalValue @cCODREGISTROREVENUE, @vREVENUE
          END;

        END
        ELSE BEGIN
          IF @cCODTIPOCOMISION IN (1, 2, 3) BEGIN
              DECLARE @tmpIDRANGOCOMISIONDET  NUMERIC(22,0);
              DECLARE @tmpREVENUETRANSACCION  NUMERIC(22,0);
              SET @cvalcalcVALORPORCENTUA = 0;
              SET @cvalcalcVALORTRANSCCNL = 0;
            BEGIN
              SELECT @tmpIDRANGOCOMISIONDET = ID_RANGOCOMISIONDETALLE,
                     @cvalcalcVALORPORCENTUA = VALORPORCENTUAL,
                     @cvalcalcVALORTRANSCCNL = VALORTRANSACCIONAL
                               FROM WSXML_SFG.RANGOCOMISIONDETALLE
               WHERE CODRANGOCOMISION = @cCODRANGOCOMISION;
              IF @cCODTIPOCOMISION = 1 BEGIN
                -- Porcentual
                SET @vREVENUE            = (@cvalcalcVALORPORCENTUA *
                                       @cTOTALVENTASBRUTAS) / 100;
                SET @annulmntREVENUEBASE = (@cvalcalcVALORPORCENTUA *
                                       @annulmntVALORVENTAB) / 100;
              END
              ELSE IF @cCODTIPOCOMISION = 2 BEGIN
                -- Transaccional
                SET @vREVENUE            = @cvalcalcVALORTRANSCCNL *
                                       @cNUMTRANSACCIONES;
                SET @annulmntREVENUEBASE = @cvalcalcVALORTRANSCCNL * @annulmntTX;
              END
              ELSE IF @cCODTIPOCOMISION = 3 BEGIN
                -- Mixto
                SET @vREVENUE            = ((@cvalcalcVALORPORCENTUA *
                                       @cTOTALVENTASBRUTAS) / 100) +
                                       (@cvalcalcVALORTRANSCCNL *
                                       @cNUMTRANSACCIONES);
                SET @annulmntREVENUEBASE = ((@cvalcalcVALORPORCENTUA *
                                       @annulmntVALORVENTAB) / 100) +
                                       (@cvalcalcVALORTRANSCCNL * @annulmntTX);
              END 

              IF @p_CODAJUSTEFACTURACION IS NOT NULL AND NOT @cCODPRODUCTO IN (1872,1873,1874,1875)/*MATRIX*/ BEGIN
                EXEC WSXML_SFG.SFGREGISTROREVENUE_AddReplaceAppendRecord
														  @cCODENTRADAARCHIVOCONTROL,
                                                          @pk_ID_REGISTROFACTURACION,
                                                          @cCODTIPOREGISTRO,
                                                          @cFECHA,
                                                          @cCODPUNTODEVENTA,
                                                          @cCODTIPOCONTRATOPDV,
                                                          @cCODPRODUCTO,
                                                          @cCODTIPOCONTRATOPRODUCTO,
                                                          @cCODCOMPANIA,
                                                          @cCODRANGOCOMISION,
                                                          @annulmntREVENUEBASE,
                                                          @cCODPRODUCTOREVENUE,
                                                          @annulmntVCOMESTANDAR,
                                                          @cCODREGISTROREVENUE OUT

                --Guarda la informacion de la comision diferencial a la que halla lugar
                IF @cCODRANGOCOMISIONDIFAGR > 0 OR
                   @cCODRANGOCOMISIONDIFRED > 0 OR
                   @cCODRANGOCOMISIONDIFDTO > 0 BEGIN

                  EXEC WSXML_SFG.SFGREGISTROREVENUE_SETREVENUEMULTIPLEDIFERENCIAL
																@cCODREGISTROREVENUE,
                                                                @pk_ID_REGISTROFACTURACION,
                                                                @cCODPRODUCTO,
                                                                @cCODREDPDV,
                                                                @cCODAGRUPACIONPUNTODEVENTA,
                                                                @cCODCIUDAD

                END 

                IF @p_CODREGISTROFACTREFERENCIA IS NOT NULL BEGIN
                  EXEC WSXML_SFG.SFGREGISTROREVENUETRANSACCION_AddReplaceAppendRecord 
																		@cCODREGISTROREVENUE,
                                                                       @p_CODREGISTROFACTREFERENCIA,
                                                                       @cCODRANGOCOMISION,
                                                                       @tmpIDRANGOCOMISIONDET,
                                                                       @annulmntREVENUEBASE,
                                                                       @tmpREVENUETRANSACCION OUT
                END 
                EXEC WSXML_SFG.SFGAJUSTEFACTURACION_UpdateRecordRevenueValues 
																@p_CODAJUSTEFACTURACION,
                                                               @annulmntREVENUEBASE,
                                                               @annulmntREVENUEBASE,
                                                               @annulmntVCOMESTANDAR
              END ELSE BEGIN
                EXEC WSXML_SFG.SFGREGISTROREVENUE_AddReplaceRecord @cCODENTRADAARCHIVOCONTROL,
                                                    @pk_ID_REGISTROFACTURACION,
                                                    @cCODTIPOREGISTRO,
                                                    @cFECHA,
                                                    @cCODPUNTODEVENTA,
                                                    @cCODTIPOCONTRATOPDV,
                                                    @cCODPRODUCTO,
                                                    @cCODTIPOCONTRATOPRODUCTO,
                                                    @cCODCOMPANIA,
                                                    @cCODRANGOCOMISION,
                                                    @vREVENUE,
                                                    @cCODPRODUCTOREVENUE,
                                                    @vCOMISIONPOSESTANDAR,
                                                    @cCODREGISTROREVENUE OUT

                --Guarda la informacion de la comision diferencial a la que halla lugar
                IF @cCODRANGOCOMISIONDIFAGR > 0 OR
                   @cCODRANGOCOMISIONDIFRED > 0 OR
                   @cCODRANGOCOMISIONDIFDTO > 0 BEGIN

                  EXEC WSXML_SFG.SFGREGISTROREVENUE_SETREVENUEMULTIPLEDIFERENCIAL
																   @cCODREGISTROREVENUE,
                                                                   @pk_ID_REGISTROFACTURACION,
                                                                   @cCODPRODUCTO,
                                                                   @cCODREDPDV,
                                                                   @cCODAGRUPACIONPUNTODEVENTA,
                                                                   @cCODCIUDAD

                END 

              END
            END;

          END
          ELSE IF @cCODTIPOCOMISION IN (4, 5, 6) BEGIN
            -- Empty Record
            IF @p_CODAJUSTEFACTURACION IS NOT NULL BEGIN
              EXEC WSXML_SFG.SFGREGISTROREVENUE_AddReplaceAppendEmptyRecord 
															 @cCODENTRADAARCHIVOCONTROL,
                                                             @pk_ID_REGISTROFACTURACION,
                                                             @cCODTIPOREGISTRO,
                                                             @cFECHA,
                                                             @cCODPUNTODEVENTA,
                                                             @cCODTIPOCONTRATOPDV,
                                                             @cCODPRODUCTO,
                                                             @cCODTIPOCONTRATOPRODUCTO,
                                                             @cCODCOMPANIA,
                                                             @cCODRANGOCOMISION,
                                                             @cCODPRODUCTOREVENUE,
                                                             @annulmntVCOMESTANDAR,
                                                             @cCODREGISTROREVENUE OUT

              --Guarda la informacion de la comision diferencial a la que halla lugar
              IF @cCODRANGOCOMISIONDIFAGR > 0 OR @cCODRANGOCOMISIONDIFRED > 0 OR
                 @cCODRANGOCOMISIONDIFDTO > 0 BEGIN

                EXEC WSXML_SFG.SFGREGISTROREVENUE_SETREVENUEMULTIPLEDIFERENCIAL
																@cCODREGISTROREVENUE,
                                                                @pk_ID_REGISTROFACTURACION,
                                                                @cCODPRODUCTO,
                                                                @cCODREDPDV,
                                                                @cCODAGRUPACIONPUNTODEVENTA,
                                                                @cCODCIUDAD

              END 

              IF @p_CODREGISTROFACTREFERENCIA IS NULL BEGIN
			  
                EXEC WSXML_SFG.SFGTMPTRACE_TraceLog 'No se puede calcular revenue de rangos para un archivo de transacciones agrupadas'
                SET @annulmntREVENUEBASE = 0;
              END
              ELSE BEGIN
                DECLARE tCommission CURSOR FOR SELECT ID_RANGOCOMISIONDETALLE,
                                           RANGOINICIAL,
                                           RANGOFINAL,
                                           VALORPORCENTUAL,
                                           VALORTRANSACCIONAL
                                      FROM WSXML_SFG.RANGOCOMISIONDETALLE
                                     WHERE CODRANGOCOMISION =
                                           @cCODRANGOCOMISION
                                     ORDER BY RANGOINICIAL; OPEN tCommission;
				--DECLARE @tCommission__ID_RANGOCOMISIONDETALLE NUMERIC(38,0), @tCommission__RANGOINICIAL FLOAT, @tCommission__RANGOFINAL FLOAT,
                --                           @tCommission__VALORPORCENTUAL FLOAT, @tCommission__VALORTRANSACCIONAL FLOAT
										   
				 FETCH tCommission INTO @tCommission__ID_RANGOCOMISIONDETALLE, @tCommission__RANGOINICIAL, @tCommission__RANGOFINAL,
                                           @tCommission__VALORPORCENTUAL, @tCommission__VALORTRANSACCIONAL;
				 WHILE @@FETCH_STATUS=0
				 BEGIN
				  IF @annulmntVALOR >= @tCommission__RANGOINICIAL AND
                     (@annulmntVALOR <= @tCommission__RANGOFINAL OR
                     @tCommission__RANGOFINAL IS NULL) BEGIN
                    IF @cCODTIPOCOMISION = 4 BEGIN
                      -- Rangos Porcentual
                      SET @annulmntREVENUEBASE = (@tCommission__VALORPORCENTUAL *
                                             @annulmntVALOR) / 100;
                    END
                    ELSE IF @cCODTIPOCOMISION = 5 BEGIN
                      -- Rangos Transaccional
                      SET @annulmntREVENUEBASE = @tCommission__VALORTRANSACCIONAL * (1);
                    END
                    ELSE IF @cCODTIPOCOMISION = 6 BEGIN
                      -- Rangos Mixto
                      SET @annulmntREVENUEBASE = ((@tCommission__VALORPORCENTUAL *
                                             @annulmntVALOR) / 100) +
                                             (@tCommission__VALORTRANSACCIONAL * (1));
                    END 
                    EXEC WSXML_SFG.SFGREGISTROREVENUETRANSACCION_AddReplaceAppendRecord 
																		 @cCODREGISTROREVENUE,
                                                                         @p_CODREGISTROFACTREFERENCIA,
                                                                         @cCODRANGOCOMISION,
                                                                         @tCommission__ID_RANGOCOMISIONDETALLE,
                                                                         @annulmntREVENUEBASE,
                                                                         @annulmntCODRGRVTRANS OUT
                    BREAK;
                  END 
					
					FETCH tCommission INTO @tCommission__ID_RANGOCOMISIONDETALLE, @tCommission__RANGOINICIAL, @tCommission__RANGOFINAL,
                                           @tCommission__VALORPORCENTUAL, @tCommission__VALORTRANSACCIONAL;
                 END;
                CLOSE tCommission;
                DEALLOCATE tCommission;
              END 
              
			  EXEC WSXML_SFG.SFGREGISTROREVENUE_UpdateAppendRevenueTotalValue @cCODREGISTROREVENUE,
                                                               @annulmntREVENUEBASE
              EXEC WSXML_SFG.SFGAJUSTEFACTURACION_UpdateRecordRevenueValues @p_CODAJUSTEFACTURACION,
                                                             0,
                                                             @annulmntREVENUEBASE,
                                                             @annulmntVCOMESTANDAR
            END
            ELSE BEGIN
              EXEC WSXML_SFG.SFGREGISTROREVENUE_AddReplaceEmptyRecord 
													   @cCODENTRADAARCHIVOCONTROL,
                                                       @pk_ID_REGISTROFACTURACION,
                                                       @cCODTIPOREGISTRO,
                                                       @cFECHA,
                                                       @cCODPUNTODEVENTA,
                                                       @cCODTIPOCONTRATOPDV,
                                                       @cCODPRODUCTO,
                                                       @cCODTIPOCONTRATOPRODUCTO,
                                                       @cCODCOMPANIA,
                                                       @cCODRANGOCOMISION,
                                                       @cCODPRODUCTOREVENUE,
                                                       @vCOMISIONPOSESTANDAR,
                                                       @cCODREGISTROREVENUE OUT

              --Guarda la informacion de la comision diferencial a la que halla lugar
              IF @cCODRANGOCOMISIONDIFAGR > 0 OR @cCODRANGOCOMISIONDIFRED > 0 OR
                 @cCODRANGOCOMISIONDIFDTO > 0 BEGIN

                EXEC WSXML_SFG.SFGREGISTROREVENUE_SETREVENUEMULTIPLEDIFERENCIAL
																@cCODREGISTROREVENUE,
                                                                @pk_ID_REGISTROFACTURACION,
                                                                @cCODPRODUCTO,
                                                                @cCODREDPDV,
                                                                @cCODAGRUPACIONPUNTODEVENTA,
                                                                @cCODCIUDAD

              END 

              -- Iterar transacciones
                DECLARE @lstTRANSACCIONES2 WSXML_SFG.TRANSACCIONVALOR;
              BEGIN
				INSERT INTO @lstTRANSACCIONES2
                SELECT ID_REGISTROFACTREFERENCIA, VALORTRANSACCION
                  FROM WSXML_SFG.REGISTROFACTREFERENCIA
                 WHERE CODREGISTROFACTURACION = @pk_ID_REGISTROFACTURACION;
                IF @@ROWCOUNT  > 0 BEGIN
                  DECLARE itx CURSOR FOR SELECT ID_REGISTROFACTREFERENCIA, VALORTRANSACCION FROM  @lstTRANSACCIONES2--.First .. lstTRANSACCIONES.Last 
				  OPEN itx;
 				  
				  DECLARE @itx__ID_REGISTROFACTREFERENCIA NUMERIC(38,0), @itx__VALORTRANSACCION FLOAT
				  FETCH NEXT FROM itx INTO @itx__ID_REGISTROFACTREFERENCIA, @itx__VALORTRANSACCION;
				  WHILE @@FETCH_STATUS=0
				  
				  BEGIN
                      SET @vtxREVENUE                     = 0;
                      DECLARE @cCODRANGOCOMISIONDETALLE       NUMERIC(22,0) = 0;
                      DECLARE @cCODREGISTROREVENUETRANSACCION NUMERIC(22,0);
                    BEGIN
                      DECLARE tCommission CURSOR FOR SELECT ID_RANGOCOMISIONDETALLE,
                                                 RANGOINICIAL,
                                                 RANGOFINAL,
                                                 VALORPORCENTUAL,
                                                 VALORTRANSACCIONAL
                                            FROM WSXML_SFG.RANGOCOMISIONDETALLE
                                           WHERE CODRANGOCOMISION =
                                                 @cCODRANGOCOMISION
                                           ORDER BY RANGOINICIAL; OPEN tCommission;
						 
						 --DECLARE @tCommission__ID_RANGOCOMISIONDETALLE NUMERIC(38,0),  @tCommission__RANGOINICIAL FLOAT, 
						--	@tCommission__RANGOFINAL FLOAT, @tCommission__VALORPORCENTUAL FLOAT, @tCommission__VALORTRANSACCIONAL FLOAT
							
						 FETCH NEXT FROM tCommission INTO @tCommission__ID_RANGOCOMISIONDETALLE,  @tCommission__RANGOINICIAL, @tCommission__RANGOFINAL, @tCommission__VALORPORCENTUAL, @tCommission__VALORTRANSACCIONAL;
						 WHILE @@FETCH_STATUS=0
						 BEGIN
							IF @itx__VALORTRANSACCION >= @tCommission__RANGOINICIAL AND
								(@itx__VALORTRANSACCION <= @tCommission__RANGOFINAL OR
								  @tCommission__RANGOFINAL IS NULL) BEGIN
							  IF @cCODTIPOCOMISION = 4 BEGIN
								-- Rangos Porcentual
								SET @vtxREVENUE = (@tCommission__VALORPORCENTUAL * @itx__VALORTRANSACCION) / 100;
							  END
							  ELSE IF @cCODTIPOCOMISION = 5 BEGIN
								-- Rangos Transaccional
								SET @vtxREVENUE = @tCommission__VALORTRANSACCIONAL * (1);
							  END
							  ELSE IF @cCODTIPOCOMISION = 6 BEGIN
								-- Rangos Mixto
								SET @vtxREVENUE = ((@tCommission__VALORPORCENTUAL * @itx__VALORTRANSACCION) / 100) +
											  (@tCommission__VALORTRANSACCIONAL * (1));
							  END 
							  SET @cCODRANGOCOMISIONDETALLE = @tCommission__ID_RANGOCOMISIONDETALLE;
							  BREAK;
							  
							END
							FETCH NEXT FROM tCommission INTO @tCommission__ID_RANGOCOMISIONDETALLE,  @tCommission__RANGOINICIAL, @tCommission__RANGOFINAL, @tCommission__VALORPORCENTUAL, @tCommission__VALORTRANSACCIONAL;
                         END
                         CLOSE tCommission;
                         DEALLOCATE tCommission;
						 
						--END WHILE 1=1 BEGIN;
					  
						 SET @vREVENUE = @vREVENUE + @vtxREVENUE;
						 EXEC WSXML_SFG.SFGREGISTROREVENUETRANSACCION_AddReplaceRecord 
																	 @cCODREGISTROREVENUE,
                                                                     @itx__ID_REGISTROFACTREFERENCIA,
                                                                     @cCODRANGOCOMISION,
                                                                     @cCODRANGOCOMISIONDETALLE,
                                                                     @vtxREVENUE,
                                                                     @cCODREGISTROREVENUETRANSACCION OUT
                    END;
					FETCH NEXT FROM itx INTO @itx__ID_REGISTROFACTREFERENCIA, @itx__VALORTRANSACCION;
					
                  END --WHILE 1=1 BEGIN;
				  CLOSE itx
				  DEALLOCATE itx
                END
                -- Actualizar Revenue nivel registro
                EXEC WSXML_SFG.SFGREGISTROREVENUE_UpdateRevenueTotalValue @cCODREGISTROREVENUE, @vREVENUE

              END;

            END 
          END
        END
      END

      -- Actualizar Valores de Padre (Producto)
      EXEC WSXML_SFG.SFGPRODUCTOREVENUE_UpdateProductEntry @cCODPRODUCTOREVENUE, @vREVENUE
    END 

    /* Si existe calculo de fijo, adjuntar al revenue base */
      DECLARE @vtotalfijo FLOAT = 0;
    BEGIN
      SELECT @vtotalfijo = ISNULL(SUM(REVENUE), 0)
        FROM WSXML_SFG.REGISTROREVENUEINCENTIVO
       WHERE CODREGISTROREVENUE = @cCODREGISTROREVENUE;
      IF @vtotalfijo <> 0 BEGIN
        UPDATE WSXML_SFG.REGISTROREVENUE
           SET REVENUETOTAL = REVENUETOTAL + @vtotalfijo
         WHERE ID_REGISTROREVENUE = @cCODREGISTROREVENUE;
      END 
    END;


    /* Recalcular Ingresos y Egresos, Locales y Corporativos, y Costos Variables*/
      -- Importes Iniciales
      DECLARE @vCANTIDADVENTA         NUMERIC(22,0) = 0;
      DECLARE @vVALORVENTA            FLOAT = 0;
      DECLARE @vVALORVENTABRUTA       FLOAT = 0;
      DECLARE @vVALORINGRESOPDV       FLOAT = 0;
      DECLARE @vVALORIVAINGRESOPDV    FLOAT = 0;
      DECLARE @vREVENUECALCULADO      FLOAT = 0;
      DECLARE @vVALORCOMISIONESTANDAR FLOAT = 0;
      DECLARE @vVALORVENTASINAJUSTES  FLOAT = 0;
      DECLARE @vVALORDESCUENTOS       FLOAT = 0;
      -- Reglas
      --DECLARE @cCODCOMPANIA               NUMERIC(22,0);
      DECLARE @cCODSERVICIO               NUMERIC(22,0);
      --DECLARE @cCODTIPOCONTRATOPDV        NUMERIC(22,0);
      --DECLARE @cCODTIPOCONTRATOPRODUCTO   NUMERIC(22,0);
      --DECLARE @cCODPUNTODEVENTA           NUMERIC(22,0);
      --DECLARE @cCODPRODUCTO               NUMERIC(22,0);
      --DECLARE @cCODREDPDV                 NUMERIC(22,0);
      --DECLARE @cCODAGRUPACIONPUNTODEVENTA NUMERIC(22,0);
      --DECLARE @cCODCIUDAD                 NUMERIC(22,0);
      --DECLARE @cCODTIPOREGISTRO           NUMERIC(22,0);
      -- Identificadores
      DECLARE @xCODREGISTROREVENUE NUMERIC(22,0);
      DECLARE @xCODPRODUCTOREVENUE NUMERIC(22,0);
      -- Importes segundo nivel
      DECLARE @vINGRESOCORPORATIVO        FLOAT = 0;
      DECLARE @vEGRESOCORPORATIVO         FLOAT = 0;
      DECLARE @vINGRESOLOCAL              FLOAT = 0;
      DECLARE @vEGRESOLOCAL               FLOAT = 0;
      DECLARE @annulmntINGRESOCORPORATIVO FLOAT = 0;
      DECLARE @annulmntEGRESOCORPORATIVO  FLOAT = 0;
      DECLARE @annulmntINGRESOLOCAL       FLOAT = 0;
      DECLARE @annulmntEGRESOLOCAL        FLOAT = 0;
    BEGIN
      EXEC WSXML_SFG.SFGREGISTROREVENUE_GetCalculatedRevenueValues
								 @pk_ID_REGISTROFACTURACION,
                                 @vCANTIDADVENTA,
                                 @vVALORVENTA,
                                 @vVALORVENTABRUTA,
                                 @vVALORINGRESOPDV,
                                 @vVALORIVAINGRESOPDV,
                                 @vREVENUECALCULADO,
                                 @vVALORCOMISIONESTANDAR,
                                 @vVALORDESCUENTOS,
                                 @cCODCOMPANIA OUT,
                                 @cCODSERVICIO OUT,
                                 @cCODTIPOCONTRATOPDV OUT,
                                 @cCODTIPOCONTRATOPRODUCTO OUT,
                                 @cCODPUNTODEVENTA OUT,
                                 @cCODPRODUCTO OUT,
                                 @cCODREDPDV OUT,
                                 @cCODAGRUPACIONPUNTODEVENTA OUT,
                                 @cCODCIUDAD OUT,
                                 @xCODREGISTROREVENUE OUT,
                                 @xCODPRODUCTOREVENUE OUT

      -- Configuracion P y G para calcular ingresos y egresos
        DECLARE @xCONFIGURACIONINGRESOCORP  NUMERIC(22,0);
        DECLARE @xCONFIGURACIONEGRESOCORP   NUMERIC(22,0);
        DECLARE @xCONFIGURACIONINGRESOLOCAL NUMERIC(22,0);
        DECLARE @xCONFIGURACIONEGRESOLOCAL  NUMERIC(22,0);
      BEGIN
        BEGIN
			BEGIN TRY
			  EXEC WSXML_SFG.SFGCONFIGURACIONPYG_GetConfiguracionRegistro 
														   @cacheconfigpyg,
														   @cCODSERVICIO,
														   @cCODTIPOCONTRATOPRODUCTO,
														   @cCODTIPOCONTRATOPDV,
														   @xCONFIGURACIONINGRESOCORP OUT,
														   @xCONFIGURACIONEGRESOCORP OUT,
														   @xCONFIGURACIONINGRESOLOCAL OUT,
														   @xCONFIGURACIONEGRESOLOCAL OUT
			END TRY
			BEGIN CATCH
				SET @xCONFIGURACIONINGRESOCORP  = 0;
				SET @xCONFIGURACIONEGRESOCORP   = 0;
				SET @xCONFIGURACIONINGRESOLOCAL = 0;
				SET @xCONFIGURACIONEGRESOLOCAL  = 0;
			END CATCH
        END;

	 --Guillermo Ni?o 30 07 2013
           --Modificacion calculo de ventas sin ajustes

           SELECT @cCODTIPOREGISTRO = CODTIPOREGISTRO
           FROM WSXML_SFG.REGISTROFACTURACION
           WHERE ID_REGISTROFACTURACION = @pk_ID_REGISTROFACTURACION ;
           IF @cCODTIPOREGISTRO in (1,3) /*Ventas*/ BEGIN
              SET @vVALORVENTASINAJUSTES= @vVALORVENTABRUTA;
            END
            ELSE BEGIN
              SET @vVALORVENTASINAJUSTES= 0;
            END 
        -- Calcular y actualizar REGISTROREVENUE
        SET @vINGRESOCORPORATIVO        = WSXML_SFG.SFGCONFIGURACIONPYG_TranslateFigure(@xCONFIGURACIONINGRESOCORP,
                                                                          @cCODTIPOCONTRATOPDV,
                                                                          @vCANTIDADVENTA,
                                                                          @vVALORVENTABRUTA,
                                                                          @vVALORINGRESOPDV,
                                                                          @vVALORIVAINGRESOPDV,
                                                                          @vREVENUECALCULADO,
                                                                          @vVALORCOMISIONESTANDAR,
                                                                          @vINGRESOCORPORATIVO,
                                                                          @vEGRESOCORPORATIVO,
                                                                          @vINGRESOLOCAL,
                                                                          @vEGRESOLOCAL,
                                                                          @vVALORVENTASINAJUSTES,
                                                                          @vVALORDESCUENTOS);
        SET @annulmntINGRESOCORPORATIVO = WSXML_SFG.SFGCONFIGURACIONPYG_TranslateFigure(@xCONFIGURACIONINGRESOCORP,
                                                                          @cCODTIPOCONTRATOPDV,
                                                                          @annulmntTX,
                                                                          @annulmntVALORVENTAB,
                                                                          @annulmntINGRESOPDV,
                                                                          @annulmntIVAINGRESOPDV,
                                                                          @annulmntREVENUEBASE,
                                                                          @annulmntVCOMESTANDAR,
                                                                          @annulmntINGRESOCORPORATIVO,
                                                                          @annulmntEGRESOCORPORATIVO,
                                                                          @annulmntINGRESOLOCAL,
                                                                          @annulmntEGRESOLOCAL,
                                                                          @vVALORVENTASINAJUSTES,
                                                                          @vVALORDESCUENTOS);
        SET @vEGRESOCORPORATIVO         = WSXML_SFG.SFGCONFIGURACIONPYG_TranslateFigure(@xCONFIGURACIONEGRESOCORP,
                                                                          @cCODTIPOCONTRATOPDV,
                                                                          @vCANTIDADVENTA,
                                                                          @vVALORVENTABRUTA,
                                                                          @vVALORINGRESOPDV,
                                                                          @vVALORIVAINGRESOPDV,
                                                                          @vREVENUECALCULADO,
                                                                          @vVALORCOMISIONESTANDAR,
                                                                          @vINGRESOCORPORATIVO,
                                                                          @vEGRESOCORPORATIVO,
                                                                          @vINGRESOLOCAL,
                                                                          @vEGRESOLOCAL,
                                                                          @vVALORVENTASINAJUSTES,
                                                                          @vVALORDESCUENTOS);
        SET @annulmntEGRESOCORPORATIVO  = WSXML_SFG.SFGCONFIGURACIONPYG_TranslateFigure(@xCONFIGURACIONEGRESOCORP,
                                                                          @cCODTIPOCONTRATOPDV,
                                                                          @annulmntTX,
                                                                          @annulmntVALORVENTAB,
                                                                          @annulmntINGRESOPDV,
                                                                          @annulmntIVAINGRESOPDV,
                                                                          @annulmntREVENUEBASE,
                                                                          @annulmntVCOMESTANDAR,
                                                                          @annulmntINGRESOCORPORATIVO,
                                                                          @annulmntEGRESOCORPORATIVO,
                                                                          @annulmntINGRESOLOCAL,
                                                                          @annulmntEGRESOLOCAL,
                                                                          @vVALORVENTASINAJUSTES,
                                                                          @vVALORDESCUENTOS);
        SET @vINGRESOLOCAL              = WSXML_SFG.SFGCONFIGURACIONPYG_TranslateFigure(@xCONFIGURACIONINGRESOLOCAL,
                                                                          @cCODTIPOCONTRATOPDV,
                                                                          @vCANTIDADVENTA,
                                                                          @vVALORVENTABRUTA,
                                                                          @vVALORINGRESOPDV,
                                                                          @vVALORIVAINGRESOPDV,
                                                                          @vREVENUECALCULADO,
                                                                          @vVALORCOMISIONESTANDAR,
                                                                          @vINGRESOCORPORATIVO,
                                                                          @vEGRESOCORPORATIVO,
                                                                          @vINGRESOLOCAL,
                                                                          @vEGRESOLOCAL,
                                                                          @vVALORVENTASINAJUSTES,
                                                                          @vVALORDESCUENTOS);
        SET @annulmntINGRESOLOCAL       = WSXML_SFG.SFGCONFIGURACIONPYG_TranslateFigure(@xCONFIGURACIONINGRESOLOCAL,
                                                                          @cCODTIPOCONTRATOPDV,
                                                                          @annulmntTX,
                                                                          @annulmntVALORVENTAB,
                                                                          @annulmntINGRESOPDV,
                                                                          @annulmntIVAINGRESOPDV,
                                                                          @annulmntREVENUEBASE,
                                                                          @annulmntVCOMESTANDAR,
                                                                          @annulmntINGRESOCORPORATIVO,
                                                                          @annulmntEGRESOCORPORATIVO,
                                                                          @annulmntINGRESOLOCAL,
                                                                          @annulmntEGRESOLOCAL,
                                                                          @vVALORVENTASINAJUSTES,
                                                                          @vVALORDESCUENTOS);
        SET @vEGRESOLOCAL               = WSXML_SFG.SFGCONFIGURACIONPYG_TranslateFigure(@xCONFIGURACIONEGRESOLOCAL,
                                                                          @cCODTIPOCONTRATOPDV,
                                                                          @vCANTIDADVENTA,
                                                                          @vVALORVENTABRUTA,
                                                                          @vVALORINGRESOPDV,
                                                                          @vVALORIVAINGRESOPDV,
                                                                          @vREVENUECALCULADO,
                                                                          @vVALORCOMISIONESTANDAR,
                                                                          @vINGRESOCORPORATIVO,
                                                                          @vEGRESOCORPORATIVO,
                                                                          @vINGRESOLOCAL,
                                                                          @vEGRESOLOCAL,
                                                                          @vVALORVENTASINAJUSTES,
                                                                          @vVALORDESCUENTOS);
        SET @annulmntEGRESOLOCAL        = WSXML_SFG.SFGCONFIGURACIONPYG_TranslateFigure(@xCONFIGURACIONEGRESOLOCAL,
                                                                          @cCODTIPOCONTRATOPDV,
                                                                          @annulmntTX,
                                                                          @annulmntVALORVENTAB,
                                                                          @annulmntINGRESOPDV,
                                                                          @annulmntIVAINGRESOPDV,
                                                                          @annulmntREVENUEBASE,
                                                                          @annulmntVCOMESTANDAR,
                                                                          @annulmntINGRESOCORPORATIVO,
                                                                          @annulmntEGRESOCORPORATIVO,
                                                                          @annulmntINGRESOLOCAL,
                                                                          @annulmntEGRESOLOCAL,
                                                                          @vVALORVENTASINAJUSTES,
                                                                          @vVALORDESCUENTOS);
        IF @p_CODAJUSTEFACTURACION IS NOT NULL AND NOT @cCODPRODUCTO IN (1872,1873,1874,1875)/*MATRIX*/ BEGIN
          EXEC WSXML_SFG.SFGREGISTROREVENUE_UpdateAppendRecordPYGValues @xCODREGISTROREVENUE,
                                                         @annulmntINGRESOCORPORATIVO,
                                                         @annulmntEGRESOCORPORATIVO,
                                                         @annulmntINGRESOLOCAL,
                                                         @annulmntEGRESOLOCAL
          EXEC WSXML_SFG.SFGPRODUCTOREVENUE_UpdateProductPyG @xCODPRODUCTOREVENUE,
                                              @annulmntINGRESOCORPORATIVO,
                                              @annulmntEGRESOCORPORATIVO,
                                              @annulmntINGRESOLOCAL,
                                              @annulmntEGRESOLOCAL
          EXEC WSXML_SFG.SFGAJUSTEFACTURACION_UpdateRecordPYGValues @p_CODAJUSTEFACTURACION,
                                                     @annulmntINGRESOCORPORATIVO,
                                                     @annulmntEGRESOCORPORATIVO,
                                                     @annulmntINGRESOLOCAL,
                                                     @annulmntEGRESOLOCAL
        END ELSE BEGIN
          EXEC WSXML_SFG.SFGREGISTROREVENUE_UpdateRecordPyGValues @xCODREGISTROREVENUE,
                                                   @vINGRESOCORPORATIVO,
                                                   @vEGRESOCORPORATIVO,
                                                   @vINGRESOLOCAL,
                                                   @vEGRESOLOCAL
          EXEC WSXML_SFG.SFGPRODUCTOREVENUE_UpdateProductPyG @xCODPRODUCTOREVENUE,
                                              @vINGRESOCORPORATIVO,
                                              @vEGRESOCORPORATIVO,
                                              @vINGRESOLOCAL,
                                              @vEGRESOLOCAL
        END 

      END;


      -- Costos Calculados
        DECLARE @cCODPRODUCTOCONTRATO       NUMERIC(22,0);
        DECLARE @cCODPRODUCTOCONTRATOCOMDIF NUMERIC(22,0);
        DECLARE @currentcalculatedcosts     WSXML_SFG.IDVALUE;
        DECLARE @xREVENUEUTILIDADPARCIAL    FLOAT = @vREVENUECALCULADO - @vVALORINGRESOPDV;
      BEGIN
        --SET @currentcalculatedcosts = IDVALUELIST();
        -- Obtener identificadores padres y diferenciales para el producto
        EXEC WSXML_SFG.SFGPRODUCTOCONTRATO_GetTarifasProductoMaster @cCODPRODUCTO,
                                                     @cCODREDPDV,
                                                     @cCODAGRUPACIONPUNTODEVENTA,
                                                     @cCODCIUDAD,
                                                     @cCODPRODUCTOCONTRATO OUT,
                                                     @cCODPRODUCTOCONTRATOCOMDIF OUT
        -- Calcular todos los costos asociados
        -- OJO: Si hay que totalizar, desactivar algunos de resta
        DECLARE icst CURSOR FOR SELECT ID, DESCONTABLE, DEFINITION FROM  @costoscalculados--.First .. costoscalculados.Last 
		OPEN icst;
		
		 DECLARE @icst__ID NUMERIC(38,0), @icst__DESCONTABLE NUMERIC(38,0), @icst__DEFINITION VARCHAR(MAX)
		 FETCH NEXT FROM icst INTO @icst__ID, @icst__DESCONTABLE, @icst__DEFINITION;
		 
		 WHILE @@FETCH_STATUS=0
		 BEGIN
            DECLARE @cout                NUMERIC(22,0);
            DECLARE @idcosto             NUMERIC(22,0) = @icst__ID;
            DECLARE @descontable         INT = @icst__DESCONTABLE;
            DECLARE @costvalue           FLOAT = 0;
            DECLARE @discounting         INT = 0;
            DECLARE @discountegr         INT = 0;
			DECLARE @definition VARCHAR(MAX) = @icst__DEFINITION
			
			DECLARE @formulacalculations WSXML_SFG.OPERATIONCALC

			  INSERT INTO @formulacalculations
			  SELECT  CONVERT(NUMERIC,dbo.SEPARAR_COLUMNAS_F(VALUE,1,';')) AS CODTIPOVALOR,
				CONVERT(FLOAT,dbo.SEPARAR_COLUMNAS_F(VALUE,2,';')) AS VALOR,
				CONVERT(VARCHAR,dbo.SEPARAR_COLUMNAS_F(VALUE,3,';')) AS OPERADOR
			  FROM STRING_SPLIT(@definition,'|')
			
            
            DECLARE iclc CURSOR FOR SELECT CODTIPOVALOR, VALOR, OPERADOR FROM @formulacalculations--.First .. formulacalculations.Last 
			OPEN iclc;
			
			DECLARE @iclc__CODTIPOVALOR NUMERIC(38,0), @iclc__VALOR FLOAT, @iclc__OPERADOR VARCHAR(1)
			 FETCH NEXT FROM iclc INTO @iclc__CODTIPOVALOR, @iclc__VALOR, @iclc__OPERADOR;
			 WHILE @@FETCH_STATUS=0
			 BEGIN
                DECLARE @operador VARCHAR(1) = @iclc__OPERADOR;
                DECLARE @tipovalr NUMERIC(38,0) = @iclc__CODTIPOVALOR;
                DECLARE @valor    FLOAT = @iclc__VALOR;
                DECLARE @actualv  FLOAT = 0;
				
              BEGIN
				BEGIN TRY
			  
					-- Actual value depends on type
					IF @tipovalr = @p_VALORUSUARIO BEGIN
					  SET @actualv = @valor;
					END
					ELSE IF @tipovalr = @p_VALORFIGURAP BEGIN
					  IF @p_CODAJUSTEFACTURACION IS NOT NULL BEGIN
						SET @actualv = WSXML_SFG.SFGCONFIGURACIONPYG_TranslateFigure(@valor,
																	   @cCODTIPOCONTRATOPDV,
																	   @annulmntTX,
																	   @annulmntVALORVENTAB,
																	   @annulmntINGRESOPDV,
																	   @annulmntIVAINGRESOPDV,
																	   @annulmntREVENUEBASE,
																	   @annulmntVCOMESTANDAR,
																	   @annulmntINGRESOCORPORATIVO,
																	   @annulmntEGRESOCORPORATIVO,
																	   @annulmntINGRESOLOCAL,
																	   @annulmntEGRESOLOCAL,
																	   @vVALORVENTASINAJUSTES,
																	   @vVALORDESCUENTOS);
					  END
					  ELSE BEGIN
						SET @actualv = WSXML_SFG.SFGCONFIGURACIONPYG_TranslateFigure(@valor,
																	   @cCODTIPOCONTRATOPDV,
																	   @vCANTIDADVENTA,
																	   @vVALORVENTABRUTA,
																	   @vVALORINGRESOPDV,
																	   @vVALORIVAINGRESOPDV,
																	   @vREVENUECALCULADO,
																	   @vVALORCOMISIONESTANDAR,
																	   @vINGRESOCORPORATIVO,
																	   @vEGRESOCORPORATIVO,
																	   @vINGRESOLOCAL,
																	   @vEGRESOLOCAL,
																	   @vVALORVENTASINAJUSTES,
																	   @vVALORDESCUENTOS);
					  END 
					END
					ELSE IF @tipovalr = @p_VALORTARIFAV BEGIN
					  SET @actualv = WSXML_SFG.SFGPRODUCTOCONTRATO_TranslateTarifaFromMaster(--cachetarifa,
																			   @cachetarifadif,
																			   @cCODPRODUCTOCONTRATO,
																			   @cCODPRODUCTOCONTRATOCOMDIF,
																			   @valor);
					END
					ELSE IF @tipovalr = @p_VALORCOSTOPV BEGIN
					  IF (SELECT COUNT(*) FROM @currentcalculatedcosts) > 0 BEGIN
						DECLARE ccpv CURSOR FOR SELECT ID, VALUE FROM @currentcalculatedcosts--.First .. currentcalculatedcosts.Last 
						OPEN ccpv;
						
						DECLARE @ccpv__ID NUMERIC(38,0), @ccpv__VALUE FLOAT
						 FETCH NEXT FROM ccpv INTO @ccpv__ID, @ccpv__VALUE;
						 WHILE @@FETCH_STATUS=0
						 BEGIN
						  IF @ccpv__ID = @valor BEGIN
							SET @actualv = @ccpv__VALUE;
							BREAK
						  END
						  FETCH NEXT FROM ccpv INTO @ccpv__ID, @ccpv__VALUE;
						 END
						
						 CLOSE ccpv;
						 DEALLOCATE ccpv;
						--END WHILE 1=1 BEGIN;
					  END
					--Modificacion Guillermo Ni񯠲5 de septiembre del 2015 -- calculo de costos calculados por costos asociados
					END ELSE IF @tipovalr = @p_VALORCOSTASO BEGIN-- Si es un costo asociado
					  SET @actualv=WSXML_SFG.SFGCOSTOASOCIADO_GetValorPorRegistroyCosto(@pk_ID_REGISTROFACTURACION,@valor);
					END                   
					-- Calculate agains actual value depending on operator
					IF @operador = '+' BEGIN
					  SET @costvalue = @costvalue + @actualv;
					END
					ELSE IF @operador = '-' BEGIN
					  SET @costvalue = @costvalue - @actualv;
					END
					ELSE IF @operador = '*' BEGIN
					  SET @costvalue = @costvalue * @actualv;
					END
					ELSE IF @operador = '/' BEGIN
					  SET @costvalue = @costvalue / @actualv;
					END
					ELSE BEGIN
					  SET @costvalue = @actualv;
					END 
				  
				  
				END TRY
				BEGIN CATCH --EXCEPTION WHEN OTHERS THEN
                  RAISERROR('-20054 No se pueden calcular las formulas de costos a partir de las configuraciones', 16, 1);
				END CATCH
              END 
            
				FETCH NEXT FROM iclc INTO @iclc__CODTIPOVALOR, @iclc__VALOR, @iclc__OPERADOR;
			END --WHILE 1=1 BEGIN;
			CLOSE iclc
			DEALLOCATE iclc
			
            SET @costvalue=isnull(@costvalue,0);
            -- At the end, save value in database and add to array for future consulting
            EXEC WSXML_SFG.SFGCONFIGURACIONPYG_GetDescuentoRegistro 
													 @cacheconfigdsc,
                                                     @cCODSERVICIOARCHIVO,
                                                     @cCODTIPOCONTRATOPRODUCTO,
                                                     @cCODTIPOCONTRATOPDV,
                                                     @idcosto,
                                                     @discounting OUT,
                                                     @discountegr OUT
													 
            IF @p_CODAJUSTEFACTURACION IS NOT NULL AND NOT @cCODPRODUCTO IN (1872,1873,1874,1875)/*MATRIX*/ BEGIN
              EXEC WSXML_SFG.SFGAJUSTEFACTURACION_UpdateRecordPYGValuesFromCosts 
																  @p_CODAJUSTEFACTURACION,
                                                                  @discounting,
                                                                  @discountegr,
                                                                  @costvalue,
                                                                  @annulmntINGRESOLOCAL,
                                                                  @annulmntEGRESOLOCAL
																  
              EXEC WSXML_SFG.SFGREGISTROREVENUE_UpdateRecordPYGValuesFromCosts 
											 @xCODREGISTROREVENUE,
                                             discounting,
                                             discountegr,
                                             costvalue,
                                             @annulmntINGRESOLOCAL,
                                             @annulmntEGRESOLOCAL
            END ELSE BEGIN
              EXEC WSXML_SFG.SFGREGISTROREVENUE_UpdateRecordPYGValuesFromCosts
											 @xCODREGISTROREVENUE,
                                             discounting,
                                             discountegr,
                                             costvalue,
                                             @vINGRESOLOCAL,
                                             @vEGRESOLOCAL
            END
            --currentcalculatedcosts.Extend(1);
            INSERT INTO @currentcalculatedcosts VALUES (@idcosto,@costvalue);
			
            IF @p_CODAJUSTEFACTURACION IS NOT NULL AND NOT @cCODPRODUCTO IN (1872,1873,1874,1875)/*MATRIX*/ BEGIN
              EXEC WSXML_SFG.SFGREGISTROREVCOSTOCALCULADO_AddAppendRecord 
														   @xCODREGISTROREVENUE,
                                                           @idcosto,
                                                           @costvalue,
                                                           @cout OUT
              EXEC WSXML_SFG.SFGAJUSTEFACTURACION_AddUpdateValorCosto  
														@p_CODAJUSTEFACTURACION,
                                                       @idcosto,
                                                       @costvalue
            END ELSE BEGIN
              EXEC WSXML_SFG.SFGREGISTROREVCOSTOCALCULADO_AddReplaceRecord 
															@xCODREGISTROREVENUE,
                                                            @idcosto,
                                                            @costvalue,
                                                            @cout OUT
			END
            
            IF @descontable = 1 BEGIN
              SET @xREVENUEUTILIDADPARCIAL = @xREVENUEUTILIDADPARCIAL - @costvalue;
            END
          
		  
			FETCH NEXT FROM icst INTO @icst__ID, @icst__DESCONTABLE, @icst__DEFINITION;
		  END;
		 CLOSE icst;
         DEALLOCATE icst;
          
		 EXEC WSXML_SFG.SFGREGISTROREVENUE_UpdateRevenueUtilidadParcial @xCODREGISTROREVENUE,@xREVENUEUTILIDADPARCIAL
      END;

       --Si es una anulacion , actualizar el revenue segun el tipo de anulacion
		DECLARE @v_CODTIPOREGISTRO NUMERIC(22,0);
		BEGIN
        SELECT @v_CODTIPOREGISTRO = CODTIPOREGISTRO
        FROM WSXML_SFG.REGISTROFACTURACION
        WHERE ID_REGISTROFACTURACION = @pk_ID_REGISTROFACTURACION;

        IF @v_CODTIPOREGISTRO = 2 BEGIN /*Anulacion*/
              EXEC WSXML_SFG.SFGAJUSTEFACTURACION_AnalizeAndSetByRegistro @pk_ID_REGISTROFACTURACION
              EXEC WSXML_SFG.SFGAJUSTEFACTURACION_UpdateRevenueAdjusment @pk_ID_REGISTROFACTURACION
        END 

    END;

      --Marcar el producto y la fecha para verificacion en la carga a la bodega de datos
		BEGIN
			EXEC DWH_REPTRANS.DWHSFGREPROCESOREVENUE_AddRecord @cCODPRODUCTO,@cFECHA
		END;


    END;


 GO



  IF OBJECT_ID('WSXML_SFG.SFGREGISTROREVENUE_RevisarValoresPYGyCostos', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_RevisarValoresPYGyCostos;
GO


 CREATE PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_RevisarValoresPYGyCostos(@p_FECHA DATETIME) AS
 BEGIN
	  SET NOCOUNT ON;

    DECLARE @costoscalculados WSXML_SFG.FORMULA;
    --cachetarifa      PRODUCTTARIFALIST;
    DECLARE @cachetarifadif   WSXML_SFG.PRODUCTTARIFA
    DECLARE @cacheconfigpyg   WSXML_SFG.CONFIGPYGREGISTRY;
    DECLARE @salesfilelist    WSXML_SFG.NUMBERARRAY;
    DECLARE @currentdate      DATETIME = CONVERT(DATETIME, CONVERT(DATE,@p_FECHA));
    DECLARE @servicecount     NUMERIC(22,0);
   


	DECLARE @p_VALORUSUARIO 	TINYINT,
	  @p_VALORFIGURAP  	TINYINT,
	  @p_VALORTARIFAV 	TINYINT,
	  @p_VALORCOSTOPV 	TINYINT,
	  @p_VALORCOSTASO 	TINYINT

	EXEC WSXML_SFG.SFGCOSTOCALCULADO_CONSTANT
	  @p_VALORUSUARIO  OUT,
	  @p_VALORFIGURAP  OUT,
	  @p_VALORTARIFAV  OUT,
	  @p_VALORCOSTOPV  OUT,
	  @p_VALORCOSTASO  OUT

    /* Obtener valores y revisar consistencia */
    --cachetarifa    := 
    EXEC WSXML_SFG.SFGPRODUCTOCONTRATO_GetTarifaCacheList @currentdate

    --SET @cachetarifadif = WSXML_SFG.SFGPRODUCTOCONTRATO_GetTarifaDiferencialCacheList(@currentdate);
    INSERT INTO @cachetarifadif
	SELECT * FROM WSXML_SFG.SFGPRODUCTOCONTRATO_GetTarifaDiferencialCacheList(@currentdate);

	--SET @cacheconfigpyg = WSXML_SFG.SFGCONFIGURACIONPYG_GetConfiguracionCache();
	INSERT INTO @cacheconfigpyg
	SELECT * FROM WSXML_SFG.SFGCONFIGURACIONPYG_GetConfiguracionCache();
    
	INSERT INTO @salesfilelist
	SELECT ID_ENTRADAARCHIVOCONTROL
      
      FROM WSXML_SFG.ENTRADAARCHIVOCONTROL
     WHERE FECHAARCHIVO = @currentdate
       AND REVERSADO = 0
       AND REVENUECALCULADO = 1;

    SELECT @servicecount = COUNT(1) FROM WSXML_SFG.SERVICIO;
    IF @servicecount <> (SELECT COUNT(*) FROM @salesfilelist) BEGIN
      RAISERROR('-20052 No se puede revisar los costos para la fecha, ya que no se ha calculado el revenue para esta', 16, 1);
    END
    ELSE IF (SELECT COUNT(*) FROM @salesfilelist) = 0 BEGIN
      RAISERROR('-20051 No se han cargado archivos para la fecha', 16, 1);
    END
    ELSE BEGIN
      DECLARE ifx CURSOR FOR SELECT IDVALUE FROM @salesfilelist--.First .. salesfilelist.Last 
	  OPEN ifx;
	  DECLARE @ifx__IDVALUE NUMERIC(38,0)
		
	  FETCH NEXT FROM ifx INTO @ifx__IDVALUE;
	  WHILE @@FETCH_STATUS=0
	  BEGIN
          DECLARE @registrylist   WSXML_SFG.LONGNUMBERARRAY;
          DECLARE @currentservice NUMERIC(22,0);
        BEGIN
          SELECT @currentservice = TIPOARCHIVO
            FROM WSXML_SFG.ENTRADAARCHIVOCONTROL
           WHERE ID_ENTRADAARCHIVOCONTROL = @ifx__IDVALUE;

          --SET @costoscalculados = WSXML_SFG.SFGCOSTOCALCULADO_GetCurrentCostoList(@currentservice);
		  INSERT INTO @costoscalculados
		  SELECT * FROM WSXML_SFG.SFGCOSTOCALCULADO_GetCurrentCostoList(@currentservice);

		  INSERT INTO @registrylist
          SELECT ID_REGISTROFACTURACION
            FROM WSXML_SFG.REGISTROFACTURACION
           WHERE CODENTRADAARCHIVOCONTROL = @ifx__IDVALUE
             AND CODTIPOREGISTRO IN (1, 2, 3);
          IF @@ROWCOUNT > 0 BEGIN
            DECLARE irx CURSOR FOR SELECT IDVALUE FROM @registrylist--.First .. registrylist.Last 
			OPEN irx;

			DECLARE @irx__IDVALUE NUMERIC(38,0)

			 FETCH NEXT FROM irx INTO @irx__IDVALUE;
			 WHILE @@FETCH_STATUS=0
			 BEGIN
              /* Recalcular Ingresos y Egresos, Locales y Corporativos, y Costos Variables*/
                -- Importes Iniciales
                DECLARE @vCANTIDADVENTA         NUMERIC(22,0) = 0;
                DECLARE @vVALORVENTA            FLOAT = 0;
                DECLARE @vVALORVENTABRUTA       FLOAT = 0;
                DECLARE @vVALORINGRESOPDV       FLOAT = 0;
                DECLARE @vVALORIVAINGRESOPDV    FLOAT = 0;
                DECLARE @vREVENUECALCULADO      FLOAT = 0;
                DECLARE @vVALORCOMISIONESTANDAR FLOAT = 0;
		            DECLARE @vVALORVENTASINAJUSTES  FLOAT = 0;
                DECLARE @vVALORDESCUENTOS       FLOAT = 0;
                -- Reglas
                DECLARE @cCODCOMPANIA               NUMERIC(22,0);
                DECLARE @cCODSERVICIO               NUMERIC(22,0);
                DECLARE @cCODTIPOCONTRATOPDV        NUMERIC(22,0);
                DECLARE @cCODTIPOCONTRATOPRODUCTO   NUMERIC(22,0);
                DECLARE @cCODPUNTODEVENTA           NUMERIC(22,0);
                DECLARE @cCODPRODUCTO               NUMERIC(22,0);
                DECLARE @cCODREDPDV                 NUMERIC(22,0);
                DECLARE @cCODAGRUPACIONPUNTODEVENTA NUMERIC(22,0);
                DECLARE @cCODCIUDAD                 NUMERIC(22,0);
		            DECLARE @cCODTIPOREGISTRO           NUMERIC(22,0);
                -- Identificadores
                DECLARE @xCODREGISTROREVENUE NUMERIC(22,0);
                DECLARE @xCODPRODUCTOREVENUE NUMERIC(22,0);
                -- Importes segundo nivel
                DECLARE @vINGRESOCORPORATIVO FLOAT = 0;
                DECLARE @vEGRESOCORPORATIVO  FLOAT = 0;
                DECLARE @vINGRESOLOCAL       FLOAT = 0;
                DECLARE @vEGRESOLOCAL        FLOAT = 0;
              BEGIN
                EXEC WSXML_SFG.SFGREGISTROREVENUE_GetCalculatedRevenueValues
										   @irx__IDVALUE,
                                           @vCANTIDADVENTA OUT,
                                           @vVALORVENTA OUT,
                                           @vVALORVENTABRUTA OUT,
                                           @vVALORINGRESOPDV OUT,
                                           @vVALORIVAINGRESOPDV OUT,
                                           @vREVENUECALCULADO OUT,
                                           @vVALORCOMISIONESTANDAR OUT,
                                           @vVALORDESCUENTOS OUT,
                                           @cCODCOMPANIA OUT,
                                           @cCODSERVICIO OUT,
                                           @cCODTIPOCONTRATOPDV OUT,
                                           @cCODTIPOCONTRATOPRODUCTO OUT,
                                           @cCODPUNTODEVENTA OUT,
                                           @cCODPRODUCTO OUT,
                                           @cCODREDPDV OUT,
                                           @cCODAGRUPACIONPUNTODEVENTA OUT,
                                           @cCODCIUDAD OUT,
                                           @xCODREGISTROREVENUE OUT,
                                           @xCODPRODUCTOREVENUE OUT

                  /* Configuracion P y G para calcular ingresos y egresos */
                  DECLARE @xCONFIGURACIONINGRESOCORP  NUMERIC(22,0);
                  DECLARE @xCONFIGURACIONEGRESOCORP   NUMERIC(22,0);
                  DECLARE @xCONFIGURACIONINGRESOLOCAL NUMERIC(22,0);
                  DECLARE @xCONFIGURACIONEGRESOLOCAL  NUMERIC(22,0);
                BEGIN

                  BEGIN
					BEGIN TRY

						EXEC WSXML_SFG.SFGCONFIGURACIONPYG_GetConfiguracionRegistro
																	 @cacheconfigpyg,
																	 @cCODSERVICIO,
																	 @cCODTIPOCONTRATOPRODUCTO,
																	 @cCODTIPOCONTRATOPDV,
																	 @xCONFIGURACIONINGRESOCORP OUT,
																	 @xCONFIGURACIONEGRESOCORP OUT,
																	 @xCONFIGURACIONINGRESOLOCAL OUT,
																	 @xCONFIGURACIONEGRESOLOCAL OUT
					END TRY
					BEGIN CATCH
						  SET @xCONFIGURACIONINGRESOCORP  = 0;
						  SET @xCONFIGURACIONEGRESOCORP   = 0;
						  SET @xCONFIGURACIONINGRESOLOCAL = 0;
						  SET @xCONFIGURACIONEGRESOLOCAL  = 0;
					END CATCH
                  END;

					--Guillermo Ni?o 30 07 2013
				   --Modificacion calculo de ventas sin ajustes

				   SELECT @cCODTIPOREGISTRO = CODTIPOREGISTRO
				   FROM WSXML_SFG.REGISTROFACTURACION
				   WHERE ID_REGISTROFACTURACION = @irx__IDVALUE

				   IF @cCODTIPOREGISTRO in (1,3) /*Ventas*/ BEGIN
              SET @vVALORVENTASINAJUSTES= @vVALORVENTABRUTA;
            END
            ELSE BEGIN
              SET @vVALORVENTASINAJUSTES= 0;
            END 

					  /* Calcular y actualizar REGISTROREVENUE */
					  SET @vINGRESOCORPORATIVO = WSXML_SFG.SFGCONFIGURACIONPYG_TranslateFigure(@xCONFIGURACIONINGRESOCORP,
																				 @cCODTIPOCONTRATOPDV,
																				 @vCANTIDADVENTA,
																				 @vVALORVENTABRUTA,
																				 @vVALORINGRESOPDV,
																				 @vVALORIVAINGRESOPDV,
																				 @vREVENUECALCULADO,
																				 @vVALORCOMISIONESTANDAR,
																				 @vINGRESOCORPORATIVO,
																				 @vEGRESOCORPORATIVO,
																				 @vINGRESOLOCAL,
																				 @vEGRESOLOCAL,
																				 @vVALORVENTASINAJUSTES,
																				 @vVALORDESCUENTOS);
					  SET @vEGRESOCORPORATIVO  = WSXML_SFG.SFGCONFIGURACIONPYG_TranslateFigure(@xCONFIGURACIONEGRESOCORP,
																				 @cCODTIPOCONTRATOPDV,
																				 @vCANTIDADVENTA,
																				 @vVALORVENTABRUTA,
																				 @vVALORINGRESOPDV,
																				 @vVALORIVAINGRESOPDV,
																				 @vREVENUECALCULADO,
																				 @vVALORCOMISIONESTANDAR,
																				 @vINGRESOCORPORATIVO,
																				 @vEGRESOCORPORATIVO,
																				 @vINGRESOLOCAL,
																				 @vEGRESOLOCAL,
																				 @vVALORVENTASINAJUSTES,
																				 @vVALORDESCUENTOS);
					  SET @vINGRESOLOCAL       = WSXML_SFG.SFGCONFIGURACIONPYG_TranslateFigure(@xCONFIGURACIONINGRESOLOCAL,
																				 @cCODTIPOCONTRATOPDV,
																				 @vCANTIDADVENTA,
																				 @vVALORVENTABRUTA,
																				 @vVALORINGRESOPDV,
																				 @vVALORIVAINGRESOPDV,
																				 @vREVENUECALCULADO,
																				 @vVALORCOMISIONESTANDAR,
																				 @vINGRESOCORPORATIVO,
																				 @vEGRESOCORPORATIVO,
																				 @vINGRESOLOCAL,
																				 @vEGRESOLOCAL,
																				 @vVALORVENTASINAJUSTES,
																				 @vVALORDESCUENTOS);
					  SET @vEGRESOLOCAL        = WSXML_SFG.SFGCONFIGURACIONPYG_TranslateFigure(@xCONFIGURACIONEGRESOLOCAL,
																				 @cCODTIPOCONTRATOPDV,
																				 @vCANTIDADVENTA,
																				 @vVALORVENTABRUTA,
																				 @vVALORINGRESOPDV,
																				 @vVALORIVAINGRESOPDV,
																				 @vREVENUECALCULADO,
																				 @vVALORCOMISIONESTANDAR,
																				 @vINGRESOCORPORATIVO,
																				 @vEGRESOCORPORATIVO,
																				 @vINGRESOLOCAL,
																				 @vEGRESOLOCAL,
																				 @vVALORVENTASINAJUSTES,
																				 @vVALORDESCUENTOS);
					  EXEC WSXML_SFG.SFGREGISTROREVENUE_UpdateRecordPyGValues 
														   @xCODREGISTROREVENUE,
                                                           @vINGRESOCORPORATIVO,
                                                           @vEGRESOCORPORATIVO,
                                                           @vINGRESOLOCAL,
                                                           @vEGRESOLOCAL
                END;


                /* Costos Calculados y Recalculo PYG */
                  DECLARE @cCODPRODUCTOCONTRATO       NUMERIC(22,0);
                  DECLARE @cCODPRODUCTOCONTRATOCOMDIF NUMERIC(22,0);
                  DECLARE @currentcalculatedcosts     WSXML_SFG.IDVALUE;
                  DECLARE @xREVENUEUTILIDADPARCIAL    FLOAT = @vREVENUECALCULADO - @vVALORINGRESOPDV;
                BEGIN
                  /* Obtener identificadores padres y diferenciales para el producto */
                  --SET @currentcalculatedcosts = IDVALUELIST();
                  EXEC WSXML_SFG.SFGPRODUCTOCONTRATO_GetTarifasProductoMaster 
															   @cCODPRODUCTO,
                                                               @cCODREDPDV,
                                                               @cCODAGRUPACIONPUNTODEVENTA,
                                                               @cCODCIUDAD,
                                                               @cCODPRODUCTOCONTRATO OUT,
                                                               @cCODPRODUCTOCONTRATOCOMDIF OUT
				
				
                  DECLARE icst CURSOR FOR SELECT ID, DESCONTABLE, DEFINITION FROM @costoscalculados--.First .. costoscalculados.Last 
				  OPEN icst;
				  DECLARE @icst__ID NUMERIC(38,0),@icst__DESCONTABLE NUMERIC(38,0), @icst__DEFINITION VARCHAR(MAX)
				  FETCH NEXT FROM icst INTO @icst__ID ,@icst__DESCONTABLE , @icst__DEFINITION

				 WHILE @@FETCH_STATUS=0
				 BEGIN
                    /* Calcular todos los costos asociados */
                      DECLARE @cout                NUMERIC(22,0);
                      DECLARE @idcosto             NUMERIC(22,0) = @icst__ID;
                      DECLARE @descontable         INT = @icst__DESCONTABLE
                      DECLARE @costvalue           FLOAT = 0;
                      DECLARE @definition			VARCHAR(MAX) = @icst__DEFINITION
					  DECLARE @formulacalculations WSXML_SFG.OPERATIONCALC

					  INSERT INTO @formulacalculations
					  SELECT  CONVERT(NUMERIC,dbo.SEPARAR_COLUMNAS_F(VALUE,1,';')) AS CODTIPOVALOR,
						CONVERT(FLOAT,dbo.SEPARAR_COLUMNAS_F(VALUE,2,';')) AS VALOR,
						CONVERT(VARCHAR,dbo.SEPARAR_COLUMNAS_F(VALUE,3,';')) AS OPERADOR
					  FROM STRING_SPLIT(@definition,'|')

                    
					BEGIN
                    
						DECLARE iclc CURSOR FOR SELECT CODTIPOVALOR, VALOR, OPERADOR FROM @formulacalculations--.First .. formulacalculations.Last 
						
						OPEN iclc;
						DECLARE @iclc__CODTIPOVALOR NUMERIC(38,0), @iclc__VALOR FLOAT, @iclc__OPERADOR VARCHAR(1)
						
						FETCH NEXT FROM iclc INTO @iclc__CODTIPOVALOR, @iclc__VALOR, @iclc__OPERADOR;
						 WHILE @@FETCH_STATUS=0
						 BEGIN
								DECLARE @operador VARCHAR(1) = @iclc__OPERADOR;
								DECLARE @tipovalr NUMERIC(38,0)= @iclc__CODTIPOVALOR;
								DECLARE @valor    FLOAT = @iclc__VALOR;
								DECLARE @actualv  FLOAT = 0;
								BEGIN
								BEGIN TRY
									  -- Actual value depends on type
									  IF @tipovalr = @p_VALORUSUARIO BEGIN
										SET @actualv = @valor;
									  END
									  ELSE IF @tipovalr = @p_VALORFIGURAP BEGIN
										SET @actualv = WSXML_SFG.SFGCONFIGURACIONPYG_TranslateFigure(@valor,
																					   @cCODTIPOCONTRATOPDV,
																					   @vCANTIDADVENTA,
																					   @vVALORVENTABRUTA,
																					   @vVALORINGRESOPDV,
																					   @vVALORIVAINGRESOPDV,
																					   @vREVENUECALCULADO,
																					   @vVALORCOMISIONESTANDAR,
																					   @vINGRESOCORPORATIVO,
																					   @vEGRESOCORPORATIVO,
																					   @vINGRESOLOCAL,
																					   @vEGRESOLOCAL,
																					   @vVALORVENTASINAJUSTES,
																					   @vVALORDESCUENTOS);
									  END
									  ELSE IF @tipovalr = @p_VALORTARIFAV BEGIN
										SET @actualv = WSXML_SFG.SFGPRODUCTOCONTRATO_TranslateTarifaFromMaster(--cachetarifa,
																								 @cachetarifadif,
																								 @cCODPRODUCTOCONTRATO,
																								 @cCODPRODUCTOCONTRATOCOMDIF,
																								 @valor);
									  END
									  ELSE IF @tipovalr = @p_VALORCOSTOPV BEGIN
										IF (SELECT COUNT(*) FROM @currentcalculatedcosts) > 0 BEGIN
										  DECLARE ccpv CURSOR FOR SELECT ID, VALUE FROM @currentcalculatedcosts--.First .. currentcalculatedcosts.Last 
										  OPEN ccpv;
								 
											 DECLARE @ccpv__ID NUMERIC(38,0), @ccpv__VALUE FLOAT
											 FETCH NEXT FROM ccpv INTO @ccpv__ID, @ccpv__VALUE;
											 WHILE @@FETCH_STATUS=0
											 BEGIN
												IF @ccpv__ID = @valor BEGIN
													SET @actualv = @ccpv__VALUE
													BREAK;
												END 

												FETCH NEXT FROM ccpv INTO @ccpv__ID, @ccpv__VALUE;
											 END
											CLOSE ccpv;
											DEALLOCATE ccpv;
										 END 
									  END
									  --Modificacion Guillermo Ni񯠲5 de septiembre del 2015 -- calculo de costos calculados por costos asociados
									  ELSE IF @tipovalr = @p_VALORCOSTASO BEGIN-- Si es un costo asociado
										  SET @actualv= WSXML_SFG.SFGCOSTOASOCIADO_GetValorPorRegistroyCosto(@irx__IDVALUE,@valor);
									  END 
									  -- Calculate agains actual value depending on operator
									  IF @operador = '+' BEGIN
										SET @costvalue = @costvalue + @actualv;
									  END
									  ELSE IF @operador = '-' BEGIN
										SET @costvalue = @costvalue - @actualv;
									  END
									  ELSE IF @operador = '*' BEGIN
										SET @costvalue = @costvalue * @actualv;
									  END
									  ELSE IF @operador = '/' BEGIN
										SET @costvalue = @costvalue / @actualv;
									  END
									  ELSE BEGIN
										SET @costvalue = @actualv;
									  END 
							
								END TRY
								BEGIN CATCH	
									RAISERROR('-20054 No se pueden calcular las formulas de costos a partir de las configuraciones', 16, 1);
								END CATCH
							END 
						--END 
						--WHILE 1=1 BEGIN
							  -- At the end, save value in database and add to array for future consulting
							  --currentcalculatedcosts.Extend(1);
							  INSERT INTO @currentcalculatedcosts VALUES (@idcosto,@costvalue);

							  EXEC WSXML_SFG.SFGREGISTROREVCOSTOCALCULADO_AddReplaceRecord		
																			@xCODREGISTROREVENUE,
																			@idcosto,
																			costvalue,
																			@cout OUT
							  IF @descontable = 1 BEGIN
								SET @xREVENUEUTILIDADPARCIAL = @xREVENUEUTILIDADPARCIAL - @costvalue;
							  END 
						--END;

							FETCH NEXT FROM iclc INTO @iclc__CODTIPOVALOR, @iclc__VALOR, @iclc__OPERADOR;
						END;

						CLOSE iclc;
						DEALLOCATE iclc;
						EXEC WSXML_SFG.SFGREGISTROREVENUE_UpdateRevenueUtilidadParcial @xCODREGISTROREVENUE,@xREVENUEUTILIDADPARCIAL
					END;

						FETCH NEXT FROM icst INTO @icst__ID ,@icst__DESCONTABLE , @icst__DEFINITION
				END;

				 CLOSE icst;
				 DEALLOCATE icst;
				END-- WHILE 1=1 BEGIN;
			  END
			  FETCH NEXT FROM irx INTO @irx__IDVALUE;
			END;
			 CLOSE irx
			 DEALLOCATE irx
		   END --WHILE 1=1 BEGIN;
		END
		FETCH NEXT FROM ifx INTO @ifx__IDVALUE;
	  END
	  CLOSE ifx
	  DEALLOCATE ifx
	END
END
GO





  IF OBJECT_ID('WSXML_SFG.SFGREGISTROREVENUE_GetSimpleRevenueValues', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_GetSimpleRevenueValues;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_GetSimpleRevenueValues(@p_FECHAARCHIVO               DATETIME,
                                   @p_CODENTRADAARCHIVOCONTROL   NUMERIC(22,0),
                                   @p_CODREGISTROFACTURACION     NUMERIC(22,0),
                                   @p_CODRANGOCOMISION           NUMERIC(22,0) OUT,
                                   @p_CODTIPOCOMISION            NUMERIC(22,0) OUT,
                                   @p_CODTIPORANGO               NUMERIC(22,0) OUT,
                                   @p_CODRANGOCOMISIONDIFAGR     NUMERIC(22,0) OUT,
                                   @p_CODRANGOCOMISIONDIFRED     NUMERIC(22,0) OUT,
                                   @p_FLAGCOMISIONDIFERENCIALBIN NUMERIC(22,0) OUT,
                                   @p_LISTCOMISIONDIFERENCIALBIN CURSOR VARYING OUT,
								   @p_COUNTCOMISIONDIFERENCIALBIN NUMERIC(22,0) OUT,
                                   @p_LISTADVTRANSACCIONES       CURSOR VARYING OUT,
								   @p_COUNTADVTRANSACCIONES       NUMERIC(22,0) OUT,
                                   @p_CODRANGOCOMISIONESTANDAR   NUMERIC(22,0) OUT) AS
 BEGIN
    DECLARE @registryMasterContract NUMERIC(22,0);
    DECLARE @msg VARCHAR(2000)
  SET NOCOUNT ON;
    SELECT @p_CODRANGOCOMISION = RCM.ID_RANGOCOMISION,
           @p_CODTIPOCOMISION = RCM.CODTIPOCOMISION,
           @p_CODTIPORANGO = RCM.CODTIPORANGO,
           @p_CODRANGOCOMISIONDIFAGR = COALESCE(HSTA.CODRANGOCOMISION, PCDA.CODRANGOCOMISION, 0),
           @p_CODRANGOCOMISIONDIFRED = COALESCE(HSTR.CODRANGOCOMISION, PCDR.CODRANGOCOMISION, 0),
           @p_FLAGCOMISIONDIFERENCIALBIN = ISNULL(PBIN.CANTIDAD, 0),
           @p_CODRANGOCOMISIONESTANDAR = COALESCE(CSTH.CODRANGOCOMISIONESTANDAR,
                    PCT.CODRANGOCOMISIONESTANDAR),
           @registryMasterContract = PCT.ID_PRODUCTOCONTRATO
           FROM WSXML_SFG.REGISTROFACTURACION REG
     INNER JOIN WSXML_SFG.PRODUCTOCONTRATO PCT
        ON (REG.CODPRODUCTO = PCT.CODPRODUCTO)
    -- Regular commission is determined by fixed commission union historical dependences
      LEFT OUTER JOIN WSXML_SFG.PRODCONTRATOHISTORICO HST
        ON (HST.CODPRODUCTOCONTRATO = PCT.ID_PRODUCTOCONTRATO AND
           HST.FECHAINICIOVALIDEZ = @p_FECHAARCHIVO)
      LEFT OUTER JOIN WSXML_SFG.RANGOCOMISION RCM
        ON (RCM.ID_RANGOCOMISION =
           COALESCE(HST.CODRANGOCOMISION, PCT.CODRANGOCOMISION))
    -- Differential commission identifiers determined by differential records plus historical dependences
      LEFT OUTER JOIN WSXML_SFG.PRODUCTOCONTRATOCOMDIF PCDA
        ON (PCDA.CODPRODUCTOCONTRATO = PCT.ID_PRODUCTOCONTRATO AND
           PCDA.CODAGRUPACIONPUNTODEVENTA = REG.CODAGRUPACIONPUNTODEVENTA
            AND PCDA.PRIORIDAD>0)
      LEFT OUTER JOIN WSXML_SFG.PRODCONTRATOCOMDIFHISTORICO HSTA
        ON (HSTA.CODPRODUCTOCONTRATOCOMDIF = PCDA.ID_PRODUCTOCONTRATOCOMDIF AND
           HSTA.FECHAINICIOVALIDEZ = @p_FECHAARCHIVO)
      LEFT OUTER JOIN WSXML_SFG.PRODUCTOCONTRATOCOMDIF PCDR
        ON (PCDR.CODPRODUCTOCONTRATO = PCT.ID_PRODUCTOCONTRATO AND
           PCDR.CODREDPDV = REG.CODREDPDV)
      LEFT OUTER JOIN WSXML_SFG.PRODCONTRATOCOMDIFHISTORICO HSTR
        ON (HSTR.CODPRODUCTOCONTRATOCOMDIF = PCDR.ID_PRODUCTOCONTRATOCOMDIF AND
           HSTR.FECHAINICIOVALIDEZ = @p_FECHAARCHIVO)
      LEFT OUTER JOIN (SELECT CODPRODUCTOCONTRATO, COUNT(1) AS CANTIDAD
                         FROM WSXML_SFG.PRODUCTOCONTRATOCOMDIF
                        WHERE BINTARJETA IS NOT NULL
                        GROUP BY CODPRODUCTOCONTRATO) PBIN
        ON (PBIN.CODPRODUCTOCONTRATO = PCT.ID_PRODUCTOCONTRATO)
    -- Historical dependence of Standard Commission for agents
      LEFT OUTER JOIN PRODCONTRATOESTANDARHISTORICO CSTH
        ON (CSTH.CODPRODUCTOCONTRATO = PCT.ID_PRODUCTOCONTRATO AND
           CSTH.FECHAINICIOVALIDEZ = @p_FECHAARCHIVO)
     WHERE CODENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL
       AND ID_REGISTROFACTURACION = @p_CODREGISTROFACTURACION
       --AND ;
    IF @p_FLAGCOMISIONDIFERENCIALBIN <> 0 BEGIN
		set  @p_LISTCOMISIONDIFERENCIALBIN = CURSOR FORWARD_ONLY STATIC FOR 
			  SELECT ID_PRODUCTOCONTRATOCOMDIF AS ID,
										BINTARJETA AS STRINGVALUE,
										CODRANGOCOMISION AS FLOATVALUE
				FROM WSXML_SFG.PRODUCTOCONTRATOCOMDIF
			   WHERE CODPRODUCTOCONTRATO = @registryMasterContract;
		open @p_LISTCOMISIONDIFERENCIALBIN
		
		SET @p_COUNTCOMISIONDIFERENCIALBIN = @@CURSOR_ROWS; 
		
	   set @p_LISTADVTRANSACCIONES = CURSOR FORWARD_ONLY STATIC FOR 
      SELECT CASE
                             WHEN RCD.VALORPORCENTUAL + RCD.VALORTRANSACCIONAL = 0 THEN
                              0
                             ELSE
                              1
                           END AS ID,
                           CASE
                             WHEN PDA.CODTIPOTRANSAVANZADO = 1 THEN
                              'I'
                             WHEN PDA.CODTIPOTRANSAVANZADO = 2 THEN
                              'F'
                             ELSE
                              '-'
                           END AS VALUE
        
        FROM WSXML_SFG.PLANTILLAPRODUCTO PLP
       INNER JOIN WSXML_SFG.PLANTILLAPRODUCTODETALLE PPD
          ON (PPD.CODPLANTILLAPRODUCTO = PLP.ID_PLANTILLAPRODUCTO AND
             CODPRODUCTO = WSXML_SFG.PRODUCTO_F(9999))
       INNER JOIN WSXML_SFG.PLANTILLAPRODUCTODETALLEAVANZA PDA
          ON (PDA.CODPLANTILLAPRODUCTODETALLE =
             PPD.ID_PLANTILLAPRODUCTODETALLE)
       INNER JOIN WSXML_SFG.RANGOCOMISION RCM
          ON (RCM.ID_RANGOCOMISION = PDA.CODRANGOCOMISION)
       INNER JOIN (SELECT CODRANGOCOMISION,
                          SUM(VALORPORCENTUAL) AS VALORPORCENTUAL,
                          SUM(VALORTRANSACCIONAL) AS VALORTRANSACCIONAL
                     FROM RANGOCOMISIONDETALLE
                    GROUP BY CODRANGOCOMISION) RCD
          ON (RCD.CODRANGOCOMISION = RCM.ID_RANGOCOMISION)
       WHERE MASTERPLANTILLA = 1
        AND PDA.CODTIPOTRANSAVANZADO IN (1, 2); /* Matched with 'I', 'F'. Improve */
		OPEN @p_LISTADVTRANSACCIONES
		 
		SET @p_COUNTADVTRANSACCIONES = @@CURSOR_ROWS; 
    END 
		IF @@ROWCOUNT = 0 BEGIN
				DECLARE @msgCODIGOGTECHPRODUCTO VARCHAR(4000) /* Use -meta option PRODUCTO.CODIGOGTECHPRODUCTO%TYPE */;
				DECLARE @msgNOMPRODUCTO VARCHAR(4000)         /* Use -meta option PRODUCTO.NOMPRODUCTO%TYPE */;
			  BEGIN
				SELECT @msgCODIGOGTECHPRODUCTO = CODIGOGTECHPRODUCTO, @msgNOMPRODUCTO = NOMPRODUCTO
				  FROM WSXML_SFG.REGISTROFACTURACION
				 INNER JOIN WSXML_SFG.PRODUCTO
					ON (CODPRODUCTO = ID_PRODUCTO)
				 WHERE ID_REGISTROFACTURACION = @p_CODREGISTROFACTURACION;
				 SET @msg = '-20054 No existe informacion de contrato para el producto ' +
										ISNULL(@msgCODIGOGTECHPRODUCTO, '') + ' ' +
										ISNULL(@msgNOMPRODUCTO, '') +
										'. No se puede continuar con el calculo de revenue para la fecha' 
				RAISERROR(@msg, 16, 1);
			  END;
	  END

  END;
GO



  IF OBJECT_ID('WSXML_SFG.SFGREGISTROREVENUE_CalcularRevTarifasRangosTiempo', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_CalcularRevTarifasRangosTiempo;
GO


  CREATE PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_CalcularRevTarifasRangosTiempo(@p_ID_DETALLETAREAEJECUTADA NUMERIC(22,0),
                                         @p_FECHA                    DATETIME) AS
BEGIN
SET NOCOUNT ON;
  --Calcular revenue de las anulaciones y de los registros vacios craedos por ajusts

    DECLARE @sFECHAFRST DATETIME;
    DECLARE @sFECHALAST DATETIME;
  BEGIN
    EXEC WSXML_SFG.SFG_PACKAGE_GetMonthRange @p_FECHA, @sFECHAFRST OUT, @sFECHALAST OUT
    Declare RecordsToCalculate Cursor FOR 
                               SELECT REGISTROFACTURACION.ID_REGISTROFACTURACION
                                 FROM WSXML_SFG.REGISTROFACTURACION
                                INNER JOIN WSXML_SFG.ENTRADAARCHIVOCONTROL
                                   ON REGISTROFACTURACION.CODENTRADAARCHIVOCONTROL =
                                      ENTRADAARCHIVOCONTROL.ID_ENTRADAARCHIVOCONTROL
                                WHERE ENTRADAARCHIVOCONTROL.FECHAARCHIVO BETWEEN
                                      @sFECHAFRST AND @sFECHALAST
                                      AND NOT( REGISTROFACTURACION.NUMTRANSACCIONES= 0 AND REGISTROFACTURACION.VALORTRANSACCION= 0)                                      
                                  AND REGISTROFACTURACION.CODTIPOREGISTRO = 2

    END;
END
GO




  IF OBJECT_ID('WSXML_SFG.SFGREGISTROREVENUE_CalcularRevTarifasRangosTiempo', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_CalcularRevTarifasRangosTiempo;
GO


IF OBJECT_ID('WSXML_SFG.SFGREGISTROREVENUE_CalcularRevenue', 'P') IS NOT NULL
  DROP PROCEDURE "WSXML_SFG"."SFGREGISTROREVENUE_CalcularRevenue";
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_CalcularRevenue(@p_FECHA                    DATETIME,
                            @p_CODDETALLETAREAEJECUTADA NUMERIC(22,0),
                            @p_RETVALUE_out             NUMERIC(22,0) OUT) AS
 BEGIN
    DECLARE @cPREFDIFERIDOS NUMERIC(22,0) = 0;
    DECLARE @lstFILES       WSXML_SFG.NUMBERARRAY;
    DECLARE @errormsg       VARCHAR(2000);
    DECLARE @maxwrngs       NUMERIC(22,0) = 5;
    DECLARE @cntwrngs       NUMERIC(22,0) = 0;
    DECLARE @cFECHA         DATETIME = CONVERT(DATETIME, CONVERT(DATE,@p_FECHA));
    DECLARE @totalrecords   NUMERIC(22,0) = 100;
    DECLARE @countrecords   NUMERIC(22,0) = 0;
    DECLARE @waitnrecords   NUMERIC(22,0) = 20;
    DECLARE @countservics   NUMERIC(22,0);
    DECLARE @countfilescl   NUMERIC(22,0);
    --cachetarifa    PRODUCTTARIFALIST;
    DECLARE @cachetarifadif WSXML_SFG.PRODUCTTARIFA;
    DECLARE @cacheconfigpyg WSXML_SFG.CONFIGPYGREGISTRY;
    DECLARE @cacheconfigdsc WSXML_SFG.CONFIGPYGDISCOUNT;
	
	DECLARE @ix__IDVALUE NUMERIC(38,0)
	DECLARE @ir__IDVALUE NUMERIC(38,0)
   
	SET NOCOUNT ON;
  
	DECLARE @VENTAFACT SMALLINT,
		  @ANULACION SMALLINT,
		  @FREETICKT SMALLINT,
		  @PREMIOPAG SMALLINT,
		  @RGSTOTROS SMALLINT,
		  @VENNOFACT SMALLINT
		  
	EXEC WSXML_SFG.SFGTIPOREGISTRO_CONSTANT
		  @VENTAFACT OUT,
		  @ANULACION OUT,
		  @FREETICKT OUT,
		  @PREMIOPAG OUT,
		  @RGSTOTROS OUT,
		  @VENNOFACT OUT
		  
	DECLARE @p_TIPOINFORMATIVO TINYINT,
		@p_TIPOERROR TINYINT,
		@p_TIPOADVERTENCIA TINYINT,
		@p_TIPOCUALQUIERA TINYINT,
		@p_PROCESONOTIFICACION TINYINT,
		@p_ESTADOABIERTA TINYINT,
		@p_ESTADOCERRADA TINYINT

	EXEC WSXML_SFG.SFGALERTA_CONSTANT
		@p_TIPOINFORMATIVO OUT,
		@p_TIPOERROR OUT,
		@p_TIPOADVERTENCIA OUT,
		@p_TIPOCUALQUIERA OUT,
		@p_PROCESONOTIFICACION OUT,
		@p_ESTADOABIERTA OUT,
		@p_ESTADOCERRADA OUT

	DECLARE  @p_VALORUSUARIO 	TINYINT,
		  @p_VALORFIGURAP  	TINYINT,
		  @p_VALORTARIFAV 	TINYINT,
		  @p_VALORCOSTOPV 	TINYINT,
		  @p_VALORCOSTASO 	TINYINT

		
	EXEC WSXML_SFG.SFGCOSTOCALCULADO_CONSTANT
		  @p_VALORUSUARIO  OUT,
		  @p_VALORFIGURAP  OUT,
		  @p_VALORTARIFAV  OUT,
		  @p_VALORCOSTOPV  OUT,
		  @p_VALORCOSTASO  OUT
							  

	DECLARE @p_REGISTRADA      			TINYINT,
			@p_INICIADA         		TINYINT,
			@p_FINALIZADAOK 			TINYINT,
			@p_FINALIZADAFALLO  		TINYINT,
			@p_ABORTADA  				TINYINT,
			@p_NOINICIADA  				TINYINT,
			@p_FINALIZADAADVERTENCIA  	TINYINT

	EXEC WSXML_SFG.SFGESTADOTAREAEJECUTADA_CONSTANT
			@p_REGISTRADA      	 OUT,
			@p_INICIADA          OUT,
			@p_FINALIZADAOK 	 OUT,
			@p_FINALIZADAFALLO   OUT,
			@p_ABORTADA  		 OUT,
			@p_NOINICIADA  		 OUT,
			@p_FINALIZADAADVERTENCIA  OUT
			
	BEGIN TRY
		--Llamado a DIFERIDOS PREFACTURACION
		EXEC WSXML_SFG.sfgparametro_getvalorbykey 'PrefacturarDiferidos',@cPREFDIFERIDOS OUT
		/*IF cPREFDIFERIDOS = 1 THEN
		  BEGIN
			SFGMAESTROFACTURACIONDIFERIDOS.obtenerdiferidosciclo;
		  END;
		END IF;*/

		-- Tarifas por contrato
		EXEC WSXML_SFG.SFGPRODUCTOCONTRATO_GetTarifaCacheList @cFECHA
		
		INSERT INTO @cachetarifadif
		SELECT * FROM WSXML_SFG.SFGPRODUCTOCONTRATO_GetTarifaDiferencialCacheList(@cFECHA);
		
		-- Configuracion P y G
		--SET @cacheconfigpyg = SFGCONFIGURACIONPYG.GetConfiguracionCache;
		INSERT INTO @cacheconfigpyg
		SELECT * FROM WSXML_SFG.SFGCONFIGURACIONPYG_GetConfiguracionCache();
		
		--SET @cacheconfigdsc = SFGCONFIGURACIONPYG.GetDescuentoCache;
		INSERT INTO @cacheconfigdsc 
		SELECT * FROM WSXML_SFG.SFGCONFIGURACIONPYG_GetDescuentoCache();
		
		-- Archivos del dia a iterar
		INSERT INTO @lstFILES
		SELECT ID_ENTRADAARCHIVOCONTROL
		FROM WSXML_SFG.ENTRADAARCHIVOCONTROL
		WHERE FECHAARCHIVO = CONVERT(DATETIME, CONVERT(DATE,@p_FECHA))
		   AND REVERSADO = 0
		   AND REVENUECALCULADO = 0;
		   
		SELECT @countservics = COUNT(1) FROM WSXML_SFG.SERVICIO;
		
		SELECT @countfilescl = COUNT(1)
		  FROM WSXML_SFG.ENTRADAARCHIVOCONTROL
		 WHERE FECHAARCHIVO = CONVERT(DATETIME, CONVERT(DATE,@p_FECHA))
		   AND REVERSADO = 0
		   AND REVENUECALCULADO = 1;
		   
		IF @countfilescl = @countservics BEGIN
		  RAISERROR('-20051 Ya se calculo el revenue para la fecha', 16, 1);
		END 
		
		IF @countservics <> (SELECT COUNT(*) FROM @lstFILES) BEGIN
		  RAISERROR('-20052 No se puede calcular el revenue para la fecha. No se han cargado todos los archivos para el dia', 16, 1);
		END 
		
		IF (SELECT COUNT(*) FROM @lstFILES) > 0 BEGIN
		  -- Obtener total de registros a iterar
		  SELECT @totalrecords = COUNT(1) * 2
			FROM WSXML_SFG.REGISTROFACTURACION
		   WHERE CODENTRADAARCHIVOCONTROL IN
				 (SELECT IDVALUE FROM @lstFILES)
			 AND CODTIPOREGISTRO IN (1, 2, 3);
			 
		  EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_SetTotalRecords @p_CODDETALLETAREAEJECUTADA, @totalrecords
		  
		  DECLARE ix CURSOR FOR SELECT IDVALUE FROM @lstFILES--.First .. lstFILES.Last 
		  OPEN ix;
		  --DECLARE @ix__IDVALUE NUMERIC(38,0)
		  FETCH NEXT FROM ix INTO @ix__IDVALUE;
		  WHILE @@FETCH_STATUS=0
		  BEGIN
			-- Delete (just in case)
				EXEC WSXML_SFG.SFGREGISTROREVENUE_ReverseRevenueByFile @ix__IDVALUE
				
				DECLARE @lstREGISTROSCONSIDERABLES WSXML_SFG.LONGNUMBERARRAY;
			
				BEGIN
					INSERT INTO @lstREGISTROSCONSIDERABLES
					SELECT ID_REGISTROFACTURACION
					FROM WSXML_SFG.REGISTROFACTURACION
					WHERE CODENTRADAARCHIVOCONTROL = @ix__IDVALUE
					 AND CODTIPOREGISTRO IN (1, 2, 3)
					 ORDER BY CODTIPOREGISTRO DESC,ID_REGISTROFACTURACION ASC;
				 
	--             AND ID_REGISTROFACTURACION IN (145082450,145082501)


			  IF @@ROWCOUNT > 0 BEGIN
				DECLARE ir CURSOR FOR SELECT IDVALUE FROM @lstREGISTROSCONSIDERABLES--.First .. lstREGISTROSCONSIDERABLES.Last 
				OPEN ir;
				--DECLARE @ir__IDVALUE NUMERIC(38,0)
				FETCH NEXT FROM ir INTO @ir__IDVALUE;
				WHILE @@FETCH_STATUS=0
				BEGIN
					DECLARE @cCODENTRADAARCHIVOCONTROL NUMERIC(22,0);
					DECLARE @cCODTIPOREGISTRO          NUMERIC(22,0);
					DECLARE @cCODPUNTODEVENTA          NUMERIC(22,0);
					DECLARE @cCODTIPOCONTRATOPDV       NUMERIC(22,0);
					DECLARE @cCODPRODUCTO              NUMERIC(22,0);
					DECLARE @cCODTIPOCONTRATOPRODUCTO  NUMERIC(22,0);
					DECLARE @cCODCOMPANIA              NUMERIC(22,0);
					-- Valores para calcular y considerar
					DECLARE @cNUMTRANSACCIONES          NUMERIC(22,0);
					DECLARE @cVALORTRANSACCION          FLOAT;
					DECLARE @cTOTALVENTASBRUTAS         FLOAT;
					DECLARE @cCODAGRUPACIONPUNTODEVENTA NUMERIC(22,0);
					DECLARE @cCODREDPDV                 NUMERIC(22,0);
					DECLARE @cCODCIUDAD                 NUMERIC(22,0);
					-- Valores de Tarifa (Ignorar valor de Anticipo)
					DECLARE @cCODRANGOCOMISION           NUMERIC(22,0);
					DECLARE @cCODTIPOCOMISION            NUMERIC(22,0);
					DECLARE @cCODTIPORANGO               NUMERIC(22,0);
					DECLARE @cCODRANGOCOMISIONDIFAGR     NUMERIC(22,0);
					DECLARE @cCODRANGOCOMISIONDIFRED     NUMERIC(22,0);
					DECLARE @cCODRANGOCOMISIONDIFDTO     NUMERIC(22,0);
					DECLARE @cFLAGCOMISIONDIFERENCIALBIN NUMERIC(22,0);
					DECLARE @cLISTCOMISIONDIFERENCIALBIN CURSOR--WSXML_SFG.IDSTRINGFLOATVALUE;
					DECLARE @cCOUNTCOMISIONDIFERENCIALBIN NUMERIC(22,0)
					DECLARE @cLISTADVTRANSACCIONES       CURSOR --WSXML_SFG.IDSTRINGVALUE;
					DECLARE @cCOUNTADVTRANSACCIONES       NUMERIC(22,0)
					
					DECLARE @cCODRANGOCOMISIONESTANDAR   NUMERIC(22,0);
					-- Calculation value
					DECLARE @vCOMISIONPOSESTANDAR FLOAT = 0;
					DECLARE @vREVENUE             FLOAT = 0;

					-- Output control values
					DECLARE @cCODPRODUCTOREVENUE   NUMERIC(22,0);
					DECLARE @cCODREGISTROREVENUE   NUMERIC(22,0);
					DECLARE @cANULACIONDIFERENCIAL NUMERIC(22,0) = 0;
					
					DECLARE @cpsvcodeTIPOCOMISION   NUMERIC(22,0);
					DECLARE @cpsvcalcVALORPORCENTUA FLOAT = 0;
					DECLARE @cpsvcalcVALORTRANSCCNL FLOAT = 0;
					
					DECLARE @cvalcalcVALORPORCENTUA FLOAT = 0;
					DECLARE @cvalcalcVALORTRANSCCNL FLOAT = 0;
					
					DECLARE @vtxREVENUE                     FLOAT = 0;
					DECLARE @tCommission__ID_RANGOCOMISIONDETALLE NUMERIC(38,0), @tCommission__RANGOINICIAL FLOAT, @tCommission__RANGOFINAL FLOAT, @tCommission__VALORPORCENTUAL FLOAT, @tCommission__VALORTRANSACCIONAL FLOAT
					
					DECLARE @cLISTADVTRANSACCIONES__ID NUMERIC(38,0), @cLISTADVTRANSACCIONES__VALUE NVARCHAR(2000)
					
					
					BEGIN
						BEGIN TRY
						  
							-- Obtencion unificada de valores y calculos

							BEGIN
								BEGIN TRY
								 DECLARE @l_p_FECHA DATETIME =  CONVERT(DATETIME, CONVERT(DATE,@p_FECHA))
								  EXEC WSXML_SFG.SFGREGISTROREVENUE_GetRegistryRevenueValues
														   @l_p_FECHA,
														   @ir__IDVALUE,
														   @cCODENTRADAARCHIVOCONTROL OUT,
														   @cCODTIPOREGISTRO OUT,
														   @cCODPUNTODEVENTA OUT,
														   @cCODTIPOCONTRATOPDV OUT,
														   @cCODPRODUCTO OUT,
														   @cCODTIPOCONTRATOPRODUCTO OUT,
														   @cCODCOMPANIA OUT,
														   @cNUMTRANSACCIONES OUT,
														   @cVALORTRANSACCION OUT,
														   @cTOTALVENTASBRUTAS OUT,
														   @cCODAGRUPACIONPUNTODEVENTA OUT,
														   @cCODREDPDV OUT,
														   @cCODCIUDAD OUT,
														   @cCODRANGOCOMISION OUT,
														   @cCODTIPOCOMISION OUT,
														   @cCODTIPORANGO OUT,
														   @cCODRANGOCOMISIONDIFAGR OUT,
														   @cCODRANGOCOMISIONDIFRED OUT,
														   @cCODRANGOCOMISIONDIFDTO OUT,
														   @cFLAGCOMISIONDIFERENCIALBIN OUT,
														   @cLISTCOMISIONDIFERENCIALBIN OUT,
														   @cCOUNTCOMISIONDIFERENCIALBIN OUT,
														   @cLISTADVTRANSACCIONES OUT,
														   @cCOUNTADVTRANSACCIONES OUT,
														   @cCODRANGOCOMISIONESTANDAR OUT

								  -- En caso de ser una anulacion, y tener referencias dependientes, buscar con fecha de transacciones
								  IF @cCODTIPOREGISTRO = @ANULACION BEGIN
									  DECLARE @xCountReferences NUMERIC(22,0) = 0;
									BEGIN
									  SELECT @xCountReferences = COUNT(ID_REGISTROFACTREFERENCIA)
										FROM WSXML_SFG.REGISTROFACTREFERENCIA
									   WHERE CODREGISTROFACTURACION = @ir__IDVALUE;
									  IF @xCountReferences > 0 BEGIN
										SET @cANULACIONDIFERENCIAL = 1;
									  END 
									END;

								  END 
								END TRY
								BEGIN CATCH
								--EXCEPTION
								--  WHEN OTHERS THEN
									SET @errormsg = 'No es posible calcular el revenue para la entrada ' +
															ISNULL(@ir__IDVALUE, '') +
															'. Puede existir un error en la configuracion del contrato para el producto. ' +
															isnull(ERROR_MESSAGE ( )  , '');
															
									EXEC WSXML_SFG.SFGALERTA_GenerarAlerta 
															 @p_TIPOADVERTENCIA,
															'REVENUE',
															@errormsg,
															1;
															
									SET @cntwrngs = @cntwrngs + 1;
									IF @cntwrngs >= @maxwrngs BEGIN
									  SET @errormsg = '-20060 Maximo numero de advertencias alcanzado: ' + isnull(@errormsg, '')
									  RAISERROR(@errormsg, 16, 1);
									END 
								END CATCH
							END;


							EXEC WSXML_SFG.SFGPRODUCTOREVENUE_FindProductEntry @cFECHA,
																@cCODPRODUCTO,
																@cCODPRODUCTOREVENUE OUT

							IF @cANULACIONDIFERENCIAL = 1 BEGIN
							
								DECLARE @cmlCOMISIONPOSESTANDAR FLOAT = 0;
								DECLARE @cmlREVENUE             FLOAT = 0;
							  BEGIN
								-- Empty Record. El registro se marca con los identificadores del registro anulacion, pero no necesariamente corresponde
								EXEC WSXML_SFG.SFGREGISTROREVENUE_AddEmptyRecord 
																  @cCODENTRADAARCHIVOCONTROL,
																  @ir__IDVALUE,
																  @cCODTIPOREGISTRO,
																  @cFECHA,
																  @cCODPUNTODEVENTA,
																  @cCODTIPOCONTRATOPDV,
																  @cCODPRODUCTO,
																  @cCODTIPOCONTRATOPRODUCTO,
																  @cCODCOMPANIA,
																  @cCODRANGOCOMISION,
																  @cCODPRODUCTOREVENUE,
																  @cmlCOMISIONPOSESTANDAR,
																  @cCODREGISTROREVENUE OUT

								--Guarda la informacion de la comision diferencial a la que halla lugar
								IF @cCODRANGOCOMISIONDIFAGR > 0 OR
								   @cCODRANGOCOMISIONDIFRED > 0 OR
								   @cCODRANGOCOMISIONDIFDTO > 0 BEGIN

								  EXEC WSXML_SFG.SFGREGISTROREVENUE_SETREVENUEMULTIPLEDIFERENCIAL
																				@cCODREGISTROREVENUE,
																				@ir__IDVALUE,
																				@cCODPRODUCTO,
																				@cCODREDPDV,
																				@cCODAGRUPACIONPUNTODEVENTA,
																				@cCODCIUDAD

								END 

								-- Obtener reglas de cada una de las referencias adjuntas
								DECLARE treference CURSOR FOR SELECT ID_REGISTROFACTREFERENCIA AS ID_REGISTROFACTREFERENCIA,
														  CONVERT(DATETIME, CONVERT(DATE,FECHAHORATRANSACCION)) AS FECHA,
														  VALORTRANSACCION AS VALORTRANSACCION,
														  CODREGISTROANULADO AS CODREGISTROANULADO,
														  BINTARJETA AS BINTARJETA,
														  TIPOTRANSACCION AS TIPOTRANSACCION
													 FROM WSXML_SFG.REGISTROFACTREFERENCIA
													WHERE CODREGISTROFACTURACION = @ir__IDVALUE; 
								OPEN treference;
								DECLARE @treference__ID_REGISTROFACTREFERENCIA NUMERIC(38,0), @treference__FECHA DATETIME, @treference__VALORTRANSACCION FLOAT, 
									@treference__CODREGISTROANULADO NUMERIC(22,0), @treference__BINTARJETA NVARCHAR(10), 
									@treference__TIPOTRANSACCION NVARCHAR(10)
								FETCH NEXT FROM treference INTO @treference__ID_REGISTROFACTREFERENCIA, @treference__VALORTRANSACCION, 
									@treference__CODREGISTROANULADO, @treference__BINTARJETA, @treference__TIPOTRANSACCION;
								WHILE @@FETCH_STATUS=0
								BEGIN
								  -- Obtener reglas nuevamente para la transaccion de la anulacion
								  -- Utiliza registro original (reglas guardadas - cadena, red, etc)
									DECLARE @orgCODREGISTROFACTURACION   NUMERIC(22,0);
									DECLARE @dmyCODENTRADAARCHIVOCONTROL NUMERIC(22,0);
									DECLARE @dmyCODTIPOREGISTRO          NUMERIC(22,0);
									DECLARE @tmpvCOMISIONPOSESTANDAR     FLOAT = 0;
									DECLARE @tmpvREVENUE                 FLOAT = 0;
									DECLARE @tmpvCODRANGOCOMISIONDETALLE NUMERIC(22,0);
									DECLARE @outCODREGISTROREVENUETRANSC NUMERIC(22,0);
									BEGIN
										BEGIN TRY
										  
											BEGIN	
												BEGIN TRY
											
													
													  IF @treference__CODREGISTROANULADO IS NULL BEGIN
														
														
														SET @errormsg = 'No se pudo obtener los valores originales de transaccion para la referencia anulacion de id ' + @treference__ID_REGISTROFACTREFERENCIA
														EXEC WSXML_SFG.SFGTMPTRACE_TraceLog @errormsg
														EXEC WSXML_SFG.SFGREGISTROREVENUE_GetRegistryRevenueValues 
																				 @treference__FECHA,
																				 @ir__IDVALUE,
																				 @dmyCODENTRADAARCHIVOCONTROL OUT,
																				 @dmyCODTIPOREGISTRO OUT,
																				 @cCODPUNTODEVENTA OUT,
																				 @cCODTIPOCONTRATOPDV OUT,
																				 @cCODPRODUCTO OUT,
																				 @cCODTIPOCONTRATOPRODUCTO OUT,
																				 @cCODCOMPANIA OUT,
																				 @cNUMTRANSACCIONES OUT,
																				 @cVALORTRANSACCION OUT,
																				 @cTOTALVENTASBRUTAS OUT,
																				 @cCODAGRUPACIONPUNTODEVENTA OUT,
																				 @cCODREDPDV OUT,
																				 @cCODCIUDAD OUT,
																				 @cCODRANGOCOMISION OUT,
																				 @cCODTIPOCOMISION OUT,
																				 @cCODTIPORANGO OUT,
																				 @cCODRANGOCOMISIONDIFAGR OUT,
																				 @cCODRANGOCOMISIONDIFRED OUT,
																				 @cCODRANGOCOMISIONDIFDTO OUT,
																				 @cFLAGCOMISIONDIFERENCIALBIN OUT,
																				 @cLISTCOMISIONDIFERENCIALBIN OUT, -- WSXML_SFG.IDSTRINGFLOATVALUELIST
																				 @cCOUNTCOMISIONDIFERENCIALBIN OUT,
																				 @cLISTADVTRANSACCIONES OUT, -- WSXML_SFG.IDSTRINGVALUELIST
																				 @cCOUNTADVTRANSACCIONES OUT,
																				 @cCODRANGOCOMISIONESTANDAR OUT	
														
													  END 
													  SELECT @orgCODREGISTROFACTURACION = ID_REGISTROFACTURACION
														FROM WSXML_SFG.REGISTROFACTURACION
													   INNER JOIN REGISTROFACTREFERENCIA
														  ON (CODREGISTROFACTURACION =
															 ID_REGISTROFACTURACION)
													   WHERE ID_REGISTROFACTREFERENCIA =
															 @treference__CODREGISTROANULADO;
													  EXEC WSXML_SFG.SFGREGISTROREVENUE_GetRegistryRevenueValues 
																			   @treference__FECHA,
																			   @orgCODREGISTROFACTURACION,
																			   @dmyCODENTRADAARCHIVOCONTROL OUT,
																			   @dmyCODTIPOREGISTRO OUT,
																			   @cCODPUNTODEVENTA OUT,
																			   @cCODTIPOCONTRATOPDV OUT,
																			   @cCODPRODUCTO OUT,
																			   @cCODTIPOCONTRATOPRODUCTO OUT,
																			   @cCODCOMPANIA OUT,
																			   @cNUMTRANSACCIONES OUT,
																			   @cVALORTRANSACCION OUT,
																			   @cTOTALVENTASBRUTAS OUT,
																			   @cCODAGRUPACIONPUNTODEVENTA OUT,
																			   @cCODREDPDV OUT,
																			   @cCODCIUDAD OUT,
																			   @cCODRANGOCOMISION OUT,
																			   @cCODTIPOCOMISION OUT,
																			   @cCODTIPORANGO OUT,
																			   @cCODRANGOCOMISIONDIFAGR OUT,
																			   @cCODRANGOCOMISIONDIFRED OUT,
																			   @cCODRANGOCOMISIONDIFDTO OUT,
																			   @cFLAGCOMISIONDIFERENCIALBIN OUT,
																			   @cLISTCOMISIONDIFERENCIALBIN OUT,
																			   @cCOUNTCOMISIONDIFERENCIALBIN OUT,
																			   @cLISTADVTRANSACCIONES OUT,
																			   @cCOUNTADVTRANSACCIONES OUT,
																			   @cCODRANGOCOMISIONESTANDAR OUT
												END TRY
												BEGIN CATCH							
														SET @errormsg = 'No se pudo obtener los valores originales de transaccion para la referencia anulacion de id ' + @treference__ID_REGISTROFACTREFERENCIA
														EXEC WSXML_SFG.SFGTMPTRACE_TraceLog @errormsg
														EXEC WSXML_SFG.SFGREGISTROREVENUE_GetRegistryRevenueValues 
																				 @treference__FECHA,
																				 @ir__IDVALUE,
																				 @dmyCODENTRADAARCHIVOCONTROL OUT,
																				 @dmyCODTIPOREGISTRO OUT,
																				 @cCODPUNTODEVENTA OUT,
																				 @cCODTIPOCONTRATOPDV OUT,
																				 @cCODPRODUCTO OUT,
																				 @cCODTIPOCONTRATOPRODUCTO OUT,
																				 @cCODCOMPANIA OUT,
																				 @cNUMTRANSACCIONES OUT,
																				 @cVALORTRANSACCION OUT,
																				 @cTOTALVENTASBRUTAS OUT,
																				 @cCODAGRUPACIONPUNTODEVENTA OUT,
																				 @cCODREDPDV OUT,
																				 @cCODCIUDAD OUT,
																				 @cCODRANGOCOMISION OUT,
																				 @cCODTIPOCOMISION OUT,
																				 @cCODTIPORANGO OUT,
																				 @cCODRANGOCOMISIONDIFAGR OUT,
																				 @cCODRANGOCOMISIONDIFRED OUT,
																				 @cCODRANGOCOMISIONDIFDTO OUT,
																				 @cFLAGCOMISIONDIFERENCIALBIN OUT,
																				 @cLISTCOMISIONDIFERENCIALBIN OUT, -- WSXML_SFG.IDSTRINGFLOATVALUELIST
																				 @cCOUNTCOMISIONDIFERENCIALBIN OUT,
																				 @cLISTADVTRANSACCIONES OUT, -- WSXML_SFG.IDSTRINGVALUELIST
																				 @cCOUNTADVTRANSACCIONES OUT,
																				 @cCODRANGOCOMISIONESTANDAR OUT						 
												END CATCH						 
											END;

											-- Verificar si se encontro comision (tarifa) diferencial
											BEGIN
												BEGIN TRY
												  IF @cCODRANGOCOMISIONDIFAGR <> 0 BEGIN
													SELECT @cCODRANGOCOMISION = ID_RANGOCOMISION,
														   @cCODTIPOCOMISION = CODTIPOCOMISION,
														   @cCODTIPORANGO = CODTIPORANGO
																				   FROM WSXML_SFG.RANGOCOMISION
													 WHERE ID_RANGOCOMISION =
														   @cCODRANGOCOMISIONDIFAGR;
												  END
												  ELSE IF @cCODRANGOCOMISIONDIFRED <> 0 BEGIN
													SELECT @cCODRANGOCOMISION = ID_RANGOCOMISION,
														   @cCODTIPOCOMISION = CODTIPOCOMISION,
														   @cCODTIPORANGO = CODTIPORANGO
																				   FROM WSXML_SFG.RANGOCOMISION
													 WHERE ID_RANGOCOMISION =
														   @cCODRANGOCOMISIONDIFRED;
												  END
												  ELSE IF @cCODRANGOCOMISIONDIFDTO <> 0 BEGIN
													SELECT @cCODRANGOCOMISION = ID_RANGOCOMISION,
														   @cCODTIPOCOMISION = CODTIPOCOMISION,
														   @cCODTIPORANGO = CODTIPORANGO
																				   FROM WSXML_SFG.RANGOCOMISION
													 WHERE ID_RANGOCOMISION =
														   @cCODRANGOCOMISIONDIFDTO;
												  END
												  ELSE IF @cFLAGCOMISIONDIFERENCIALBIN <> 0 BEGIN
												  
												  
													IF @cCOUNTADVTRANSACCIONES > 0 BEGIN
													
													  --DECLARE idv CURSOR FOR @cLISTADVTRANSACCIONES.First .. cLISTADVTRANSACCIONES.Last 
													  --DECLARE @cLISTADVTRANSACCIONES__ID NUMERIC(38,0), @cLISTADVTRANSACCIONES__VALUE NVARCHAR(2000)
													  FETCH NEXT FROM @cLISTADVTRANSACCIONES INTO  @cLISTADVTRANSACCIONES__ID, @cLISTADVTRANSACCIONES__VALUE
													  WHILE @@FETCH_STATUS=0
													  BEGIN
														IF @cLISTADVTRANSACCIONES__VALUE = @treference__TIPOTRANSACCION AND @cLISTADVTRANSACCIONES__ID = 0 BEGIN
														  SET @cCODTIPOCOMISION = 0; /* Parameter forces zero value */
														  BREAK;
														END
														 
														FETCH NEXT FROM @cLISTADVTRANSACCIONES INTO  @cLISTADVTRANSACCIONES__ID, @cLISTADVTRANSACCIONES__VALUE
													  END
													  CLOSE @cLISTADVTRANSACCIONES;
													  DEALLOCATE @cLISTADVTRANSACCIONES;
													  
													END 
													ELSE BEGIN
													  SET @cCODTIPOCOMISION = 0; /* Parameter forces zero value */
													END
													
													IF @cCODTIPOCOMISION <> 0 AND @cCOUNTCOMISIONDIFERENCIALBIN > 0 BEGIN
													  --DECLARE ibx CURSOR FOR SELECT ID, STRINGVALUE, FLOATVALUE FROM @cLISTCOMISIONDIFERENCIALBIN--.First .. cLISTCOMISIONDIFERENCIALBIN.Last WHILE 1=1 BEGIN
													  DECLARE @cLISTCOMISIONDIFERENCIALBIN__ID NUMERIC(38,0), @cLISTCOMISIONDIFERENCIALBIN__STRINGVALUE NVARCHAR(50), @cLISTCOMISIONDIFERENCIALBIN__FLOATVALUE FLOAT

													  FETCH NEXT FROM @cLISTCOMISIONDIFERENCIALBIN INTO @cLISTCOMISIONDIFERENCIALBIN__ID, @cLISTCOMISIONDIFERENCIALBIN__STRINGVALUE, @cLISTCOMISIONDIFERENCIALBIN__FLOATVALUE
													  WHILE @@FETCH_STATUS=0
													  BEGIN
														IF @cLISTCOMISIONDIFERENCIALBIN__STRINGVALUE = @treference__BINTARJETA BEGIN
															SELECT @cCODRANGOCOMISION = ID_RANGOCOMISION,
																 @cCODTIPOCOMISION = CODTIPOCOMISION,
																 @cCODTIPORANGO = CODTIPORANGO
															FROM WSXML_SFG.RANGOCOMISION
															WHERE ID_RANGOCOMISION = CONVERT(NUMERIC,@cLISTCOMISIONDIFERENCIALBIN__FLOATVALUE);
															BREAK;
														END
														FETCH NEXT FROM @cLISTCOMISIONDIFERENCIALBIN INTO @cLISTCOMISIONDIFERENCIALBIN__ID, @cLISTCOMISIONDIFERENCIALBIN__STRINGVALUE, @cLISTCOMISIONDIFERENCIALBIN__FLOATVALUE
													  END
													  CLOSE @cLISTCOMISIONDIFERENCIALBIN
													  DEALLOCATE @cLISTCOMISIONDIFERENCIALBIN
													END
												  
												  END
												  
												END TRY
												BEGIN CATCH
													SET @errormsg = 'No se pudo obtener valores para tarifa diferencial: Se prosigue con tarifa normal. ' + ERROR_MESSAGE ( )  
																			
													EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @p_TIPOADVERTENCIA,
																			'REVENUE',
																			@errormsg,
																			1
													SET @cntwrngs = @cntwrngs + 1;
													IF @cntwrngs >= @maxwrngs BEGIN
													  SET @errormsg = '-20060 Maximo numero de advertencias alcanzado: ' + ERROR_MESSAGE ( )  
													  RAISERROR(@errormsg, 16, 1);
													END 
												END CATCH
											END 
											-- Calcular (Emular) Comision POS Estandar
											  --DECLARE @cpsvcodeTIPOCOMISION   NUMERIC(22,0);
											  SET  @cpsvcalcVALORPORCENTUA = 0;
											  SET @cpsvcalcVALORTRANSCCNL  = 0;
											  
											BEGIN
												BEGIN TRY
													  -- Obtain Values. Mathematical operation goes against transaction values
													  SELECT @cpsvcodeTIPOCOMISION = CODTIPOCOMISION,
															 @cpsvcalcVALORPORCENTUA = VALORPORCENTUAL,
															 @cpsvcalcVALORTRANSCCNL = VALORTRANSACCIONAL
																				   FROM WSXML_SFG.RANGOCOMISION
													   INNER JOIN WSXML_SFG.RANGOCOMISIONDETALLE
														  ON (CODRANGOCOMISION = ID_RANGOCOMISION)
													   WHERE ID_RANGOCOMISION =
															 @cCODRANGOCOMISIONESTANDAR;
															 
													  IF @cpsvcodeTIPOCOMISION IN (1, 2, 3) BEGIN
														IF @cpsvcodeTIPOCOMISION = 1 BEGIN
														  -- Porcentual
														  SET @tmpvCOMISIONPOSESTANDAR = (@cpsvcalcVALORPORCENTUA *
																					 @treference__VALORTRANSACCION) / 100;
														END
														ELSE IF @cpsvcodeTIPOCOMISION = 2 BEGIN
														  -- Transaccional
														  SET @tmpvCOMISIONPOSESTANDAR = @cpsvcalcVALORTRANSCCNL * (1);
														END
														ELSE IF @cpsvcodeTIPOCOMISION = 3 BEGIN
														  -- Mixto
														  SET @tmpvCOMISIONPOSESTANDAR = ((@cpsvcalcVALORPORCENTUA *
																					 @treference__VALORTRANSACCION) / 100) +
																					 (@cpsvcalcVALORTRANSCCNL * (1));
														END 
													  END
													  ELSE BEGIN
														SET @tmpvCOMISIONPOSESTANDAR = 0;
													  END 
												
													 IF @@ROWCOUNT > 1 
														SET @tmpvCOMISIONPOSESTANDAR = 0;
												END TRY
												BEGIN CATCH
													SET @errormsg = '-20080 No existe comision estandar configurada para el producto ' + 
																		ISNULL(WSXML_SFG.PRODUCTO_CODIGO_F(@cCODPRODUCTO), '') + '. No se puede continuar'
													RAISERROR(@errormsg, 16, 1);
												END CATCH
											END;

											SET @cmlCOMISIONPOSESTANDAR = @cmlCOMISIONPOSESTANDAR +
																	  @tmpvCOMISIONPOSESTANDAR;
											-- Forcefully calculate reference level. Mathematical operation goes against transaction values
											IF @cCODTIPOCOMISION IN (1, 2, 3) BEGIN
												SET @cvalcalcVALORPORCENTUA = 0;
												SET @cvalcalcVALORTRANSCCNL = 0;
											  BEGIN
												SELECT @tmpvCODRANGOCOMISIONDETALLE = ID_RANGOCOMISIONDETALLE,
													   @cvalcalcVALORPORCENTUA = VALORPORCENTUAL,
													   @cvalcalcVALORTRANSCCNL = VALORTRANSACCIONAL
																			   FROM WSXML_SFG.RANGOCOMISIONDETALLE
												 WHERE CODRANGOCOMISION = @cCODRANGOCOMISION;
												IF @cCODTIPOCOMISION = 1 BEGIN
												  -- Porcentual
												  SET @tmpvREVENUE = (@cvalcalcVALORPORCENTUA *
																 @treference__VALORTRANSACCION) / 100;
												END
												ELSE IF @cCODTIPOCOMISION = 2 BEGIN
												  -- Transaccional
												  SET @tmpvREVENUE = @cvalcalcVALORTRANSCCNL * (1);
												END
												ELSE IF @cCODTIPOCOMISION = 3 BEGIN
												  -- Mixto
												  SET @tmpvREVENUE = ((@cvalcalcVALORPORCENTUA *
																 @treference__VALORTRANSACCION) / 100) +
																 (@cvalcalcVALORTRANSCCNL * (1));
												END 
											  END;

											END
											ELSE IF @cCODTIPOCOMISION IN (4, 5, 6) BEGIN
												BEGIN
												  DECLARE tCommission CURSOR FOR SELECT ID_RANGOCOMISIONDETALLE,
																			 RANGOINICIAL,
																			 RANGOFINAL,
																			 VALORPORCENTUAL,
																			 VALORTRANSACCIONAL
																		FROM WSXML_SFG.RANGOCOMISIONDETALLE
																	   WHERE CODRANGOCOMISION =
																			 @cCODRANGOCOMISION
																	   ORDER BY RANGOINICIAL; OPEN tCommission;
												 --DECLARE @tCommission__ID_RANGOCOMISIONDETALLE NUMERIC(38,0), @tCommission__RANGOINICIAL FLOAT, @tCommission__RANGOFINAL FLOAT, @tCommission__VALORPORCENTUAL FLOAT, @tCommission__VALORTRANSACCIONAL FLOAT
												 FETCH NEXT FROM tCommission INTO @tCommission__ID_RANGOCOMISIONDETALLE, @tCommission__RANGOINICIAL,
														@tCommission__RANGOFINAL, @tCommission__VALORPORCENTUAL,
														@tCommission__VALORTRANSACCIONAL;
												 WHILE @@FETCH_STATUS=0
												 BEGIN
													IF @treference__VALORTRANSACCION >= @tCommission__RANGOINICIAL AND (@treference__VALORTRANSACCION <= @tCommission__RANGOFINAL OR @tCommission__RANGOFINAL IS NULL) 
													   BEGIN
													  IF @cCODTIPOCOMISION = 4 BEGIN
														-- Rangos Porcentual
														SET @tmpvREVENUE = (@tCommission__VALORPORCENTUAL *
																	   @treference__VALORTRANSACCION) / 100;
													  END
													  ELSE IF @cCODTIPOCOMISION = 5 BEGIN
														-- Rangos Transaccional
														SET @tmpvREVENUE = @tCommission__VALORTRANSACCIONAL * (1);
													  END
													  ELSE IF @cCODTIPOCOMISION = 6 BEGIN
														-- Rangos Mixto
														SET @tmpvREVENUE = ((@tCommission__VALORPORCENTUAL *
																	   @treference__VALORTRANSACCION) / 100) +
																	   (@tCommission__VALORTRANSACCIONAL * (1));
													  END 
													  SET @tmpvCODRANGOCOMISIONDETALLE = @tCommission__ID_RANGOCOMISIONDETALLE;
													  BREAK;
													END 
												  FETCH NEXT FROM tCommission INTO @tCommission__ID_RANGOCOMISIONDETALLE, @tCommission__RANGOINICIAL,
														@tCommission__RANGOFINAL, @tCommission__VALORPORCENTUAL,
														@tCommission__VALORTRANSACCIONAL;
												  END;

												  CLOSE tCommission;
												  DEALLOCATE tCommission;
												END;

											END;

											
											SET @cmlREVENUE = @cmlREVENUE + @tmpvREVENUE;
											IF @cCODTIPOCOMISION <> 0 BEGIN
											  EXEC WSXML_SFG.SFGREGISTROREVENUETRANSACCION_AddRecord @cCODREGISTROREVENUE,
																					  @treference__ID_REGISTROFACTREFERENCIA,
																					  @cCODRANGOCOMISION,
																					  @tmpvCODRANGOCOMISIONDETALLE,
																					  @tmpvREVENUE,
																					  @outCODREGISTROREVENUETRANSC OUT
											END 
										END TRY
										BEGIN CATCH
											  SET @errormsg ='-20085 Error en el ingreso de transaccion anulacion (' +
																	  ISNULL(@treference__ID_REGISTROFACTREFERENCIA, '') +
																	  '): ' + isnull(ERROR_MESSAGE ( )  , '')  ;
											  RAISERROR(@errormsg, 16, 1);
										END CATCH
								  END 
								  
									FETCH NEXT FROM treference INTO @treference__ID_REGISTROFACTREFERENCIA, @treference__VALORTRANSACCION, 
									@treference__CODREGISTROANULADO, @treference__BINTARJETA, @treference__TIPOTRANSACCION;
								END
								CLOSE treference
								DEALLOCATE treference
								
								-- Actualizar Revenue nivel registro
								EXEC WSXML_SFG.SFGREGISTROREVENUE_SetRevenueComisionEstandar @cCODREGISTROREVENUE, @cmlCOMISIONPOSESTANDAR
								EXEC WSXML_SFG.SFGREGISTROREVENUE_UpdateRevenueBaseValue @cCODREGISTROREVENUE, @cmlREVENUE
							  END;

							END ELSE BEGIN
							  -- Verificar si se encontro comision (tarifa) diferencial
							  BEGIN
							  
									BEGIN TRY 
										IF @cCODRANGOCOMISIONDIFAGR <> 0 BEGIN
										  SELECT @cCODRANGOCOMISION = ID_RANGOCOMISION,
												 @cCODTIPOCOMISION = CODTIPOCOMISION,
												 @cCODTIPORANGO = CODTIPORANGO
																   FROM WSXML_SFG.RANGOCOMISION
										   WHERE ID_RANGOCOMISION = @cCODRANGOCOMISIONDIFAGR;
										END
										ELSE IF @cCODRANGOCOMISIONDIFRED <> 0 BEGIN
										  SELECT @cCODRANGOCOMISION = ID_RANGOCOMISION,
												 @cCODTIPOCOMISION = CODTIPOCOMISION,
												 @cCODTIPORANGO = CODTIPORANGO
																   FROM WSXML_SFG.RANGOCOMISION
										   WHERE ID_RANGOCOMISION = @cCODRANGOCOMISIONDIFRED;
										END
										ELSE IF @cCODRANGOCOMISIONDIFDTO <> 0 BEGIN
										  SELECT @cCODRANGOCOMISION = ID_RANGOCOMISION,
												 @cCODTIPOCOMISION = CODTIPOCOMISION,
												 @cCODTIPORANGO = CODTIPORANGO
																   FROM WSXML_SFG.RANGOCOMISION
										   WHERE ID_RANGOCOMISION = @cCODRANGOCOMISIONDIFDTO;
										END
									END TRY
									BEGIN CATCH
										  SET @errormsg = 'No se pudo obtener valores para tarifa diferencial: Se prosigue con tarifa normal. ' + isnull(ERROR_MESSAGE ( ), '');
										 
										  EXEC  SFGALERTA_GenerarAlerta @p_TIPOADVERTENCIA, 'REVENUE', @errormsg,
																  1
										  SET @cntwrngs = @cntwrngs + 1;
										  IF @cntwrngs >= @maxwrngs BEGIN
											SET @errormsg = '-20060 Maximo numero de advertencias alcanzado: ' + isnull(ERROR_MESSAGE(), '')
											RAISERROR(@errormsg, 16, 1);
										  END 
									END CATCH
							  END;


							  -- Calcular (Emular) Comision POS Estandar
								--DECLARE @cpsvcodeTIPOCOMISION   NUMERIC(22,0);
								SET @cpsvcalcVALORPORCENTUA = 0;
								SET @cpsvcalcVALORTRANSCCNL = 0;
							  BEGIN
								-- Obtain Values
								SELECT @cpsvcodeTIPOCOMISION = CODTIPOCOMISION,
									   @cpsvcalcVALORPORCENTUA = VALORPORCENTUAL,
									   @cpsvcalcVALORTRANSCCNL = VALORTRANSACCIONAL
													   FROM WSXML_SFG.RANGOCOMISION
								 INNER JOIN WSXML_SFG.RANGOCOMISIONDETALLE
									ON (CODRANGOCOMISION = ID_RANGOCOMISION)
								 WHERE ID_RANGOCOMISION = @cCODRANGOCOMISIONESTANDAR;
								-- Emular
								IF @cpsvcodeTIPOCOMISION IN (1, 2, 3) BEGIN
								  IF @cpsvcodeTIPOCOMISION = 1 BEGIN
									-- Porcentual
									SET @vCOMISIONPOSESTANDAR = (@cpsvcalcVALORPORCENTUA *
															@cTOTALVENTASBRUTAS) / 100;
								  END
								  ELSE IF @cpsvcodeTIPOCOMISION = 2 BEGIN
									-- Transaccional
									SET @vCOMISIONPOSESTANDAR = @cpsvcalcVALORTRANSCCNL *
															@cNUMTRANSACCIONES;
								  END
								  ELSE IF @cpsvcodeTIPOCOMISION = 3 BEGIN
									-- Mixto
									SET @vCOMISIONPOSESTANDAR = ((@cpsvcalcVALORPORCENTUA *
															@cTOTALVENTASBRUTAS) / 100) +
															(@cpsvcalcVALORTRANSCCNL *
															@cNUMTRANSACCIONES);
								  END 
								END
								ELSE BEGIN
								  SET @vCOMISIONPOSESTANDAR = 0;
								END 
								
								IF @@ROWCOUNT > 1 BEGIN
									SET @vCOMISIONPOSESTANDAR = 0;
								END
								
								IF @@ROWCOUNT = 0 BEGIN
									SET @errormsg =  '-20080 No existe comision estandar configurada para el producto ' +
														  ISNULL(WSXML_SFG.PRODUCTO_CODIGO_F(@cCODPRODUCTO), '') +
														  '. No se puede continuar'
								  RAISERROR(@errormsg, 16, 1);
								END
							  END;


							  -- A partir de este punto se tiene las reglas correctas:
							  IF @cFLAGCOMISIONDIFERENCIALBIN <> 0 AND @cCOUNTCOMISIONDIFERENCIALBIN > 0 BEGIN
								/* Empty Record */
								EXEC WSXML_SFG.SFGREGISTROREVENUE_AddEmptyRecord 
																  @cCODENTRADAARCHIVOCONTROL,
																  @ir__IDVALUE,
																  @cCODTIPOREGISTRO,
																  @cFECHA,
																  @cCODPUNTODEVENTA,
																  @cCODTIPOCONTRATOPDV,
																  @cCODPRODUCTO,
																  @cCODTIPOCONTRATOPRODUCTO,
																  @cCODCOMPANIA,
																  @cCODRANGOCOMISION,
																  @cCODPRODUCTOREVENUE,
																  @vCOMISIONPOSESTANDAR,
																  @cCODREGISTROREVENUE OUT

								--Guarda la informacion de la comision diferencial a la que halla lugar
								IF @cCODRANGOCOMISIONDIFAGR > 0 OR
								   @cCODRANGOCOMISIONDIFRED > 0 OR
								   @cCODRANGOCOMISIONDIFDTO > 0 BEGIN

								  EXEC WSXML_SFG.SFGREGISTROREVENUE_SETREVENUEMULTIPLEDIFERENCIAL
																				   @cCODREGISTROREVENUE,
																				   @ir__IDVALUE,
																				   @cCODPRODUCTO,
																				   @cCODREDPDV,
																				   @cCODAGRUPACIONPUNTODEVENTA,
																				   @cCODCIUDAD

								END 

								/* Iterate every reference, making the diferencial check first */
								  DECLARE @lstTRANSACCIONES WSXML_SFG.IDSTRINGFLOATVALUE;
								BEGIN
									
									INSERT INTO @lstTRANSACCIONES
									SELECT ID_REGISTROFACTREFERENCIA,
															BINTARJETA,
															VALORTRANSACCION
									
									FROM WSXML_SFG.REGISTROFACTREFERENCIA
									WHERE CODREGISTROFACTURACION = @ir__IDVALUE; -- AND ANULADO = 0;

									
								  IF @@ROWCOUNT > 0 BEGIN
									DECLARE itx CURSOR FOR SELECT ID, STRINGVALUE, FLOATVALUE FROM @lstTRANSACCIONES--.First .. lstTRANSACCIONES.Last 
									OPEN itx;
									DECLARE @itx__ID NUMERIC(38,0), @itx__STRINGVALUE NVARCHAR(50), @itx__FLOATVALUE FLOAT
									 FETCH NEXT FROM itx INTO @itx__ID, @itx__STRINGVALUE, @itx__FLOATVALUE;
									 WHILE @@FETCH_STATUS=0
									 BEGIN
										DECLARE @ctxCODRANGOCOMISION            NUMERIC(22,0) = @cCODRANGOCOMISION;
										DECLARE @ctxCODTIPOCOMISION             NUMERIC(22,0) = @cCODTIPOCOMISION;
										DECLARE @ctxCODTIPORANGO                NUMERIC(22,0) = @cCODTIPORANGO;
										SET @vtxREVENUE                     = 0;
										DECLARE @ctxCODRANGOCOMISIONDETALLE     NUMERIC(22,0) = 0;
										DECLARE @ctxCODREGISTROREVENUETRANSACCI NUMERIC(22,0);
									  
										/* Check for type */
										IF @cCOUNTADVTRANSACCIONES > 0 BEGIN
											DECLARE @txTipoTransaccion CHAR(1);
										  BEGIN
											SELECT @txTipoTransaccion = TIPOTRANSACCION
											  FROM WSXML_SFG.REGISTROFACTREFERENCIA
											 WHERE ID_REGISTROFACTREFERENCIA = @itx__ID;
											 
											 --DECLARE idv CURSOR FOR SELECT ID, VALUE FROM @cLISTADVTRANSACCIONES--.First .. cLISTADVTRANSACCIONES.Last 
											 --OPEN idv;
											 --DECLARE @cLISTADVTRANSACCIONES__ID NUMERIC(38,0), @cLISTADVTRANSACCIONES__VALUE NVARCHAR(2000)
											
											 FETCH NEXT FROM @cLISTADVTRANSACCIONES INTO @cLISTADVTRANSACCIONES__ID, @cLISTADVTRANSACCIONES__VALUE;
											 WHILE @@FETCH_STATUS=0
											 BEGIN
											  IF @cLISTADVTRANSACCIONES__VALUE = @txTipoTransaccion AND @cLISTADVTRANSACCIONES__ID = 0 BEGIN
												SET @ctxCODTIPOCOMISION = 0; /* Parameter forces zero value */
												BREAK;
											  END
											  FETCH NEXT FROM @cLISTADVTRANSACCIONES INTO @cLISTADVTRANSACCIONES__ID, @cLISTADVTRANSACCIONES__VALUE;
											 END
											 CLOSE @cLISTADVTRANSACCIONES;
											 DEALLOCATE @cLISTADVTRANSACCIONES
											--END WHILE 1=1 BEGIN;
										  END;
										END
										ELSE
										  SET @ctxCODTIPOCOMISION = 0; /* Parameter forces zero value */
										
										/* Get info */
										IF @ctxCODTIPOCOMISION <> 0 BEGIN
										  FETCH NEXT FROM @cLISTCOMISIONDIFERENCIALBIN INTO @cLISTCOMISIONDIFERENCIALBIN__ID, @cLISTCOMISIONDIFERENCIALBIN__STRINGVALUE, @cLISTCOMISIONDIFERENCIALBIN__FLOATVALUE
										  --FOR ibx IN cLISTCOMISIONDIFERENCIALBIN.First .. cLISTCOMISIONDIFERENCIALBIN.Last WHILE 1=1 BEGIN
										  WHILE @@FETCH_STATUS=0 BEGIN
											IF @cLISTCOMISIONDIFERENCIALBIN__STRINGVALUE = @itx__STRINGVALUE BEGIN
											  SELECT @ctxCODRANGOCOMISION = ID_RANGOCOMISION,
													 @ctxCODTIPOCOMISION = CODTIPOCOMISION,
													 @ctxCODTIPORANGO = CODTIPORANGO
											   FROM WSXML_SFG.RANGOCOMISION
											   WHERE ID_RANGOCOMISION = CONVERT(NUMERIC,@cLISTCOMISIONDIFERENCIALBIN__FLOATVALUE);
											  BREAK
											END
											FETCH NEXT FROM @cLISTCOMISIONDIFERENCIALBIN INTO @cLISTCOMISIONDIFERENCIALBIN__ID, @cLISTCOMISIONDIFERENCIALBIN__STRINGVALUE, @cLISTCOMISIONDIFERENCIALBIN__FLOATVALUE
										  END-- WHILE 1=1 BEGIN;
										  CLOSE @cLISTCOMISIONDIFERENCIALBIN
										  DEALLOCATE @cLISTCOMISIONDIFERENCIALBIN
										END
										IF @ctxCODTIPOCOMISION IN (1, 2, 3) BEGIN
										  DECLARE @ctxvalcalcVALORPORCENTUA FLOAT = 0;
										  DECLARE @ctxvalcalcVALORTRANSCCNL FLOAT = 0;
										  BEGIN
											SELECT @ctxCODRANGOCOMISIONDETALLE = ID_RANGOCOMISIONDETALLE,
												   @ctxvalcalcVALORPORCENTUA = VALORPORCENTUAL,
												   @ctxvalcalcVALORTRANSCCNL = VALORTRANSACCIONAL
																			   FROM WSXML_SFG.RANGOCOMISIONDETALLE
											 WHERE CODRANGOCOMISION =
												   @ctxCODRANGOCOMISION;
											SET @vtxREVENUE = 	CASE WHEN @ctxCODTIPOCOMISION IN (1, 3) THEN (@ctxvalcalcVALORPORCENTUA * @itx__FLOATVALUE) / 100 ELSE 0 END 
																+ 
																CASE WHEN @ctxCODTIPOCOMISION IN (2, 3) THEN (@ctxvalcalcVALORTRANSCCNL * 1) ELSE 0 END;

										  END 
										END ELSE IF @ctxCODTIPOCOMISION IN (4, 5, 6) BEGIN
										  DECLARE ttxCommission CURSOR FOR SELECT ID_RANGOCOMISIONDETALLE,
																	   RANGOINICIAL,
																	   RANGOFINAL,
																	   VALORPORCENTUAL,
																	   VALORTRANSACCIONAL
																  FROM WSXML_SFG.RANGOCOMISIONDETALLE
																 WHERE CODRANGOCOMISION =
																	   @ctxCODRANGOCOMISION
																 ORDER BY RANGOINICIAL; OPEN ttxCommission;
										  DECLARE @ttxCommission__ID_RANGOCOMISIONDETALLE NUMERIC(38,0), @ttxCommission__RANGOINICIAL FLOAT, @ttxCommission__RANGOFINAL FLOAT, @ttxCommission__VALORPORCENTUAL FLOAT , @ttxCommission__VALORTRANSACCIONAL FLOAT
										  FETCH NEXT FROM ttxCommission INTO @ttxCommission__ID_RANGOCOMISIONDETALLE, @ttxCommission__RANGOINICIAL, @ttxCommission__RANGOFINAL, @ttxCommission__VALORPORCENTUAL, @ttxCommission__VALORTRANSACCIONAL;
										  WHILE @@FETCH_STATUS=0
										  BEGIN
											IF @itx__FLOATVALUE >= @ttxCommission__RANGOINICIAL AND 
												(@itx__FLOATVALUE <= @ttxCommission__RANGOFINAL OR @ttxCommission__RANGOFINAL IS NULL) BEGIN
											  SET @vtxREVENUE   =	 CASE WHEN @ctxCODTIPOCOMISION IN (4, 6) THEN (@ttxCommission__VALORPORCENTUAL * @itx__FLOATVALUE) / 100 ELSE 0 END
																	+ CASE WHEN @ctxCODTIPOCOMISION IN (5, 6) THEN (@ttxCommission__VALORTRANSACCIONAL * 1) ELSE 0 END;

											  SET @ctxCODRANGOCOMISIONDETALLE = @ttxCommission__ID_RANGOCOMISIONDETALLE;
											  BREAK;
											END
											FETCH NEXT FROM ttxCommission INTO @ttxCommission__ID_RANGOCOMISIONDETALLE, @ttxCommission__RANGOINICIAL, @ttxCommission__RANGOFINAL, @ttxCommission__VALORPORCENTUAL, @ttxCommission__VALORTRANSACCIONAL;
										  END
										  CLOSE ttxCommission;
										  DEALLOCATE ttxCommission;
										  --END WHILE 1=1 BEGIN;
										END
										
										SET @vREVENUE = @vREVENUE + @vtxREVENUE;
										
										IF @ctxCODTIPOCOMISION <> 0 BEGIN
										  EXEC WSXML_SFG.SFGREGISTROREVENUETRANSACCION_AddRecord 
																				  @cCODREGISTROREVENUE,
																				  @itx__ID,
																				  @ctxCODRANGOCOMISION,
																				  @ctxCODRANGOCOMISIONDETALLE,
																				  @vtxREVENUE,
																				  @ctxCODREGISTROREVENUETRANSACCI OUT
										END 
										FETCH NEXT FROM itx INTO @itx__ID, @itx__STRINGVALUE, @itx__FLOATVALUE;
									END;

									 CLOSE itx;
									 DEALLOCATE itx;
									 --END WHILE 1=1 BEGIN;
								  END
								  -- Actualizar Revenue nivel registro
								  EXEC WSXML_SFG.SFGREGISTROREVENUE_UpdateRevenueTotalValue @cCODREGISTROREVENUE,@vREVENUE
								END;

							  END
							  ELSE BEGIN
								IF @cCODTIPOCOMISION IN (1, 2, 3) BEGIN
									SET @cvalcalcVALORPORCENTUA  = 0;
									SET @cvalcalcVALORTRANSCCNL = 0;
								  BEGIN
									SELECT @cvalcalcVALORPORCENTUA = VALORPORCENTUAL, @cvalcalcVALORTRANSCCNL = VALORTRANSACCIONAL
															   FROM WSXML_SFG.RANGOCOMISIONDETALLE
									 WHERE CODRANGOCOMISION = @cCODRANGOCOMISION;

									/* if @ir__IDVALUE = 63689023 then
									null;
									end if;*/

									IF @cCODTIPOCOMISION = 1 BEGIN
									  -- Porcentual
									  SET @vREVENUE = (@cvalcalcVALORPORCENTUA * 
												  @cTOTALVENTASBRUTAS) / 100;

									END
									ELSE IF @cCODTIPOCOMISION = 2 BEGIN
									  -- Transaccional
									  SET @vREVENUE = @cvalcalcVALORTRANSCCNL *
												  @cNUMTRANSACCIONES;
									END
									ELSE IF @cCODTIPOCOMISION = 3 BEGIN
									  -- Mixto
									  SET @vREVENUE = ((@cvalcalcVALORPORCENTUA *
												  @cTOTALVENTASBRUTAS) / 100) +
												  (@cvalcalcVALORTRANSCCNL *
												  @cNUMTRANSACCIONES);
									END 
									/*if vREVENUE is null then
									vREVENUE:=0;
									end if;*/
								  END;


								  EXEC WSXML_SFG.SFGREGISTROREVENUE_AddRecord 
															   @cCODENTRADAARCHIVOCONTROL,
															   @ir__IDVALUE,
															   @cCODTIPOREGISTRO,
															   @cFECHA,
															   @cCODPUNTODEVENTA,
															   @cCODTIPOCONTRATOPDV,
															   @cCODPRODUCTO,
															   @cCODTIPOCONTRATOPRODUCTO,
															   @cCODCOMPANIA,
															   @cCODRANGOCOMISION,
															   @vREVENUE,
															   @cCODPRODUCTOREVENUE,
															   @vCOMISIONPOSESTANDAR,
															   @cCODREGISTROREVENUE OUT

								  --Guarda la informacion de la comision diferencial a la que halla lugar
								  IF @cCODRANGOCOMISIONDIFAGR > 0 OR
									 @cCODRANGOCOMISIONDIFRED > 0 OR
									 @cCODRANGOCOMISIONDIFDTO > 0 BEGIN

									EXEC WSXML_SFG.SFGREGISTROREVENUE_SETREVENUEMULTIPLEDIFERENCIAL
																					@cCODREGISTROREVENUE,
																					@ir__IDVALUE,
																					@cCODPRODUCTO,
																					@cCODREDPDV,
																					@cCODAGRUPACIONPUNTODEVENTA,
																					@cCODCIUDAD 

								  END 

								END
								ELSE IF @cCODTIPOCOMISION IN (4, 5, 6) BEGIN
								  -- Empty Record
								  EXEC WSXML_SFG.SFGREGISTROREVENUE_AddEmptyRecord
																	@cCODENTRADAARCHIVOCONTROL,
																	@ir__IDVALUE,
																	@cCODTIPOREGISTRO,
																	@cFECHA,
																	@cCODPUNTODEVENTA,
																	@cCODTIPOCONTRATOPDV,
																	@cCODPRODUCTO,
																	@cCODTIPOCONTRATOPRODUCTO,
																	@cCODCOMPANIA,
																	@cCODRANGOCOMISION,
																	@cCODPRODUCTOREVENUE,
																	@vCOMISIONPOSESTANDAR,
																	@cCODREGISTROREVENUE OUT

								  --Guarda la informacion de la comision diferencial a la que halla lugar
								  IF @cCODRANGOCOMISIONDIFAGR > 0 OR
									 @cCODRANGOCOMISIONDIFRED > 0 OR
									 @cCODRANGOCOMISIONDIFDTO > 0 BEGIN

									EXEC WSXML_SFG.SFGREGISTROREVENUE_SETREVENUEMULTIPLEDIFERENCIAL
																					@cCODREGISTROREVENUE,
																					@ir__IDVALUE,
																					@cCODPRODUCTO,
																					@cCODREDPDV,
																					@cCODAGRUPACIONPUNTODEVENTA,
																					@cCODCIUDAD

								  END 

								  -- Iterar transacciones
									DECLARE @lstTRANSACCIONES2 WSXML_SFG.TRANSACCIONVALOR;
								  BEGIN
									
									INSERT   INTO @lstTRANSACCIONES2
									SELECT ID_REGISTROFACTREFERENCIA, VALORTRANSACCION
									
									  FROM WSXML_SFG.REGISTROFACTREFERENCIA
									 WHERE CODREGISTROFACTURACION = @ir__IDVALUE; -- AND ANULADO = 0;

									IF @@ROWCOUNT > 0 BEGIN
									  DECLARE itx CURSOR FOR SELECT ID_REGISTROFACTREFERENCIA,VALORTRANSACCION FROM @lstTRANSACCIONES2--.First .. lstTRANSACCIONES.Last 						  
									  
									  OPEN itx;
									  DECLARE @itx__ID_REGISTROFACTREFERENCIA NUMERIC(38,0), @itx__VALORTRANSACCION FLOAT
									  
									  FETCH NEXT FROM itx INTO @itx__ID_REGISTROFACTREFERENCIA, @itx__VALORTRANSACCION;
									  WHILE @@FETCH_STATUS=0
									  BEGIN
										  SET @vtxREVENUE                     = 0;
										  DECLARE @cCODRANGOCOMISIONDETALLE       NUMERIC(22,0) = 0;
										  DECLARE @cCODREGISTROREVENUETRANSACCION NUMERIC(22,0);
										BEGIN
										  DECLARE tCommission CURSOR FOR SELECT ID_RANGOCOMISIONDETALLE,
																	 RANGOINICIAL,
																	 RANGOFINAL,
																	 VALORPORCENTUAL,
																	 VALORTRANSACCIONAL
																FROM WSXML_SFG.RANGOCOMISIONDETALLE
															   WHERE CODRANGOCOMISION =
																	 @cCODRANGOCOMISION
															   ORDER BY RANGOINICIAL; OPEN tCommission;
										  --DECLARE @tCommission__ID_RANGOCOMISIONDETALLE NUMERIC(38,0), @tCommission__RANGOINICIAL FLOAT, @tCommission__RANGOFINAL FLOAT, @tCommission__VALORPORCENTUAL FLOAT, @tCommission__VALORTRANSACCIONAL FLOAT
										  FETCH NEXT FROM tCommission INTO @tCommission__ID_RANGOCOMISIONDETALLE, @tCommission__RANGOINICIAL, @tCommission__RANGOFINAL, @tCommission__VALORPORCENTUAL, @tCommission__VALORTRANSACCIONAL;
										  WHILE @@FETCH_STATUS=0
										  BEGIN
											IF @itx__VALORTRANSACCION >= @tCommission__RANGOINICIAL AND
												(@itx__VALORTRANSACCION <= @tCommission__RANGOFINAL OR @tCommission__RANGOFINAL IS NULL) BEGIN
											  IF @cCODTIPOCOMISION = 4 BEGIN
												-- Rangos Porcentual
												SET @vtxREVENUE = (@tCommission__VALORPORCENTUAL * @itx__VALORTRANSACCION) / 100;
											  END
											  ELSE IF @cCODTIPOCOMISION = 5 BEGIN
												-- Rangos Transaccional
												SET @vtxREVENUE = @tCommission__VALORTRANSACCIONAL * (1);
											  END
											  ELSE IF @cCODTIPOCOMISION = 6 BEGIN
												-- Rangos Mixto
												SET @vtxREVENUE = ((@tCommission__VALORPORCENTUAL * @itx__VALORTRANSACCION) / 100) + 
															  (@tCommission__VALORTRANSACCIONAL * (1));
											  END 
											  SET @cCODRANGOCOMISIONDETALLE = @tCommission__ID_RANGOCOMISIONDETALLE;
											  BREAK;
											END
											FETCH NEXT FROM tCommission INTO @tCommission__ID_RANGOCOMISIONDETALLE, @tCommission__RANGOINICIAL, @tCommission__RANGOFINAL, @tCommission__VALORPORCENTUAL, @tCommission__VALORTRANSACCIONAL;
										  END
										  CLOSE tCommission;
										  DEALLOCATE tCommission;
										  
										  --END WHILE 1=1 BEGIN;
										  SET @vREVENUE = @vREVENUE + @vtxREVENUE;
										  EXEC WSXML_SFG.SFGREGISTROREVENUETRANSACCION_AddRecord 
																				  @cCODREGISTROREVENUE,
																				  @itx__ID_REGISTROFACTREFERENCIA,
																				  @cCODRANGOCOMISION,
																				  @cCODRANGOCOMISIONDETALLE,
																				  @vtxREVENUE,
																				  @cCODREGISTROREVENUETRANSACCION OUT
										END;
										
										FETCH NEXT FROM itx INTO @itx__ID_REGISTROFACTREFERENCIA, @itx__VALORTRANSACCION;
									  END --WHILE 1=1 BEGIN;
									  CLOSE itx;
									  DEALLOCATE itx;
									END
									-- Actualizar Revenue nivel registro
									EXEC WSXML_SFG.SFGREGISTROREVENUE_UpdateRevenueTotalValue @cCODREGISTROREVENUE,@vREVENUE
								 
								  END;

								 
								END 
							  END
							END

							-- Actualizar Valores de Padre (Producto)
							EXEC WSXML_SFG.SFGPRODUCTOREVENUE_UpdateProductEntry @cCODPRODUCTOREVENUE, @vREVENUE
						END TRY
						BEGIN CATCH
							  SET @errormsg = '-20080 Error calculando el revenue para el registro facturacion ' +
													  ISNULL(@ir__IDVALUE, '') +
													  '. No se puede continuar.' +
													  isnull(ERROR_MESSAGE ( )  , '')
							  RAISERROR(@errormsg, 16, 1);
						END CATCH

				  END 
				  
					SET @countrecords = @countrecords + 1;

					IF (@countrecords % @waitnrecords) = 0 BEGIN
					EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA, @countrecords
					COMMIT;
				  END 

					FETCH NEXT FROM ir INTO @ir__IDVALUE;
				END --WHILE 1=1 BEGIN;
				CLOSE ir
				DEALLOCATE ir
				
			  END
			END;

				UPDATE WSXML_SFG.ENTRADAARCHIVOCONTROL
				   SET REVENUECALCULADO = 1
				WHERE ID_ENTRADAARCHIVOCONTROL = @ix__IDVALUE;
				 
				FETCH NEXT FROM ix INTO @ix__IDVALUE;
		  END --WHILE 1=1 BEGIN;
		  CLOSE ix
		  DEALLOCATE ix
		  
		  EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_FinalizeExecution @p_CODDETALLETAREAEJECUTADA, 'Distribuyendo incentivos globales'
		
		   SET @errormsg = 'Guillermo Prueba ' + CONVERT(VARCHAR,getdate(), 114)  + ' -- Distribuyendo incentivos globales '
		   EXEC WSXML_SFG.sfgtmptrace_TraceLog @errormsg
		  COMMIT;

		  -- Calcular valores fijos y distribucion (obtener desde archivo)
		  BEGIN
			IF (SELECT COUNT(*) FROM @lstFILES) + @countfilescl = @countservics BEGIN
			  -- Unmatching dependence logic goes here
			  DECLARE incentivo CURSOR FOR SELECT INC.ID_INCENTIVOCOMISIONGLOBAL,
									   INC.CODPERIODICIDAD,
									   INC.CODPUNTODEVENTATRANSACCION,
									   INC.CODPRODUCTOTRANSACCION,
									   COALESCE(HST.VALORFIJO, INC.VALORFIJO) AS VALORFIJO,
									   HST.ID_INCENTIVOCOMISIONHISTORICO
								  FROM WSXML_SFG.INCENTIVOCOMISIONGLOBAL INC
								  LEFT OUTER JOIN WSXML_SFG.INCENTIVOCOMISIONHISTORICO HST
									ON (HST.CODINCENTIVOCOMISIONGLOBAL =
									   INC.ID_INCENTIVOCOMISIONGLOBAL AND
									   HST.FECHAINICIOVALIDEZ = @cFECHA)
								 WHERE INC.ACTIVE = 1; OPEN incentivo;
				
				DECLARE @incentivo__ID_INCENTIVOCOMISIONGLOBAL NUMERIC(38,0), @incentivo__CODPERIODICIDAD NUMERIC(38,0),
									   @incentivo__CODPUNTODEVENTATRANSACCION NUMERIC(38,0), @incentivo__CODPRODUCTOTRANSACCION NUMERIC(38,0),
									   @incentivo__VALORFIJO FLOAT,@incentivo__ID_INCENTIVOCOMISIONHISTORICO NUMERIC(38,0)
			 
			 FETCH incentivo INTO @incentivo__ID_INCENTIVOCOMISIONGLOBAL, @incentivo__CODPERIODICIDAD,
									   @incentivo__CODPUNTODEVENTATRANSACCION, @incentivo__CODPRODUCTOTRANSACCION,
									   @incentivo__VALORFIJO,@incentivo__ID_INCENTIVOCOMISIONHISTORICO;
			 WHILE @@FETCH_STATUS=0
			 BEGIN
				IF @incentivo__ID_INCENTIVOCOMISIONHISTORICO IS NOT NULL BEGIN
				  UPDATE WSXML_SFG.INCENTIVOCOMISIONGLOBAL
					 SET VALORFIJO = @incentivo__VALORFIJO
				   WHERE ID_INCENTIVOCOMISIONGLOBAL =
						 @incentivo__ID_INCENTIVOCOMISIONGLOBAL;
				END 
				  DECLARE @dailyfixedvalue FLOAT = 0;
				BEGIN
				  -- Determinar distribucion de acuerdo a periodicidad
				  IF @incentivo__CODPERIODICIDAD = 1 BEGIN
					-- Diaria: Do not divide
					SET @dailyfixedvalue = @incentivo__VALORFIJO;
				  END
				  ELSE IF @incentivo__CODPERIODICIDAD = 2 BEGIN
					-- Semanal: Divide between 7
					SET @dailyfixedvalue = @incentivo__VALORFIJO / 7;
				  END
				  ELSE IF @incentivo__CODPERIODICIDAD = 3 BEGIN
					-- Mensual: Divide between SFG_PACKAGE.DaysInMonth
					SET @dailyfixedvalue = @incentivo__VALORFIJO /
									   WSXML_SFG.SFG_PACKAGE_DaysInMonth(@cFECHA);
				  END
				  ELSE BEGIN
					SET @dailyfixedvalue = 0; -- Do not continue: Hourly and Once cannot be assigned
				  END 
				  IF @dailyfixedvalue > 0 BEGIN
					-- Distribute amongst the registries where assigned revenue belongs
					  DECLARE @lstREVENUEREGISTRIES WSXML_SFG.IDVALUE;
					  DECLARE @xSUMTRANSACCIONES    NUMERIC(22,0) = 0;
					  DECLARE @lstCOMMISSIONS       WSXML_SFG.NUMBERARRAY;
					BEGIN
						INSERT INTO @lstCOMMISSIONS
					  SELECT ID_RANGOCOMISION
						FROM WSXML_SFG.RANGOCOMISION
					   WHERE CODINCENTIVOCOMISIONGLOBAL = @incentivo__ID_INCENTIVOCOMISIONGLOBAL;
					  IF @@ROWCOUNT > 0 BEGIN
						-- Obtener lista de registros con numero de transacciones para cada una
						INSERT INTO @lstREVENUEREGISTRIES
						SELECT ID_REGISTROREVENUE AS ID,
									   CASE
										 WHEN REV.CODTIPOREGISTRO IN (1, 3) THEN
										  NUMTRANSACCIONES
										 WHEN REV.CODTIPOREGISTRO = 2 THEN
										  NUMTRANSACCIONES * (-1)
										 ELSE
										  0
									   END  AS VALUE
						  
						  FROM WSXML_SFG.REGISTROREVENUE REV
						 INNER JOIN WSXML_SFG.REGISTROFACTURACION REG
							ON (CODREGISTROFACTURACION = ID_REGISTROFACTURACION)
						 WHERE REV.FECHA = @cFECHA
						   AND REV.CODRANGOCOMISION IN
							   (SELECT IDVALUE FROM @lstCOMMISSIONS)
						   AND REV.CODTIPOREGISTRO IN (1, 2, 3)
						   ORDER BY REV.CODTIPOREGISTRO DESC, REV.ID_REGISTROREVENUE ASC;
						-- Obtener total de transacciones sobre las cual se realiza la distribucion
						IF @@ROWCOUNT > 0 BEGIN
						  DECLARE itm CURSOR FOR SELECT ID, VALUE FROM @lstREVENUEREGISTRIES--.First .. lstREVENUEREGISTRIES.Last 
						  OPEN itm;
						  
						  DECLARE @itm__ID NUMERIC(38,0), @itm__VALUE FLOAT
						  
						 FETCH NEXT FROM itm INTO @itm__ID, @itm__VALUE;
						 WHILE @@FETCH_STATUS=0
						 BEGIN
							SET @xSUMTRANSACCIONES = @xSUMTRANSACCIONES + @itm__VALUE;
							SET @itm__VALUE = ABS(@itm__VALUE);
							FETCH NEXT FROM itm INTO @itm__ID, @itm__VALUE;
						 END;

						 CLOSE itm;
						 DEALLOCATE itm;
						END 
						IF (SELECT COUNT(*) FROM @lstREVENUEREGISTRIES) > 0 AND @xSUMTRANSACCIONES > 0 BEGIN
						  -- Distribucion de acuerdo a los registros encontratos
						  DECLARE irev CURSOR FOR SELECT ID, VALUE FROM @lstREVENUEREGISTRIES--.First .. lstREVENUEREGISTRIES.Last 
						  OPEN irev;
						  
						  DECLARE @irev__ID NUMERIC(38,0), @irev__VALUE FLOAT
						  
						 FETCH NEXT FROM irev INTO @irev__ID, @irev__VALUE;
						 WHILE @@FETCH_STATUS=0
						 BEGIN
						  --DECLARE @cCODPRODUCTOREVENUE NUMERIC(22,0);
						  DECLARE @registryvalue       FLOAT;
							BEGIN
								BEGIN TRY
								  IF @xSUMTRANSACCIONES = 0 BEGIN
									-- Nunca suma cero
									SET @registryvalue = @dailyfixedvalue;
								  END
								  ELSE BEGIN
									SET @registryvalue = (@dailyfixedvalue * @irev__VALUE) / @xSUMTRANSACCIONES;
								  END 
								  EXEC WSXML_SFG.SFGREGISTROREVENUEINCENTIVO_AddRecord 
																@irev__ID,
																@incentivo__ID_INCENTIVOCOMISIONGLOBAL,
																@registryvalue

								  SELECT @cCODPRODUCTOREVENUE = CODPRODUCTOREVENUE
									FROM WSXML_SFG.REGISTROREVENUE
								   WHERE ID_REGISTROREVENUE = @irev__ID;
								  
								  EXEC WSXML_SFG.SFGREGISTROREVENUE_AppendRecordValues @irev__ID, @registryvalue
								  EXEC WSXML_SFG.SFGPRODUCTOREVENUE_UpdateProductEntry @cCODPRODUCTOREVENUE, @registryvalue
								END TRY
								BEGIN CATCH
									RAISERROR('-20054 No se puede distribuir el fijo calculado para el grupo de transacciones adjuntas', 16, 1);
								END CATCH
							END;

							FETCH NEXT FROM irev INTO @irev__ID, @irev__VALUE;
						 END;

						 CLOSE irev;
						 DEALLOCATE irev;
						END
						ELSE BEGIN
						  /* NO EXISTEN TRANSACCIONES, PERO PUEDEN EXISTIR REGISTROS */
						  -- Assign null sales entry from first file
							--DECLARE @cCODENTRADAARCHIVOCONTROL   NUMERIC(22,0);
							--DECLARE @cCODTIPOREGISTRO            NUMERIC(22,0) = @VENTAFACT;
							--DECLARE @cCODPUNTODEVENTA            NUMERIC(22,0) = @incentivo__CODPUNTODEVENTATRANSACCION;
							--DECLARE @cCODPRODUCTO                NUMERIC(22,0) = @incentivo__CODPRODUCTOTRANSACCION;
							DECLARE @cCODREGIMEN                 NUMERIC(22,0);
							--DECLARE @cCODAGRUPACIONPUNTODEVENTA  NUMERIC(22,0);
							--DECLARE @cCODREDPDV                  NUMERIC(22,0);
							--DECLARE @cCODCIUDAD                  NUMERIC(22,0);
							DECLARE @cIDENTIFICACION             NUMERIC(22,0);
							DECLARE @cDIGITOVERIFICACION         NUMERIC(22,0);
							--DECLARE @cCODCOMPANIA                NUMERIC(22,0);
							DECLARE @cCODALIADOESTRATEGICO       NUMERIC(22,0);
							DECLARE @cCODRANGOCOMISIONFACTURACN  NUMERIC(22,0);
							DECLARE @cCODTIPOCOMISIONFACTURACN   NUMERIC(22,0);
							DECLARE @cCOMISIONANTICIPOFACTURACN  NUMERIC(22,0);
							DECLARE @cVALCALCPORCENTUAFACTURACN  NUMERIC(22,0);
							DECLARE @cVALCALCTRANSCCNLFACTURACN  NUMERIC(22,0);
							DECLARE @cPLANTILLAFACTURACN         NUMERIC(22,0);
							DECLARE @xFLAGADVANCEDCOMMISSION     NUMERIC(22,0);
							--DECLARE @cCODTIPOCONTRATOPDV         NUMERIC(22,0);
							DECLARE @cCODRAZONSOCIAL             NUMERIC(22,0);
							--DECLARE @cCODTIPOCONTRATOPRODUCTO    NUMERIC(22,0);
							DECLARE @cDUENOTERMINAL              NUMERIC(22,0);
							DECLARE @cFACTURABLE                 NUMERIC(22,0);
							DECLARE @cCODREGISTROFACTURACION     NUMERIC(22,0);
							--DECLARE @cNUMTRANSACCIONES           NUMERIC(22,0) = 0;
							--DECLARE @cVALORTRANSACCION           FLOAT = 0;
							--DECLARE @cTOTALVENTASBRUTAS          FLOAT = 0;
							--DECLARE @cCODRANGOCOMISION           NUMERIC(22,0);
							--DECLARE @cCODTIPOCOMISION            NUMERIC(22,0);
							--DECLARE @cCODTIPORANGO               NUMERIC(22,0);
							--DECLARE @cCODRANGOCOMISIONDIFAGR     NUMERIC(22,0);
							--DECLARE @cCODRANGOCOMISIONDIFRED     NUMERIC(22,0);
							--DECLARE @cCODRANGOCOMISIONDIFDTO     NUMERIC(22,0);
							--DECLARE @cFLAGCOMISIONDIFERENCIALBIN NUMERIC(22,0);
							--DECLARE @cLISTCOMISIONDIFERENCIALBIN CURSOR-- WSXML_SFG.IDSTRINGFLOATVALUE;
							--DECLARE @cCOUNTCOMISIONDIFERENCIALBIN NUMERIC(22,0)
							--DECLARE @cLISTADVTRANSACCIONES       CURSOR--WSXML_SFG.IDSTRINGVALUE;
							--DECLARE @cCOUNTADVTRANSACCIONES       NUMERIC(22,0)
							--DECLARE @cCODRANGOCOMISIONESTANDAR   NUMERIC(22,0);
							--DECLARE @cCODPRODUCTOREVENUE         NUMERIC(22,0);
							--DECLARE @cCODREGISTROREVENUE         NUMERIC(22,0);
							DECLARE @lstDistributionProducts     WSXML_SFG.NUMBERARRAY;
							
							BEGIN
								BEGIN TRY
								  
									-- Encontrar el archivo al que pertenece el producto configurado
									SELECT @cCODENTRADAARCHIVOCONTROL = ID_ENTRADAARCHIVOCONTROL
									  FROM WSXML_SFG.ENTRADAARCHIVOCONTROL
									 WHERE CONVERT(DATETIME, CONVERT(DATE,FECHAARCHIVO)) = @cFECHA
									   AND REVERSADO = 0
									   AND TIPOARCHIVO =
										   (SELECT CODSERVICIO
											  FROM WSXML_SFG.PRODUCTO
											 INNER JOIN TIPOPRODUCTO
												ON (CODTIPOPRODUCTO = ID_TIPOPRODUCTO)
											 INNER JOIN LINEADENEGOCIO
												ON (CODLINEADENEGOCIO =
												   ID_LINEADENEGOCIO)
											 WHERE ID_PRODUCTO =
												   @incentivo__CODPRODUCTOTRANSACCION);
									-- PROCESO DE PREFACTURACION
									-- Obtencion de reglas de facturacion.
									EXEC WSXML_SFG.SFGPUNTODEVENTA_ObtainBillingRules
																	   @cCODPUNTODEVENTA,
																	   @cCODPRODUCTO,
																	   @cCODREGIMEN OUT,
																	   @cCODAGRUPACIONPUNTODEVENTA OUT,
																	   @cCODREDPDV OUT,
																	   @cIDENTIFICACION OUT,
																	   @cDIGITOVERIFICACION OUT,
																	   @cCODCIUDAD OUT,
																	   @cCODCOMPANIA OUT,
																	   @cCODALIADOESTRATEGICO OUT,
																	   @cCODTIPOCONTRATOPDV OUT,
																	   @cCODRAZONSOCIAL OUT,
																	   @cCODTIPOCONTRATOPRODUCTO OUT,
																	   @cDUENOTERMINAL OUT,
																	   @cFACTURABLE OUT
									-- Busqueda de comision facturacion. Advanced commission does not become necessary. Just the general markup
									EXEC WSXML_SFG.SFGPLANTILLAPRODUCTO_GetPinpointComissionValues
																					@cCODPUNTODEVENTA,
																					@cCODPRODUCTO,
																					@cCODRANGOCOMISIONFACTURACN OUT,
																					@cCODTIPOCOMISIONFACTURACN OUT,
																					@cCOMISIONANTICIPOFACTURACN OUT,
																					@cVALCALCPORCENTUAFACTURACN OUT,
																					@cVALCALCTRANSCCNLFACTURACN OUT,
																					@cPLANTILLAFACTURACN OUT,
																					@xFLAGADVANCEDCOMMISSION OUT 

									-- Obtener los productos sobre los que se debe distribuir el fijo
									INSERT INTO @lstDistributionProducts
									SELECT ID_PRODUCTO
									  FROM WSXML_SFG.PRODUCTO
									 INNER JOIN WSXML_SFG.PRODUCTOCONTRATO PCT
										ON (CODPRODUCTO = ID_PRODUCTO)
									  LEFT OUTER JOIN WSXML_SFG.PRODCONTRATOHISTORICO PCH
										ON (FECHAINICIOVALIDEZ = @cFECHA AND
										   CODPRODUCTOCONTRATO = ID_PRODUCTOCONTRATO)
									 WHERE COALESCE(PCH.CODRANGOCOMISION,
													PCT.CODRANGOCOMISION) IN
										   (SELECT IDVALUE FROM @lstCOMMISSIONS);

									IF @@ROWCOUNT > 0 BEGIN
										SET @errormsg = 'Distribution product count ' + @@ROWCOUNT  +
														   ' for fixed value ' + @incentivo__ID_INCENTIVOCOMISIONGLOBAL
									  EXEC WSXML_SFG.SFGTMPTRACE_TraceLog @errormsg
										DECLARE @eqDistribution FLOAT = 0;
										DECLARE @tmpDstrProduct NUMERIC(22,0);
										DECLARE @tmpFctRegistry NUMERIC(22,0);
										DECLARE @tmpRevRegistry NUMERIC(22,0);
										
										BEGIN
										SET @eqDistribution = @dailyfixedvalue / (SELECT COUNT(*) FROM @lstDistributionProducts)
										DECLARE ipx CURSOR FOR SELECT IDVALUE FROM @lstDistributionProducts--.First .. lstDistributionProducts.Last 
										OPEN ipx;
										
										DECLARE @ipx__IDVALUE NUMERIC(38,0)
										FETCH NEXT FROM ipx INTO @ipx__IDVALUE;
										
										WHILE @@FETCH_STATUS=0
										BEGIN
										  -- Creacion de registro de prefacturacion
										  BEGIN
											-- Utilizar llave unica CODENTRADAARCHIVOCONTROL, CODPUNTODEVENTA, CODPRODUCTO, CODTIPOREGISTRO
											SELECT @tmpFctRegistry = ID_REGISTROFACTURACION
											  FROM WSXML_SFG.REGISTROFACTURACION
											 WHERE CODENTRADAARCHIVOCONTROL =
												   @cCODENTRADAARCHIVOCONTROL
											   AND CODPUNTODEVENTA = @cCODPUNTODEVENTA
											   AND CODPRODUCTO =
												   @ipx__IDVALUE
											   AND CODTIPOREGISTRO = @cCODTIPOREGISTRO;
											  
											  IF @@ROWCOUNT = 0
												EXEC WSXML_SFG.SFGREGISTROFACTURACION_AddRecord
																			   @cCODENTRADAARCHIVOCONTROL,
																			   @cCODPUNTODEVENTA,
																			   @ipx__IDVALUE,
																			   @cCODTIPOREGISTRO,
																			   @cVALORTRANSACCION,
																			   @cFECHA,
																			   @cNUMTRANSACCIONES,
																			   @cCODRANGOCOMISIONFACTURACN,
																			   @cCOMISIONANTICIPOFACTURACN,
																			   0,
																			   0,
																			   @cCODCOMPANIA,
																			   @cCODREGIMEN,
																			   @cCODAGRUPACIONPUNTODEVENTA,
																			   @cCODREDPDV,
																			   @cIDENTIFICACION,
																			   @cDIGITOVERIFICACION,
																			   @cCODCIUDAD,
																			   @cCODTIPOCONTRATOPDV,
																			   @cCODRAZONSOCIAL,
																			   @cCODTIPOCONTRATOPRODUCTO,
																			   @cDUENOTERMINAL,
																			   1,
																			   @tmpFctRegistry OUT
										  END;

										  -- Obtener valores de registro y revenue
										  EXEC WSXML_SFG.SFGREGISTROREVENUE_GetRegistryRevenueValues  
																   @cFECHA,
																   @tmpFctRegistry,
																   @cCODENTRADAARCHIVOCONTROL OUT,
																   @cCODTIPOREGISTRO OUT,
																   @cCODPUNTODEVENTA OUT,
																   @cCODTIPOCONTRATOPDV OUT,
																   @tmpDstrProduct OUT,
																   @cCODTIPOCONTRATOPRODUCTO OUT,
																   @cCODCOMPANIA OUT,
																   @cNUMTRANSACCIONES OUT,
																   @cVALORTRANSACCION OUT,
																   @cTOTALVENTASBRUTAS OUT,
																   @cCODAGRUPACIONPUNTODEVENTA OUT,
																   @cCODREDPDV OUT,
																   @cCODCIUDAD OUT,
																   @cCODRANGOCOMISION OUT,
																   @cCODTIPOCOMISION OUT,
																   @cCODTIPORANGO OUT,
																   @cCODRANGOCOMISIONDIFAGR OUT,
																   @cCODRANGOCOMISIONDIFRED OUT,
																   @cCODRANGOCOMISIONDIFDTO OUT,
																   @cFLAGCOMISIONDIFERENCIALBIN OUT,
																   @cLISTCOMISIONDIFERENCIALBIN OUT,
																   @cCOUNTCOMISIONDIFERENCIALBIN OUT,
																   @cLISTADVTRANSACCIONES OUT,
																   @cCOUNTADVTRANSACCIONES OUT,
																   @cCODRANGOCOMISIONESTANDAR OUT
										  -- Concatenar a dia / producto
										  EXEC WSXML_SFG.SFGPRODUCTOREVENUE_FindProductEntry 
																			  @cFECHA,
																			  @tmpDstrProduct,
																			  @cCODPRODUCTOREVENUE OUT
										  -- Registros de revenue y actualizacion sobre masters
										  BEGIN
											SELECT @tmpRevRegistry = ID_REGISTROREVENUE
											  FROM WSXML_SFG.REGISTROREVENUE
											 WHERE CODENTRADAARCHIVOCONTROL =
												   @cCODENTRADAARCHIVOCONTROL
											   AND CODREGISTROFACTURACION =
												   @tmpFctRegistry;
												   
											IF @@ROWCOUNT = 0 BEGIN
											
											  EXEC WSXML_SFG.SFGREGISTROREVENUE_AddRecord @cCODENTRADAARCHIVOCONTROL,
																		   @tmpFctRegistry,
																		   @cCODTIPOREGISTRO,
																		   @cFECHA,
																		   @cCODPUNTODEVENTA,
																		   @cCODTIPOCONTRATOPDV,
																		   @tmpDstrProduct,
																		   @cCODTIPOCONTRATOPRODUCTO,
																		   @cCODCOMPANIA,
																		   @cCODRANGOCOMISION,
																		   0,
																		   @cCODPRODUCTOREVENUE,
																		   0,
																		   @tmpRevRegistry OUT

											  --Guarda la informacion de la comision diferencial a la que halla lugar
											  IF @cCODRANGOCOMISIONDIFAGR > 0 OR
												 @cCODRANGOCOMISIONDIFRED > 0 OR
												 @cCODRANGOCOMISIONDIFDTO > 0 BEGIN

												EXEC WSXML_SFG.SFGREGISTROREVENUE_SETREVENUEMULTIPLEDIFERENCIAL 
																								@cCODREGISTROREVENUE,
																								@tmpFctRegistry,
																								@cCODPRODUCTO,
																								@cCODREDPDV,
																								@cCODAGRUPACIONPUNTODEVENTA,
																								@cCODCIUDAD

											  END 
											END

										  END;

										  EXEC WSXML_SFG.SFGREGISTROREVENUEINCENTIVO_AddRecord @tmpRevRegistry,
																				@incentivo__ID_INCENTIVOCOMISIONGLOBAL,
																				@eqDistribution
										  EXEC WSXML_SFG.SFGREGISTROREVENUE_AppendRecordValues @tmpRevRegistry, @eqDistribution
										  -- Actualizar producto
										  EXEC WSXML_SFG.SFGPRODUCTOREVENUE_UpdateProductEntry @cCODPRODUCTOREVENUE,
																				@eqDistribution
											FETCH NEXT FROM ipx INTO @ipx__IDVALUE;
										END;

										CLOSE ipx;
										DEALLOCATE ipx;
									  END;

									END-- ELSE BEGIN
									  -- Siempre existen productos sobre los cuales de debe distribuir
									  -- Creacion de registro de prefacturacion
									BEGIN
										SELECT @cCODREGISTROFACTURACION = ID_REGISTROFACTURACION
										  FROM WSXML_SFG.REGISTROFACTURACION
										 WHERE CODENTRADAARCHIVOCONTROL =
											   @cCODENTRADAARCHIVOCONTROL
										   AND CODPUNTODEVENTA = @cCODPUNTODEVENTA
										   AND CODPRODUCTO = @cCODPRODUCTO
										   AND CODTIPOREGISTRO = @cCODTIPOREGISTRO;
										  
										IF @@ROWCOUNT = 0
										  EXEC WSXML_SFG.SFGREGISTROFACTURACION_AddRecord @cCODENTRADAARCHIVOCONTROL,
																		   @cCODPUNTODEVENTA,
																		   @cCODPRODUCTO,
																		   @cCODTIPOREGISTRO,
																		   @cVALORTRANSACCION,
																		   @cFECHA,
																		   @cNUMTRANSACCIONES,
																		   @cCODRANGOCOMISIONFACTURACN,
																		   @cCOMISIONANTICIPOFACTURACN,
																		   0,
																		   0,
																		   @cCODCOMPANIA,
																		   @cCODREGIMEN,
																		   @cCODAGRUPACIONPUNTODEVENTA,
																		   @cCODREDPDV,
																		   @cIDENTIFICACION,
																		   @cDIGITOVERIFICACION,
																		   @cCODCIUDAD,
																		   @cCODTIPOCONTRATOPDV,
																		   @cCODRAZONSOCIAL,
																		   @cCODTIPOCONTRATOPRODUCTO,
																		   @cDUENOTERMINAL,
																		   1,
																		   @cCODREGISTROFACTURACION OUT
									  END;

									  -- Obtener valores de registro y revenue
									EXEC WSXML_SFG.SFGREGISTROREVENUE_GetRegistryRevenueValues 
															   @cFECHA,
															   @cCODREGISTROFACTURACION,
															   @cCODENTRADAARCHIVOCONTROL OUT,
															   @cCODTIPOREGISTRO OUT,
															   @cCODPUNTODEVENTA OUT,
															   @cCODTIPOCONTRATOPDV OUT,
															   @cCODPRODUCTO OUT,
															   @cCODTIPOCONTRATOPRODUCTO OUT,
															   @cCODCOMPANIA OUT,
															   @cNUMTRANSACCIONES OUT,
															   @cVALORTRANSACCION OUT,
															   @cTOTALVENTASBRUTAS OUT,
															   @cCODAGRUPACIONPUNTODEVENTA OUT,
															   @cCODREDPDV OUT,
															   @cCODCIUDAD OUT,
															   @cCODRANGOCOMISION OUT,
															   @cCODTIPOCOMISION OUT,
															   @cCODTIPORANGO OUT,
															   @cCODRANGOCOMISIONDIFAGR OUT,
															   @cCODRANGOCOMISIONDIFRED OUT,
															   @cCODRANGOCOMISIONDIFDTO OUT,
															   @cFLAGCOMISIONDIFERENCIALBIN OUT,
															   @cLISTCOMISIONDIFERENCIALBIN OUT,
															   @cCOUNTCOMISIONDIFERENCIALBIN OUT,
															   @cLISTADVTRANSACCIONES OUT,
															   @cCOUNTADVTRANSACCIONES OUT,
															   @cCODRANGOCOMISIONESTANDAR OUT
									  -- Concatenar a dia / producto
									  EXEC WSXML_SFG.SFGPRODUCTOREVENUE_FindProductEntry @cFECHA,
																		  @cCODPRODUCTO,
																		  @cCODPRODUCTOREVENUE OUT

									  DECLARE @TMPCOUNT NUMERIC(22,0);
									  BEGIN
										  SELECT @TMPCOUNT = COUNT(1)
										  FROM WSXML_SFG.REGISTROREVENUE
										  WHERE CODREGISTROFACTURACION = @cCODREGISTROFACTURACION;

										  IF @TMPCOUNT =0 BEGIN
											-- Registros de revenue y actualizacion sobre masters
											EXEC WSXML_SFG.SFGREGISTROREVENUE_AddRecord @cCODENTRADAARCHIVOCONTROL,
																		 @cCODREGISTROFACTURACION,
																		 @cCODTIPOREGISTRO,
																		 @cFECHA,
																		 @cCODPUNTODEVENTA,
																		 @cCODTIPOCONTRATOPDV,
																		 @cCODPRODUCTO,
																		 @cCODTIPOCONTRATOPRODUCTO,
																		 @cCODCOMPANIA,
																		 @cCODRANGOCOMISION,
																		 0,
																		 @cCODPRODUCTOREVENUE,
																		 0,
																		 @cCODREGISTROREVENUE OUT
										  END
										  ELSE BEGIN
											 SELECT @cCODREGISTROREVENUE = ID_REGISTROREVENUE
											 FROM WSXML_SFG.REGISTROREVENUE
											 WHERE CODREGISTROFACTURACION =  @cCODREGISTROFACTURACION;

										  END 
									  END;

									  --Guarda la informacion de la comision diferencial a la que halla lugar
									  IF @cCODRANGOCOMISIONDIFAGR > 0 OR
										 @cCODRANGOCOMISIONDIFRED > 0 OR
										 @cCODRANGOCOMISIONDIFDTO > 0 BEGIN

										EXEC WSXML_SFG.SFGREGISTROREVENUE_SETREVENUEMULTIPLEDIFERENCIAL
																						@cCODREGISTROREVENUE,
																						@cCODREGISTROFACTURACION,
																						@cCODPRODUCTO,
																						@cCODREDPDV,
																						@cCODAGRUPACIONPUNTODEVENTA,
																						@cCODCIUDAD

									  END 

									  EXEC WSXML_SFG.SFGREGISTROREVENUEINCENTIVO_AddRecord @cCODREGISTROREVENUE,
																			@incentivo__ID_INCENTIVOCOMISIONGLOBAL,
																			@dailyfixedvalue
									  EXEC WSXML_SFG.SFGREGISTROREVENUE_AppendRecordValues @cCODREGISTROREVENUE,@dailyfixedvalue
									  -- Actualizar producto
									  EXEC WSXML_SFG.SFGPRODUCTOREVENUE_UpdateProductEntry @cCODPRODUCTOREVENUE,
																			@dailyfixedvalue
									--END 
								END TRY
								BEGIN CATCH

										  SET @errormsg = '-20055 No es posible crear registros para asignar la comision fija de ' +
																  ISNULL(@incentivo__VALORFIJO, '') +
																  ' en la fecha ' +
																  FORMAT(@p_FECHA,'dd/MM/yyyy') + ': ' +
																  isnull(ERROR_MESSAGE ( )  , '');
										  RAISERROR(@errormsg, 16, 1);
								END CATCH
							END;

						END 
					  END 
					END;

				  END 
				END;

			 FETCH incentivo INTO @incentivo__ID_INCENTIVOCOMISIONGLOBAL, @incentivo__CODPERIODICIDAD,
									   @incentivo__CODPUNTODEVENTATRANSACCION, @incentivo__CODPRODUCTOTRANSACCION,
									   @incentivo__VALORFIJO,@incentivo__ID_INCENTIVOCOMISIONHISTORICO;
			 END;

			  CLOSE incentivo;
			  DEALLOCATE incentivo;
			END
			ELSE IF (SELECT COUNT(*) FROM @lstFILES) + @countfilescl > @countservics BEGIN
			  RAISERROR('-20021 Hay mas archivos de ventas cargados que el numero de servicios configurados en el sistema. Esto es un error de consistencia de datos', 16, 1);
			END
			ELSE BEGIN
			  SET @cntwrngs = @cntwrngs + 1;
			  SET @errormsg = 'No se puede calcular la tarifa fija sobre comision: No se han cargado todos los archivos de ventas para el dia. Debe volver a calcular la tarifa fija.';
			END 
		  END;


		  EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_FinalizeExecution @p_CODDETALLETAREAEJECUTADA,
													 'Calculando Ingresos y Egresos, Corporativo, Local y costos calculados '

		  SET @errormsg = 'Guillermo Prueba ' + CONVERT(VARCHAR,getdate(), 114)  + ' -- Calculando Ingresos y Egresos, Corporativo, Local y costos calculados '
		  EXEC WSXML_SFG.sfgtmptrace_TraceLog @errormsg

		  -- Calcular Ingresos y Egresos, Corporativo y Local (obtener desde archivo)
		  DECLARE ix CURSOR FOR SELECT IDVALUE FROM @lstFILES--.First .. lstFILES.Last 
		  OPEN ix;
		  --DECLARE @ix__IDVALUE NUMERIC(38,0)
		 FETCH NEXT FROM ix INTO @ix__IDVALUE;
		 WHILE @@FETCH_STATUS=0
		 BEGIN
			  DECLARE @cCODSERVICIOARCHIVO    NUMERIC(22,0);
			  DECLARE @costoscalculados       WSXML_SFG.FORMULA;
			  DECLARE @lstREGISTROSCALCULADOS WSXML_SFG.LONGNUMBERARRAY;
			BEGIN

			  -- Obtener lista de costos de acuerdo al tipo de archivo (Servicio)
			  SELECT @cCODSERVICIOARCHIVO = TIPOARCHIVO
				FROM WSXML_SFG.ENTRADAARCHIVOCONTROL
			   WHERE ID_ENTRADAARCHIVOCONTROL = @ix__IDVALUE;

			  -- Volver a obtener los registros para contar registros ficticios
			  INSERT INTO @lstREGISTROSCALCULADOS
			  SELECT ID_REGISTROFACTURACION 
				FROM WSXML_SFG.REGISTROFACTURACION
			   WHERE CODENTRADAARCHIVOCONTROL = @ix__IDVALUE
				 AND CODTIPOREGISTRO IN (1, 2, 3);
				 
			  IF @@ROWCOUNT > 0 BEGIN
				DECLARE ir CURSOR FOR SELECT IDVALUE FROM @lstREGISTROSCALCULADOS--.First .. lstREGISTROSCALCULADOS.Last 
				OPEN ir;
				--DECLARE @ir__IDVALUE NUMERIC(38,0)
				
				 FETCH NEXT FROM ir INTO @ir__IDVALUE;
				 WHILE @@FETCH_STATUS=0
				 BEGIN
					-- Importes Iniciales
					DECLARE @vCANTIDADVENTA         NUMERIC(22,0) = 0;
					DECLARE @vVALORVENTA            FLOAT = 0;
					DECLARE @vVALORVENTABRUTA       FLOAT = 0;
					DECLARE @vVALORINGRESOPDV       FLOAT = 0;
					DECLARE @vVALORIVAINGRESOPDV    FLOAT = 0;
					DECLARE @vREVENUECALCULADO      FLOAT = 0;
					DECLARE @vVALORCOMISIONESTANDAR FLOAT = 0;
						DECLARE @vVALORVENTASINAJUSTES  FLOAT = 0;
					DECLARE @vVALORDESCUENTOS       FLOAT = 0;
					-- Reglas
					--DECLARE @cCODCOMPANIA               NUMERIC(22,0);
					DECLARE @cCODSERVICIO               NUMERIC(22,0);
					--DECLARE @cCODTIPOCONTRATOPDV        NUMERIC(22,0);
					--DECLARE @cCODTIPOCONTRATOPRODUCTO   NUMERIC(22,0);
					--DECLARE @cCODPUNTODEVENTA           NUMERIC(22,0);
					--DECLARE @cCODPRODUCTO               NUMERIC(22,0);
					--DECLARE @cCODREDPDV                 NUMERIC(22,0);
					--DECLARE @cCODAGRUPACIONPUNTODEVENTA NUMERIC(22,0);
					--DECLARE @cCODCIUDAD                 NUMERIC(22,0);
					--DECLARE @cCODTIPOREGISTRO           NUMERIC(22,0);
					-- Identificadores
					DECLARE @xCODREGISTROREVENUE NUMERIC(22,0);
					DECLARE @xCODPRODUCTOREVENUE NUMERIC(22,0);
					-- Importes segundo nivel
					DECLARE @vINGRESOCORPORATIVO FLOAT = 0;
					DECLARE @vEGRESOCORPORATIVO  FLOAT = 0;
					DECLARE @vINGRESOLOCAL       FLOAT = 0;
					DECLARE @vEGRESOLOCAL        FLOAT = 0;
					-- Configuracion PYG
					DECLARE @xCONFIGURACIONINGRESOCORP  NUMERIC(22,0);
					DECLARE @xCONFIGURACIONEGRESOCORP   NUMERIC(22,0);
					DECLARE @xCONFIGURACIONINGRESOLOCAL NUMERIC(22,0);
					DECLARE @xCONFIGURACIONEGRESOLOCAL  NUMERIC(22,0);
				  BEGIN


				--       SFGDETALLETAREAEJECUTADA.FinalizeExecution(p_CODDETALLETAREAEJECUTADA,
				  --                                 'Procesando registro facturacion ' || to_char(lstREGISTROSCALCULADOS(ir)));

				  --       sfgtmptrace.TraceLog('Guillermo Prueba ' || to_char(systimestamp, 'HH24:MI:SS.FF6')  || '  Calculando REGISTRO  ' || to_char(lstREGISTROSCALCULADOS(ir)));

					EXEC WSXML_SFG.SFGREGISTROREVENUE_GetCalculatedRevenueValues 
											   @ir__IDVALUE,
											   @vCANTIDADVENTA OUT,
											   @vVALORVENTA OUT,
											   @vVALORVENTABRUTA OUT,
											   @vVALORINGRESOPDV OUT,
											   @vVALORIVAINGRESOPDV OUT,
											   @vREVENUECALCULADO OUT,
											   @vVALORCOMISIONESTANDAR OUT,
											   @vVALORDESCUENTOS OUT,
											   @cCODCOMPANIA OUT,
											   @cCODSERVICIO OUT,
											   @cCODTIPOCONTRATOPDV OUT,
											   @cCODTIPOCONTRATOPRODUCTO OUT,
											   @cCODPUNTODEVENTA OUT,
											   @cCODPRODUCTO OUT,
											   @cCODREDPDV OUT,
											   @cCODAGRUPACIONPUNTODEVENTA OUT,
											   @cCODCIUDAD OUT,
											   @xCODREGISTROREVENUE OUT,
											   @xCODPRODUCTOREVENUE OUT

					-- Configuracion P y G para calcular ingresos y egresos
					BEGIN
						
						BEGIN TRY
					
							EXEC WSXML_SFG.SFGCONFIGURACIONPYG_GetConfiguracionRegistro 
																	   @cacheconfigpyg,
																	   @cCODSERVICIO,
																	   @cCODTIPOCONTRATOPRODUCTO,
																	   @cCODTIPOCONTRATOPDV,
																	   @xCONFIGURACIONINGRESOCORP OUT,
																	   @xCONFIGURACIONEGRESOCORP OUT,
																	   @xCONFIGURACIONINGRESOLOCAL OUT,
																	   @xCONFIGURACIONEGRESOLOCAL OUT
						END TRY
						BEGIN CATCH
								SET @xCONFIGURACIONINGRESOCORP  = 0;
								SET @xCONFIGURACIONEGRESOCORP   = 0;
								SET @xCONFIGURACIONINGRESOLOCAL = 0;
								SET @xCONFIGURACIONEGRESOLOCAL  = 0;
						END CATCH
					END;


			  --Guillermo Ni?o 30 07 2013
			   --Modificacion calculo de ventas sin ajustes

			   SELECT @cCODTIPOREGISTRO = CODTIPOREGISTRO
			   FROM WSXML_SFG.REGISTROFACTURACION
			   WHERE ID_REGISTROFACTURACION = @ir__IDVALUE;

				IF @cCODTIPOREGISTRO in (1,3) /*Ventas*/ BEGIN
				  SET @vVALORVENTASINAJUSTES= @vVALORVENTABRUTA;
				END
				ELSE BEGIN
				  SET @vVALORVENTASINAJUSTES= 0;
				END 
					SET @vINGRESOCORPORATIVO = WSXML_SFG.SFGCONFIGURACIONPYG_TranslateFigure(@xCONFIGURACIONINGRESOCORP,
																			   @cCODTIPOCONTRATOPDV,
																			   @vCANTIDADVENTA,
																			   @vVALORVENTABRUTA,
																			   @vVALORINGRESOPDV,
																			   @vVALORIVAINGRESOPDV,
																			   @vREVENUECALCULADO,
																			   @vVALORCOMISIONESTANDAR,
																			   @vINGRESOCORPORATIVO,
																			   @vEGRESOCORPORATIVO,
																			   @vINGRESOLOCAL,
																			   @vEGRESOLOCAL,
																			   @vVALORVENTASINAJUSTES,
																			   @vVALORDESCUENTOS);
																			   
					SET @vEGRESOCORPORATIVO  = WSXML_SFG.SFGCONFIGURACIONPYG_TranslateFigure(@xCONFIGURACIONEGRESOCORP,
																			   @cCODTIPOCONTRATOPDV,
																			   @vCANTIDADVENTA,
																			   @vVALORVENTABRUTA,
																			   @vVALORINGRESOPDV,
																			   @vVALORIVAINGRESOPDV,
																			   @vREVENUECALCULADO,
																			   @vVALORCOMISIONESTANDAR,
																			   @vINGRESOCORPORATIVO,
																			   @vEGRESOCORPORATIVO,
																			   @vINGRESOLOCAL,
																			   @vEGRESOLOCAL,
																			   @vVALORVENTASINAJUSTES,
																			   @vVALORDESCUENTOS);
																			   
					SET @vINGRESOLOCAL       = WSXML_SFG.SFGCONFIGURACIONPYG_TranslateFigure(@xCONFIGURACIONINGRESOLOCAL,
																			   @cCODTIPOCONTRATOPDV,
																			   @vCANTIDADVENTA,
																			   @vVALORVENTABRUTA,
																			   @vVALORINGRESOPDV,
																			   @vVALORIVAINGRESOPDV,
																			   @vREVENUECALCULADO,
																			   @vVALORCOMISIONESTANDAR,
																			   @vINGRESOCORPORATIVO,
																			   @vEGRESOCORPORATIVO,
																			   @vINGRESOLOCAL,
																			   @vEGRESOLOCAL,
																			   @vVALORVENTASINAJUSTES,
																			   @vVALORDESCUENTOS);
					SET @vEGRESOLOCAL        = WSXML_SFG.SFGCONFIGURACIONPYG_TranslateFigure(@xCONFIGURACIONEGRESOLOCAL,
																			   @cCODTIPOCONTRATOPDV,
																			   @vCANTIDADVENTA,
																			   @vVALORVENTABRUTA,
																			   @vVALORINGRESOPDV,
																			   @vVALORIVAINGRESOPDV,
																			   @vREVENUECALCULADO,
																			   @vVALORCOMISIONESTANDAR,
																			   @vINGRESOCORPORATIVO,
																			   @vEGRESOCORPORATIVO,
																			   @vINGRESOLOCAL,
																			   @vEGRESOLOCAL,
																			   @vVALORVENTASINAJUSTES,
																			   @vVALORDESCUENTOS);
					EXEC WSXML_SFG.SFGREGISTROREVENUE_UpdateRecordPyGValues 
															 @xCODREGISTROREVENUE,
															 @vINGRESOCORPORATIVO,
															 @vEGRESOCORPORATIVO,
															 @vINGRESOLOCAL,
															 @vEGRESOLOCAL
															 
					EXEC WSXML_SFG.SFGPRODUCTOREVENUE_UpdateProductPyG 
														@xCODPRODUCTOREVENUE,
														@vINGRESOCORPORATIVO,
														@vEGRESOCORPORATIVO,
														@vINGRESOLOCAL,
														@vEGRESOLOCAL

					-- Costos Calculados
					  DECLARE @cCODPRODUCTOCONTRATO       NUMERIC(22,0);
					  DECLARE @cCODPRODUCTOCONTRATOCOMDIF NUMERIC(22,0);
					  DECLARE @currentcalculatedcosts     WSXML_SFG.IDVALUE;
					  DECLARE @xREVENUEUTILIDADPARCIAL    FLOAT = @vREVENUECALCULADO - @vVALORINGRESOPDV;
					
					BEGIN
					  --SET @currentcalculatedcosts = IDVALUELIST();
					  -- Obtener identificadores padres y diferenciales para el producto
					  EXEC WSXML_SFG.SFGPRODUCTOCONTRATO_GetTarifasProductoMaster 
																   @cCODPRODUCTO,
																   @cCODREDPDV,
																   @cCODAGRUPACIONPUNTODEVENTA,
																   @cCODCIUDAD,
																   @cCODPRODUCTOCONTRATO OUT,
																   @cCODPRODUCTOCONTRATOCOMDIF OUT

					  --

						DECLARE @xCOUNT            NUMERIC(22,0);
						DECLARE @xCODSERVICIOAUSAR NUMERIC(22,0);
					  BEGIN

						SET @xCODSERVICIOAUSAR = @cCODSERVICIOARCHIVO;

						SELECT @xCOUNT = COUNT(1)
						  FROM WSXML_SFG.PRODUCTOEXCEPCOMPANIAREV
						 WHERE CODPRODUCTO = @cCODPRODUCTO;

						IF @xCOUNT > 0 BEGIN

						  SELECT @xCODSERVICIOAUSAR = CODSERVICIOEXCEP
							FROM WSXML_SFG.PRODUCTOEXCEPCOMPANIAREV
						   WHERE CODPRODUCTO = @cCODPRODUCTO;

						END 

						INSERT INTO @costoscalculados
						SELECT ID, DESCONTABLE, DEFINITION  FROM WSXML_SFG.SFGCOSTOCALCULADO_GetCurrentCostoList(@xCODSERVICIOAUSAR);

					  END;


					  -- Calcular todos los costos asociados
					  -- OJO: Si hay que totalizar, desactivar algunos de resta

					  DECLARE icst CURSOR FOR SELECT ID, DESCONTABLE, DEFINITION FROM @costoscalculados--.First .. costoscalculados.Last 
					  OPEN icst;
					  
					  DECLARE @icst__ID NUMERIC(38,0), @icst__DESCONTABLE NUMERIC(38,0), @icst__DEFINITION VARCHAR(MAX)
					  
					 FETCH NEXT FROM icst INTO @icst__ID, @icst__DESCONTABLE, @icst__DEFINITION;
					 WHILE @@FETCH_STATUS=0
					 BEGIN
						  DECLARE @cout                NUMERIC(22,0);
						  DECLARE @idcosto             NUMERIC(22,0) = @icst__ID;
						  DECLARE @descontable         INT = @icst__DESCONTABLE;
						  DECLARE @costvalue           FLOAT = 0;
						  DECLARE @discounting         INT = 0;
						  DECLARE @discountegr         INT = 0;
						  DECLARE @definition         VARCHAR(MAX) = @icst__DEFINITION;
						  
						  DECLARE @formulacalculations WSXML_SFG.OPERATIONCALC

						  INSERT INTO @formulacalculations
						  SELECT  CONVERT(NUMERIC,dbo.SEPARAR_COLUMNAS_F(VALUE,1,';')) AS CODTIPOVALOR,
							CONVERT(FLOAT,dbo.SEPARAR_COLUMNAS_F(VALUE,2,';')) AS VALOR,
							CONVERT(VARCHAR,dbo.SEPARAR_COLUMNAS_F(VALUE,3,';')) AS OPERADOR
						  FROM STRING_SPLIT(@definition,'|')
						  
						

						  DECLARE iclc CURSOR FOR SELECT CODTIPOVALOR, VALOR, OPERADOR FROM @formulacalculations--.First .. formulacalculations.Last 
						  OPEN iclc;
						  DECLARE @iclc__CODTIPOVALOR NUMERIC(38,0), @iclc__VALOR FLOAT, @iclc__OPERADOR VARCHAR(1)
						  
						FETCH NEXT FROM iclc INTO @iclc__CODTIPOVALOR, @iclc__VALOR, @iclc__OPERADOR;
						WHILE @@FETCH_STATUS=0
						BEGIN
							DECLARE @operador VARCHAR(1) = @iclc__OPERADOR;
							DECLARE @tipovalr NUMERIC(38,0) = @iclc__CODTIPOVALOR;
							DECLARE @valor    FLOAT = @iclc__VALOR;
							DECLARE @actualv  FLOAT = 0;
							
							BEGIN
								BEGIN TRY

									  -- Actual value depends on type
									  IF @tipovalr = @p_VALORUSUARIO BEGIN
										SET @actualv = @valor;

									  END
									  ELSE IF @tipovalr = @p_VALORFIGURAP BEGIN
										SET @actualv = WSXML_SFG.SFGCONFIGURACIONPYG_TranslateFigure(@valor,
																					   @cCODTIPOCONTRATOPDV,
																					   @vCANTIDADVENTA,
																					   @vVALORVENTABRUTA,
																					   @vVALORINGRESOPDV,
																					   @vVALORIVAINGRESOPDV,
																					   @vREVENUECALCULADO,
																					   @vVALORCOMISIONESTANDAR,
																					   @vINGRESOCORPORATIVO,
																					   @vEGRESOCORPORATIVO,
																					   @vINGRESOLOCAL,
																					   @vEGRESOLOCAL,
																					   @vVALORVENTASINAJUSTES,
																					   @vVALORDESCUENTOS);


									  END
									  ELSE IF @tipovalr = @p_VALORTARIFAV BEGIN
										SET @actualv = WSXML_SFG.SFGPRODUCTOCONTRATO_TranslateTarifaFromMaster(--cachetarifa,
																								 @cachetarifadif,
																								 @cCODPRODUCTOCONTRATO,
																								 @cCODPRODUCTOCONTRATOCOMDIF,
																								 @valor);

									  END
									  ELSE IF @tipovalr = @p_VALORCOSTOPV BEGIN
										IF (SELECT COUNT(*) FROM @currentcalculatedcosts) > 0 BEGIN
										  DECLARE ccpv CURSOR FOR SELECT ID, VALUE FROM @currentcalculatedcosts--.First .. currentcalculatedcosts.Last 
										  OPEN ccpv;
										  DECLARE @ccpv__ID NUMERIC(38,0), @ccpv__VALUE FLOAT
										 FETCH NEXT FROM ccpv INTO @ccpv__ID, @ccpv__VALUE;
										 WHILE @@FETCH_STATUS=0
										 BEGIN
											IF @ccpv__ID = @valor BEGIN
											  SET @actualv = @ccpv__VALUE;
											  BREAK;
											END
											FETCH NEXT FROM ccpv INTO @ccpv__ID, @ccpv__VALUE;
										 END
										 CLOSE ccpv;
										 DEALLOCATE ccpv;
										 --END WHILE 1=1 BEGIN;

										END
									  --Modificacion Guillermo Niñ¯ ²5 de septiembre del 2015 -- calculo de costos calculados por costos asociados
									  END ELSE IF @tipovalr = @p_VALORCOSTASO BEGIN-- Si es un costo asociado
										SET @actualv= WSXML_SFG.SFGCOSTOASOCIADO_GetValorPorRegistroyCosto(@ir__IDVALUE,@valor);
									  END                             
										
									  -- Calculate agains actual value depending on operator
									  IF @operador = '+' BEGIN
										SET @costvalue = @costvalue + @actualv;
									  END
									  ELSE IF @operador = '-' BEGIN
										SET @costvalue = @costvalue - @actualv;
									  END
									  ELSE IF @operador = '*' BEGIN
										SET @costvalue = @costvalue * @actualv;
									  END
									  ELSE IF @operador = '/' BEGIN
										SET @costvalue = @costvalue / @actualv;
									  END
									  ELSE BEGIN
										SET @costvalue = @actualv;
									  END 
								END TRY
								BEGIN CATCH
									RAISERROR('-20054 No se pueden calcular las formulas de costos a partir de las configuraciones', 16, 1);
								END CATCH
							END 

							--END WHILE 1=1 BEGIN;
						  -- At the end, save value in database and add to array for future consulting
							IF @costvalue <> 0 BEGIN
								EXEC WSXML_SFG.SFGCONFIGURACIONPYG_GetDescuentoRegistro
																		 @cacheconfigdsc,
																		 @cCODSERVICIOARCHIVO,
																		 @cCODTIPOCONTRATOPRODUCTO,
																		 @cCODTIPOCONTRATOPDV,
																		 @idcosto,
																		 @discounting OUT,
																		 @discountegr OUT 
								EXEC WSXML_SFG.SFGREGISTROREVENUE_UpdateRecordPYGValuesFromCosts
															   @xCODREGISTROREVENUE,
															   @discounting,
															   @discountegr,
															   @costvalue,
															   @vINGRESOLOCAL OUT,
															   @vEGRESOLOCAL OUT
								--currentcalculatedcosts.Extend(1);
								INSERT INTO @currentcalculatedcosts VALUES(@idcosto, @costvalue);
								
								EXEC WSXML_SFG.SFGREGISTROREVCOSTOCALCULADO_AddRecord
																	   @xCODREGISTROREVENUE,
																	   @idcosto,
																	   @costvalue,
																	   @cout OUT
								IF @descontable = 1 BEGIN
								  SET @xREVENUEUTILIDADPARCIAL = @xREVENUEUTILIDADPARCIAL - @costvalue;
								END 

							END 
							FETCH NEXT FROM iclc INTO @iclc__CODTIPOVALOR, @iclc__VALOR, @iclc__OPERADOR;
						END;
						CLOSE iclc;
						DEALLOCATE iclc; /* End Costos Calculados */
						
						EXEC WSXML_SFG.SFGREGISTROREVENUE_UpdateRevenueUtilidadParcial @xCODREGISTROREVENUE,@xREVENUEUTILIDADPARCIAL
					
						FETCH NEXT FROM icst INTO @icst__ID, @icst__DESCONTABLE, @icst__DEFINITION;
					END;

					 CLOSE icst;
					 DEALLOCATE icst;
				  
					END;

				  

					SET @countrecords = @countrecords + 1;
					IF (@countrecords % @waitnrecords) = 0 BEGIN
						EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,@countrecords
						COMMIT;
					END 
			END --WHILE 1=1 BEGIN;
				
					FETCH NEXT FROM ir INTO @ir__IDVALUE;
				END
				
				CLOSE ir
				DEALLOCATE ir
				
				
			  END
			END;

			FETCH NEXT FROM ix INTO @ix__IDVALUE;
		 END --WHILE 1=1 BEGIN;
		 CLOSE ix
		 DEALLOCATE ix
		
		
			-- Calcular revnue de rangos
			-- SFGREVENUERANGOTIEMPO.CalcularRevenueRangoTiempo(p_FECHA);

			  -- Advertencias pueden fallar el calculo
			IF @cntwrngs > 0 BEGIN
				EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_FinalizeExecution @p_CODDETALLETAREAEJECUTADA,@errormsg
				SET @p_RETVALUE_out = @p_FINALIZADAADVERTENCIA;
			END
			
			ELSE BEGIN
				EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_FinalizeExecution @p_CODDETALLETAREAEJECUTADA, 'Se ha calculado el revenue y costos calculados para el dia correctamente'
				
				SET @p_RETVALUE_out = @p_FINALIZADAOK;
			END 
		

		
		END ELSE BEGIN
		  RAISERROR('-20020 Ya se ha calculado el revenue para todas las entradas se la fecha', 16, 1);
		END
		
	END TRY
	BEGIN CATCH	
			  SET @errormsg = ERROR_MESSAGE ( ) ;
			  EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_FinalizeExecution @p_CODDETALLETAREAEJECUTADA,@errormsg
			  
			 EXEC  WSXML_SFG.SFGALERTA_GenerarAlerta @p_TIPOERROR, 'REVENUE', @errormsg, 1
			  SET @p_RETVALUE_out = @p_FINALIZADAFALLO;
	END CATCH

END


GO




  IF OBJECT_ID('WSXML_SFG.SFGREGISTROREVENUE_RevisarValoresPYGyCostosPorPrd', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_RevisarValoresPYGyCostosPorPrd;
GO



  CREATE PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_RevisarValoresPYGyCostosPorPrd(@p_FECHA DATETIME,
                                                @p_CODPRODUCTO NUMERIC(22,0)) AS
 BEGIN
   SET NOCOUNT ON;

    DECLARE @costoscalculados WSXML_SFG.FORMULA;
    --cachetarifa      PRODUCTTARIFALIST;
    DECLARE @cachetarifadif   WSXML_SFG.PRODUCTTARIFA;
    DECLARE @cacheconfigpyg   WSXML_SFG.CONFIGPYGREGISTRY;
    DECLARE @salesfilelist    WSXML_SFG.NUMBERARRAY;
    DECLARE @currentdate      DATETIME = CONVERT(DATETIME, CONVERT(DATE,@p_FECHA));
    DECLARE @servicecount     NUMERIC(22,0);
   

	DECLARE @p_VALORUSUARIO 	TINYINT,
	  @p_VALORFIGURAP  	TINYINT,
	  @p_VALORTARIFAV 	TINYINT,
	  @p_VALORCOSTOPV 	TINYINT,
	  @p_VALORCOSTASO 	TINYINT

	EXEC WSXML_SFG.SFGCOSTOCALCULADO_CONSTANT
	  @p_VALORUSUARIO  OUT,
	  @p_VALORFIGURAP  OUT,
	  @p_VALORTARIFAV  OUT,
	  @p_VALORCOSTOPV  OUT,
	  @p_VALORCOSTASO  OUT

    /* Obtener valores y revisar consistencia */
    --cachetarifa    := 
    EXEC WSXML_SFG.SFGPRODUCTOCONTRATO_GetTarifaCacheList @currentdate

    --SET @cachetarifadif = WSXML_SFG.SFGPRODUCTOCONTRATO_GetTarifaDiferencialCacheList(@currentdate);
    INSERT INTO @cachetarifadif
	SELECT * FROM WSXML_SFG.SFGPRODUCTOCONTRATO_GetTarifaDiferencialCacheList(@currentdate);

	--SET @cacheconfigpyg = WSXML_SFG.SFGCONFIGURACIONPYG_GetConfiguracionCache();
	INSERT INTO @cacheconfigpyg 
	SELECT * FROM WSXML_SFG.SFGCONFIGURACIONPYG_GetConfiguracionCache();

	INSERT INTO @salesfilelist
    SELECT ID_ENTRADAARCHIVOCONTROL
      
    FROM WSXML_SFG.ENTRADAARCHIVOCONTROL
    WHERE FECHAARCHIVO = @currentdate
       AND REVERSADO = 0
       AND REVENUECALCULADO = 1;

    SELECT @servicecount = COUNT(1) FROM WSXML_SFG.SERVICIO;

    IF @servicecount <> (SELECT COUNT(*) FROM @salesfilelist) BEGIN
      RAISERROR('-20052 No se puede revisar los costos para la fecha, ya que no se ha calculado el revenue para esta', 16, 1);
    END
    ELSE IF (SELECT COUNT(*) FROM @salesfilelist) = 0 BEGIN
      RAISERROR('-20051 No se han cargado archivos para la fecha', 16, 1);
    END
    
	ELSE BEGIN

      DECLARE ifx CURSOR FOR SELECT IDVALUE FROM @salesfilelist--.First .. salesfilelist.Last 
	  OPEN ifx;

	  DECLARE @ifx__IDVALUE NUMERIC(38,0)
	  FETCH NEXT FROM ifx INTO @ifx__IDVALUE;

	  WHILE @@FETCH_STATUS=0
	  BEGIN
          DECLARE @registrylist   WSXML_SFG.LONGNUMBERARRAY;
          DECLARE @currentservice NUMERIC(22,0);
        
          SELECT @currentservice = TIPOARCHIVO
            FROM WSXML_SFG.ENTRADAARCHIVOCONTROL
           WHERE ID_ENTRADAARCHIVOCONTROL = @ifx__IDVALUE;
          
		  INSERT INTO @costoscalculados
		  SELECT * FROM WSXML_SFG.SFGCOSTOCALCULADO_GetCurrentCostoList(@currentservice);

		  INSERT INTO @registrylist
          SELECT ID_REGISTROFACTURACION
            FROM WSXML_SFG.REGISTROFACTURACION
           WHERE CODENTRADAARCHIVOCONTROL = @ifx__IDVALUE
             AND CODTIPOREGISTRO IN (1, 2, 3)
             AND CODPRODUCTO = @p_CODPRODUCTO;
          IF (SELECT COUNT(*) FROM @registrylist) > 0 BEGIN
            DECLARE irx CURSOR FOR SELECT IDVALUE FROM @registrylist--.First .. registrylist.Last 
			OPEN irx;

			DECLARE @irx__IDVALUE NUMERIC(38,0)

			 FETCH NEXT FROM irx INTO @irx__IDVALUE;
			 WHILE @@FETCH_STATUS=0
			 BEGIN
              /* Recalcular Ingresos y Egresos, Locales y Corporativos, y Costos Variables*/
                -- Importes Iniciales
                DECLARE @vCANTIDADVENTA         NUMERIC(22,0) = 0;
                DECLARE @vVALORVENTA            FLOAT = 0;
                DECLARE @vVALORVENTABRUTA       FLOAT = 0;
                DECLARE @vVALORINGRESOPDV       FLOAT = 0;
                DECLARE @vVALORIVAINGRESOPDV    FLOAT = 0;
                DECLARE @vREVENUECALCULADO      FLOAT = 0;
                DECLARE @vVALORCOMISIONESTANDAR FLOAT = 0;
		            DECLARE @vVALORVENTASINAJUSTES  FLOAT = 0;
                DECLARE @vVALORDESCUENTOS       FLOAT = 0;                
                -- Reglas
                DECLARE @cCODCOMPANIA               NUMERIC(22,0);
                DECLARE @cCODSERVICIO               NUMERIC(22,0);
                DECLARE @cCODTIPOCONTRATOPDV        NUMERIC(22,0);
                DECLARE @cCODTIPOCONTRATOPRODUCTO   NUMERIC(22,0);
                DECLARE @cCODPUNTODEVENTA           NUMERIC(22,0);
                DECLARE @cCODPRODUCTO               NUMERIC(22,0);
                DECLARE @cCODREDPDV                 NUMERIC(22,0);
                DECLARE @cCODAGRUPACIONPUNTODEVENTA NUMERIC(22,0);
                DECLARE @cCODCIUDAD                 NUMERIC(22,0);
		            DECLARE @cCODTIPOREGISTRO           NUMERIC(22,0);
                -- Identificadores
                DECLARE @xCODREGISTROREVENUE NUMERIC(22,0);
                DECLARE @xCODPRODUCTOREVENUE NUMERIC(22,0);
                -- Importes segundo nivel
                DECLARE @vINGRESOCORPORATIVO FLOAT = 0;
                DECLARE @vEGRESOCORPORATIVO  FLOAT = 0;
                DECLARE @vINGRESOLOCAL       FLOAT = 0;
                DECLARE @vEGRESOLOCAL        FLOAT = 0;
				
                EXEC WSXML_SFG.SFGREGISTROREVENUE_GetCalculatedRevenueValues 
										   @irx__IDVALUE,
                                           @vCANTIDADVENTA OUT,
                                           @vVALORVENTA OUT,
                                           @vVALORVENTABRUTA OUT,
                                           @vVALORINGRESOPDV OUT,
                                           @vVALORIVAINGRESOPDV OUT,
                                           @vREVENUECALCULADO OUT,
                                           @vVALORCOMISIONESTANDAR OUT,
                                           @vVALORDESCUENTOS OUT,
                                           @cCODCOMPANIA OUT,
                                           @cCODSERVICIO OUT,
                                           @cCODTIPOCONTRATOPDV OUT,
                                           @cCODTIPOCONTRATOPRODUCTO OUT,
                                           @cCODPUNTODEVENTA OUT,
                                           @cCODPRODUCTO OUT,
                                           @cCODREDPDV OUT,
                                           @cCODAGRUPACIONPUNTODEVENTA OUT,
                                           @cCODCIUDAD OUT,
                                           @xCODREGISTROREVENUE OUT,
                                           @xCODPRODUCTOREVENUE OUT

                  /* Configuracion P y G para calcular ingresos y egresos */
                  DECLARE @xCONFIGURACIONINGRESOCORP  NUMERIC(22,0);
                  DECLARE @xCONFIGURACIONEGRESOCORP   NUMERIC(22,0);
                  DECLARE @xCONFIGURACIONINGRESOLOCAL NUMERIC(22,0);
                  DECLARE @xCONFIGURACIONEGRESOLOCAL  NUMERIC(22,0);
                
				  BEGIN
                  BEGIN
					BEGIN TRY
							EXEC WSXML_SFG.SFGCONFIGURACIONPYG_GetConfiguracionRegistro  
																		 @cacheconfigpyg,
																		 @cCODSERVICIO,
																		 @cCODTIPOCONTRATOPRODUCTO,
																		 @cCODTIPOCONTRATOPDV,
																		 @xCONFIGURACIONINGRESOCORP OUT,
																		 @xCONFIGURACIONEGRESOCORP OUT,
																		 @xCONFIGURACIONINGRESOLOCAL OUT,
																		 @xCONFIGURACIONEGRESOLOCAL OUT
					END TRY
					BEGIN CATCH
							  SET @xCONFIGURACIONINGRESOCORP  = 0;
							  SET @xCONFIGURACIONEGRESOCORP   = 0;
							  SET @xCONFIGURACIONINGRESOLOCAL = 0;
							  SET @xCONFIGURACIONEGRESOLOCAL  = 0;
					END CATCH
                  END;

					--Guillermo Ni?o 30 07 2013
				   --Modificacion calculo de ventas sin ajustes

				   SELECT @cCODTIPOREGISTRO = CODTIPOREGISTRO
				   FROM WSXML_SFG.REGISTROFACTURACION
				   WHERE ID_REGISTROFACTURACION = @irx__IDVALUE;

				   IF @cCODTIPOREGISTRO in (1,3) /*Ventas*/ BEGIN
					  SET @vVALORVENTASINAJUSTES= @vVALORVENTABRUTA;
					END
					ELSE BEGIN
					  SET @vVALORVENTASINAJUSTES= 0;
					END 

                  /* Calcular y actualizar REGISTROREVENUE */
                  SET @vINGRESOCORPORATIVO = WSXML_SFG.SFGCONFIGURACIONPYG_TranslateFigure(@xCONFIGURACIONINGRESOCORP,
                                                                             @cCODTIPOCONTRATOPDV,
                                                                             @vCANTIDADVENTA,
                                                                             @vVALORVENTABRUTA,
                                                                             @vVALORINGRESOPDV,
                                                                             @vVALORIVAINGRESOPDV,
                                                                             @vREVENUECALCULADO,
                                                                             @vVALORCOMISIONESTANDAR,
                                                                             @vINGRESOCORPORATIVO,
                                                                             @vEGRESOCORPORATIVO,
                                                                             @vINGRESOLOCAL,
                                                                             @vEGRESOLOCAL,
                                                                             @vVALORVENTASINAJUSTES,
                                                                             @vVALORDESCUENTOS);
                  SET @vEGRESOCORPORATIVO  = WSXML_SFG.SFGCONFIGURACIONPYG_TranslateFigure(@xCONFIGURACIONEGRESOCORP,
                                                                             @cCODTIPOCONTRATOPDV,
                                                                             @vCANTIDADVENTA,
                                                                             @vVALORVENTABRUTA,
                                                                             @vVALORINGRESOPDV,
                                                                             @vVALORIVAINGRESOPDV,
                                                                             @vREVENUECALCULADO,
                                                                             @vVALORCOMISIONESTANDAR,
                                                                             @vINGRESOCORPORATIVO,
                                                                             @vEGRESOCORPORATIVO,
                                                                             @vINGRESOLOCAL,
                                                                             @vEGRESOLOCAL,
                                                                             @vVALORVENTASINAJUSTES,
                                                                             @vVALORDESCUENTOS);
                  SET @vINGRESOLOCAL       = WSXML_SFG.SFGCONFIGURACIONPYG_TranslateFigure(@xCONFIGURACIONINGRESOLOCAL,
                                                                             @cCODTIPOCONTRATOPDV,
                                                                             @vCANTIDADVENTA,
                                                                             @vVALORVENTABRUTA,
                                                                             @vVALORINGRESOPDV,
                                                                             @vVALORIVAINGRESOPDV,
                                                                             @vREVENUECALCULADO,
                                                                             @vVALORCOMISIONESTANDAR,
                                                                             @vINGRESOCORPORATIVO,
                                                                             @vEGRESOCORPORATIVO,
                                                                             @vINGRESOLOCAL,
                                                                             @vEGRESOLOCAL,
                                                                             @vVALORVENTASINAJUSTES,
                                                                             @vVALORDESCUENTOS);
                  SET @vEGRESOLOCAL        = WSXML_SFG.SFGCONFIGURACIONPYG_TranslateFigure(@xCONFIGURACIONEGRESOLOCAL,
                                                                             @cCODTIPOCONTRATOPDV,
                                                                             @vCANTIDADVENTA,
                                                                             @vVALORVENTABRUTA,
                                                                             @vVALORINGRESOPDV,
                                                                             @vVALORIVAINGRESOPDV,
                                                                             @vREVENUECALCULADO,
                                                                             @vVALORCOMISIONESTANDAR,
                                                                             @vINGRESOCORPORATIVO,
                                                                             @vEGRESOCORPORATIVO,
                                                                             @vINGRESOLOCAL,
                                                                             @vEGRESOLOCAL,
                                                                             @vVALORVENTASINAJUSTES,
                                                                             @vVALORDESCUENTOS);
                  EXEC WSXML_SFG.SFGREGISTROREVENUE_UpdateRecordPyGValues @xCODREGISTROREVENUE,
                                                           @vINGRESOCORPORATIVO,
                                                           @vEGRESOCORPORATIVO,
                                                           @vINGRESOLOCAL,
                                                           @vEGRESOLOCAL
                END;


                /* Costos Calculados y Recalculo PYG */
                  DECLARE @cCODPRODUCTOCONTRATO       NUMERIC(22,0);
                  DECLARE @cCODPRODUCTOCONTRATOCOMDIF NUMERIC(22,0);
                  DECLARE @currentcalculatedcosts     WSXML_SFG.IDVALUE;
                  DECLARE @xREVENUEUTILIDADPARCIAL    FLOAT = @vREVENUECALCULADO - @vVALORINGRESOPDV;
                
                  /* Obtener identificadores padres y diferenciales para el producto */
                  --SET @currentcalculatedcosts = IDVALUELIST();
                  EXEC WSXML_SFG.SFGPRODUCTOCONTRATO_GetTarifasProductoMaster @cCODPRODUCTO,
                                                               @cCODREDPDV,
                                                               @cCODAGRUPACIONPUNTODEVENTA,
                                                               @cCODCIUDAD,
                                                               @cCODPRODUCTOCONTRATO OUT,
                                                               @cCODPRODUCTOCONTRATOCOMDIF OUT

				DECLARE icst CURSOR FOR SELECT ID, DESCONTABLE, DEFINITION FROM @costoscalculados--.First .. costoscalculados.Last 
				OPEN icst;
					
				DECLARE @icst__ID NUMERIC(38,0), @icst__DESCONTABLE NUMERIC(38,0), @icst__DEFINITION VARCHAR(MAX)
				FETCH NEXT FROM icst INTO @icst__ID, @icst__DESCONTABLE, @icst__DEFINITION;
				
				WHILE @@FETCH_STATUS=0
				BEGIN
                    /* Calcular todos los costos asociados */
                      DECLARE @cout                NUMERIC(22,0);
                      DECLARE @idcosto             NUMERIC(22,0) = @icst__ID
                      DECLARE @descontable         INT = @icst__DESCONTABLE
                      DECLARE @costvalue           FLOAT = 0;
					  DECLARE @definition VARCHAR(MAX) = @icst__DEFINITION

					  DECLARE @formulacalculations WSXML_SFG.OPERATIONCALC

					  INSERT INTO @formulacalculations
					  SELECT  CONVERT(NUMERIC,dbo.SEPARAR_COLUMNAS_F(VALUE,1,';')) AS CODTIPOVALOR,
						CONVERT(FLOAT,dbo.SEPARAR_COLUMNAS_F(VALUE,2,';')) AS VALOR,
						CONVERT(VARCHAR,dbo.SEPARAR_COLUMNAS_F(VALUE,3,';')) AS OPERADOR
					  FROM STRING_SPLIT(@definition,'|')


						BEGIN
                      DECLARE iclc CURSOR FOR SELECT CODTIPOVALOR, VALOR, OPERADOR FROM @formulacalculations--.First .. formulacalculations.Last 
					  OPEN iclc;

					  DECLARE @iclc__CODTIPOVALOR NUMERIC(38,0), @iclc__VALOR FLOAT, @iclc__OPERADOR VARCHAR(1)

					 FETCH NEXT FROM iclc INTO @iclc__CODTIPOVALOR, @iclc__VALOR, @iclc__OPERADOR;
					 WHILE @@FETCH_STATUS=0
					 BEGIN
                          DECLARE @operador VARCHAR(1) = @iclc__OPERADOR;
                          DECLARE @tipovalr NUMERIC(38,0) = @iclc__CODTIPOVALOR;
                          DECLARE @valor    FLOAT = @iclc__CODTIPOVALOR;
                          DECLARE @actualv  FLOAT = 0;
                        BEGIN
							BEGIN TRY
								  -- Actual value depends on type
								  IF @tipovalr = @p_VALORUSUARIO BEGIN
									SET @actualv = @valor;
								  END
								  ELSE IF @tipovalr = @p_VALORFIGURAP BEGIN
									SET @actualv = WSXML_SFG.SFGCONFIGURACIONPYG_TranslateFigure(@valor,
																				   @cCODTIPOCONTRATOPDV,
																				   @vCANTIDADVENTA,
																				   @vVALORVENTABRUTA,
																				   @vVALORINGRESOPDV,
																				   @vVALORIVAINGRESOPDV,
																				   @vREVENUECALCULADO,
																				   @vVALORCOMISIONESTANDAR,
																				   @vINGRESOCORPORATIVO,
																				   @vEGRESOCORPORATIVO,
																				   @vINGRESOLOCAL,
																				   @vEGRESOLOCAL,
																				   @vVALORVENTASINAJUSTES,
																				   @vVALORDESCUENTOS);
								  END
								  ELSE IF @tipovalr = @p_VALORTARIFAV BEGIN
									SET @actualv = WSXML_SFG.SFGPRODUCTOCONTRATO_TranslateTarifaFromMaster(--cachetarifa,
																							 @cachetarifadif,
																							 @cCODPRODUCTOCONTRATO,
																							 @cCODPRODUCTOCONTRATOCOMDIF,
																							 @valor);
								  END
								  ELSE IF @tipovalr = @p_VALORCOSTOPV BEGIN
									IF (SELECT COUNT(*) FROM @currentcalculatedcosts) > 0 BEGIN
									 DECLARE ccpv CURSOR FOR SELECT ID, VALUE FROM @currentcalculatedcosts--.First .. currentcalculatedcosts.Last 
									 OPEN ccpv;
									 DECLARE @ccpv__ID NUMERIC(38,0), @ccpv__VALUE FLOAT
									 FETCH NEXT FROM ccpv INTO @ccpv__ID, @ccpv__VALUE;
									 WHILE @@FETCH_STATUS=0
									 BEGIN
										IF @ccpv__ID = @valor BEGIN
										  SET @actualv = @ccpv__VALUE
										  BREAK
										END
										FETCH NEXT FROM ccpv INTO @ccpv__ID, @ccpv__VALUE;
									 END
									 CLOSE ccpv;
									 DEALLOCATE ccpv;

									END --WHILE 1=1 BEGIN;
								  END
								  --Modificacion Guillermo Ni񯠲5 de septiembre del 2015 -- calculo de costos calculados por costos distribuidos
								  ELSE IF @tipovalr = @p_VALORCOSTASO BEGIN-- Si es un costo asociado
									SET @actualv=WSXML_SFG.SFGCOSTOASOCIADO_GetValorPorRegistroyCosto(@irx__IDVALUE,@valor);
								  END 
								  -- Calculate agains actual value depending on operator
								  IF @operador = '+' BEGIN
									SET @costvalue = @costvalue + @actualv;
								  END
								  ELSE IF @operador = '-' BEGIN
									SET @costvalue = @costvalue - @actualv;
								  END
								  ELSE IF @operador = '*' BEGIN
									SET @costvalue = @costvalue * @actualv;
								  END
								  ELSE IF @operador = '/' BEGIN
									SET @costvalue = @costvalue / @actualv;
								  END
								  ELSE BEGIN
									SET @costvalue = @actualv;
								  END 
							END TRY
							BEGIN CATCH
	                            RAISERROR('-20054 No se pueden calcular las formulas de costos a partir de las configuraciones', 16, 1);
							END CATCH
                        END 
                      --END WHILE 1=1 
						BEGIN;
						  -- At the end, save value in database and add to array for future consulting
						  --currentcalculatedcosts.Extend(1);
							INSERT INTO @currentcalculatedcosts VALUES (@idcosto,@costvalue);
							EXEC WSXML_SFG.SFGREGISTROREVCOSTOCALCULADO_AddReplaceRecord
																		@xCODREGISTROREVENUE,
																		@idcosto,
																		@costvalue,
																		@cout OUT
							IF @descontable = 1 BEGIN
								SET @xREVENUEUTILIDADPARCIAL = @xREVENUEUTILIDADPARCIAL - @costvalue;
							END 
						END;

						FETCH NEXT FROM iclc INTO @iclc__CODTIPOVALOR, @iclc__VALOR, @iclc__OPERADOR;
					END;
					 CLOSE iclc;
					 DEALLOCATE iclc;
					 EXEC WSXML_SFG.SFGREGISTROREVENUE_UpdateRevenueUtilidadParcial @xCODREGISTROREVENUE,@xREVENUEUTILIDADPARCIAL
					END;

					  FETCH NEXT FROM icst INTO @icst__ID, @icst__DESCONTABLE, @icst__DEFINITION;
				END;
				
				CLOSE icst
				DEALLOCATE icst


				FETCH NEXT FROM irx INTO @irx__IDVALUE;
			  END

			 CLOSE irx
			 DEALLOCATE irx
		   END

			FETCH NEXT FROM ifx INTO @ifx__IDVALUE;
		END

	  CLOSE ifx
      DEALLOCATE ifx
	END

  END;
GO

 



  IF OBJECT_ID('WSXML_SFG.SFGREGISTROREVENUE_CalcularRevTarifasRangosTiempo', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_CalcularRevTarifasRangosTiempo;
GO

  CREATE PROCEDURE WSXML_SFG.SFGREGISTROREVENUE_CalcularRevTarifasRangosTiempo(@p_ID_DETALLETAREAEJECUTADA NUMERIC(22,0),
                                         @p_FECHA                    DATETIME) AS
BEGIN
SET NOCOUNT ON;
  --Calcular revenue de las anulaciones y de los registros vacios craedos por ajusts

    DECLARE @sFECHAFRST DATETIME;
    DECLARE @sFECHALAST DATETIME;
	DECLARE @msg VARCHAR(2000)
  BEGIN
    EXEC WSXML_SFG.SFG_PACKAGE_GetMonthRange @p_FECHA, @sFECHAFRST OUT, @sFECHALAST OUT
    Declare RecordsToCalculate Cursor FOR /*SELECT REGISTROFACTURACION.ID_REGISTROFACTURACION
                                 FROM REGISTROFACTURACION
                                INNER JOIN ENTRADAARCHIVOCONTROL
                                   ON REGISTROFACTURACION.CODENTRADAARCHIVOCONTROL =
                                      ENTRADAARCHIVOCONTROL.ID_ENTRADAARCHIVOCONTROL
                                WHERE ENTRADAARCHIVOCONTROL.FECHAARCHIVO BETWEEN
                                      sFECHAFRST AND sFECHALAST
                                  AND REGISTROFACTURACION.CODTIPOREGISTRO IN
                                      (1)
                                  AND NOT( REGISTROFACTURACION.NUMTRANSACCIONES= 0 AND REGISTROFACTURACION.VALORTRANSACCION= 0)
                                  AND NOT
                                       (REGISTROFACTURACION.ID_REGISTROFACTURACION IN
                                       (SELECT REGISTROREVENUE.CODREGISTROFACTURACION
                                           FROM REGISTROREVENUE
                                          INNER JOIN REGISTROFACTURACION
                                             ON REGISTROREVENUE.CODREGISTROFACTURACION =
                                                REGISTROFACTURACION.ID_REGISTROFACTURACION
                                          INNER JOIN ENTRADAARCHIVOCONTROL
                                             ON REGISTROFACTURACION.CODENTRADAARCHIVOCONTROL =
                                                ENTRADAARCHIVOCONTROL.ID_ENTRADAARCHIVOCONTROL
                                          WHERE ENTRADAARCHIVOCONTROL.FECHAARCHIVO BETWEEN
                                                sFECHAFRST AND sFECHALAST))
                               UNION ALL*/
                               SELECT REGISTROFACTURACION.ID_REGISTROFACTURACION
                                 FROM WSXML_SFG.REGISTROFACTURACION
                                INNER JOIN WSXML_SFG.ENTRADAARCHIVOCONTROL
                                   ON REGISTROFACTURACION.CODENTRADAARCHIVOCONTROL =
                                      ENTRADAARCHIVOCONTROL.ID_ENTRADAARCHIVOCONTROL
                                WHERE ENTRADAARCHIVOCONTROL.FECHAARCHIVO BETWEEN
                                      @sFECHAFRST AND @sFECHALAST
                                      AND NOT( REGISTROFACTURACION.NUMTRANSACCIONES= 0 AND REGISTROFACTURACION.VALORTRANSACCION= 0)                                      
									  AND REGISTROFACTURACION.CODTIPOREGISTRO = 2--) 
	OPEN RecordsToCalculate
	DECLARE @RecordsToCalculate__ID_REGISTROFACTURACION NUMERIC(38,0)
	FETCH NEXT FROM RecordsToCalculate INTO @RecordsToCalculate__ID_REGISTROFACTURACION
	WHILE @@FETCH_STATUS=0
	
		 SET @msg = CONVERT(VARCHAR, @RecordsToCalculate__ID_REGISTROFACTURACION)
		 EXEC WSXML_SFG.sfgtmptrace_TraceLog @msg
		 commit;
		 EXEC WSXML_SFG.SFGREGISTROREVENUE_CalcularRevenueRegistro @RecordsToCalculate__ID_REGISTROFACTURACION


		FETCH NEXT FROM RecordsToCalculate INTO @RecordsToCalculate__ID_REGISTROFACTURACION
    END;

	CLOSE RecordsToCalculate;
	DEALLOCATE RecordsToCalculate;

	UPDATE WSXML_SFG.DETALLETAREAEJECUTADA SET TOTALREGISTROS = 2000 , COUNTREGISTROS = 0 
	WHERE ID_DETALLETAREAEJECUTADA = @p_ID_DETALLETAREAEJECUTADA;
	COMMIT;
  --
	declare ProductoRec cursor for SELECT PRODUCTO.ID_PRODUCTO
                        FROM WSXML_SFG.COMISIONRANGOTIEMPO
                       INNER JOIN WSXML_SFG.RANGOCOMISION
                          ON COMISIONRANGOTIEMPO.CODRANGOCOMISION =
                             RANGOCOMISION.ID_RANGOCOMISION
                       INNER JOIN WSXML_SFG.PRODUCTOCONTRATO
                          ON PRODUCTOCONTRATO.CODRANGOCOMISION =
                             RANGOCOMISION.ID_RANGOCOMISION
                       INNER JOIN WSXML_SFG.PRODUCTO
                          ON PRODUCTOCONTRATO.CODPRODUCTO =
                             PRODUCTO.ID_PRODUCTO
                       where fechainicio < @p_FECHA
                       and  WSXML_SFG.SFGREVENUERANGOTIEMPO_CumplePeriodicidad(@p_FECHA,
                                                 COMISIONRANGOTIEMPO.CODPERIODICIDAD,
                                                 COMISIONRANGOTIEMPO.FRECUENCIA,
                                                 COMISIONRANGOTIEMPO.FECHAINICIO,
                                                 COMISIONRANGOTIEMPO.FECHACALENDARIO) = 1; 
	OPEN ProductoRec;
	DECLARE @ProductoRec__ID_PRODUCTO NUMERIC(38,0)
	FETCH NEXT FROM ProductoRec INTO @ProductoRec__ID_PRODUCTO;
 
	WHILE @@FETCH_STATUS=0
	BEGIN
		IF not @p_FECHA in ('27/feb/2016','28/feb/2016','28/mar/2016','29/mar/2016','30/mar/2016') BEGIN
			EXEC WSXML_SFG.SFGREGISTROREVENUE_CalcularRevenueProducto @p_FECHA, @ProductoRec__ID_PRODUCTO, 1
			
			UPDATE WSXML_SFG.DETALLETAREAEJECUTADA SET COUNTREGISTROS = COUNTREGISTROS +1 
			WHERE ID_DETALLETAREAEJECUTADA = @p_ID_DETALLETAREAEJECUTADA;
			commit;
		END
		FETCH NEXT FROM ProductoRec INTO @ProductoRec__ID_PRODUCTO;
	END
	close ProductoRec;
	deallocate ProductoRec; 


/*  SFGREGISTROREVENUE.CalcularRevenueProducto(P_FECHA,205);
  SFGREGISTROREVENUE.CalcularRevenueProducto(P_FECHA,206);
  SFGREGISTROREVENUE.CalcularRevenueProducto(P_FECHA,207);
  SFGREGISTROREVENUE.CalcularRevenueProducto(P_FECHA,208);*/

END;
GO
