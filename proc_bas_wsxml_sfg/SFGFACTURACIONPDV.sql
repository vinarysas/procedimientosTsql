USE SFGPRODU;
--  DDL for Package Body SFGFACTURACIONPDV
--------------------------------------------------------

  /* PACKAGE BODY WSXML_SFG.SFGFACTURACIONPDV */ 

  IF OBJECT_ID('WSXML_SFG.SFGFACTURACIONPDV_AddRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGFACTURACIONPDV_AddRecord;
GO

CREATE     PROCEDURE WSXML_SFG.SFGFACTURACIONPDV_AddRecord(@p_CODPUNTODEVENTA          NUMERIC(22,0),
                      @p_CODLINEADENEGOCIO        NUMERIC(22,0),
                      @p_CODMAESTROFACTURACIONPDV NUMERIC(22,0),
                      @p_CODUSUARIOMODIFICACION   NUMERIC(22,0),
                      @p_ID_FACTURACIONPDV_out    NUMERIC(22,0) OUT) AS
  BEGIN
  SET NOCOUNT ON;
    INSERT INTO WSXML_SFG.FACTURACIONPDV (
                                CODPUNTODEVENTA,
                                CODLINEADENEGOCIO,
                                CODMAESTROFACTURACIONPDV,
                                CODUSUARIOMODIFICACION)
    VALUES (
            @p_CODPUNTODEVENTA,
            @p_CODLINEADENEGOCIO,
            @p_CODMAESTROFACTURACIONPDV,
            @p_CODUSUARIOMODIFICACION);
    SET @p_ID_FACTURACIONPDV_out = SCOPE_IDENTITY();
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGFACTURACIONPDV_UpdateRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGFACTURACIONPDV_UpdateRecord;
GO

CREATE     PROCEDURE WSXML_SFG.SFGFACTURACIONPDV_UpdateRecord(@pk_ID_FACTURACIONPDV       NUMERIC(22,0),
                         @p_CODPUNTODEVENTA          NUMERIC(22,0),
                         @p_CODLINEADENEGOCIO        NUMERIC(22,0),
                         @p_CODMAESTROFACTURACIONPDV NUMERIC(22,0),
                         @p_CODUSUARIOMODIFICACION   NUMERIC(22,0),
                         @p_ACTIVE                   NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
    UPDATE WSXML_SFG.FACTURACIONPDV
       SET CODPUNTODEVENTA          = @p_CODPUNTODEVENTA,
           CODLINEADENEGOCIO        = @p_CODLINEADENEGOCIO,
           CODMAESTROFACTURACIONPDV = @p_CODMAESTROFACTURACIONPDV,
           CODUSUARIOMODIFICACION   = @p_CODUSUARIOMODIFICACION,
           FECHAHORAMODIFICACION    = GETDATE(),
           ACTIVE                   = @p_ACTIVE
     WHERE ID_FACTURACIONPDV        = @pk_ID_FACTURACIONPDV;
    IF @@rowcount = 0 BEGIN
      RAISERROR('-20054 The record no longer exists.', 16, 1);
    END 
    IF @@rowcount > 1 BEGIN
      RAISERROR('-20053 Duplicate object instances.', 16, 1);
    END 
  END;
GO


  IF OBJECT_ID('WSXML_SFG.SFGFACTURACIONPDV_GetRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGFACTURACIONPDV_GetRecord;
GO

CREATE     PROCEDURE WSXML_SFG.SFGFACTURACIONPDV_GetRecord(@pk_ID_FACTURACIONPDV NUMERIC(22,0)) AS
 BEGIN
    DECLARE @l_count INTEGER;
   
  SET NOCOUNT ON;
    SELECT @l_count = COUNT(*) FROM WSXML_SFG.FACTURACIONPDV WHERE ID_FACTURACIONPDV = @pk_ID_FACTURACIONPDV;
    IF @l_count = 0 BEGIN
      RAISERROR('-20054 The record no longer exists.', 16, 1);
    END 
    IF @l_count > 1 BEGIN
      RAISERROR('-20053 Duplicate object instances.', 16, 1);
    END 

      SELECT ID_FACTURACIONPDV,
             CODPUNTODEVENTA,
             CODLINEADENEGOCIO,
             CODMAESTROFACTURACIONPDV,
             FECHAHORAMODIFICACION,
             CODUSUARIOMODIFICACION,
             ACTIVE
        FROM WSXML_SFG.FACTURACIONPDV
       WHERE ID_FACTURACIONPDV = @pk_ID_FACTURACIONPDV;
  END;
GO


IF OBJECT_ID('WSXML_SFG.SFGFACTURACIONPDV_GetCodFacturacionActualPDV', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGFACTURACIONPDV_GetCodFacturacionActualPDV;
GO

CREATE     PROCEDURE WSXML_SFG.SFGFACTURACIONPDV_GetCodFacturacionActualPDV(@p_CODPUNTODEVENTA NUMERIC(22,0), @p_CODLINEADENEGOCIO NUMERIC(22,0), @p_CODMAESTROFACTURACIONPDV_out NUMERIC(22,0) OUT) AS
  BEGIN
  SET NOCOUNT ON;
	BEGIN TRY
    SELECT @p_CODMAESTROFACTURACIONPDV_out = CODMAESTROFACTURACIONPDV FROM WSXML_SFG.FACTURACIONPDV
     WHERE CODPUNTODEVENTA = @p_CODPUNTODEVENTA
       AND CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO;
    -- Active state does not matter. It's supposed to be one record only (UK PDV LDN)
  
	END TRY
	BEGIN CATCH
		SET @p_CODMAESTROFACTURACIONPDV_out = 0;
	END CATCH
  END;
GO

IF OBJECT_ID('WSXML_SFG.SFGFACTURACIONPDV_GetFacturacionActualPDV', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGFACTURACIONPDV_GetFacturacionActualPDV;
GO

CREATE     PROCEDURE WSXML_SFG.SFGFACTURACIONPDV_GetFacturacionActualPDV(@p_CODPUNTODEVENTA NUMERIC(22,0), @p_CODLINEADENEGOCIO NUMERIC(22,0)) AS
 BEGIN
    DECLARE @codMAESTROFACTURACIONPDV NUMERIC(22,0);
   
  SET NOCOUNT ON;
    EXEC WSXML_SFG.SFGFACTURACIONPDV_GetCodFacturacionActualPDV  @p_CODPUNTODEVENTA, @p_CODLINEADENEGOCIO, @codMAESTROFACTURACIONPDV OUT
      SELECT MFP.CODCICLOFACTURACIONPDV,
             MFP.CODMAESTROFACTURACIONCOMPCONSI,
             MFP.SALDOANTERIORENCONTRAGTECH,
             MFP.SALDOANTERIORENCONTRAFIDUCIA,
             MFP.SALDOANTERIORAFAVORGTECH,
             MFP.SALDOANTERIORAFAVORFIDUCIA,
             MFP.NUEVOSALDOENCONTRAGTECH,
             MFP.NUEVOSALDOENCONTRAFIDUCIA,
             MFP.NUEVOSALDOAFAVORGTECH,
             MFP.NUEVOSALDOAFAVORFIDUCIA
      FROM WSXML_SFG.MAESTROFACTURACIONPDV MFP
      WHERE MFP.ID_MAESTROFACTURACIONPDV = @codMAESTROFACTURACIONPDV;
  END;
GO

IF OBJECT_ID('WSXML_SFG.SFGFACTURACIONPDV_SetCodFacturacionActualPDV', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGFACTURACIONPDV_SetCodFacturacionActualPDV;
GO

CREATE     PROCEDURE WSXML_SFG.SFGFACTURACIONPDV_SetCodFacturacionActualPDV(@p_CODPUNTODEVENTA          NUMERIC(22,0),
                                       @p_CODLINEADENEGOCIO        NUMERIC(22,0),
                                       @p_CODMAESTROFACTURACIONPDV NUMERIC(22,0),
                                       @p_CODUSUARIOMODIFICACION   NUMERIC(22,0),
                                       @p_ID_FACTURACIONPDV_out    NUMERIC(22,0) OUT) AS
 BEGIN
    DECLARE @codFACTURACIONPDV NUMERIC(22,0);
   
  SET NOCOUNT ON;
    SELECT @codFACTURACIONPDV = ID_FACTURACIONPDV FROM WSXML_SFG.FACTURACIONPDV
    WHERE CODPUNTODEVENTA   = @p_CODPUNTODEVENTA
      AND CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO;

    UPDATE WSXML_SFG.FACTURACIONPDV SET CODMAESTROFACTURACIONPDV = @p_CODMAESTROFACTURACIONPDV,
                              CODUSUARIOMODIFICACION   = @p_CODUSUARIOMODIFICACION,
                              FECHAHORAMODIFICACION    = GETDATE(),
                              ACTIVE                   = 1
    WHERE ID_FACTURACIONPDV = @codFACTURACIONPDV;
    SET @p_ID_FACTURACIONPDV_out = @codFACTURACIONPDV;
	
	IF @@ROWCOUNT = 0 BEGIN
		EXEC WSXML_SFG.SFGFACTURACIONPDV_AddRecord @p_CODPUNTODEVENTA,
              @p_CODLINEADENEGOCIO,
              @p_CODMAESTROFACTURACIONPDV,
              @p_CODUSUARIOMODIFICACION,
              @p_ID_FACTURACIONPDV_out OUT
	END
   
 END;
GO

IF OBJECT_ID('WSXML_SFG.SFGFACTURACIONPDV_SetFindValidCodFacturActualPDV', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGFACTURACIONPDV_SetFindValidCodFacturActualPDV;
GO

CREATE     PROCEDURE WSXML_SFG.SFGFACTURACIONPDV_SetFindValidCodFacturActualPDV(@p_CODPUNTODEVENTA          NUMERIC(22,0),
                                           @p_CODLINEADENEGOCIO        NUMERIC(22,0),
                                           @p_CODUSUARIOMODIFICACION   NUMERIC(22,0),
                                           @p_ID_FACTURACIONPDV_out    NUMERIC(22,0) OUT) AS
 BEGIN
    DECLARE @codMAESTROFACTURACIONPDV NUMERIC(22,0);
   
  SET NOCOUNT ON;
    SELECT @codMAESTROFACTURACIONPDV = MAX(ID_MAESTROFACTURACIONPDV) FROM WSXML_SFG.MAESTROFACTURACIONPDV
      WHERE CODPUNTODEVENTA = @p_CODPUNTODEVENTA
        AND CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO
        AND ACTIVE = 1;
    IF @codMAESTROFACTURACIONPDV > 0 BEGIN
       EXEC WSXML_SFG.SFGFACTURACIONPDV_SetCodFacturacionActualPDV @p_CODPUNTODEVENTA,
                                                   @p_CODLINEADENEGOCIO,
                                                   @codMAESTROFACTURACIONPDV,
                                                   @p_CODUSUARIOMODIFICACION,
                                                   @p_ID_FACTURACIONPDV_out OUT
    END 
	
	IF @@ROWCOUNT = 0 
  
		EXEC WSXML_SFG.SFGFACTURACIONPDV_SetCodFacturacionActualPDV @p_CODPUNTODEVENTA,
                                                 @p_CODLINEADENEGOCIO,
                                                 NULL,
                                                 @p_CODUSUARIOMODIFICACION,
                                                 @p_ID_FACTURACIONPDV_out OUT
  END;
GO

IF EXISTS (
    SELECT * FROM sys.objects WHERE OBJECT_NAME(object_id) = N'SFGFACTURACIONPDV_GetPorcentajeVentasAgrupamient'
    AND type IN (N'FN', N'IF', N'TF')
)
    DROP FUNCTION WSXML_SFG.SFGFACTURACIONPDV_GetPorcentajeVentasAgrupamient;
GO

CREATE   FUNCTION WSXML_SFG.SFGFACTURACIONPDV_GetPorcentajeVentasAgrupamient(
										@p_CODPUNTODEVENTA        NUMERIC(22,0),
                                        @p_CODLINEADENEGOCIO      NUMERIC(22,0),
                                        @p_SEMANASACONSIDERAR     NUMERIC(22,0),
                                        @p_CODTIPOVINCULACIONPAGO NUMERIC(22,0)
) RETURNS @lstPUNTOSDEVENTA TABLE (
	CODPUNTODEVENTA NUMERIC(38,0),
	PORCENTAJE FLOAT) AS
 BEGIN
    --DECLARE @lstPUNTOSDEVENTA WSXML_SFG.PORCENTAJEVENTASLIST;

	DECLARE @p_PUNTODEVENTA TINYINT = 1, @p_AGRUPACNXNIT TINYINT= 2, @p_AGRUPACNXCAD TINYINT=3
	--DECLARE @p_PUNTODEVENTA TINYINT, @p_AGRUPACNXNIT INT, @p_AGRUPACNXCAD INT
	--EXEC WSXML_SFG.SFGTIPOVINCULACIONPAGO_CONSTANT @p_PUNTODEVENTA OUTPUT, @p_AGRUPACNXNIT OUTPUT, @p_AGRUPACNXCAD OUTPUT

    IF @p_CODTIPOVINCULACIONPAGO = @p_PUNTODEVENTA BEGIN
      --SET @lstPUNTOSDEVENTA = PORCENTAJEVENTASLIST();
      INSERT INTO @lstPUNTOSDEVENTA VALUES (@p_CODPUNTODEVENTA, 100);
    END
    ELSE BEGIN
      DECLARE @lstCICLOSFACTURACION NUMBERARRAY;
      BEGIN
        -- Ultimas semanas de facturacion
		INSERT INTO @lstCICLOSFACTURACION
        SELECT ID_CICLOFACTURACIONPDV
        FROM (
			SELECT ID_CICLOFACTURACIONPDV, SECUENCIA,  ROW_NUMBER() OVER(ORDER BY SECUENCIA DESC) AS ROWNUM 
			FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ACTIVE = 1 
		)T
        WHERE T.ROWNUM <= @p_SEMANASACONSIDERAR;
        -- Obtener lista y facturacion
        IF @p_CODTIPOVINCULACIONPAGO = @p_AGRUPACNXNIT BEGIN
            DECLARE @p_IDENTIFICACION NVARCHAR(20);
          BEGIN
            SELECT @p_IDENTIFICACION = IDENTIFICACION FROM WSXML_SFG.PUNTODEVENTA WHERE ID_PUNTODEVENTA = @p_CODPUNTODEVENTA;

			INSERT INTO @lstPUNTOSDEVENTA
            SELECT ID_PUNTODEVENTA, SUM(MFP.NUEVOSALDOENCONTRAGTECH)
			FROM WSXML_SFG.PUNTODEVENTA PDV
            INNER JOIN WSXML_SFG.MAESTROFACTURACIONPDV MFP ON (
				MFP.CODPUNTODEVENTA   = PDV.ID_PUNTODEVENTA AND MFP.CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO
			)
            WHERE MFP.CODCICLOFACTURACIONPDV IN (SELECT IDVALUE FROM @lstCICLOSFACTURACION)
              AND PDV.IDENTIFICACION = @p_IDENTIFICACION
            GROUP BY ID_PUNTODEVENTA;
          END;

        END
        ELSE IF @p_CODTIPOVINCULACIONPAGO = @p_AGRUPACNXCAD BEGIN
            DECLARE @p_CODAGRUPACIONPUNTODEVENTA NUMERIC(22,0);
          BEGIN
            SELECT @p_CODAGRUPACIONPUNTODEVENTA = CODAGRUPACIONPUNTODEVENTA 
			FROM WSXML_SFG.PUNTODEVENTA 
			WHERE ID_PUNTODEVENTA = @p_CODPUNTODEVENTA;

			INSERT INTO @lstPUNTOSDEVENTA
            SELECT ID_PUNTODEVENTA, SUM(MFP.NUEVOSALDOENCONTRAGTECH)
			FROM WSXML_SFG.PUNTODEVENTA PDV
            INNER JOIN WSXML_SFG.MAESTROFACTURACIONPDV MFP 
				ON (MFP.CODPUNTODEVENTA   = PDV.ID_PUNTODEVENTA AND MFP.CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO)
            WHERE MFP.CODCICLOFACTURACIONPDV IN (SELECT IDVALUE FROM @lstCICLOSFACTURACION)
              AND PDV.CODAGRUPACIONPUNTODEVENTA = @p_CODAGRUPACIONPUNTODEVENTA
            GROUP BY ID_PUNTODEVENTA;
          END;

        END 
        -- Sumar y convertir a porcentaje
          DECLARE @sumatoria FLOAT = 0;
        BEGIN
          DECLARE ix CURSOR FOR SELECT CODPUNTODEVENTA, PORCENTAJE FROM @lstPUNTOSDEVENTA
		  OPEN ix
		  DECLARE @CODPUNTODEVENTA NUMERIC(38,0), @PORCENTAJE FLOAT
		  FETCH NEXT FROM ix INTO @CODPUNTODEVENTA, @PORCENTAJE
			
			WHILE (@@FETCH_STATUS = 0)	
			BEGIN
				SET @sumatoria = @sumatoria + @PORCENTAJE;
				FETCH NEXT FROM ix INTO @CODPUNTODEVENTA, @PORCENTAJE
			END;

          CLOSE ix;
          DEALLOCATE ix;
          -- Converir en porcentaje
          IF @sumatoria > 0 BEGIN
            DECLARE ix2 CURSOR FOR SELECT CODPUNTODEVENTA, PORCENTAJE FROM @lstPUNTOSDEVENTA
			OPEN ix2
			FETCH NEXT FROM ix2 INTO @CODPUNTODEVENTA, @PORCENTAJE
			WHILE (@@FETCH_STATUS = 0)	
			BEGIN
				INSERT INTO @lstPUNTOSDEVENTA VALUES (@CODPUNTODEVENTA, (@PORCENTAJE * 100) / @sumatoria)
              
				FETCH NEXT FROM ix2 INTO @CODPUNTODEVENTA, @PORCENTAJE
            END;

            CLOSE ix2;
            DEALLOCATE ix2;
          END 
        END;

      END;
	END
    RETURN
  END
GO

IF OBJECT_ID('WSXML_SFG.SFGFACTURACIONPDV_GetList', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGFACTURACIONPDV_GetList;
GO

CREATE     PROCEDURE WSXML_SFG.SFGFACTURACIONPDV_GetList(@p_active NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
      SELECT ID_FACTURACIONPDV,
             CODPUNTODEVENTA,
             CODLINEADENEGOCIO,
             CODMAESTROFACTURACIONPDV,
             FECHAHORAMODIFICACION,
             CODUSUARIOMODIFICACION,
             ACTIVE
        FROM WSXML_SFG.FACTURACIONPDV
       WHERE ACTIVE = CASE WHEN @p_active = -1 THEN ACTIVE ELSE @p_active END;
  END;
GO

IF OBJECT_ID('WSXML_SFG.SFGFACTURACIONPDV_ReverseFacturActualPDV', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGFACTURACIONPDV_ReverseFacturActualPDV;
GO

CREATE     PROCEDURE WSXML_SFG.SFGFACTURACIONPDV_ReverseFacturActualPDV(@p_CODCICLOFACTURACION NUMERIC(22,0), @p_CODUSUARIOMODIFICACION NUMERIC(22,0)) AS
 BEGIN
    DECLARE @lstAGENTS LONGNUMBERARRAY;
    DECLARE @lstSERVCS NUMBERARRAY;
   
  SET NOCOUNT ON;
	INSERT INTO @lstAGENTS
    SELECT ID_PUNTODEVENTA 
	FROM WSXML_SFG.PUNTODEVENTA;
	
	INSERT INTO @lstSERVCS
    SELECT ID_LINEADENEGOCIO  
	FROM WSXML_SFG.LINEADENEGOCIO WHERE ACTIVE = 1;
	
	
    DECLARE iagnt CURSOR FOR SELECT IDVALUE FROM @lstAGENTS
	OPEN iagnt
	DECLARE @l_iagnt_idvalue NUMERIC(38,0);
	
	FETCH NEXT FROM iagnt INTO @l_iagnt_idvalue
        
	WHILE (@@FETCH_STATUS = 0)	
	BEGIN

			DECLARE isrvc CURSOR FOR SELECT IDValue from @lstSERVCS
			OPEN isrvc
		  
			DECLARE @l_isrvc_idvalue NUMERIC(38,0);
		  
			DECLARE @cFACTURACION            NUMERIC(22,0);
			DECLARE @cPDVFACTURACION_out     NUMERIC(22,0);
			DECLARE @cCODDETALLESALDOPDV_out NUMERIC(22,0);

			FETCH NEXT FROM isrvc INTO @l_isrvc_idvalue
			
			WHILE (@@FETCH_STATUS = 0)	
			BEGIN
				
				BEGIN
					BEGIN TRY
						SELECT @cFACTURACION = ID_MAESTROFACTURACIONPDV 
						FROM WSXML_SFG.MAESTROFACTURACIONPDV
						WHERE CODCICLOFACTURACIONPDV = @p_CODCICLOFACTURACION
							AND CODPUNTODEVENTA = @l_iagnt_idvalue
							AND CODLINEADENEGOCIO = @l_isrvc_idvalue
					END TRY
					BEGIN CATCH
						SET @cFACTURACION = NULL;
					END CATCH
				END;

				EXEC WSXML_SFG.SFGFACTURACIONPDV_SetCodFacturacionActualPDV @l_iagnt_idvalue,
										 @l_isrvc_idvalue,
										 @cFACTURACION,
										 @p_CODUSUARIOMODIFICACION,
										 @cPDVFACTURACION_out OUT
										 
				EXEC WSXML_SFG.SFGDETALLESALDOPDV_SetCodSaldoActualPDV @l_iagnt_idvalue,
													  @l_isrvc_idvalue,
													  @cFACTURACION,
													  @p_CODUSUARIOMODIFICACION,
													  @cCODDETALLESALDOPDV_out OUT
													  
			FETCH NEXT FROM isrvc INTO @l_isrvc_idvalue
			END;

			CLOSE isrvc;
			DEALLOCATE isrvc;
		
		FETCH NEXT FROM iagnt INTO @l_iagnt_idvalue
    END

    CLOSE iagnt;
    DEALLOCATE iagnt;
  END
GO






