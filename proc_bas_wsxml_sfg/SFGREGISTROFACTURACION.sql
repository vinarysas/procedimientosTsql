USE SFGPRODU;
--------------------------------------------------------
--  DDL for Package Body SFGREGISTROFACTURACION
--------------------------------------------------------

  /* PACKAGE BODY WSXML_SFG.SFGREGISTROFACTURACION */ 
 
  IF OBJECT_ID('WSXML_SFG.SFGREGISTROFACTURACION_CONSTANT', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_CONSTANT;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_CONSTANT(
    @NOHUERFANA           SMALLINT OUT,
	@HUERFANOPUNTODEVENTA SMALLINT OUT,
	@HUERFANOPRODUCTO     SMALLINT OUT,
	@HUERFANOCOMISION     SMALLINT OUT,
	@HUERFANOANULACION    SMALLINT OUT,
	@HUERFANOCONTRATO     SMALLINT OUT
) AS
  BEGIN
  SET NOCOUNT ON;
	SET @NOHUERFANA           = 0;
	SET @HUERFANOPUNTODEVENTA = 1;
	SET @HUERFANOPRODUCTO     = 2;
	SET @HUERFANOCOMISION     = 3;
	SET @HUERFANOANULACION    = 4;
	SET @HUERFANOCONTRATO     = 5;
  END;
GO


  IF OBJECT_ID('WSXML_SFG.SFGREGISTROFACTURACION_AddRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_AddRecord;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_AddRecord(@p_CODENTRADAARCHIVOCONTROL NUMERIC(22,0),
                      @p_CODPUNTODEVENTA          NUMERIC(22,0),
                      @p_CODPRODUCTO              NUMERIC(22,0),
                      @p_CODTIPOREGISTRO          NUMERIC(22,0),
                      @p_VALORTRANSACCION         FLOAT,
                      @p_FECHATRANSACCION         DATETIME,
                      @p_NUMTRANSACCIONES         NUMERIC(22,0),
                      @p_CODRANGOCOMISION         NUMERIC(22,0),
                      @p_ANTICIPO                 NUMERIC(22,0),
                      @p_VALORCOMISION            FLOAT,
                      @p_VALORVENTANETA           FLOAT,
                      -- Reglas de facturacion aplicadas
                      @p_CODCOMPANIA                NUMERIC(22,0),
                      @p_CODREGIMEN                 NUMERIC(22,0),
                      @p_CODAGRUPACIONPUNTODEVENTA  NUMERIC(22,0),
                      @p_CODREDPDV                  NUMERIC(22,0),
                      @p_IDENTIFICACION             NUMERIC(22,0),
                      @p_DIGITOVERIFICACION         NUMERIC(22,0),
                      @p_CODCIUDAD                  NUMERIC(22,0),
                      @p_CODTIPOCONTRATOPDV         NUMERIC(22,0),
                      @p_CODRAZONSOCIAL             NUMERIC(22,0),
                      @p_CODTIPOCONTRATOPRODUCTO    NUMERIC(22,0),
                      @p_CODDUENOTERMINAL           NUMERIC(22,0),
                      @p_CODUSUARIOMODIFICACION     NUMERIC(22,0),
                      @p_ID_REGISTROFACTURACION_out NUMERIC(22,0) OUT) AS
 BEGIN
  DECLARE @vCODDUENOTERMINAL NUMERIC(22,0);
   
  SET NOCOUNT ON;
  
    INSERT INTO WSXML_SFG.REGISTROFACTURACION
      (
       CODENTRADAARCHIVOCONTROL,
       CODPUNTODEVENTA,
       CODPRODUCTO,
       CODTIPOREGISTRO,
       VALORTRANSACCION,
       FECHATRANSACCION,
       NUMTRANSACCIONES,
       CODRANGOCOMISION,
       COMISIONANTICIPO,
       VALORCOMISION,
       VALORVENTANETA,
       CODCOMPANIA,
       CODREGIMEN,
       CODAGRUPACIONPUNTODEVENTA,
       CODREDPDV,
       IDENTIFICACION,
       DIGITOVERIFICACION,
       CODCIUDAD,
       CODTIPOCONTRATOPDV,
       CODRAZONSOCIAL,
       CODTIPOCONTRATOPRODUCTO,
       CODDUENOTERMINAL,
       CODUSUARIOMODIFICACION)
    VALUES
      (
       @p_CODENTRADAARCHIVOCONTROL,
       @p_CODPUNTODEVENTA,
       @p_CODPRODUCTO,
       @p_CODTIPOREGISTRO,
       @p_VALORTRANSACCION,
       @p_FECHATRANSACCION,
       @p_NUMTRANSACCIONES,
       CASE WHEN @p_CODRANGOCOMISION <= 0 THEN NULL ELSE @p_CODRANGOCOMISION END,
       @p_ANTICIPO,
       @p_VALORCOMISION,
       @p_VALORVENTANETA,
       @p_CODCOMPANIA,
       @p_CODREGIMEN,
       @p_CODAGRUPACIONPUNTODEVENTA,
       @p_CODREDPDV,
       @p_IDENTIFICACION,
       @p_DIGITOVERIFICACION,
       @p_CODCIUDAD,
       @p_CODTIPOCONTRATOPDV,
       @p_CODRAZONSOCIAL,
       @p_CODTIPOCONTRATOPRODUCTO,
       @vCODDUENOTERMINAL,
       @p_CODUSUARIOMODIFICACION);
    SET @p_ID_REGISTROFACTURACION_out = SCOPE_IDENTITY();
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGREGISTROFACTURACION_AlterBillingRules', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_AlterBillingRules;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_AlterBillingRules(@pk_ID_REGISTROFACTURACION   NUMERIC(22,0),
                              @p_CODCOMPANIA               NUMERIC(22,0),
                              @p_CODREGIMEN                NUMERIC(22,0),
                              @p_CODAGRUPACIONPUNTODEVENTA NUMERIC(22,0),
                              @p_CODREDPDV                 NUMERIC(22,0),
                              @p_IDENTIFICACION            NUMERIC(22,0),
                              @p_DIGITOVERIFICACION        NUMERIC(22,0),
                              @p_CODCIUDAD                 NUMERIC(22,0),
                              @p_CODTIPOCONTRATOPDV        NUMERIC(22,0),
                              @p_CODRAZONSOCIAL            NUMERIC(22,0),
                              @p_CODTIPOCONTRATOPRODUCTO   NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
    UPDATE WSXML_SFG.REGISTROFACTURACION
       SET CODCOMPANIA               = @p_CODCOMPANIA,
           CODREGIMEN                = @p_CODREGIMEN,
           CODAGRUPACIONPUNTODEVENTA = @p_CODAGRUPACIONPUNTODEVENTA,
           CODREDPDV                 = @p_CODREDPDV,
           IDENTIFICACION            = @p_IDENTIFICACION,
           DIGITOVERIFICACION        = @p_DIGITOVERIFICACION,
           CODCIUDAD                 = @p_CODCIUDAD,
           CODTIPOCONTRATOPDV        = @p_CODTIPOCONTRATOPDV,
           CODRAZONSOCIAL            = @p_CODRAZONSOCIAL,
           CODTIPOCONTRATOPRODUCTO   = @p_CODTIPOCONTRATOPRODUCTO
     WHERE ID_REGISTROFACTURACION = @pk_ID_REGISTROFACTURACION;
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGREGISTROFACTURACION_GetBillingRulesFromRegistry', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_GetBillingRulesFromRegistry;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_GetBillingRulesFromRegistry(@pk_ID_REGISTROFACTURACION   NUMERIC(22,0),
                                        @p_CODCOMPANIA               NUMERIC(22,0) OUT,
                                        @p_CODREGIMEN                NUMERIC(22,0) OUT,
                                        @p_CODAGRUPACIONPUNTODEVENTA NUMERIC(22,0) OUT,
                                        @p_CODREDPDV                 NUMERIC(22,0) OUT,
                                        @p_IDENTIFICACION            NUMERIC(22,0) OUT,
                                        @p_DIGITOVERIFICACION        NUMERIC(22,0) OUT,
                                        @p_CODCIUDAD                 NUMERIC(22,0) OUT,
                                        @p_CODTIPOCONTRATOPDV        NUMERIC(22,0) OUT,
                                        @p_CODRAZONSOCIAL            NUMERIC(22,0) OUT,
                                        @p_CODTIPOCONTRATOPRODUCTO   NUMERIC(22,0) OUT,
                                        @p_DUENOTERMINAL             NUMERIC(22,0) OUT) AS
  BEGIN
  SET NOCOUNT ON;
    SELECT @p_CODCOMPANIA = CODCOMPANIA,
           @p_CODREGIMEN = CODREGIMEN,
           @p_CODAGRUPACIONPUNTODEVENTA = CODAGRUPACIONPUNTODEVENTA,
           @p_CODREDPDV = CODREDPDV,
           @p_IDENTIFICACION = IDENTIFICACION,
           @p_DIGITOVERIFICACION = DIGITOVERIFICACION,
           @p_CODCIUDAD = CODCIUDAD,
           @p_CODTIPOCONTRATOPDV = CODTIPOCONTRATOPDV,
           @p_CODRAZONSOCIAL = CODRAZONSOCIAL,
           @p_CODTIPOCONTRATOPRODUCTO = CODTIPOCONTRATOPRODUCTO,
           @p_DUENOTERMINAL = CODDUENOTERMINAL
           FROM WSXML_SFG.REGISTROFACTURACION
     WHERE ID_REGISTROFACTURACION = @pk_ID_REGISTROFACTURACION;

	IF @@ROWCOUNT  = 0
			RAISERROR('-20054 El registro no existe', 16, 1);
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGREGISTROFACTURACION_AddRecordFromPrize', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_AddRecordFromPrize;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_AddRecordFromPrize(@p_CODENTRADAARCHIVOCONTROL   NUMERIC(22,0),
                               @p_CODPUNTODEVENTA            NUMERIC(22,0),
                               @p_CODPRODUCTO                NUMERIC(22,0),
                               @p_CODTIPOREGISTRO            NUMERIC(22,0),
                               @p_VALORTRANSACCION           FLOAT,
                               @p_FECHATRANSACCION           DATETIME,
                               @p_NUMTRANSACCIONES           NUMERIC(22,0),
                               @p_CODRANGOCOMISION           NUMERIC(22,0),
                               @p_ANTICIPO                   NUMERIC(22,0),
                               @p_VALORVENTANETA             FLOAT,
                               @p_VALORRETENCIONPREMIO       FLOAT,
                               @p_CODCOMPANIA                NUMERIC(22,0),
                               @p_CODREGIMEN                 NUMERIC(22,0),
                               @p_CODAGRUPACIONPUNTODEVENTA  NUMERIC(22,0),
                               @p_CODREDPDV                  NUMERIC(22,0),
                               @p_IDENTIFICACION             NUMERIC(22,0),
                               @p_DIGITOVERIFICACION         NUMERIC(22,0),
                               @p_CODCIUDAD                  NUMERIC(22,0),
                               @p_CODTIPOCONTRATOPDV         NUMERIC(22,0),
                               @p_CODRAZONSOCIAL             NUMERIC(22,0),
                               @p_CODTIPOCONTRATOPRODUCTO    NUMERIC(22,0),
                               @p_CODDUENOTERMINAL           NUMERIC(22,0),
                               @p_CODUSUARIOMODIFICACION     NUMERIC(22,0),
                               @p_ID_REGISTROFACTURACION_out NUMERIC(22,0) OUT) AS
  BEGIN
  SET NOCOUNT ON;
    INSERT INTO WSXML_SFG.REGISTROFACTURACION
      (
       CODENTRADAARCHIVOCONTROL,
       CODPUNTODEVENTA,
       CODPRODUCTO,
       CODTIPOREGISTRO,
       VALORTRANSACCION,
       FECHATRANSACCION,
       NUMTRANSACCIONES,
       CODRANGOCOMISION,
       COMISIONANTICIPO,
       VALORVENTANETA,
       RETENCIONPREMIO,
       CODCOMPANIA,
       CODREGIMEN,
       CODAGRUPACIONPUNTODEVENTA,
       CODREDPDV,
       IDENTIFICACION,
       DIGITOVERIFICACION,
       CODCIUDAD,
       CODTIPOCONTRATOPDV,
       CODRAZONSOCIAL,
       CODTIPOCONTRATOPRODUCTO,
       CODDUENOTERMINAL,
       CODUSUARIOMODIFICACION)
    VALUES
      (
       @p_CODENTRADAARCHIVOCONTROL,
       @p_CODPUNTODEVENTA,
       @p_CODPRODUCTO,
       @p_CODTIPOREGISTRO,
       @p_VALORTRANSACCION,
       @p_FECHATRANSACCION,
       @p_NUMTRANSACCIONES,
       CASE WHEN @p_CODRANGOCOMISION <= 0 THEN NULL ELSE @p_CODRANGOCOMISION END,
       @p_ANTICIPO,
       @p_VALORVENTANETA,
       @p_VALORRETENCIONPREMIO,
       @p_CODCOMPANIA,
       @p_CODREGIMEN,
       @p_CODAGRUPACIONPUNTODEVENTA,
       @p_CODREDPDV,
       @p_IDENTIFICACION,
       @p_DIGITOVERIFICACION,
       @p_CODCIUDAD,
       @p_CODTIPOCONTRATOPDV,
       @p_CODRAZONSOCIAL,
       @p_CODTIPOCONTRATOPRODUCTO,
       @p_CODDUENOTERMINAL,
       @p_CODUSUARIOMODIFICACION);
    SET @p_ID_REGISTROFACTURACION_out = SCOPE_IDENTITY();
  END;
GO



  IF OBJECT_ID('WSXML_SFG.SFGREGISTROFACTURACION_CreateAnullmentRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_CreateAnullmentRecord;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_CreateAnullmentRecord(@p_CODENTRADAARCHIVOCONTROL   NUMERIC(22,0),
                                  @p_CODREGISTROVENTA           NUMERIC(22,0),
                                  @p_CODPUNTODEVENTA            NUMERIC(22,0),
                                  @p_CODPRODUCTO                NUMERIC(22,0),
                                  @p_VALORTRANSACCION           FLOAT,
                                  @p_FECHATRANSACCION           DATETIME,
                                  @p_NUMTRANSACCIONES           NUMERIC(22,0),
                                  @p_CODRANGOCOMISION           NUMERIC(22,0),
                                  @p_COMISIONANTICIPO           NUMERIC(22,0),
                                  @p_CODREGISTROFACTREFERENCI   NUMERIC(22,0),
                                  @p_NUMEROREFERENCIA           NUMERIC(22,0),
                                  @p_CODUSUARIOMODIFICACION     NUMERIC(22,0),
                                  @p_ID_REGISTROFACTURACION_out NUMERIC(22,0) OUT) AS
 BEGIN
    DECLARE @cCODREGISTROFACTREFERENCIA NUMERIC(22,0);
	DECLARE @msg VARCHAR(2000)
   
  SET NOCOUNT ON;
    BEGIN

		DECLARE @VENTAFACT SMALLINT,
        @ANULACION SMALLINT,
		@FREETICKT SMALLINT,
		@PREMIOPAG SMALLINT,
		@RGSTOTROS SMALLINT,
		@VENNOFACT SMALLINT 

		EXEC WSXML_SFG.SFGTIPOREGISTRO_CONSTANT
						@VENTAFACT OUT,
						@ANULACION OUT,
						@FREETICKT OUT,
						@PREMIOPAG OUT,
						@RGSTOTROS OUT,
						@VENNOFACT OUT


			-- Obtener registro de anulacion. Utilizar llave unica
			SELECT @p_ID_REGISTROFACTURACION_out = ID_REGISTROFACTURACION
			FROM WSXML_SFG.REGISTROFACTURACION
			WHERE CODENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL
				AND CODPUNTODEVENTA = @p_CODPUNTODEVENTA
				AND CODPRODUCTO = @p_CODPRODUCTO
				AND CODTIPOREGISTRO = @ANULACION
			

			IF @@ROWCOUNT = 0 
			BEGIN
				  DECLARE @p_CODCOMPANIA               NUMERIC(22,0);
				  DECLARE @p_CODREGIMEN                NUMERIC(22,0);
				  DECLARE @p_CODAGRUPACIONPUNTODEVENTA NUMERIC(22,0);
				  DECLARE @p_CODREDPDV                 NUMERIC(22,0);
				  DECLARE @p_IDENTIFICACION            NUMERIC(22,0);
				  DECLARE @p_DIGITOVERIFICACION        NUMERIC(22,0);
				  DECLARE @p_CODCIUDAD                 NUMERIC(22,0);
				  DECLARE @p_CODTIPOCONTRATOPDV        NUMERIC(22,0);
				  DECLARE @p_CODRAZONSOCIAL            NUMERIC(22,0);
				  DECLARE @p_CODTIPOCONTRATOPRODUCTO   NUMERIC(22,0);
				  DECLARE @p_DUENOTERMINAL             NUMERIC(22,0);
				
					BEGIN
						  -- Obtener las reglas de la venta
						  EXEC WSXML_SFG.SFGREGISTROFACTURACION_GetBillingRulesFromRegistry 
																			@p_CODREGISTROVENTA,
																			 @p_CODCOMPANIA,
																			 @p_CODREGIMEN,
																			 @p_CODAGRUPACIONPUNTODEVENTA,
																			 @p_CODREDPDV,
																			 @p_IDENTIFICACION,
																			 @p_DIGITOVERIFICACION,
																			 @p_CODCIUDAD,
																			 @p_CODTIPOCONTRATOPDV,
																			 @p_CODRAZONSOCIAL,
																			 @p_CODTIPOCONTRATOPRODUCTO,
																			 @p_DUENOTERMINAL OUT
						  -- Duplicar el registro a anulaci?n
						  EXEC WSXML_SFG.SFGREGISTROFACTURACION_AddRecord 
											@p_CODENTRADAARCHIVOCONTROL,
                                           @p_CODPUNTODEVENTA,
                                           @p_CODPRODUCTO,
                                           @ANULACION,
                                           @p_VALORTRANSACCION,
                                           @p_FECHATRANSACCION,
                                           @p_NUMTRANSACCIONES,
                                           @p_CODRANGOCOMISION,
                                           @p_COMISIONANTICIPO,
                                           0,
                                           0,
                                           @p_CODCOMPANIA,
                                           @p_CODREGIMEN,
                                           @p_CODAGRUPACIONPUNTODEVENTA,
                                           @p_CODREDPDV,
                                           @p_IDENTIFICACION,
                                           @p_DIGITOVERIFICACION,
                                           @p_CODCIUDAD,
                                           @p_CODTIPOCONTRATOPDV,
                                           @p_CODRAZONSOCIAL,
                                           @p_CODTIPOCONTRATOPRODUCTO,
                                           @p_DUENOTERMINAL,
                                           @p_CODUSUARIOMODIFICACION,
                                           @p_ID_REGISTROFACTURACION_out OUT
					END;
			END ELSE BEGIN
				-- Sumar a la anulaci?n
				UPDATE WSXML_SFG.REGISTROFACTURACION
					SET VALORTRANSACCION       = VALORTRANSACCION + @p_VALORTRANSACCION,
					 NUMTRANSACCIONES       = NUMTRANSACCIONES + @p_NUMTRANSACCIONES,
					 CODUSUARIOMODIFICACION = @p_CODUSUARIOMODIFICACION
				WHERE ID_REGISTROFACTURACION = @p_ID_REGISTROFACTURACION_out;
			END

    END;

    -- Concatenar registro de evidencia
    IF @p_NUMEROREFERENCIA > 0 BEGIN
        DECLARE @tmpSUBAGENTNUMBER  NVARCHAR(50);
        DECLARE @tmpRECEIPTNUMBER   NVARCHAR(50);
        DECLARE @tmpSUSCRIBERNUMBER NVARCHAR(50);
        DECLARE @tmpVRCOMISIONREF   FLOAT;
        DECLARE @tmpIVACOMISIONREF  FLOAT;
      BEGIN
        BEGIN
			BEGIN TRY
			  SELECT @tmpSUBAGENTNUMBER = SUBAGENTE, @tmpRECEIPTNUMBER = RECIBO, @tmpSUSCRIBERNUMBER = SUSCRIPTOR
				FROM WSXML_SFG.REGISTROFACTREFERENCIA
			   WHERE NUMEROREFERENCIA = @p_NUMEROREFERENCIA;
			END TRY
			BEGIN CATCH
				SET @msg = 'Error occured while retrieving customer info for reference ' +ISNULL(CONVERT(VARCHAR,@p_NUMEROREFERENCIA), '')
				EXEC WSXML_SFG.SFGTMPTRACE_TraceLog @msg 
			END CATCH
        END;

		SET @p_NUMEROREFERENCIA = @p_NUMEROREFERENCIA * -1
        EXEC WSXML_SFG.SFGREGFACTURACIONREFERENCIA_AppendReferenceWithReference 
																@p_ID_REGISTROFACTURACION_out,
                                                                 @p_NUMEROREFERENCIA,
                                                                 @p_FECHATRANSACCION,
                                                                 @p_VALORTRANSACCION,
                                                                 'R',
                                                                 @tmpSUBAGENTNUMBER,
                                                                 @tmpRECEIPTNUMBER,
                                                                 @tmpSUSCRIBERNUMBER,
                                                                 @p_CODREGISTROFACTREFERENCI,
                                                                 @cCODREGISTROFACTREFERENCIA
        -- Marcar registro de referencia como anulado
        UPDATE WSXML_SFG.REGISTROFACTREFERENCIA
           SET ANULADO            = 1,
               FECHAHORAANULACION = GETDATE(),
               CODREGISTROANULADO = @cCODREGISTROFACTREFERENCIA
         WHERE ID_REGISTROFACTREFERENCIA = @p_CODREGISTROFACTREFERENCI;

        --Rnino 18 de Marzo de 2011 --Actualizacion de producto con comision dada sobre la cual se saca la comision
        SELECT @tmpVRCOMISIONREF = REGISTROFACTREFERENCIA.VRCOMISION,
               @tmpIVACOMISIONREF = REGISTROFACTREFERENCIA.IVACOMISION
          FROM WSXML_SFG.REGISTROFACTREFERENCIA
         WHERE ID_REGISTROFACTREFERENCIA = @p_CODREGISTROFACTREFERENCI;

        IF @tmpVRCOMISIONREF IS NOT NULL AND @tmpIVACOMISIONREF IS NOT NULL BEGIN
          UPDATE WSXML_SFG.REGISTROFACTREFERENCIA
             SET REGISTROFACTREFERENCIA.VRCOMISION  = @tmpVRCOMISIONREF,
                 REGISTROFACTREFERENCIA.IVACOMISION = @tmpIVACOMISIONREF
           WHERE ID_REGISTROFACTREFERENCIA = @cCODREGISTROFACTREFERENCIA;
        END 

      END;

    END 
    -- Modificar valor de control para conservar balance
    EXEC WSXML_SFG.SFGENTRADAARCHIVOCONTROL_UpdateControlFromAnnulment @p_CODENTRADAARCHIVOCONTROL, @p_NUMTRANSACCIONES, @p_VALORTRANSACCION
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGREGISTROFACTURACION_UpdateRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_UpdateRecord;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_UpdateRecord(@pk_ID_REGISTROFACTURACION NUMERIC(22,0),
                         @p_CODPUNTODEVENTA         NUMERIC(22,0),
                         @p_CODPRODUCTO             NUMERIC(22,0),
                         @p_CODTIPOREGISTRO         NUMERIC(22,0),
                         @p_VALORTRANSACCION        FLOAT,
                         @p_FECHATRANSACCION        DATETIME,
                         @p_NUMTRANSACCIONES        NUMERIC(22,0),
                         @p_CODRANGOCOMISION        NUMERIC(22,0),
                         @p_VALORCOMISION           FLOAT,
                         @p_VALORVENTANETA          FLOAT,
                         @p_CODUSUARIOMODIFICACION  NUMERIC(22,0),
                         @p_ACTIVE                  NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;

    UPDATE WSXML_SFG.REGISTROFACTURACION
       SET CODPUNTODEVENTA        = @p_CODPUNTODEVENTA,
           CODPRODUCTO            = @p_CODPRODUCTO,
           CODTIPOREGISTRO        = @p_CODTIPOREGISTRO,
           VALORTRANSACCION       = @p_VALORTRANSACCION,
           FECHATRANSACCION       = @p_FECHATRANSACCION,
           NUMTRANSACCIONES       = @p_NUMTRANSACCIONES,
           CODRANGOCOMISION       = @p_CODRANGOCOMISION,
           VALORCOMISION          = @p_VALORCOMISION,
           VALORVENTANETA         = @p_VALORVENTANETA,
           CODUSUARIOMODIFICACION = @p_CODUSUARIOMODIFICACION,
           FECHAHORAMODIFICACION  = GETDATE(),
           ACTIVE                 = @p_ACTIVE
     WHERE ID_REGISTROFACTURACION = @pk_ID_REGISTROFACTURACION;

	DECLARE @rowcount NUMERIC(22,0) = @@ROWCOUNT;
    IF @rowcount = 0 BEGIN
      RAISERROR('-20054 The record no longer exists.', 16, 1);
	  RETURN 0
    END 
    IF @rowcount > 1 BEGIN
      RAISERROR('-20053 Duplicate object instances.', 16, 1);
	  RETURN 0
    END 

  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGREGISTROFACTURACION_UpdateRecordVentaBruta', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_UpdateRecordVentaBruta;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_UpdateRecordVentaBruta(@pk_ID_REGISTROFACTURACION NUMERIC(22,0),
                                   @p_VALORVENTABRUTA         FLOAT,
                                   @p_VALORVENTABRUTANOREDOND FLOAT,
                                   @p_CODUSUARIOMODIFICACION  FLOAT) AS
  BEGIN
  SET NOCOUNT ON;

    UPDATE WSXML_SFG.REGISTROFACTURACION
       SET VALORVENTABRUTA             = @p_VALORVENTABRUTA,
           VALORVENTABRUTANOREDONDEADO = @p_VALORVENTABRUTANOREDOND,
           CODUSUARIOMODIFICACION      = @p_CODUSUARIOMODIFICACION
     WHERE ID_REGISTROFACTURACION = @pk_ID_REGISTROFACTURACION;

  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGREGISTROFACTURACION_UpdateAnullmentVentaBruta', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_UpdateAnullmentVentaBruta;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_UpdateAnullmentVentaBruta(@pk_ID_REGISTROFACTURACION NUMERIC(22,0),
                                      @p_VALORVENTABRUTA         FLOAT,
                                      @p_VALORVENTABRUTANOREDOND FLOAT,
                                      @p_CODUSUARIOMODIFICACION  FLOAT) AS
  BEGIN
  SET NOCOUNT ON;
    UPDATE WSXML_SFG.REGISTROFACTURACION
       SET VALORVENTABRUTA             = VALORVENTABRUTA + @p_VALORVENTABRUTA,
           VALORVENTABRUTANOREDONDEADO = VALORVENTABRUTANOREDONDEADO +
                                         @p_VALORVENTABRUTANOREDOND,
           CODUSUARIOMODIFICACION      = @p_CODUSUARIOMODIFICACION
     WHERE ID_REGISTROFACTURACION = @pk_ID_REGISTROFACTURACION;
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGREGISTROFACTURACION_UpdateRecordDescuento', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_UpdateRecordDescuento;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_UpdateRecordDescuento(@pk_ID_REGISTROFACTURACION NUMERIC(22,0),
                                      @p_VALORDESCUENTO      FLOAT) AS
  BEGIN
  SET NOCOUNT ON;
    UPDATE WSXML_SFG.REGISTROFACTURACION 
           SET VALORDESCUENTOS = @p_VALORDESCUENTO
     WHERE ID_REGISTROFACTURACION = @pk_ID_REGISTROFACTURACION;
  END;
GO


  IF OBJECT_ID('WSXML_SFG.SFGREGISTROFACTURACION_UpdateAnullmentDescuento', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_UpdateAnullmentDescuento;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_UpdateAnullmentDescuento(@pk_ID_REGISTROFACTURACION NUMERIC(22,0),
                                      @p_VALORDESCUENTO      FLOAT) AS
  BEGIN
  SET NOCOUNT ON;
    UPDATE WSXML_SFG.REGISTROFACTURACION 
           SET VALORDESCUENTOS = isnull(VALORDESCUENTOS,0)  + isnull(@p_VALORDESCUENTO,0)
     WHERE ID_REGISTROFACTURACION = @pk_ID_REGISTROFACTURACION;
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGREGISTROFACTURACION_UpdateRecordComisionVenta', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_UpdateRecordComisionVenta;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_UpdateRecordComisionVenta(@pk_ID_REGISTROFACTURACION NUMERIC(22,0),
                                      @p_CODRANGOCOMISION        NUMERIC(22,0),
                                      @p_CODCATEGORIAPAGO        NUMERIC(22,0),
                                      @p_VALORCOMISION           FLOAT,
                                      @p_VALORCOMISIONNOREDONDEA FLOAT,
                                      @p_IVACOMISION             FLOAT,
                                      @p_VALORVAT                FLOAT,
                                      @p_VALORCOMISIONBRUTA      FLOAT,
                                      @p_VALORCOMISIONNETA       FLOAT,
                                      @p_VALORVENTANETA          FLOAT,
                                      @p_CODUSUARIOMODIFICACION  NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;

    UPDATE WSXML_SFG.REGISTROFACTURACION
       SET CODRANGOCOMISION          = @p_CODRANGOCOMISION,
           CODCATEGORIAPAGO = CASE WHEN @p_CODCATEGORIAPAGO > 0 THEN @p_CODCATEGORIAPAGO ELSE NULL END,
           VALORCOMISION             = @p_VALORCOMISION,
           VALORCOMISIONNOREDONDEADO = @p_VALORCOMISIONNOREDONDEA,
           IVACOMISION               = @p_IVACOMISION,
           VALORVAT                  = @p_VALORVAT,
           VALORCOMISIONBRUTA        = @p_VALORCOMISIONBRUTA,
           VALORCOMISIONNETA         = @p_VALORCOMISIONNETA,
           VALORVENTANETA            = @p_VALORVENTANETA,
           CODUSUARIOMODIFICACION    = @p_CODUSUARIOMODIFICACION
     WHERE ID_REGISTROFACTURACION = @pk_ID_REGISTROFACTURACION;

  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGREGISTROFACTURACION_UpdateAnullmentComisionVenta', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_UpdateAnullmentComisionVenta;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_UpdateAnullmentComisionVenta(@pk_ID_REGISTROFACTURACION NUMERIC(22,0),
                                         @p_CODRANGOCOMISION        NUMERIC(22,0),
                                         @p_VALORCOMISION           FLOAT,
                                         @p_VALORCOMISIONNOREDONDEA FLOAT,
                                         @p_IVACOMISION             FLOAT,
                                         @p_VALORVAT                FLOAT,
                                         @p_VALORCOMISIONBRUTA      FLOAT,
                                         @p_VALORCOMISIONNETA       FLOAT,
                                         @p_VALORVENTANETA          FLOAT,
                                         @p_CODUSUARIOMODIFICACION  NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
    UPDATE WSXML_SFG.REGISTROFACTURACION
       SET CODRANGOCOMISION          = @p_CODRANGOCOMISION,
           VALORCOMISION             = VALORCOMISION + @p_VALORCOMISION,
           VALORCOMISIONNOREDONDEADO = VALORCOMISIONNOREDONDEADO +
                                       @p_VALORCOMISIONNOREDONDEA,
           IVACOMISION               = IVACOMISION + @p_IVACOMISION,
           VALORVAT                  = @p_VALORVAT,
           VALORCOMISIONBRUTA        = VALORCOMISIONBRUTA +
                                       @p_VALORCOMISIONBRUTA,
           VALORCOMISIONNETA         = VALORCOMISIONNETA +
                                       @p_VALORCOMISIONNETA,
           VALORVENTANETA            = VALORVENTANETA + @p_VALORVENTANETA,
           CODUSUARIOMODIFICACION    = @p_CODUSUARIOMODIFICACION
     WHERE ID_REGISTROFACTURACION = @pk_ID_REGISTROFACTURACION;
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGREGISTROFACTURACION_RetencionSobreComision', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_RetencionSobreComision;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_RetencionSobreComision(@pk_ID_REGISTROFACTURACION NUMERIC(22,0),
                                   @p_VALORRETENCION          FLOAT,
                                   @p_CODUSUARIOMODIFICACION  NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
    UPDATE WSXML_SFG.REGISTROFACTURACION
       SET VALORCOMISIONNETA      = VALORCOMISIONNETA - @p_VALORRETENCION,
           CODUSUARIOMODIFICACION = @p_CODUSUARIOMODIFICACION,
           FECHAHORAMODIFICACION  = GETDATE()
     WHERE ID_REGISTROFACTURACION = @pk_ID_REGISTROFACTURACION;
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGREGISTROFACTURACION_RecordProcessed', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_RecordProcessed;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_RecordProcessed(@pk_ID_REGISTROFACTURACION  NUMERIC(22,0),
                            @p_CODDETALLEFACTURACIONPDV NUMERIC(22,0),
                            @p_CODUSUARIOMODIFICACION   NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
    UPDATE WSXML_SFG.REGISTROFACTURACION
       SET FACTURADO                = 1,
           CODDETALLEFACTURACIONPDV = @p_CODDETALLEFACTURACIONPDV,
           CODUSUARIOMODIFICACION   = @p_CODUSUARIOMODIFICACION,
           FECHAHORAMODIFICACION    = GETDATE()
     WHERE ID_REGISTROFACTURACION = @pk_ID_REGISTROFACTURACION;
  END;
GO


  IF OBJECT_ID('WSXML_SFG.SFGREGISTROFACTURACION_CalcularComisionesXRango', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_CalcularComisionesXRango;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_CalcularComisionesXRango(@p_CODDETALLETAREAEJECUTADA NUMERIC(22,0),
                                     @p_RETVALUE_out             NUMERIC(22,0) OUT) AS
 BEGIN
    -- VENTAS en REGISTROFACTURACION no consideradas ya por un proceso de Facturacion
    -- Cuyo c?digo de comisi?n haya sido establecido por el trigger, pero no su valor
    -- Y que tengan comisiones de tipo rango

    -- Cursor que se utiliza para actualizar el valor de la comisi?n
    DECLARE @cREGISTROFACTURACION_cparCODPUNTODEVENTA FLOAT;
    DECLARE @cREGISTROFACTURACION_cparCODPRODUCTO FLOAT;
    DECLARE @cREGISTROFACTURACION_cparCODRANGOCOMISION FLOAT;
	/*
    DECLARE @cREGISTROFACTURACION_cparCODPUNTODEVENTA FLOAT;
    DECLARE @cREGISTROFACTURACION_cparCODPRODUCTO FLOAT;
    DECLARE @cREGISTROFACTURACION_cparCODRANGOCOMISION FLOAT;
    DECLARE @cREGISTROFACTURACION_cparCODPUNTODEVENTA FLOAT;
    DECLARE @cREGISTROFACTURACION_cparCODPRODUCTO FLOAT;
    DECLARE @cREGISTROFACTURACION_cparCODRANGOCOMISION FLOAT;
    DECLARE @cREGISTROFACTURACION_cparCODPUNTODEVENTA FLOAT;
    DECLARE @cREGISTROFACTURACION_cparCODPRODUCTO FLOAT;
    DECLARE @cREGISTROFACTURACION_cparCODRANGOCOMISION FLOAT;
	*/

    -- Retenciones sobre la comisi?n
    DECLARE @cRETENCIONTRIBUTARIAREGIMEN_cparPUNTODEVENTA FLOAT;
	/*
    DECLARE @cRETENCIONTRIBUTARIAREGIMEN_cparPUNTODEVENTA FLOAT;

    DECLARE @cRETENCIONTRIBUTARIAREGIMEN_cparPUNTODEVENTA FLOAT;

    DECLARE @cRETENCIONTRIBUTARIAREGIMEN_cparPUNTODEVENTA FLOAT;
	*/

	

    DECLARE @cCODUSUARIOMODIFICACION NUMERIC(22,0) = 1;
    DECLARE @cCOUNTWARNINGS          NUMERIC(22,0) = 0;
    DECLARE @msg                     VARCHAR(2000);

    DECLARE @cTOTALREGISTROS NUMERIC(22,0) = 0;
    DECLARE @cCOUNTREGISTROS NUMERIC(22,0) = 0;
    DECLARE @cMODLREGISTROS  NUMERIC(22,0) = 0;
    DECLARE @cWAITREGISTROS  NUMERIC(22,0) = 5;
   
  SET NOCOUNT ON;
  
		DECLARE
			@p_REGISTRADA      			TINYINT,
			@p_INICIADA         		TINYINT,
			@p_FINALIZADAOK 			TINYINT,
			@p_FINALIZADAFALLO  		TINYINT,
			@p_ABORTADA  				TINYINT,
			@p_NOINICIADA  				TINYINT,
			@p_FINALIZADAADVERTENCIA  	TINYINT 

	EXEC WSXML_SFG.SFGESTADOTAREAEJECUTADA_CONSTANT
			@p_REGISTRADA      			 OUT,
			@p_INICIADA         		 OUT,
			@p_FINALIZADAOK 			 OUT,
			@p_FINALIZADAFALLO  		 OUT,
			@p_ABORTADA  				 OUT,
			@p_NOINICIADA  				 OUT,
			@p_FINALIZADAADVERTENCIA  	 OUT
	
	DECLARE @VENTAFACT SMALLINT, @ANULACION SMALLINT, @FREETICKT SMALLINT, @PREMIOPAG SMALLINT, @RGSTOTROS SMALLINT, @VENNOFACT SMALLINT				
	
	EXEC WSXML_SFG.SFGTIPOREGISTRO_CONSTANT
            @VENTAFACT OUT,
            @ANULACION OUT,
			@FREETICKT OUT,
			@PREMIOPAG OUT,
			@RGSTOTROS OUT,
			@VENNOFACT OUT
	
	
	DECLARE @p_TIPOINFORMATIVO TINYINT,
		@p_TIPOERROR TINYINT,
		@p_TIPOADVERTENCIA TINYINT,
		@p_TIPOCUALQUIERA TINYINT,
		@p_PROCESONOTIFICACION TINYINT,
		@p_ESTADOABIERTA TINYINT,
		@p_ESTADOCERRADA TINYINT	
			  
	EXEC WSXML_SFG.SFGALERTA_CONSTANT
		@p_TIPOINFORMATIVO OUT,
		@p_TIPOERROR OUT,
		@p_TIPOADVERTENCIA OUT,
		@p_TIPOCUALQUIERA OUT,
		@p_PROCESONOTIFICACION OUT,
		@p_ESTADOABIERTA OUT,
		@p_ESTADOCERRADA OUT		  
					  	
	BEGIN TRY
    -- Calcular el numero de registros a iterar
    SELECT @cTOTALREGISTROS = COUNT(1)
      FROM WSXML_SFG.REGISTROFACTURACION REG
     INNER JOIN WSXML_SFG.RANGOCOMISION RC
        ON (RC.ID_RANGOCOMISION = REG.CODRANGOCOMISION)
     WHERE REG.CODDETALLEFACTURACIONPDV IS NULL
       AND (RC.CODTIPOCOMISION = 3 OR RC.CODTIPOCOMISION = 4)
       AND REG.ACTIVE = 1
       AND REG.CODTIPOREGISTRO = 1
       AND REG.VALORTRANSACCION > 0
       AND REG.VALORCOMISION = 0;

    EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_SetTotalRecords @p_CODDETALLETAREAEJECUTADA,@cTOTALREGISTROS

    -- Calcular linea por linea
		DECLARE cFACTURACIONESXRANGOS CURSOR LOCAL FOR
		SELECT REG.CODPUNTODEVENTA,
             REG.CODPRODUCTO,
             REG.CODRANGOCOMISION,
             SUM(REG.VALORTRANSACCION) VENTAS,
             SUM(REG.NUMTRANSACCIONES) TRANSACCIONES,
             SUM(I.VALORIMPUESTO) IMPUESTOS
        FROM WSXML_SFG.REGISTROFACTURACION REG
       INNER JOIN WSXML_SFG.IMPUESTOREGFACTURACION I
          ON (I.CODREGISTROFACTURACION = REG.ID_REGISTROFACTURACION)
       INNER JOIN WSXML_SFG.RANGOCOMISION RC
          ON (RC.ID_RANGOCOMISION = REG.CODRANGOCOMISION)
       WHERE REG.CODDETALLEFACTURACIONPDV IS NULL
         AND (RC.CODTIPOCOMISION = 3 OR RC.CODTIPOCOMISION = 4)
         AND REG.ACTIVE = 1
         AND REG.CODTIPOREGISTRO = 1 -- S?lo ventas considerables para comisionamiento
         AND REG.VALORTRANSACCION > 0
         AND REG.VALORCOMISION = 0
       GROUP BY REG.CODPUNTODEVENTA, REG.CODPRODUCTO, REG.CODRANGOCOMISION;
	   
		DECLARE tFACTURACION CURSOR FOR 
			SELECT REG.CODPUNTODEVENTA,
					 REG.CODPRODUCTO,
					 REG.CODRANGOCOMISION,
					 SUM(REG.VALORTRANSACCION) VENTAS,
					 SUM(REG.NUMTRANSACCIONES) TRANSACCIONES,
					 SUM(I.VALORIMPUESTO) IMPUESTOS
				FROM WSXML_SFG.REGISTROFACTURACION REG
			   INNER JOIN WSXML_SFG.IMPUESTOREGFACTURACION I
				  ON (I.CODREGISTROFACTURACION = REG.ID_REGISTROFACTURACION)
			   INNER JOIN WSXML_SFG.RANGOCOMISION RC
				  ON (RC.ID_RANGOCOMISION = REG.CODRANGOCOMISION)
			   WHERE REG.CODDETALLEFACTURACIONPDV IS NULL
				 AND (RC.CODTIPOCOMISION = 3 OR RC.CODTIPOCOMISION = 4)
				 AND REG.ACTIVE = 1
				 AND REG.CODTIPOREGISTRO = 1 -- S?lo ventas considerables para comisionamiento
				 AND REG.VALORTRANSACCION > 0
				 AND REG.VALORCOMISION = 0
			   GROUP BY REG.CODPUNTODEVENTA, REG.CODPRODUCTO, REG.CODRANGOCOMISION;
	
		OPEN tFACTURACION;
		DECLARE @tFACTURACION__CODPUNTODEVENTA NUMERIC(38,0),
					 @tFACTURACION__CODPRODUCTO NUMERIC(38,0),
					 @tFACTURACION__CODRANGOCOMISION NUMERIC(38,0),
					 @tFACTURACION__VENTAS FLOAT,
					 @tFACTURACION__TRANSACCIONES NUMERIC(38,0),
					 @tFACTURACION__IMPUESTOS FLOAT
					 
		FETCH NEXT FROM tFACTURACION INTO @tFACTURACION__CODPUNTODEVENTA,
					 @tFACTURACION__CODPRODUCTO,
					 @tFACTURACION__CODRANGOCOMISION,
					 @tFACTURACION__VENTAS,
					 @tFACTURACION__TRANSACCIONES,
					 @tFACTURACION__IMPUESTOS;
		 WHILE @@FETCH_STATUS=0
		 BEGIN
			DECLARE @cVALORCOMISION    FLOAT;
			DECLARE @cCODRANGOCOMISION NUMERIC(22,0);
			DECLARE @cVALCALCPORCENTUA FLOAT;
			DECLARE @cVALCALCTRANSCCNL FLOAT;
			DECLARE @cINCENTIVO        FLOAT;
			DECLARE @cCODTIPOCOMISION  NUMERIC(22,0);
			DECLARE @cCODTIPORANGO     NUMERIC(22,0);
			DECLARE @cVALORVENTABRUTA  FLOAT;
			DECLARE @cUNIDADCOMISION   FLOAT;
		  BEGIN
			BEGIN TRY
				SET @cVALORCOMISION = 0;
				SELECT @cCODRANGOCOMISION = RD.CODRANGOCOMISION,
				   @cVALCALCPORCENTUA = RD.VALORPORCENTUAL,
				   @cVALCALCTRANSCCNL = RD.VALORTRANSACCIONAL,
				   @cINCENTIVO = RD.INCENTIVO,
				   @cCODTIPOCOMISION = RC.CODTIPOCOMISION,
				   @cCODTIPORANGO = RC.CODTIPORANGO
				FROM WSXML_SFG.RANGOCOMISIONDETALLE RD
					LEFT OUTER JOIN WSXML_SFG.RANGOCOMISION RC
					ON (RD.CODRANGOCOMISION = RC.ID_RANGOCOMISION)
				WHERE RD.CODRANGOCOMISION = @tFACTURACION__CODRANGOCOMISION
				   AND @tFACTURACION__VENTAS BETWEEN 
						CASE WHEN RC.CODTIPORANGO = 2 THEN RD.RANGOINICIAL ELSE @tFACTURACION__VENTAS END 
						AND 
						CASE WHEN RC.CODTIPORANGO = 2 THEN RD.RANGOFINAL ELSE @tFACTURACION__VENTAS END
				   AND @tFACTURACION__TRANSACCIONES BETWEEN CASE
						 WHEN RC.CODTIPORANGO = 1 THEN RD.RANGOINICIAL ELSE @tFACTURACION__TRANSACCIONES END 
						 AND CASE WHEN RC.CODTIPORANGO = 1 THEN RD.RANGOFINAL  ELSE  @tFACTURACION__TRANSACCIONES END

				IF @@ROWCOUNT = 0 BEGIN
					SET @msg = 'No se puede aplicar la comisión para el punto de venta ' +
						 ISNULL(CONVERT(VARCHAR,WSXML_SFG.PUNTODEVENTA_CODIGO_F(@tFACTURACION__Codpuntodeventa)), '') +
						 ', producto ' +
						 ISNULL(WSXML_SFG.PRODUCTO_NOMBRE_F(@tFACTURACION__Codproducto), '');
					EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @p_TIPOERROR, 'CALCULOCOMISIONESXRANGO', @msg, @cCODUSUARIOMODIFICACION
					SET @cCOUNTWARNINGS = @cCOUNTWARNINGS + 1;
				END
				
				-- El valor actual de la comisi?n se calcula de acuerdo al valor menos los impuestos realizados
				SET @cVALORVENTABRUTA = @tFACTURACION__VENTAS - @tFACTURACION__IMPUESTOS;

				-- Calcular el valor de la comisi?n
				IF @cCODTIPOCOMISION = 1 BEGIN
				  -- Porcentaje sobre el total sin impuestos
				  SET @cVALORCOMISION = ((@cVALORVENTABRUTA * @cVALCALCPORCENTUA) / 100) +
									@cINCENTIVO;
				END
				ELSE IF @cCODTIPOCOMISION = 2 BEGIN
				  -- Valor por cada uno de los elementos
				  SET @cVALORCOMISION = (@cVALCALCTRANSCCNL * @tFACTURACION__TRANSACCIONES) +
									@cINCENTIVO;
				END 

				-- SE ESTA PRORATEANDO LA COMISION CONTRA EL VALOR VENTAS DE LOS REGISTROS
				-- TAMBIEN PUEDE OCURRIR QUE SE TENGA QUE CALCULAR SOBRE EL NUMERO DE ELEMENTOS VENDIDO
				-- Calcular unidad de comision para distribuir
				SET @cUNIDADCOMISION = @cVALORCOMISION / @tFACTURACION__VENTAS;

				-- Distribuir comision entre el numero de registros utilizados y calcular retenciones
				SET @cREGISTROFACTURACION_cparCODPUNTODEVENTA = @tFACTURACION__CODPUNTODEVENTA;
				SET @cREGISTROFACTURACION_cparCODPRODUCTO = @tFACTURACION__CODPRODUCTO;
				SET @cREGISTROFACTURACION_cparCODRANGOCOMISION = @tFACTURACION__CODRANGOCOMISION;
			
				DECLARE tREGISTRO CURSOR FOR 
				
					 SELECT ID_REGISTROFACTURACION,
					 VALORTRANSACCION,
					 NUMTRANSACCIONES,
					 REG.CODENTRADAARCHIVOCONTROL,
					 SUM(VALORIMPUESTO) IMPUESTOS
					FROM WSXML_SFG.REGISTROFACTURACION REG
					LEFT OUTER JOIN WSXML_SFG.IMPUESTOREGFACTURACION I
					  ON (I.CODREGISTROFACTURACION = REG.ID_REGISTROFACTURACION)
				   WHERE REG.CODDETALLEFACTURACIONPDV IS NULL
					 AND REG.CODPUNTODEVENTA = @cREGISTROFACTURACION_cparCODPUNTODEVENTA
					 AND REG.CODPRODUCTO = @cREGISTROFACTURACION_cparCODPRODUCTO
					 AND REG.CODRANGOCOMISION = @cREGISTROFACTURACION_cparCODRANGOCOMISION
					 AND REG.ACTIVE = 1
					 AND REG.CODTIPOREGISTRO = 1
					 AND REG.VALORTRANSACCION > 0
					 AND REG.VALORCOMISION = 0
				   GROUP BY ID_REGISTROFACTURACION, VALORTRANSACCION, NUMTRANSACCIONES, REG.CODENTRADAARCHIVOCONTROL;
				
				
				OPEN tREGISTRO;
				
				DECLARE @tREGISTRO__ID_REGISTROFACTURACION NUMERIC(38,0),
					 @tREGISTRO__VALORTRANSACCION FLOAT,
					 @tREGISTRO__NUMTRANSACCIONES NUMERIC(38,0),
					 @tREGISTRO__CODENTRADAARCHIVOCONTROL NUMERIC(38,0),
					 @tREGISTRO__IMPUESTOS FLOAT
						 

				 FETCH NEXT FROM tREGISTRO INTO @tREGISTRO__ID_REGISTROFACTURACION,
					 @tREGISTRO__VALORTRANSACCION,
					 @tREGISTRO__NUMTRANSACCIONES,
					 @tREGISTRO__CODENTRADAARCHIVOCONTROL,
					 @tREGISTRO__IMPUESTOS;
			 
			 
				 WHILE @@FETCH_STATUS=0
				 BEGIN
						DECLARE @cTHISCOMISION      FLOAT = 0;
						DECLARE @cVALORVAT          FLOAT = 0;
						DECLARE @cIVATHISCOMISION   FLOAT = 0;
						DECLARE @cTHISCOMISIONBRUTA FLOAT = 0;
						DECLARE @cSUMRETENCION      FLOAT = 0;
						DECLARE @cVENTAREGISTRO     FLOAT = 0;
						  BEGIN
							-- Proratear contra el valor del registro
							SET @cTHISCOMISION      = (@tREGISTRO__VALORTRANSACCION *
												  @cUNIDADCOMISION);
							SET @cVALORVAT          = WSXML_SFG.SFGVATCOMISIONREGIMEN_GetVatValue(@tFACTURACION__CODPUNTODEVENTA,@tFACTURACION__CODPRODUCTO);
							SET @cIVATHISCOMISION   = ((@cTHISCOMISION * @cVALORVAT) / 100);
							SET @cTHISCOMISIONBRUTA = (@cTHISCOMISION + @cIVATHISCOMISION);

							SET @cVENTAREGISTRO = @tREGISTRO__VALORTRANSACCION -
											  @cTHISCOMISIONBRUTA;
							-- Retenciones sobre la comision
							SET @cRETENCIONTRIBUTARIAREGIMEN_cparPUNTODEVENTA = @tFACTURACION__CODPUNTODEVENTA;
							
							DECLARE tRETENCIONTRIBUTARIAREGIMEN CURSOR FOR 
							
								SELECT R.ID_RETENCIONTRIBUTARIA,
									 RR.ID_RETENCIONTRIBUTARIAREGIMEN,
									 RR.VALOR
									FROM WSXML_SFG.RETENCIONTRIBUTARIAREGIMEN RR
								   INNER JOIN WSXML_SFG.RETENCIONTRIBUTARIA R
									  ON (RR.CODRETENCIONTRIBUTARIA = R.ID_RETENCIONTRIBUTARIA
									  and rr.codtipogeneradorfactura = 1)
									LEFT OUTER JOIN PUNTODEVENTA P
									  ON (P.CODREGIMEN = RR.CODREGIMEN)
								   WHERE R.ACTIVE = 1
									 AND P.ID_PUNTODEVENTA = @cRETENCIONTRIBUTARIAREGIMEN_cparPUNTODEVENTA;

							 OPEN tRETENCIONTRIBUTARIAREGIMEN;

							 DECLARE @tRETENCIONTRIBUTARIAREGIMEN__ID_RETENCIONTRIBUTARIA NUMERIC(38,0),
									 @tRETENCIONTRIBUTARIAREGIMEN__ID_RETENCIONTRIBUTARIAREGIMEN NUMERIC(38,0),
									 @tRETENCIONTRIBUTARIAREGIMEN__VALOR FLOAT

							 FETCH tRETENCIONTRIBUTARIAREGIMEN INTO @tRETENCIONTRIBUTARIAREGIMEN__ID_RETENCIONTRIBUTARIA,
									 @tRETENCIONTRIBUTARIAREGIMEN__ID_RETENCIONTRIBUTARIAREGIMEN,
									 @tRETENCIONTRIBUTARIAREGIMEN__VALOR
							 WHILE @@FETCH_STATUS=0
							 BEGIN
								DECLARE @cCODRETENCIONREGFACTURACION NUMERIC(22,0);
								DECLARE @cVALORRETENCION             FLOAT = 0;
							  BEGIN
									BEGIN TRY
										SET @cVALORRETENCION = (@cTHISCOMISION * @tRETENCIONTRIBUTARIAREGIMEN__Valor) / 100;
										EXEC WSXML_SFG.SFGRETENCIONREGFACTURACION_AddRecord
																		 @tRETENCIONTRIBUTARIAREGIMEN__ID_RETENCIONTRIBUTARIA,
																		 @tREGISTRO__CODENTRADAARCHIVOCONTROL,
																		 @tREGISTRO__ID_REGISTROFACTURACION,
																		 @VENTAFACT,
																		 @cVALORRETENCION,
																		 @cCODUSUARIOMODIFICACION,
																		 @cCODRETENCIONREGFACTURACION OUT

									-- Verificar que se haya realizado la retencion
										IF @cVALORRETENCION IS NOT NULL AND @cVALORRETENCION > 0 AND @cCODRETENCIONREGFACTURACION > 0 
										BEGIN
										  SET @cSUMRETENCION = @cSUMRETENCION + @cVALORRETENCION;
										END 
									END TRY
									BEGIN CATCH
										SET @msg = '-20054 No se pudo ingresar registro de retención para el comisionamiento del punto de venta ' + ISNULL(CONVERT(VARCHAR,WSXML_SFG.PUNTODEVENTA_CODIGO_F(@tFACTURACION__Codpuntodeventa)), '') + ', producto ' + ISNULL(WSXML.PRODUCTO_NOMBRE_F(@tFACTURACION__Codproducto), '') 
										RAISERROR(@msg, 16, 1);
									END CATCH
							  END;

							FETCH tRETENCIONTRIBUTARIAREGIMEN INTO @tRETENCIONTRIBUTARIAREGIMEN__ID_RETENCIONTRIBUTARIA,
									 @tRETENCIONTRIBUTARIAREGIMEN__ID_RETENCIONTRIBUTARIAREGIMEN,
									 @tRETENCIONTRIBUTARIAREGIMEN__VALOR
							END;

							CLOSE tRETENCIONTRIBUTARIAREGIMEN;
							DEALLOCATE tRETENCIONTRIBUTARIAREGIMEN;
							-- Actualizar registro en tabla principal

							DECLARE @p_VALORCOMISIONNETA FLOAT = (@cTHISCOMISIONBRUTA - @cSUMRETENCION)
							EXEC WSXML_SFG.SFGREGISTROFACTURACION_UpdateRecordComisionVenta   
													  @tREGISTRO__ID_REGISTROFACTURACION,
													  @cCODRANGOCOMISION,
													  0,
													  @cTHISCOMISION,
													  @cTHISCOMISION,
													  @cIVATHISCOMISION,
													  @cVALORVAT,
													  @cTHISCOMISIONBRUTA, 
													  @p_VALORCOMISIONNETA,
													  @cVENTAREGISTRO,
													  @cCODUSUARIOMODIFICACION

							-- Actualizar la tarea
							SET @cMODLREGISTROS = @cMODLREGISTROS + 1;
							IF @cMODLREGISTROS = @cWAITREGISTROS BEGIN
								SET @cCOUNTREGISTROS = @cCOUNTREGISTROS + @cMODLREGISTROS;
								EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,@cCOUNTREGISTROS
								SET @cMODLREGISTROS = 0;
							END 
						  END;

						FETCH tREGISTRO INTO @tREGISTRO__ID_REGISTROFACTURACION,
							 @tREGISTRO__VALORTRANSACCION,
							 @tREGISTRO__NUMTRANSACCIONES,
							 @tREGISTRO__CODENTRADAARCHIVOCONTROL,
							 @tREGISTRO__IMPUESTOS;
				END;

				CLOSE tREGISTRO;
				DEALLOCATE tREGISTRO;

			
			END TRY	
			BEGIN CATCH	
				  SET @msg = ERROR_MESSAGE ( ) ;
				  EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @p_TIPOERROR, 'CALCULOCOMISIONESXRANGO', @msg, @cCODUSUARIOMODIFICACION
				  SET @cCOUNTWARNINGS = @cCOUNTWARNINGS + 1;
			END CATCH
		  END;

			FETCH NEXT FROM tFACTURACION INTO @tFACTURACION__CODPUNTODEVENTA,
					 @tFACTURACION__CODPRODUCTO,
					 @tFACTURACION__CODRANGOCOMISION,
					 @tFACTURACION__VENTAS,
					 @tFACTURACION__TRANSACCIONES,
					 @tFACTURACION__IMPUESTOS;
		 END;

		CLOSE tFACTURACION;
		DEALLOCATE tFACTURACION;

		-- Contar el numero de warnings
		IF @cCOUNTWARNINGS > 0 BEGIN
		  SET @p_RETVALUE_out = @p_FINALIZADAADVERTENCIA
		END
		ELSE BEGIN
		  SET @p_RETVALUE_out = @p_FINALIZADAOK 
		END
	END TRY
	BEGIN CATCH
		  SET @p_RETVALUE_out = @p_FINALIZADAFALLO 
	END CATCH
  END;
GO





IF EXISTS (
    SELECT * FROM sys.objects WHERE OBJECT_NAME(object_id) = N'SFGREGISTROFACTURACION_RegistrosFromArchivo'
    AND type IN (N'FN', N'IF', N'TF')
)
    DROP FUNCTION WSXML_SFG.SFGREGISTROFACTURACION_RegistrosFromArchivo
GO

CREATE     FUNCTION WSXML_SFG.SFGREGISTROFACTURACION_RegistrosFromArchivo(@p_CODENTRADAARCHIVOCONTROL NUMERIC(22,0))
    RETURNS @tbl_split TAble(SWC_Index int, SWC_Value VARCHAR(MAX))
    BEGIN
    DECLARE tREG CURSOR FOR SELECT ID_REGISTROFACTURACION, ROW_NUMBER() OVER(ORDER BY ID_REGISTROFACTURACION) ISD_ROW_NUMBER
                   FROM WSXML_SFG.REGISTROFACTURACION
                  WHERE CODENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL; 
	OPEN tREG;
	DECLARE @tREG__ID_REGISTROFACTURACION NUMERIC(38,0) , @tREG__ROW_ID INT
	FETCH NEXT FROM tREG INTO @tREG__ID_REGISTROFACTURACION, @tREG__ROW_ID;

	WHILE @@FETCH_STATUS=0
	BEGIN
		INSERT INTO @tbl_split VALUES( @tREG__ROW_ID, @tREG__ID_REGISTROFACTURACION)
		FETCH NEXT FROM tREG INTO @tREG__ID_REGISTROFACTURACION, @tREG__ROW_ID;
	END;

    CLOSE tREG;
    DEALLOCATE tREG;
    RETURN;
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGREGISTROFACTURACION_ReversarCargue', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_ReversarCargue;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_ReversarCargue(@p_CODENTRADAARCHIVOCONTROL NUMERIC(22,0),
                           @p_CODDETALLETAREAEJECUTADA NUMERIC(22,0),
                           @p_RETVALUE_out             NUMERIC(22,0) OUT) AS
 BEGIN
    DECLARE @xTRANSACCIONES      NUMERIC(22,0);
    DECLARE @cREVERSADO          NUMERIC(22,0);
    DECLARE @cFACTURADO          NUMERIC(22,0) = 0;
    DECLARE @totalregistros      NUMERIC(22,0) = 1;
    DECLARE @countregistros      NUMERIC(22,0) = 0;
    DECLARE @waitnregistros      NUMERIC(22,0) = 50;
    DECLARE @lstREGISTROSARCHIVO WSXML_SFG.LONGNUMBERARRAY;
    DECLARE @msg                 NVARCHAR(2000);
   
  SET NOCOUNT ON;
    /*SELECT COUNT(1)
      INTO xTRANSACCIONES
      FROM TRANSACCIONALIADO
     WHERE CODENTRADAARCHIVOCONTROL = p_CODENTRADAARCHIVOCONTROL;
    IF xTRANSACCIONES > 0 THEN
      RAISE_APPLICATION_ERROR(-20055,
                              'No se puede reversar un archivo vinculado a transacciones de archivo batch');
    END IF;*/
	
			DECLARE
								@p_REGISTRADA      			TINYINT,
								@p_INICIADA         		TINYINT,
								@p_FINALIZADAOK 			TINYINT,
								@p_FINALIZADAFALLO  		TINYINT,
								@p_ABORTADA  				TINYINT,
								@p_NOINICIADA  				TINYINT,
								@p_FINALIZADAADVERTENCIA  	TINYINT 

				EXEC WSXML_SFG.SFGESTADOTAREAEJECUTADA_CONSTANT
								@p_REGISTRADA      			 OUT,
								@p_INICIADA         		 OUT,
								@p_FINALIZADAOK 			 OUT,
								@p_FINALIZADAFALLO  		 OUT,
								@p_ABORTADA  				 OUT,
								@p_NOINICIADA  				 OUT,
								@p_FINALIZADAADVERTENCIA  	 OUT

	BEGIN TRY
		SELECT @cREVERSADO = REVERSADO
		  FROM WSXML_SFG.ENTRADAARCHIVOCONTROL
		 WHERE ID_ENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;
		IF @cREVERSADO <> 0 BEGIN
		  RAISERROR('-20054 El archivo ya fue reversado', 16, 1);
		END 

		SELECT @cFACTURADO = FACTURADO
		  FROM WSXML_SFG.ENTRADAARCHIVOCONTROL
		 WHERE ID_ENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;
		IF @cFACTURADO > 0 BEGIN
		  RAISERROR('-20054 Uno o mas registros creados ya fueron considerados por el proceso de facturacion', 16, 1);
		END 

		INSERT INTO @lstREGISTROSARCHIVO
		SELECT ID_REGISTROFACTURACION 
		FROM WSXML_SFG.REGISTROFACTURACION
		WHERE CODENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;

		-- Contar registros a borrar
		SELECT @totalregistros = ((SELECT COUNT(1)
				   FROM WSXML_SFG.HUERFANOJUEGOS
				  WHERE CODENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL) +
			   (SELECT COUNT(1)
				   FROM WSXML_SFG.HUERFANOSERVICIOSCOMERCIALES
				  WHERE CODENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL))

		SET @totalregistros = @totalregistros + (SELECT COUNT(*) FROM @lstREGISTROSARCHIVO)

		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_SetTotalRecords @p_CODDETALLETAREAEJECUTADA, @totalregistros

		DELETE FROM WSXML_SFG.HUERFANOJUEGOS
		 WHERE CODENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;
		SET @countregistros = @countregistros + @@ROWCOUNT;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA, @countregistros
		/*COMMIT;*/

		DELETE FROM HUERFANOSERVICIOSCOMERCIALES
		 WHERE CODENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;
		SET @countregistros = @countregistros + @@ROWCOUNT;
		
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA, @countregistros
		/*COMMIT;*/

		IF (SELECT COUNT(*) FROM @lstREGISTROSARCHIVO) > 0 BEGIN
			DECLARE ix CURSOR FOR SELECT IDVALUE FROM @lstREGISTROSARCHIVO
			OPEN ix;
			DECLARE @ix__IDVALUE NUMERIC(38,0)
			FETCH ix INTO @ix__IDVALUE;
			WHILE @@FETCH_STATUS=0
			BEGIN
				DELETE FROM WSXML_SFG.REGISTROFACTURACION
				WHERE ID_REGISTROFACTURACION = @ix__IDVALUE
			
				SET @countregistros = @countregistros + 1;
				IF (@countregistros % @waitnregistros) = 0 BEGIN
					EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA, @countregistros
					/*COMMIT;*/
				END 
				FETCH ix INTO @ix__IDVALUE;
			END;

			CLOSE ix;
			DEALLOCATE ix;
		END 

		UPDATE WSXML_SFG.ENTRADAARCHIVOCONTROL
		   SET REVERSADO              = 1,
			   CODCICLOFACTURACIONPDV = NULL,
			   FECHAHORAREVERSADO     = GETDATE(),
			   FECHAHORAMODIFICACION  = GETDATE()
		 WHERE ID_ENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;

		SET @p_RETVALUE_out = @p_FINALIZADAOK 
	END TRY
	BEGIN CATCH
		SET @msg = ERROR_MESSAGE();
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_FinalizeExecution @p_CODDETALLETAREAEJECUTADA, @msg
		SET @p_RETVALUE_out = @p_FINALIZADAFALLO
	END CATCH
  END;
GO


  IF OBJECT_ID('WSXML_SFG.SFGREGISTROFACTURACION_ReversarCargue2', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_ReversarCargue2;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_ReversarCargue2(@p_CODENTRADAARCHIVOCONTROL NUMERIC(22,0),
                            @p_CODDETALLETAREAEJECUTADA NUMERIC(22,0),
                            @p_RETVALUE_out             NUMERIC(22,0) OUT) AS
 BEGIN
    DECLARE @xTRANSACCIONES NUMERIC(22,0);
    DECLARE @cREVERSADO     NUMERIC(22,0);
    DECLARE @cFACTURADO     NUMERIC(22,0) = 0;
    DECLARE @cREGISTROS     SPLIT_TBL;
    DECLARE @totalregistros NUMERIC(22,0) = 100;
    DECLARE @countregistros NUMERIC(22,0) = 0;
    DECLARE @msg            NVARCHAR(2000);
   
  SET NOCOUNT ON;
	BEGIN TRY

		DECLARE
				@p_REGISTRADA      			TINYINT,
				@p_INICIADA         		TINYINT,
				@p_FINALIZADAOK 			TINYINT,
				@p_FINALIZADAFALLO  		TINYINT,
				@p_ABORTADA  				TINYINT,
				@p_NOINICIADA  				TINYINT,
				@p_FINALIZADAADVERTENCIA  	TINYINT 

		EXEC WSXML_SFG.SFGESTADOTAREAEJECUTADA_CONSTANT
						@p_REGISTRADA      			 OUT,
						@p_INICIADA         		 OUT,
						@p_FINALIZADAOK 			 OUT,
						@p_FINALIZADAFALLO  		 OUT,
						@p_ABORTADA  				 OUT,
						@p_NOINICIADA  				 OUT,
						@p_FINALIZADAADVERTENCIA  	 OUT

		SELECT @xTRANSACCIONES = COUNT(1)
		  FROM WSXML_SFG.TRANSACCIONALIADO
		 WHERE CODENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;
		IF @xTRANSACCIONES > 0 BEGIN
		  RAISERROR('-20055 No se puede reversar un archivo vinculado a transacciones de archivo batch', 16, 1);
		END 

		SELECT @cREVERSADO = REVERSADO
		  FROM WSXML_SFG.ENTRADAARCHIVOCONTROL
		 WHERE ID_ENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;
		IF @cREVERSADO <> 0 BEGIN
		  RAISERROR('-20054 El archivo ya fue reversado', 16, 1);
		END 

		SELECT @cFACTURADO = FACTURADO
		  FROM WSXML_SFG.ENTRADAARCHIVOCONTROL
		 WHERE ID_ENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;
		IF @cFACTURADO > 0 BEGIN
		  RAISERROR('-20054 Uno o mas registros creados ya fueron considerados por el proceso de facturacion', 16, 1);
		END 

		--SELECT @cREGISTROS = WSXML_SFG.SFGREGISTROFACTURACION_RegistrosFromArchivo(@p_CODENTRADAARCHIVOCONTROL);

		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_SetTotalRecords @p_CODDETALLETAREAEJECUTADA, @totalregistros

		DELETE FROM WSXML_SFG.IMPUESTOREGFACTURACION
		WHERE CODREGISTROFACTURACION IN (SELECT SWC_Value FROM WSXML_SFG.SFGREGISTROFACTURACION_RegistrosFromArchivo(@p_CODENTRADAARCHIVOCONTROL));
		SET @countregistros = @countregistros + @@ROWCOUNT;
		
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,@countregistros
		/*COMMIT;*/

		DELETE FROM WSXML_SFG.RETENCIONREGFACTURACION
		 WHERE CODREGISTROFACTURACION IN
			   (SELECT SWC_Value FROM WSXML_SFG.SFGREGISTROFACTURACION_RegistrosFromArchivo(@p_CODENTRADAARCHIVOCONTROL));
		SET @countregistros = @countregistros + @@ROWCOUNT;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,@countregistros
		/*COMMIT;*/

		DELETE FROM WSXML_SFG.RETUVTREGFACTURACION
		 WHERE CODREGISTROFACTURACION IN
			   (SELECT SWC_Value FROM WSXML_SFG.SFGREGISTROFACTURACION_RegistrosFromArchivo(@p_CODENTRADAARCHIVOCONTROL));
		SET @countregistros = @countregistros + @@ROWCOUNT;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,@countregistros
		/*COMMIT;*/

		DELETE FROM WSXML_SFG.HUERFANOJUEGOS
		 WHERE CODENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;
		SET @countregistros = @countregistros + @@ROWCOUNT;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,@countregistros
		/*COMMIT;*/

		DELETE FROM WSXML_SFG.HUERFANOSERVICIOSCOMERCIALES
		 WHERE CODENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;
		SET @countregistros = @countregistros + @@ROWCOUNT;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,@countregistros
		/*COMMIT;*/

		DELETE FROM REGISTROFACTURACION
		 WHERE CODENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;
		SET @countregistros = @countregistros + @@ROWCOUNT;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,@countregistros
		/*COMMIT;*/

		UPDATE WSXML_SFG.ENTRADAARCHIVOCONTROL
		   SET REVERSADO              = 1,
			   CODCICLOFACTURACIONPDV = NULL,
			   FECHAHORAREVERSADO     = GETDATE()
		 WHERE ID_ENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;

		SET @p_RETVALUE_out = @p_FINALIZADAOK
	
	END TRY	
	BEGIN CATCH
      SET @msg = ERROR_MESSAGE();
      EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_FinalizeExecution @p_CODDETALLETAREAEJECUTADA, @msg
      SET @p_RETVALUE_out = @p_FINALIZADAFALLO
	END CATCH
  END;
GO




  IF OBJECT_ID('WSXML_SFG.SFGREGISTROFACTURACION_ReversarCargue3', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_ReversarCargue3;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_ReversarCargue3(@p_CODENTRADAARCHIVOCONTROL NUMERIC(22,0),
                            @p_CODDETALLETAREAEJECUTADA NUMERIC(22,0),
                            @p_RETVALUE_out             NUMERIC(22,0) OUT) AS
 BEGIN
    DECLARE @xTRANSACCIONES NUMERIC(22,0);
    DECLARE @cREVERSADO     NUMERIC(22,0);
    DECLARE @cFACTURADO     NUMERIC(22,0) = 0;
    DECLARE @cREGISTROS     WSXML_SFG.SPLIT_TBL;
    DECLARE @totalregistros NUMERIC(22,0) = 100;
    DECLARE @countregistros NUMERIC(22,0) = 0;
    DECLARE @msg            NVARCHAR(2000);
   
  SET NOCOUNT ON;
	
	DECLARE
		@p_REGISTRADA      			TINYINT,
		@p_INICIADA         		TINYINT,
		@p_FINALIZADAOK 			TINYINT,
		@p_FINALIZADAFALLO  		TINYINT,
		@p_ABORTADA  				TINYINT,
		@p_NOINICIADA  				TINYINT,
		@p_FINALIZADAADVERTENCIA  	TINYINT 

	EXEC WSXML_SFG.SFGESTADOTAREAEJECUTADA_CONSTANT
		@p_REGISTRADA      			 OUT,
		@p_INICIADA         		 OUT,
		@p_FINALIZADAOK 			 OUT,
		@p_FINALIZADAFALLO  		 OUT,
		@p_ABORTADA  				 OUT,
		@p_NOINICIADA  				 OUT,
		@p_FINALIZADAADVERTENCIA  	 OUT

	BEGIN TRY
		SELECT @xTRANSACCIONES = COUNT(1)
		FROM WSXML_SFG.TRANSACCIONALIADO
		WHERE CODENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;
		
		IF @xTRANSACCIONES > 0 BEGIN
		  RAISERROR('-20055 No se puede reversar un archivo vinculado a transacciones de archivo batch', 16, 1);
		END 

		SELECT @cREVERSADO = REVERSADO
		FROM WSXML_SFG.ENTRADAARCHIVOCONTROL
		WHERE ID_ENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;
		
		IF @cREVERSADO <> 0 BEGIN
		  RAISERROR('-20054 El archivo ya fue reversado', 16, 1);
		END 

		SELECT @cFACTURADO = FACTURADO
		FROM WSXML_SFG.ENTRADAARCHIVOCONTROL
		WHERE ID_ENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;
		
		IF @cFACTURADO > 0 BEGIN
		  RAISERROR('-20054 Uno o mas registros creados ya fueron considerados por el proceso de facturacion', 16, 1);
		END 

		--SELECT @cREGISTROS = WSXML_SFG.SFGREGISTROFACTURACION_RegistrosFromArchivo(@p_CODENTRADAARCHIVOCONTROL) ;

		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_SetTotalRecords @p_CODDETALLETAREAEJECUTADA, @totalregistros

		DELETE FROM WSXML_SFG.IMPUESTOREGFACTURACION
		WHERE CODREGISTROFACTURACION IN (SELECT SWC_Value FROM WSXML_SFG.SFGREGISTROFACTURACION_RegistrosFromArchivo(@p_CODENTRADAARCHIVOCONTROL));
		SET @countregistros = @countregistros + @@ROWCOUNT;
    
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA, @countregistros
		/*COMMIT;*/

		DELETE FROM WSXML_SFG.RETENCIONREGFACTURACION
		WHERE CODREGISTROFACTURACION IN (SELECT SWC_Value FROM WSXML_SFG.SFGREGISTROFACTURACION_RegistrosFromArchivo(@p_CODENTRADAARCHIVOCONTROL));
		SET @countregistros = @countregistros + @@ROWCOUNT;
    
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,@countregistros
		/*COMMIT;*/

		DELETE FROM WSXML_SFG.RETUVTREGFACTURACION
		WHERE CODREGISTROFACTURACION IN (SELECT SWC_Value FROM WSXML_SFG.SFGREGISTROFACTURACION_RegistrosFromArchivo(@p_CODENTRADAARCHIVOCONTROL));
		SET @countregistros = @countregistros + @@ROWCOUNT;
    
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,@countregistros
		/*COMMIT;*/

		DELETE FROM WSXML_SFG.HUERFANOJUEGOS
		WHERE CODENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;

		SET @countregistros = @countregistros + @@ROWCOUNT;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,@countregistros
		/*COMMIT;*/

		DELETE FROM WSXML_SFG.HUERFANOSERVICIOSCOMERCIALES
		WHERE CODENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;
		
		SET @countregistros = @countregistros + @@ROWCOUNT;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,@countregistros
		/*COMMIT;*/

		  DECLARE @c               NUMERIC(22,0) = 0;
		  DECLARE @transactionlist WSXML_SFG.LONGNUMBERARRAY;
		BEGIN
			INSERT INTO @transactionlist
			SELECT ID_REGISTROFACTREFERENCIA
			FROM WSXML_SFG.ENTRADAARCHIVOCONTROL
				INNER JOIN WSXML_SFG.REGISTROFACTURACION
					ON (CODENTRADAARCHIVOCONTROL = ID_ENTRADAARCHIVOCONTROL)
			INNER JOIN WSXML_SFG.REGISTROFACTREFERENCIA
				ON (CODREGISTROFACTURACION = ID_REGISTROFACTURACION)
			WHERE ID_ENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL
			ORDER BY FECHAHORATRANSACCION;
			
			IF @@ROWCOUNT > 0 BEGIN

				BEGIN TRANSACTION;

				DECLARE itx CURSOR FOR SELECT IDVALUE FROM @transactionlist
				OPEN itx;

				DECLARE @ix__IDVALUE NUMERIC(38,0)
				FETCH itx INTO @ix__IDVALUE;
					WHILE @@FETCH_STATUS=0
					BEGIN
						DELETE FROM WSXML_SFG.REGISTROFACTREFERENCIA
						WHERE ID_REGISTROFACTREFERENCIA = @ix__IDVALUE;
						
						SET @c = @c + 1;
						IF (@c % 200) = 0 BEGIN
							COMMIT TRANSACTION;   
						END 
						FETCH itx INTO @ix__IDVALUE;
					END;
				CLOSE itx;
				DEALLOCATE itx;
			END 
			/*COMMIT;*/
		END;


		UPDATE WSXML_SFG.REGISTROFACTURACION
		   SET VALORTRANSACCION   = 0,
			   NUMTRANSACCIONES   = 0,
			   VALORVENTABRUTA    = 0,
			   VALORCOMISION      = 0,
			   IVACOMISION        = 0,
			   VALORCOMISIONBRUTA = 0,
			   VALORCOMISIONNETA  = 0,
			   VALORVENTANETA     = 0,
			   RETENCIONPREMIO    = 0
		 WHERE CODENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;
		SET @countregistros = @countregistros + @@ROWCOUNT;
    
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,@countregistros
		/*COMMIT;*/

		UPDATE WSXML_SFG.ENTRADAARCHIVOCONTROL
		   SET REVERSADO              = 1,
			   CODCICLOFACTURACIONPDV = NULL,
			   FECHAHORAREVERSADO     = GETDATE()
		 WHERE ID_ENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;

		SET @p_RETVALUE_out = @p_FINALIZADAOK;

	END TRY
	BEGIN CATCH
  
      SET @msg = ERROR_MESSAGE ( ) ;
      EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_FinalizeExecution @p_CODDETALLETAREAEJECUTADA,@msg
      SET @p_RETVALUE_out = @p_FINALIZADAFALLO
	END CATCH
  END;
GO

 
  IF OBJECT_ID('WSXML_SFG.SFGREGISTROFACTURACION_ReversarCargue4', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_ReversarCargue4;
GO

CREATE     PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_ReversarCargue4(@p_CODENTRADAARCHIVOCONTROL NUMERIC(22,0),
                            @p_CODDETALLETAREAEJECUTADA NUMERIC(22,0),
                            @p_RETVALUE_out             NUMERIC(22,0) OUT) AS
 BEGIN
    DECLARE @xTRANSACCIONES             NUMERIC(22,0);
    DECLARE @cREVERSADO                 NUMERIC(22,0);
    DECLARE @cFACTURADO                 NUMERIC(22,0) = 0;
    DECLARE @cREGISTROS                 SPLIT_TBL;
    DECLARE @totalregistros             NUMERIC(22,0) = 100;
    DECLARE @countregistros             NUMERIC(22,0) = 0;
    DECLARE @msg                        NVARCHAR(2000);
    DECLARE @v_szsql_string             varchar(4000);
    DECLARE @v_id_entradaarchivocontrol NUMERIC(22,0) = @p_CODENTRADAARCHIVOCONTROL;
    DECLARE @f_retvalue_out             NUMERIC(22,0);
    DECLARE @v_reactivar_llaves         bit = 0;
    DECLARE @szSQLInstruction           varchar(4000);
    DECLARE @RESULT                     NUMERIC(22,0);
 
  SET NOCOUNT ON;

  		DECLARE
			@p_REGISTRADA      			TINYINT,
			@p_INICIADA         		TINYINT,
			@p_FINALIZADAOK 			TINYINT,
			@p_FINALIZADAFALLO  		TINYINT,
			@p_ABORTADA  				TINYINT,
			@p_NOINICIADA  				TINYINT,
			@p_FINALIZADAADVERTENCIA  	TINYINT 

	EXEC WSXML_SFG.SFGESTADOTAREAEJECUTADA_CONSTANT
			@p_REGISTRADA      			 OUT,
			@p_INICIADA         		 OUT,
			@p_FINALIZADAOK 			 OUT,
			@p_FINALIZADAFALLO  		 OUT,
			@p_ABORTADA  				 OUT,
			@p_NOINICIADA  				 OUT,
			@p_FINALIZADAADVERTENCIA  	 OUT

	BEGIN TRY
		SELECT @xTRANSACCIONES = COUNT(1)
		  FROM WSXML_SFG.TRANSACCIONALIADO
		 WHERE CODENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;
		IF @xTRANSACCIONES > 0 BEGIN
		  RAISERROR('-20055 No se puede reversar un archivo vinculado a transacciones de archivo batch', 16, 1);
		END 

		SELECT @cREVERSADO = REVERSADO
		  FROM WSXML_SFG.ENTRADAARCHIVOCONTROL
		 WHERE ID_ENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;
		IF @cREVERSADO <> 0 BEGIN
		  RAISERROR('-20054 El archivo ya fue reversado', 16, 1);
		END 

		SELECT @cFACTURADO = FACTURADO
		  FROM WSXML_SFG.ENTRADAARCHIVOCONTROL
		 WHERE ID_ENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;
		IF @cFACTURADO > 0 BEGIN
		  RAISERROR('-20054 Uno o mas registros creados ya fueron considerados por el proceso de facturacion', 16, 1);
		END 

		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_SetTotalRecords @p_CODDETALLETAREAEJECUTADA,
												 @totalregistros

		-- Disable primary, unique and foreign key constraints
		--1 de 19
		SET @v_szsql_string = 'alter table WSXML_SFG.AJUSTEFACTURACION   DISABLE constraint AJUSTEFACTURACION_REGISTROD_FK';
		execute sp_executesql @v_szsql_string;
		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros
		--2 de 19
		SET @v_szsql_string = 'alter table WSXML_SFG.AJUSTEFACTURACION   DISABLE constraint AJUSTEFACTURACION_REGISTROO_FK';
		execute sp_executesql @v_szsql_string;
		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--3 de 19
		SET @v_szsql_string = 'alter table WSXML_SFG.AJUSTEREVENUE   DISABLE constraint AJUSTEREVENUE_REGISTROFCTDS_FK';
		execute sp_executesql @v_szsql_string;
		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--4 de 19
		SET @v_szsql_string = 'alter table WSXML_SFG.AJUSTEREVENUE   DISABLE constraint AJUSTEREVENUE_REGISTROFCTOR_FK';
		execute sp_executesql @v_szsql_string;
		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--5 de 19
		SET @v_szsql_string = 'alter table WSXML_SFG.ARCHIVOTRANSALIADOCACHE   DISABLE constraint ARCHTXALIADOCH_REGISTRO_FK';
		execute sp_executesql @v_szsql_string;
		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--6 de 19
		SET @v_szsql_string = 'alter table WSXML_SFG.ARCHIVOTRANSALIADOCACHE   DISABLE constraint ARCHTXALIADOCH_REGSFACT_FK';
		execute sp_executesql @v_szsql_string;
		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--7 de 19
		SET @v_szsql_string = 'alter table SFG_CONCILIACION.COM_CADENA_DESCONTAR   DISABLE constraint COM_CADENA_DESCONTAR_REGI_FK1';
		execute sp_executesql @v_szsql_string;
		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--8 de 19
		SET @v_szsql_string = 'alter table WSXML_SFG.IMPUESTOREGFACTURACION   DISABLE constraint IMPUESTOREG_REGISTRO_FK';
		execute sp_executesql @v_szsql_string;
		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--9 de 19
		SET @v_szsql_string = 'alter table WSXML_SFG.REGISTROFACTREFERENCIA   DISABLE constraint REGISTRO_REGISTROFACTREF_FK';
		execute sp_executesql @v_szsql_string;
		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--10 de 19
		SET @v_szsql_string = 'alter table WSXML_SFG.REGISTROFACTTRANSAVANZADO   DISABLE constraint REGFACTTXADV_REGFACTURACION_FK ';
		execute sp_executesql @v_szsql_string;
		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--11 de 19
		SET @v_szsql_string = 'alter table WSXML_SFG.REGISTROREVENUE   DISABLE constraint REGISTROREVENUE_REGISTROFAC_FK';
		execute sp_executesql @v_szsql_string;
		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--12 de 19
		SET @v_szsql_string = 'alter table WSXML_SFG.RETENCIONREGFACTURACION   DISABLE constraint RETENCIONREG_REGISTRO_FK';
		execute sp_executesql @v_szsql_string;
		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--13 de 19
		SET @v_szsql_string = 'alter table WSXML_SFG.RETUVTREGFACTURACION   DISABLE constraint RETUVTREG_REGISTRO_FK';
		execute sp_executesql @v_szsql_string;
		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--14 de 19
		SET @v_szsql_string = 'alter table WSXML_SFG.TRANSACCIONALIADO   DISABLE constraint TRANSACCIONALIADO_REGISTROF_FK';
		execute sp_executesql @v_szsql_string;
		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--15 de 19
		SET @v_szsql_string = 'alter table WSXML_SFG.AJUSTEFACTURACION   DISABLE constraint AJUSTEFACTURACION_REFRNCIAD_FK';
		execute sp_executesql @v_szsql_string;
		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--16 de 19
		SET @v_szsql_string = 'alter table WSXML_SFG.AJUSTEFACTURACION   DISABLE constraint AJUSTEFACTURACION_REFRNCIAO_FK';
		execute sp_executesql @v_szsql_string;
		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--17 de 19
		SET @v_szsql_string = 'alter table WSXML_SFG.ARCHIVOTRANSALIADOCACHE   DISABLE constraint ARCHTXALIADOCH_REGSFACT_FK';
		execute sp_executesql @v_szsql_string;
		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--18 de 19
		SET @v_szsql_string = 'alter table SFG_CONCILIACION.ENTRADACONCILIAGTK   DISABLE constraint REGISTROFACTREFERENCIA_FK1';
		execute sp_executesql @v_szsql_string;
		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--19 de 19
		SET @v_szsql_string = 'alter table WSXML_SFG.TRANSACCIONALIADO   DISABLE constraint TRANSACCIONALIADO_REGFACTRF_FK';
		execute sp_executesql @v_szsql_string;
		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros


		--20 de 24
		SET @v_szsql_string = 'alter table WSXML_SFG.AJUSTE_TMP DISABLE constraint FK_CODREGISTROFACTURACION;';
		execute sp_executesql @v_szsql_string;
		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros


		--21 de 24
		SET @v_szsql_string = 'alter table WSXML_SFG.ARCHIVOTRANSALIADOCACHE DISABLE constraint ARCHTXALIADOCH_REGISTRO_FK;';
		execute sp_executesql @v_szsql_string;
		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--22 de 24
		SET @v_szsql_string = 'alter table SFG_CONCILIACION.COM_CADENA_DESCONTAR  DISABLE constraint COM_CADENA_DESCONTAR_REGI_FK1;';
		execute sp_executesql @v_szsql_string;
		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--23 de 24
		SET @v_szsql_string = 'alter table WSXML_SFG.REGISTROFACTREFERENCIA DISABLE constraint REGISTRO_REGISTROFACTREF_FK;';
		execute sp_executesql @v_szsql_string;
		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--23a de 24
		SET @v_szsql_string = 'alter table WSXML_SFG.RETENCIONREGPRDFACTURAC DISABLE constraint RETENCIONREGPRDFACTURAC_R_FK2;';
		execute sp_executesql @v_szsql_string;
		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros


		--24 de 24
		SET @v_szsql_string = 'alter table WSXML_SFG.TRANSACCIONALIADO  DISABLE constraint TRANSACCIONALIADO_REGISTROF_FK;';
		execute sp_executesql @v_szsql_string;
		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--WSXML_SFG.AJUSTEFACTURACION.codregistrofactorigen

		DECLARE @BB__fila NUMERIC(38,0)
	
		declare BB cursor for select a.ID_AJUSTEFACTURACION as fila
					 from WSXML_SFG.AJUSTEFACTURACION a
					where a.codregistrofactorigen in
						  (select r.id_registrofacturacion
							 from wsxml_sfg.registrofacturacion   r,
								  wsxml_sfg.entradaarchivocontrol e
							where r.codentradaarchivocontrol =
								  e.id_entradaarchivocontrol
							  and e.id_entradaarchivocontrol =
								  @v_id_entradaarchivocontrol); open BB;
		
		 fetch NEXT FROM BB into @BB__fila;
		 while @@fetch_status=0
		 begin

		  delete WSXML_SFG.AJUSTEFACTURACION  where ID_AJUSTEFACTURACION = @BB__fila;

		fetch NEXT FROM BB into @BB__fila;
		END;
		close BB;
		deallocate BB;
	

		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--WSXML_SFG.AJUSTEFACTURACION.codregistrofactdestino

		declare BB2 cursor for select a.ID_AJUSTEFACTURACION as fila
					 from WSXML_SFG.AJUSTEFACTURACION a
					where a.codregistrofactdestino in
						  (select r.id_registrofacturacion
							 from wsxml_sfg.registrofacturacion   r,
								  wsxml_sfg.entradaarchivocontrol e
							where r.codentradaarchivocontrol =
								  e.id_entradaarchivocontrol
							  and e.id_entradaarchivocontrol =
								  @v_id_entradaarchivocontrol); open BB2;
		 DECLARE @BB2__fila NUMERIC(38,0)
		 fetch next from BB2 into @BB__fila;
		 while @@fetch_status=0
		 begin

			delete WSXML_SFG.AJUSTEFACTURACION where ID_AJUSTEFACTURACION = @BB__fila;

			fetch next from BB2 into @BB__fila;
		END;

		close BB2;
		deallocate BB2;

	
		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--WSXML_SFG.AJUSTEREVENUE.codregistrofactorigen

		declare BB3 cursor for select a.ID_AJUSTEREVENUE as fila
					 from WSXML_SFG.AJUSTEREVENUE a
					where a.codregistrofactorigen in
						  (select r.id_registrofacturacion
							 from wsxml_sfg.registrofacturacion   r,
								  wsxml_sfg.entradaarchivocontrol e
							where r.codentradaarchivocontrol =
								  e.id_entradaarchivocontrol
							  and e.id_entradaarchivocontrol =
								  @v_id_entradaarchivocontrol); open BB3;

		 fetch NEXT FROM BB3 into @BB__fila;
		 while @@fetch_status=0
		 begin

			delete WSXML_SFG.AJUSTEREVENUE where ID_AJUSTEREVENUE = @BB__fila

			fetch NEXT FROM BB3 into @BB__fila;
		END;

		close BB3;
		deallocate BB3;
	

		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--WSXML_SFG.AJUSTEREVENUE.codregistrofactdestino

		declare BB4 cursor for select a.ID_AJUSTEREVENUE as fila
					 from WSXML_SFG.AJUSTEREVENUE a
					where a.codregistrofactdestino in
						  (select r.id_registrofacturacion
							 from wsxml_sfg.registrofacturacion   r,
								  wsxml_sfg.entradaarchivocontrol e
							where r.codentradaarchivocontrol =
								  e.id_entradaarchivocontrol
							  and e.id_entradaarchivocontrol =
								  @v_id_entradaarchivocontrol); open BB4;

		 fetch NEXT FROM BB4 into @BB__fila;
		 while @@fetch_status=0
		 begin

			delete WSXML_SFG.AJUSTEREVENUE  where ID_AJUSTEREVENUE = @BB__fila

			fetch NEXT FROM BB4 into @BB__fila;
		END;

		close BB4;
		deallocate BB4;

		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--WSXML_SFG.ARCHIVOTRANSALIADOCACHE.codregistrofacturacion

		declare BB5 cursor for select a.ID_ARCHIVOTRANSALIADOCACHE as fila
					 from WSXML_SFG.ARCHIVOTRANSALIADOCACHE a
					where a.codregistrofacturacion in
						  (select r.id_registrofacturacion
							 from wsxml_sfg.registrofacturacion   r,
								  wsxml_sfg.entradaarchivocontrol e
							where r.codentradaarchivocontrol =
								  e.id_entradaarchivocontrol
							  and e.id_entradaarchivocontrol =
								  @v_id_entradaarchivocontrol); open BB5;

		 fetch NEXT FROM BB5 into @BB__fila;
		 while @@fetch_status=0
		 begin

		  delete WSXML_SFG.ARCHIVOTRANSALIADOCACHE where ID_ARCHIVOTRANSALIADOCACHE = @BB__fila; 

		fetch NEXT FROM BB5 into @BB__fila;
		END;

		close BB5;
		deallocate BB5;

		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--SFG_CONCILIACION.COM_CADENA_DESCONTAR.cod_registrofacturacion

		declare BB6 cursor for select a.ID_Cadena_Descontar as fila
					 from SFG_CONCILIACION.Com_Cadena_Descontar a
					where a.cod_registrofacturacion in
						  (select r.id_registrofacturacion
							 from wsxml_sfg.registrofacturacion   r,
								  wsxml_sfg.entradaarchivocontrol e
							where r.codentradaarchivocontrol =
								  e.id_entradaarchivocontrol
							  and e.id_entradaarchivocontrol =
								  @v_id_entradaarchivocontrol); open BB6;
		 fetch NEXT FROM BB6 into @BB__fila;
		 while @@fetch_status=0
		 begin

		  delete SFG_CONCILIACION.Com_Cadena_Descontar
		   where ID_Cadena_Descontar = @BB__fila; 


		 fetch NEXT FROM BB6 into @BB__fila;
		END;

		close BB6;
		deallocate BB6;

		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--WSXML_SFG.IMPUESTOREGFACTURACION.codregistrofacturacion

		declare BB8 cursor for select a.ID_IMPUESTOREGFACTURACION as fila
					 from WSXML_SFG.IMPUESTOREGFACTURACION a
					where a.codregistrofacturacion in
						  (select r.id_registrofacturacion
							 from wsxml_sfg.registrofacturacion   r,
								  wsxml_sfg.entradaarchivocontrol e
							where r.codentradaarchivocontrol =
								  e.id_entradaarchivocontrol
							  and e.id_entradaarchivocontrol =
								  @v_id_entradaarchivocontrol); open BB8;
		 fetch NEXT FROM BB8 into @BB__fila;
		 while @@fetch_status=0
		 begin

		  delete WSXML_SFG.IMPUESTOREGFACTURACION where ID_IMPUESTOREGFACTURACION = @BB__fila; 


		 fetch NEXT FROM BB8 into @BB__fila;
		END;

		close BB8;
		deallocate BB8;

		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--WSXML_SFG.REGISTROFACTTRANSAVANZADO.codregistrofacturacion

		declare BB9 cursor for select a.ID_REGISTROFACTTRANSAVANZADO as fila
					 from WSXML_SFG.REGISTROFACTTRANSAVANZADO a
					where a.codregistrofacturacion in
						  (select r.id_registrofacturacion
							 from wsxml_sfg.registrofacturacion   r,
								  wsxml_sfg.entradaarchivocontrol e
							where r.codentradaarchivocontrol =
								  e.id_entradaarchivocontrol
							  and e.id_entradaarchivocontrol =
								  @v_id_entradaarchivocontrol); open BB9;
	 
		 fetch NEXT FROM BB9 into @BB__fila;
		 while @@fetch_status=0
		 begin

		  delete WSXML_SFG.REGISTROFACTTRANSAVANZADO where ID_REGISTROFACTTRANSAVANZADO = @BB__fila; 


		 fetch NEXT FROM BB9 into @BB__fila;
		END;

		close BB9;
		deallocate BB9;

		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--WSXML_SFG.REGISTROFACTTRANSAVANZADO.codregistrofacturacion

		declare BB10 cursor for select a.ID_REGISTROFACTTRANSAVANZADO as fila
					 from WSXML_SFG.REGISTROFACTTRANSAVANZADO a
					where a.codregistrofacturacion in
						  (select r.id_registrofacturacion
							 from wsxml_sfg.registrofacturacion   r,
								  wsxml_sfg.entradaarchivocontrol e
							where r.codentradaarchivocontrol =
								  e.id_entradaarchivocontrol
							  and e.id_entradaarchivocontrol =
								  @v_id_entradaarchivocontrol); open BB10;

		 fetch NEXT FROM BB10 into @BB__fila;
		 while @@fetch_status=0
		 begin

			delete WSXML_SFG.REGISTROFACTTRANSAVANZADO where ID_REGISTROFACTTRANSAVANZADO = @BB__fila; 

			fetch NEXT FROM BB10 into @BB__fila;
		END;

		close BB10;
		deallocate BB10;

		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--WSXML_SFG.REGISTROREVENUE.codregistrofacturacion

		declare BB11 cursor for select a.ID_REGISTROREVENUE as fila
					 from WSXML_SFG.REGISTROREVENUE a
					where a.codregistrofacturacion in
						  (select r.id_registrofacturacion
							 from wsxml_sfg.registrofacturacion   r,
								  wsxml_sfg.entradaarchivocontrol e
							where r.codentradaarchivocontrol =
								  e.id_entradaarchivocontrol
							  and e.id_entradaarchivocontrol =
								  @v_id_entradaarchivocontrol); open BB11;

		 fetch NEXT FROM BB11 into @BB__fila;
		 while @@fetch_status=0
		 begin

		  delete WSXML_SFG.REGISTROREVENUE where ID_REGISTROREVENUE = @BB__fila; 

		fetch NEXT FROM BB11 into @BB__fila;
		END;

		close BB11;
		deallocate BB11;

		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--WSXML_SFG.REGISTROREVENUE.CODENTRADAARCHIVOCONTROL

		declare BB12 cursor for select a.ID_REGISTROREVENUE as fila
					 from WSXML_SFG.REGISTROREVENUE a
					where a.CODENTRADAARCHIVOCONTROL =
						  @v_id_entradaarchivocontrol; open BB12;

		 fetch NEXT FROM BB12 into @BB__fila;
		 while @@fetch_status=0
		 begin

		  delete WSXML_SFG.REGISTROREVENUE where ID_REGISTROREVENUE = @BB__fila; 

			fetch NEXT FROM BB12 into @BB__fila;
		END;

		close BB12;
		deallocate BB12;

		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--WSXML_SFG.RETENCIONREGFACTURACION.codregistrofacturacion

		declare BB13 cursor for select a.ID_RETENCIONREGFACTURACION as fila
					 from WSXML_SFG.RETENCIONREGFACTURACION a
					where a.codregistrofacturacion in
						  (select r.id_registrofacturacion
							 from wsxml_sfg.registrofacturacion   r,
								  wsxml_sfg.entradaarchivocontrol e
							where r.codentradaarchivocontrol =
								  e.id_entradaarchivocontrol
							  and e.id_entradaarchivocontrol =
								  @v_id_entradaarchivocontrol); open BB13;

		 fetch NEXT FROM BB13 into @BB__fila;
		 while @@fetch_status=0
		 begin

		  delete WSXML_SFG.RETENCIONREGFACTURACION where ID_RETENCIONREGFACTURACION = @BB__fila; 

			fetch NEXT FROM BB13 into @BB__fila;
		END;

		close BB13;
		deallocate BB13;

		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--WSXML_SFG.RETUVTREGFACTURACION.codregistrofacturacion

		declare BB14 cursor for select a.ID_RETUVTREGFACTURACION as fila
					 from WSXML_SFG.RETUVTREGFACTURACION a
					where a.codregistrofacturacion in
						  (select r.id_registrofacturacion
							 from wsxml_sfg.registrofacturacion   r,
								  wsxml_sfg.entradaarchivocontrol e
							where r.codentradaarchivocontrol =
								  e.id_entradaarchivocontrol
							  and e.id_entradaarchivocontrol =
								  @v_id_entradaarchivocontrol); open BB14;

		 fetch NEXT FROM BB14 into @BB__fila;
		 while @@fetch_status=0
		 begin

		  delete WSXML_SFG.RETUVTREGFACTURACION where ID_RETUVTREGFACTURACION = @BB__fila; 

			fetch NEXT FROM BB14 into @BB__fila;
		END;

		close BB14;
		deallocate BB14;

		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--WSXML_SFG.TRANSACCIONALIADO.codregistrofacturacion

		declare BB15 cursor for select a.ID_TRANSACCIONALIADO as fila
					 from WSXML_SFG.TRANSACCIONALIADO a
					where a.codregistrofacturacion in
						  (select r.id_registrofacturacion
							 from wsxml_sfg.registrofacturacion   r,
								  wsxml_sfg.entradaarchivocontrol e
							where r.codentradaarchivocontrol =
								  e.id_entradaarchivocontrol
							  and e.id_entradaarchivocontrol =
								  @v_id_entradaarchivocontrol); open BB15;
	 		
		 fetch NEXT FROM BB15 into @BB__fila;
		 while @@fetch_status=0
		 begin

		  delete WSXML_SFG.TRANSACCIONALIADO  where ID_TRANSACCIONALIADO = @BB__fila; 

			fetch NEXT FROM BB15 into @BB__fila;
		END;

		close BB15;
		deallocate BB15;

		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--WSXML_SFG.AJUSTEFACTURACION.codregistrofactreforigen

		declare BB16 cursor for select a.ID_AJUSTEFACTURACION as fila
					 from WSXML_SFG.AJUSTEFACTURACION a
					where a.codregistrofactreforigen in
						  (select rf.id_registrofactreferencia
							 from wsxml_sfg.registrofacturacion    r,
								  wsxml_sfg.entradaarchivocontrol  e,
								  wsxml_sfg.registrofactreferencia rf
							where r.codentradaarchivocontrol =
								  e.id_entradaarchivocontrol
							  and rf.codregistrofacturacion =
								  r.id_registrofacturacion
							  and e.id_entradaarchivocontrol =
								  @v_id_entradaarchivocontrol); open BB16;

		 fetch NEXT FROM BB16 into @BB__fila;
		 while @@fetch_status=0
		 begin

		  delete WSXML_SFG.AJUSTEFACTURACION where ID_AJUSTEFACTURACION = @BB__fila; 

			fetch NEXT FROM BB16 into @BB__fila;
		END;

		close BB16;
		deallocate BB16;

		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--WSXML_SFG.AJUSTEFACTURACION.codregistrofactrefdestino

		declare BB17 cursor for select a.ID_AJUSTEFACTURACION as fila
					 from WSXML_SFG.AJUSTEFACTURACION a
					where a.codregistrofactrefdestino in
						  (select rf.id_registrofactreferencia
							 from wsxml_sfg.registrofacturacion    r,
								  wsxml_sfg.entradaarchivocontrol  e,
								  wsxml_sfg.registrofactreferencia rf
							where r.codentradaarchivocontrol =
								  e.id_entradaarchivocontrol
							  and rf.codregistrofacturacion =
								  r.id_registrofacturacion
							  and e.id_entradaarchivocontrol =
								  @v_id_entradaarchivocontrol); open BB17;

		 fetch NEXT FROM BB17 into @BB__fila;
		 while @@fetch_status=0
		 begin

		  delete WSXML_SFG.AJUSTEFACTURACION where ID_AJUSTEFACTURACION = @BB__fila; 

			fetch NEXT FROM BB17 into @BB__fila;
		END;

		close BB17;
		deallocate BB17;

		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--WSXML_SFG.AJUSTEFACTURACION.codregistrofactrefdestino

		declare BB18 cursor for select a.ID_AJUSTEFACTURACION as fila
					 from WSXML_SFG.AJUSTEFACTURACION a
					where a.codregistrofactrefdestino in
						  (select rf.id_registrofactreferencia
							 from wsxml_sfg.registrofacturacion    r,
								  wsxml_sfg.entradaarchivocontrol  e,
								  wsxml_sfg.registrofactreferencia rf
							where r.codentradaarchivocontrol =
								  e.id_entradaarchivocontrol
							  and rf.codregistrofacturacion =
								  r.id_registrofacturacion
							  and e.id_entradaarchivocontrol =
								  @v_id_entradaarchivocontrol); open BB18;
							  
		 fetch NEXT FROM BB18 into @BB__fila;
		 while @@fetch_status=0
		begin

		  delete WSXML_SFG.AJUSTEFACTURACION where ID_AJUSTEFACTURACION = @BB__fila; 

			fetch NEXT FROM BB18 into @BB__fila;
		END;

		close BB18;
		deallocate BB18;

		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--WSXML_SFG.ARCHIVOTRANSALIADOCACHE.codregistrofactreferencia

		declare BB19 cursor for select a.ID_ARCHIVOTRANSALIADOCACHE as fila
					 from WSXML_SFG.ARCHIVOTRANSALIADOCACHE a
					where a.codregistrofactreferencia in
						  (select rf.id_registrofactreferencia
							 from wsxml_sfg.registrofacturacion    r,
								  wsxml_sfg.entradaarchivocontrol  e,
								  wsxml_sfg.registrofactreferencia rf
							where r.codentradaarchivocontrol =
								  e.id_entradaarchivocontrol
							  and rf.codregistrofacturacion =
								  r.id_registrofacturacion
							  and e.id_entradaarchivocontrol =
								  @v_id_entradaarchivocontrol); open BB19;

		 fetch NEXT FROM BB19 into @BB__fila;
		 while @@fetch_status=0
		 begin

			delete WSXML_SFG.ARCHIVOTRANSALIADOCACHE  where ID_ARCHIVOTRANSALIADOCACHE = @BB__fila; 

			fetch NEXT FROM BB19 into @BB__fila;
		END;

		close BB19;
		deallocate BB19;

		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--SFG_CONCILIACION.ENTRADACONCILIAGTK.codregistrofactreferencia

		declare BB20 cursor for select a.ID_ENTRADACONCILIAGTK as fila
					 from SFG_CONCILIACION.ENTRADACONCILIAGTK a
					where a.codregistrofactreferencia in
						  (select rf.id_registrofactreferencia
							 from wsxml_sfg.registrofacturacion    r,
								  wsxml_sfg.entradaarchivocontrol  e,
								  wsxml_sfg.registrofactreferencia rf
							where r.codentradaarchivocontrol =
								  e.id_entradaarchivocontrol
							  and rf.codregistrofacturacion =
								  r.id_registrofacturacion
							  and e.id_entradaarchivocontrol =
								  @v_id_entradaarchivocontrol); open BB20;
		
		 fetch NEXT FROM BB20 into @BB__fila;
		 while @@fetch_status=0
		 begin

			delete SFG_CONCILIACION.ENTRADACONCILIAGTK where ID_ENTRADACONCILIAGTK = @BB__fila;

			fetch NEXT FROM BB20 into @BB__fila;
		END;

		close BB20;
		deallocate BB20;

		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--WSXML_SFG.TRANSACCIONALIADO.codregistrofactreferencia

		declare BB21 cursor for select a.ID_TRANSACCIONALIADO as fila
					 from WSXML_SFG.TRANSACCIONALIADO a
					where a.codregistrofactreferencia in
						  (select rf.id_registrofactreferencia
							 from wsxml_sfg.registrofacturacion    r,
								  wsxml_sfg.entradaarchivocontrol  e,
								  wsxml_sfg.registrofactreferencia rf
							where r.codentradaarchivocontrol =
								  e.id_entradaarchivocontrol
							  and rf.codregistrofacturacion =
								  r.id_registrofacturacion
							  and e.id_entradaarchivocontrol =
								  @v_id_entradaarchivocontrol); open BB21;
	
		fetch NEXT FROM BB21 into @BB__fila;
		 while @@fetch_status=0
		 begin

			delete WSXML_SFG.TRANSACCIONALIADO where ID_TRANSACCIONALIADO = @BB__fila;

			fetch NEXT FROM BB21 into @BB__fila;
		END;

		close BB21;
		deallocate BB21;

		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--WSXML_SFG.REGISTROFACTREFERENCIA.codregistrofacturacion

		declare BB22 cursor for select a.ID_REGISTROFACTREFERENCIA as fila
					 from WSXML_SFG.REGISTROFACTREFERENCIA a
					where a.codregistrofacturacion in
						  (select r.id_registrofacturacion
							 from wsxml_sfg.registrofacturacion   r,
								  wsxml_sfg.entradaarchivocontrol e
							where r.codentradaarchivocontrol =
								  e.id_entradaarchivocontrol
							  and e.id_entradaarchivocontrol =
								  @v_id_entradaarchivocontrol); open BB22;
		 fetch NEXT FROM BB22 into @BB__fila;
		 while @@fetch_status=0
		 begin

		  delete WSXML_SFG.REGISTROFACTREFERENCIA where ID_REGISTROFACTREFERENCIA= @BB__fila;

			fetch NEXT FROM BB22 into @BB__fila;
		END;

		close BB22;
		deallocate BB22;

		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		COMMIT;

		delete from ENTRADAARCHIVOCONTROL
		 WHERE ID_ENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;

		SET @szSQLInstruction = 'UPDATE WSXML_SFG.PLANDEPAGOS SET CodEstadoPago = 4, CODENTRADAARCHIVOCONTROL = NULL, FECHA_ARCHIVO_VENTAS = NULL WHERE CODENTRADAARCHIVOCONTROL = ' +
							ISNULL(CONVERT(VARCHAR,@p_CODENTRADAARCHIVOCONTROL), '');

	--    RESULT := DBMS_HS_PASSTHROUGH.EXECUTE_IMMEDIATE@DIFERIDOS(szSQLInstruction);

		SET @RESULT = 0;

		IF @RESULT > 0 BEGIN
			SET @msg = '-20086 Error al intentar actualizar la tabla [Diferidos].[dbo].[PlanDePagos] de SQLServer durante la reversi?n de prefacturación. ' +
								  ISNULL(@RESULT, '')
		  RAISERROR(@msg, 16, 1);
		END 

		COMMIT;

		if @v_reactivar_llaves = 1 begin

		  -- Disable primary, unique and foreign key constraints
		  --1 de 19
		  SET @v_szsql_string = 'alter table WSXML_SFG.AJUSTEFACTURACION   enable constraint AJUSTEFACTURACION_REGISTROD_FK';
		  execute sp_executesql @v_szsql_string;
		  SET @countregistros = @countregistros + @countregistros;
		  EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													  @countregistros
		  --2 de 19
		  SET @v_szsql_string = 'alter table WSXML_SFG.AJUSTEFACTURACION   enable constraint AJUSTEFACTURACION_REGISTROO_FK';
		  execute sp_executesql @v_szsql_string;
		  SET @countregistros = @countregistros + @countregistros;
		  EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													  @countregistros

		  --3 de 19
		  SET @v_szsql_string = 'alter table WSXML_SFG.AJUSTEREVENUE   enable constraint AJUSTEREVENUE_REGISTROFCTDS_FK';
		  execute sp_executesql @v_szsql_string;
		  SET @countregistros = @countregistros + @countregistros;
		  EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													  @countregistros

		  --4 de 19
		  SET @v_szsql_string = 'alter table WSXML_SFG.AJUSTEREVENUE   enable constraint AJUSTEREVENUE_REGISTROFCTOR_FK';
		  execute sp_executesql @v_szsql_string;
		  SET @countregistros = @countregistros + @countregistros;
		  EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													  @countregistros

		  --5 de 19
		  SET @v_szsql_string = 'alter table WSXML_SFG.ARCHIVOTRANSALIADOCACHE   enable constraint ARCHTXALIADOCH_REGISTRO_FK';
		  execute sp_executesql @v_szsql_string;
		  SET @countregistros = @countregistros + @countregistros;
		  EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													  @countregistros

		  --6 de 19
		  SET @v_szsql_string = 'alter table WSXML_SFG.ARCHIVOTRANSALIADOCACHE   enable constraint ARCHTXALIADOCH_REGSFACT_FK';
		  execute sp_executesql @v_szsql_string;
		  SET @countregistros = @countregistros + @countregistros;
		  EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													  @countregistros

		  --7 de 19
		  SET @v_szsql_string = 'alter table SFG_CONCILIACION.COM_CADENA_DESCONTAR   enable constraint COM_CADENA_DESCONTAR_REGI_FK1';
		  execute sp_executesql @v_szsql_string;
		  SET @countregistros = @countregistros + @countregistros;
		  EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													  @countregistros

		  --8 de 19
		  SET @v_szsql_string = 'alter table WSXML_SFG.IMPUESTOREGFACTURACION   enable constraint IMPUESTOREG_REGISTRO_FK';
		  execute sp_executesql @v_szsql_string;
		  SET @countregistros = @countregistros + @countregistros;
		  EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													  @countregistros

		  --9 de 19
		  SET @v_szsql_string = 'alter table WSXML_SFG.REGISTROFACTREFERENCIA   enable constraint REGISTRO_REGISTROFACTREF_FK';
		  execute sp_executesql @v_szsql_string;
		  SET @countregistros = @countregistros + @countregistros;
		  EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													  @countregistros

		  --10 de 19
		  SET @v_szsql_string = 'alter table WSXML_SFG.REGISTROFACTTRANSAVANZADO   enable constraint REGFACTTXADV_REGFACTURACION_FK ';
		  execute sp_executesql @v_szsql_string;
		  SET @countregistros = @countregistros + @countregistros;
		  EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													  @countregistros

		  --11 de 19
		  SET @v_szsql_string = 'alter table WSXML_SFG.REGISTROREVENUE   enable constraint REGISTROREVENUE_REGISTROFAC_FK';
		  execute sp_executesql @v_szsql_string;
		  SET @countregistros = @countregistros + @countregistros;
		  EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													  @countregistros

		  --12 de 19
		  SET @v_szsql_string = 'alter table WSXML_SFG.RETENCIONREGFACTURACION   enable constraint RETENCIONREG_REGISTRO_FK';
		  execute sp_executesql @v_szsql_string;
		  SET @countregistros = @countregistros + @countregistros;
		  EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													  @countregistros

		  --13 de 19
		  SET @v_szsql_string = 'alter table WSXML_SFG.RETUVTREGFACTURACION   enable constraint RETUVTREG_REGISTRO_FK';
		  execute sp_executesql @v_szsql_string;
		  SET @countregistros = @countregistros + @countregistros;
		  EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													  @countregistros

		  --14 de 19
		  SET @v_szsql_string = 'alter table WSXML_SFG.TRANSACCIONALIADO   enable constraint TRANSACCIONALIADO_REGISTROF_FK';
		  execute sp_executesql @v_szsql_string;
		  SET @countregistros = @countregistros + @countregistros;
		  EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													  @countregistros

		  --15 de 19
		  SET @v_szsql_string = 'alter table WSXML_SFG.AJUSTEFACTURACION   enable constraint AJUSTEFACTURACION_REFRNCIAD_FK';
		  execute sp_executesql @v_szsql_string;
		  SET @countregistros = @countregistros + @countregistros;
		  EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													  @countregistros

		  --16 de 19
		  SET @v_szsql_string = 'alter table WSXML_SFG.AJUSTEFACTURACION   enable constraint AJUSTEFACTURACION_REFRNCIAO_FK';
		  execute sp_executesql @v_szsql_string;
		  SET @countregistros = @countregistros + @countregistros;
		  EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													  @countregistros

		  --17 de 19
		  SET @v_szsql_string = 'alter table WSXML_SFG.ARCHIVOTRANSALIADOCACHE   enable constraint ARCHTXALIADOCH_REGSFACT_FK';
		  execute sp_executesql @v_szsql_string;
		  SET @countregistros = @countregistros + @countregistros;
		  EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													  @countregistros

		  --18 de 19
		  SET @v_szsql_string = 'alter table SFG_CONCILIACION.ENTRADACONCILIAGTK   enable constraint REGISTROFACTREFERENCIA_FK1';
		  execute sp_executesql @v_szsql_string;
		  SET @countregistros = @countregistros + @countregistros;
		  EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													  @countregistros

		  --19 de 19
		  SET @v_szsql_string = 'alter table WSXML_SFG.TRANSACCIONALIADO   enable constraint TRANSACCIONALIADO_REGFACTRF_FK';
		  execute sp_executesql @v_szsql_string;
		  SET @countregistros = @countregistros + @countregistros;
		  EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													  @countregistros

	  --20 de 24
		SET @v_szsql_string = 'alter table WSXML_SFG.AJUSTE_TMP enable constraint FK_CODREGISTROFACTURACION;';
		execute sp_executesql @v_szsql_string;
		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros


		--21 de 24
		SET @v_szsql_string = 'alter table WSXML_SFG.ARCHIVOTRANSALIADOCACHE enable constraint ARCHTXALIADOCH_REGISTRO_FK;';
		execute sp_executesql @v_szsql_string;
		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--22 de 24
		SET @v_szsql_string = 'alter table SFG_CONCILIACION.COM_CADENA_DESCONTAR  enable constraint COM_CADENA_DESCONTAR_REGI_FK1;';
		execute sp_executesql @v_szsql_string;
		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--23 de 24
		SET @v_szsql_string = 'alter table WSXML_SFG.REGISTROFACTREFERENCIA enable constraint REGISTRO_REGISTROFACTREF_FK;';
		execute sp_executesql @v_szsql_string;
		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros

		--23a de 24
		SET @v_szsql_string = 'alter table WSXML_SFG.RETENCIONREGPRDFACTURAC enable constraint RETENCIONREGPRDFACTURAC_R_FK2;';
		execute sp_executesql @v_szsql_string;
		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros


		--24 de 24
		SET @v_szsql_string = 'alter table WSXML_SFG.TRANSACCIONALIADO  enable constraint TRANSACCIONALIADO_REGISTROF_FK;';
		execute sp_executesql @v_szsql_string;
		SET @countregistros = @countregistros + @countregistros;
		EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,
													@countregistros
		end 

		SET @p_RETVALUE_out = @p_FINALIZADAOK;
	END TRY
	BEGIN CATCH
      SET @msg = ERROR_MESSAGE();
      EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_FinalizeExecution @p_CODDETALLETAREAEJECUTADA, @msg
      SET @p_RETVALUE_out = @p_FINALIZADAFALLO;

	END CATCH
  END;
GO 


  IF OBJECT_ID('WSXML_SFG.SFGREGISTROFACTURACION_RecalcularPrefacturacion', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_RecalcularPrefacturacion;
GO



  CREATE PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_RecalcularPrefacturacion(
									 @p_TIPOARCHIVO              NUMERIC(22,0),
                                     @p_FECHAARCHIVO             DATETIME,
                                     @p_CODDETALLETAREAEJECUTADA NUMERIC(22,0),
                                     @p_RETVALUE_out             NUMERIC(22,0) OUT) AS
 BEGIN
	SET NOCOUNT ON;

    DECLARE @msg                       NVARCHAR(2000);
    DECLARE @cCODENTRADAARCHIVOCONTROL NUMERIC(22,0);
    DECLARE @cFACTURADO                NUMERIC(22,0) = 0;
    DECLARE @xObtenerReglas            NUMERIC(22,0) = 1;

			DECLARE
			@p_REGISTRADA      			TINYINT,
			@p_INICIADA         		TINYINT,
			@p_FINALIZADAOK 			TINYINT,
			@p_FINALIZADAFALLO  		TINYINT,
			@p_ABORTADA  				TINYINT,
			@p_NOINICIADA  				TINYINT,
			@p_FINALIZADAADVERTENCIA  	TINYINT 

	EXEC WSXML_SFG.SFGESTADOTAREAEJECUTADA_CONSTANT
			@p_REGISTRADA      			 OUT,
			@p_INICIADA         		 OUT,
			@p_FINALIZADAOK 			 OUT,
			@p_FINALIZADAFALLO  		 OUT,
			@p_ABORTADA  				 OUT,
			@p_NOINICIADA  				 OUT,
			@p_FINALIZADAADVERTENCIA  	 OUT

   
   	DECLARE @p_TIPOINFORMATIVO TINYINT,
		@p_TIPOERROR TINYINT,
		@p_TIPOADVERTENCIA TINYINT,
		@p_TIPOCUALQUIERA TINYINT,
		@p_PROCESONOTIFICACION TINYINT,
		@p_ESTADOABIERTA TINYINT,
		@p_ESTADOCERRADA TINYINT	
			  
	EXEC WSXML_SFG.SFGALERTA_CONSTANT
		@p_TIPOINFORMATIVO OUT,
		@p_TIPOERROR OUT,
		@p_TIPOADVERTENCIA OUT,
		@p_TIPOCUALQUIERA OUT,
		@p_PROCESONOTIFICACION OUT,
		@p_ESTADOABIERTA OUT,
		@p_ESTADOCERRADA OUT	

  
    BEGIN
		BEGIN TRY
			EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'RecalculoObtenerReglas', @xObtenerReglas OUT
		END TRY
		BEGIN CATCH
			SET @xObtenerReglas = 1;
		END CATCH
    END;

 BEGIN TRY

    -- Obtener el identificador del archivo a recalcular
    BEGIN
      SELECT @cCODENTRADAARCHIVOCONTROL = ID_ENTRADAARCHIVOCONTROL, @cFACTURADO = FACTURADO
        FROM WSXML_SFG.ENTRADAARCHIVOCONTROL
       WHERE TIPOARCHIVO = @p_TIPOARCHIVO
         AND CONVERT(DATETIME, CONVERT(DATE,FECHAARCHIVO)) = CONVERT(DATETIME, CONVERT(DATE,@p_FECHAARCHIVO))
         AND REVERSADO = 0;
		
		IF @@ROWCOUNT = 0 
			RAISERROR('-20054 No existe ningun archivo recalculable para la fecha', 16, 1);
    END;


	DECLARE @VENTAFACT SMALLINT,
        @ANULACION SMALLINT,
		@FREETICKT SMALLINT,
		@PREMIOPAG SMALLINT,
		@RGSTOTROS SMALLINT,
		@VENNOFACT SMALLINT 

	EXEC WSXML_SFG.SFGTIPOREGISTRO_CONSTANT
						@VENTAFACT OUT,
						@ANULACION OUT,
						@FREETICKT OUT,
						@PREMIOPAG OUT,
						@RGSTOTROS OUT,
						@VENNOFACT OUT


    IF @cFACTURADO = 1 BEGIN
      RAISERROR('-20035 No se puede recalcular la prefacturacion para un archivo ya facturado', 16, 1);
    END 

    IF @cCODENTRADAARCHIVOCONTROL > 0 BEGIN
        DECLARE @totalrows NUMERIC(22,0) = 0;
        DECLARE @countrows NUMERIC(22,0) = 0;
      BEGIN
        SELECT @totalrows = COUNT(1)
          FROM WSXML_SFG.REGISTROFACTURACION
         WHERE CODENTRADAARCHIVOCONTROL = @cCODENTRADAARCHIVOCONTROL;

        EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_SetTotalRecords @p_CODDETALLETAREAEJECUTADA,
                                                 @totalrows

        DECLARE tREGISTRO CURSOR FOR SELECT ID_REGISTROFACTURACION,
                                 CODPRODUCTO,
                                 CODPUNTODEVENTA,
                                 CODTIPOREGISTRO,
                                 VALORTRANSACCION,
                                 NUMTRANSACCIONES,
                                 VALORCOMISION
                            FROM WSXML_SFG.REGISTROFACTURACION
                           WHERE CODENTRADAARCHIVOCONTROL =
                                 @cCODENTRADAARCHIVOCONTROL; OPEN tREGISTRO;
		DECLARE @tREGISTRO__ID_REGISTROFACTURACION NUMERIC(38,0),
                                 @tREGISTRO__CODPRODUCTO NUMERIC(38,0),
                                 @tREGISTRO__CODPUNTODEVENTA NUMERIC(38,0),
                                 @tREGISTRO__CODTIPOREGISTRO NUMERIC(38,0),
                                 @tREGISTRO__VALORTRANSACCION FLOAT,
                                 @tREGISTRO__NUMTRANSACCIONES NUMERIC(38,0),
                                 @tREGISTRO__VALORCOMISION FLOAT

		 FETCH NEXT FROM tREGISTRO INTO @tREGISTRO__ID_REGISTROFACTURACION,
                                 @tREGISTRO__CODPRODUCTO,
                                 @tREGISTRO__CODPUNTODEVENTA,
                                 @tREGISTRO__CODTIPOREGISTRO,
                                 @tREGISTRO__VALORTRANSACCION,
                                 @tREGISTRO__NUMTRANSACCIONES,
                                 @tREGISTRO__VALORCOMISION;
		 WHILE @@FETCH_STATUS=0
		 BEGIN
			BEGIN TRY

				DECLARE @cCODPRODUCTO     NUMERIC(22,0) = @tREGISTRO__CODPRODUCTO;
				DECLARE @cCODPUNTODEVENTA NUMERIC(22,0) = @tREGISTRO__CODPUNTODEVENTA;
				DECLARE @cCODTIPOPERSONATRIBUTARIA NUMERIC(22,0);
				DECLARE @cVALORVENTABRUTA FLOAT = 0;
				DECLARE @cVALORVENTANETA  FLOAT = @tREGISTRO__VALORTRANSACCION;

				DECLARE @cCODRANGOCOMISION NUMERIC(22,0) = 0;
				DECLARE @cCODTIPOCOMISION  NUMERIC(22,0) = 0;
				DECLARE @cCOMISIONANTICIPO NUMERIC(22,0) = 0;
				DECLARE @cVALCALCPORCENTUA FLOAT = 0;
				DECLARE @cVALCALCTRANSCCNL FLOAT = 0;
				DECLARE @cCODCATEGORIAPAGO NUMERIC(22,0);
				DECLARE @cPLANTILLA        NUMERIC(22,0);

				DECLARE @cVALORCOMISION          FLOAT = 0;
				DECLARE @cIVACOMISION            FLOAT = 0;
				DECLARE @cVALORVAT               FLOAT = 0;
				DECLARE @cVALORCOMISIONBRUTA     FLOAT = 0;
				DECLARE @cVALORCOMISIONNETA      FLOAT = 0;
				DECLARE @cSUMRETENCIONES         FLOAT = 0;
				DECLARE @cSUMIMPUESTOS           FLOAT = 0;
				DECLARE @cRNDIMPUESTOS           FLOAT = 0;
				DECLARE @cSUMDESCUENTOS          FLOAT = 0;
				DECLARE @cCODUSUARIOMODIFICACION NUMERIC(22,0) = 1;

				DECLARE @cCODREGIMEN                NUMERIC(22,0);
				DECLARE @cCODAGRUPACIONPUNTODEVENTA NUMERIC(22,0);
				DECLARE @cCODREDPDV                 NUMERIC(22,0);
				DECLARE @cIDENTIFICACION            NUMERIC(22,0);
				DECLARE @cDIGITOVERIFICACION        NUMERIC(22,0);
				DECLARE @cCODCIUDAD                 NUMERIC(22,0);
				DECLARE @cCODCOMPANIA               NUMERIC(22,0);
				DECLARE @cCODALIADOESTRATEGICO      NUMERIC(22,0);
				DECLARE @cCODTIPOCONTRATOPDV        NUMERIC(22,0);
				DECLARE @cCODRAZONSOCIAL            NUMERIC(22,0);
				DECLARE @cCODTIPOCONTRATOPRODUCTO   NUMERIC(22,0);
				DECLARE @cCODDUENOTERMINAL          NUMERIC(22,0);
				DECLARE @cFACTURABLE                NUMERIC(22,0);
				DECLARE @tmpmsg                     NVARCHAR(2000);

				DECLARE @flagADVANCEDCOMMISSION NUMERIC(22,0) = 0;
				DECLARE @advcommissions         CURSOR;
				BEGIN
					IF @xObtenerReglas = 1 BEGIN
					  -- Obtener nuevas reglas de facturaci?n y setear
					  EXEC WSXML_SFG.SFGPUNTODEVENTA_ObtainBillingRules @cCODPUNTODEVENTA,
														 @cCODPRODUCTO,
														 @cCODREGIMEN OUT,
														 @cCODAGRUPACIONPUNTODEVENTA OUT,
														 @cCODREDPDV OUT,
														 @cIDENTIFICACION OUT,
														 @cDIGITOVERIFICACION OUT,
														 @cCODCIUDAD OUT,
														 @cCODCOMPANIA OUT,
														 @cCODALIADOESTRATEGICO OUT,
														 @cCODTIPOCONTRATOPDV OUT,
														 @cCODRAZONSOCIAL OUT,
														 @cCODTIPOCONTRATOPRODUCTO OUT,
														 @cCODDUENOTERMINAL OUT,
														 @cFACTURABLE OUT

					  EXEC WSXML_SFG.SFGREGISTROFACTURACION_AlterBillingRules  
																@tREGISTRO__ID_REGISTROFACTURACION,
															   @cCODCOMPANIA,
															   @cCODREGIMEN,
															   @cCODAGRUPACIONPUNTODEVENTA,
															   @cCODREDPDV,
															   @cIDENTIFICACION,
															   @cDIGITOVERIFICACION,
															   @cCODCIUDAD,
															   @cCODTIPOCONTRATOPDV,
															   @cCODRAZONSOCIAL,
															   @cCODTIPOCONTRATOPRODUCTO 
					END
					ELSE BEGIN
					  EXEC WSXML_SFG.SFGREGISTROFACTURACION_GetBillingRulesFromRegistry 
																		@tREGISTRO__ID_REGISTROFACTURACION,
																		 @cCODCOMPANIA OUT,
																		 @cCODREGIMEN OUT,
																		 @cCODAGRUPACIONPUNTODEVENTA OUT,
																		 @cCODREDPDV OUT,
																		 @cIDENTIFICACION OUT,
																		 @cDIGITOVERIFICACION OUT,
																		 @cCODCIUDAD OUT,
																		 @cCODTIPOCONTRATOPDV OUT,
																		 @cCODRAZONSOCIAL OUT,
																		 @cCODTIPOCONTRATOPRODUCTO OUT,
																		 @cCODDUENOTERMINAL OUT
					END 
					/*24 jUNIO 2013 -- Obtener el tipo de persona tributaria*/
					EXEC WSXML_SFG.SFGPUNTODEVENTA_GetTipoPersonaTributaria @cCODPUNTODEVENTA,@cCODTIPOPERSONATRIBUTARIA OUT


					/* Busqueda de Comision */
					EXEC WSXML_SFG.SFGPLANTILLAPRODUCTO_GetPinpointComissionValues  
																	@cCODPUNTODEVENTA,
																	@cCODPRODUCTO,
																	@cCODRANGOCOMISION OUT,
																	@cCODTIPOCOMISION OUT,
																	@cCOMISIONANTICIPO OUT,
																	@cVALCALCPORCENTUA OUT,
																	@cVALCALCTRANSCCNL OUT,
																	@cPLANTILLA OUT,
																	@flagADVANCEDCOMMISSION OUT

					DECLARE @FEEINQUIRY  SMALLINT,@FTRANSACTION SMALLINT, @BOTH  SMALLINT
					EXEC WSXML_SFG.SFGREGISTROFACTTRANSAVANZADO_CONSTANT
							  @FEEINQUIRY     OUT,
							  @FTRANSACTION   OUT,
							  @BOTH           OUT

					DECLARE @advcommissions__ID NUMERIC(38,0) = 0;
					DECLARE @advcommissions__CODRANGOCOMISION NUMERIC(38,0) = 0;
					DECLARE @advcommissions__CODTIPOCOMISION NUMERIC(38,0) = 0;
					DECLARE @advcommissions__COMISIONANTICIPO NUMERIC(38,0) = 0;
					DECLARE @advcommissions__VALORPORCENTUAL FLOAT = 0;
					DECLARE @advcommissions__VALORTRANSACCIONAL FLOAT = 0;

					DECLARE @p_cur_ADVANCEDLISTCOMMISSIONS WSXML_SFG.ADVANCEDCOMMISSION

					IF @flagADVANCEDCOMMISSION <> 0 BEGIN
					EXEC WSXML_SFG.SFGPLANTILLAPRODUCTO_GetAdvancedComissionValues   @cCODPUNTODEVENTA, @cCODPRODUCTO, @advcommissions OUT
		
					FETCH NEXT FROM @advcommissions INTO @advcommissions__ID, @advcommissions__CODRANGOCOMISION, @advcommissions__CODTIPOCOMISION
						, @advcommissions__COMISIONANTICIPO, @advcommissions__VALORPORCENTUAL, @advcommissions__VALORTRANSACCIONAL
					WHILE @@FETCH_STATUS=0

					BEGIN
						INSERT INTO @p_cur_ADVANCEDLISTCOMMISSIONS VALUES (
												@advcommissions__ID,
												@advcommissions__CODRANGOCOMISION,
												@advcommissions__CODTIPOCOMISION,
												@advcommissions__COMISIONANTICIPO,
												@advcommissions__VALORPORCENTUAL,
												@advcommissions__VALORTRANSACCIONAL)

					FETCH NEXT FROM @advcommissions INTO @advcommissions__ID, @advcommissions__CODRANGOCOMISION, @advcommissions__CODTIPOCOMISION
						, @advcommissions__COMISIONANTICIPO, @advcommissions__VALORPORCENTUAL, @advcommissions__VALORTRANSACCIONAL
					END
					CLOSE @advcommissions
					DEALLOCATE @advcommissions


				END 
					IF (@cPLANTILLA IS NULL) BEGIN
				  SET @tmpmsg = '-20054 No se encontró comisión única para el punto de venta: ' + ISNULL(CONVERT(VARCHAR,@tREGISTRO__ID_REGISTROFACTURACION), '') + ': ' +isnull(ERROR_MESSAGE ( ) , '');
				  RAISERROR(@tmpmsg, 16, 1);
				END 

				/* Actualizacion de registro */
					BEGIN
					BEGIN TRY
					  UPDATE WSXML_SFG.REGISTROFACTURACION
						 SET CODRANGOCOMISION = @cCODRANGOCOMISION,
							 COMISIONANTICIPO = @cCOMISIONANTICIPO
					   WHERE ID_REGISTROFACTURACION =
							 @tREGISTRO__ID_REGISTROFACTURACION;
					END TRY
					BEGIN CATCH
						SET @tmpmsg = '-20054 No se pudo actualizar el registro de venta: ' +
												ISNULL(CONVERT(VARCHAR,@tREGISTRO__ID_REGISTROFACTURACION), '') + ': ' +
												isnull(ERROR_MESSAGE ( ) , '');
						RAISERROR(@tmpmsg, 16, 1);
					END CATCH
				END;

					IF @tREGISTRO__CODTIPOREGISTRO = @VENTAFACT OR @tREGISTRO__CODTIPOREGISTRO = @ANULACION
					/* Impuestos */
						BEGIN
						DELETE FROM WSXML_SFG.IMPUESTOREGFACTURACION
						 WHERE CODREGISTROFACTURACION = @tREGISTRO__ID_REGISTROFACTURACION;
                       
						   DECLARE tPRODUCTOIMPUESTO CURSOR FOR 
						   SELECT IMP.ID_IMPUESTO, PRIM.ID_PRODUCTOIMPUESTO, ISNULL(PRIM.Valorporcentual,0) AS Valorporcentual, ISNULL(prim.Valortransaccional,0) AS Valortransaccional
													FROM WSXML_SFG.PUNTODEVENTA PDV, WSXML_SFG.CIUDADIMPUESTO CIMP, WSXML_SFG.IMPUESTO IMP, WSXML_SFG.PRODUCTOIMPUESTO PRIM
												   WHERE PDV.ID_PUNTODEVENTA = @cCODPUNTODEVENTA
													 AND PDV.CODCIUDAD = CIMP.CODCIUDAD
													 AND CIMP.CODIMPUESTO = IMP.ID_IMPUESTO
													 AND CIMP.ACTIVE = 1
													 AND IMP.ID_IMPUESTO = PRIM.CODIMPUESTO
													 AND IMP.ACTIVE = 1
													 AND PRIM.CODPRODUCTO = @cCODPRODUCTO
													 AND PRIM.ACTIVE = 1; OPEN tPRODUCTOIMPUESTO;

						 DECLARE @tPRODUCTOIMPUESTO__ID_IMPUESTO NUMERIC(38,0), @tPRODUCTOIMPUESTO__ID_PRODUCTOIMPUESTO NUMERIC(38,0), @tPRODUCTOIMPUESTO__Valorporcentual FLOAT, @tPRODUCTOIMPUESTO__Valortransaccional FLOAT
			 
						 FETCH tPRODUCTOIMPUESTO INTO @tPRODUCTOIMPUESTO__ID_IMPUESTO, @tPRODUCTOIMPUESTO__ID_PRODUCTOIMPUESTO, @tPRODUCTOIMPUESTO__Valorporcentual, @tPRODUCTOIMPUESTO__Valortransaccional;
			 
						 WHILE @@FETCH_STATUS=0
						 BEGIN
						   BEGIN TRY
							DECLARE @cCODIMPUESTOREGFACTURACION NUMERIC(22,0);
							DECLARE @cPORCENTUALVALUE FLOAT =0;
							DECLARE @cTRANSACTIONALVALUE FLOAT =0;
							DECLARE @cTHISIMPUESTO FLOAT = 0;
							DECLARE @cTHISIMPUESTOROUNDED FLOAT = 0;                
							DECLARE @cTHISBASECALC FLOAT = 0;
				
							--calcular la base porcerntual
							SET @cTHISBASECALC = (@cVALORVENTANETA / (1 + (@tPRODUCTOIMPUESTO__Valorporcentual / 100)));
							--calcular el valor por transccion
							SET @cTRANSACTIONALVALUE = (@tREGISTRO__Numtransacciones * @tPRODUCTOIMPUESTO__Valortransaccional);
							SET @cTHISIMPUESTOROUNDED =( @tREGISTRO__Numtransacciones * ROUND(@tPRODUCTOIMPUESTO__Valortransaccional,0));
							--restar el valor por transaccion  a la base
							SET @cTHISBASECALC = @cTHISBASECALC - @cTRANSACTIONALVALUE;
							--calcular el valor porcentual 
							SET @cPORCENTUALVALUE = (@cTHISBASECALC * (@tPRODUCTOIMPUESTO__Valorporcentual / 100));

							SET @cTHISIMPUESTOROUNDED = @cTHISIMPUESTOROUNDED +  ROUND(@cPORCENTUALVALUE,0);
							SET @cTHISIMPUESTO=@cTRANSACTIONALVALUE + @cPORCENTUALVALUE;  
              
							IF @cTHISIMPUESTO IS NOT NULL AND @cTHISIMPUESTO > 0 BEGIN
							  EXEC WSXML_SFG.SFGIMPUESTOREGFACTURACION_AddRecord
																 @tPRODUCTOIMPUESTO__ID_IMPUESTO,
																  @tPRODUCTOIMPUESTO__ID_PRODUCTOIMPUESTO,
																  @cCODENTRADAARCHIVOCONTROL,
																  @tREGISTRO__ID_REGISTROFACTURACION,
																  @tREGISTRO__CODTIPOREGISTRO,
																  @cTHISIMPUESTOROUNDED,
																  @cCODUSUARIOMODIFICACION,
																  @cCODIMPUESTOREGFACTURACION OUT

								IF @cCODIMPUESTOREGFACTURACION IS NOT NULL AND @cCODIMPUESTOREGFACTURACION > 0 BEGIN
								SET @cSUMIMPUESTOS = @cSUMIMPUESTOS + @cTHISIMPUESTO;
								SET @cRNDIMPUESTOS = @cRNDIMPUESTOS + @cTHISIMPUESTOROUNDED;
							  END
							  ELSE BEGIN
								RAISERROR('-20054 No se pudo ingresar registro de impuesto', 16, 1);
							  END 
							END 
						   END TRY
						   BEGIN CATCH

								SET @tmpmsg = 'No se pudo ingresar registro de impuesto: : ' + ISNULL(CONVERT(VARCHAR,@tREGISTRO__ID_REGISTROFACTURACION), '') + ': ' + isnull(ERROR_MESSAGE ( ) , '');
								EXEC WSXML_SFG.SFGTMPTRACE_TraceLog @tmpmsg
								SET @tmpmsg = '-20054 No se pudo ingresar registro de impuesto: ' + ISNULL(CONVERT(VARCHAR,@tREGISTRO__ID_REGISTROFACTURACION), '') + ': ' + isnull(ERROR_MESSAGE ( ) , '')
								RAISERROR(@tmpmsg, 16, 1);
							END CATCH
				

							FETCH tPRODUCTOIMPUESTO INTO @tPRODUCTOIMPUESTO__ID_IMPUESTO, @tPRODUCTOIMPUESTO__ID_PRODUCTOIMPUESTO, @tPRODUCTOIMPUESTO__Valorporcentual, @tPRODUCTOIMPUESTO__Valortransaccional;
						 END;

						 CLOSE tPRODUCTOIMPUESTO;
						 DEALLOCATE tPRODUCTOIMPUESTO;
                
						--03 de Abril 2017-- Modificacion para aplicar descuentos a la venta neta por Guillermo Niño
						DELETE FROM WSXML_SFG.REGISTROFACTDESCUENTO WHERE CODREGISTROFACTURACION =  @tREGISTRO__ID_REGISTROFACTURACION;
                
						DECLARE tDescuento CURSOR FOR 
											SELECT  PRODUCTODESCUENTO.ID_PRODUCTODESCUENTO,
													PRODUCTODESCUENTO.VALORTRANSACCIONAL, 
													PRODUCTODESCUENTO.VALORPORCENTUAL
											 FROM WSXML_SFG.PRODUCTODESCUENTO
											 WHERE CODPRODUCTO = @cCODPRODUCTO
											 AND CODCIUDAD= @cCODCIUDAD
											 AND ACTIVE= 1;
                
						OPEN tDescuento;
						DECLARE @tDescuento__ID_PRODUCTODESCUENTO NUMERIC(38,0), @tDescuento__VALORTRANSACCIONAL FLOAT, @tDescuento__VALORPORCENTUAL FLOAT
						FETCH tDescuento INTO @tDescuento__ID_PRODUCTODESCUENTO, @tDescuento__VALORTRANSACCIONAL, @tDescuento__VALORPORCENTUAL
						WHILE @@FETCH_STATUS=0
						BEGIN
						  DECLARE @cCODREGISTROFACTDESCUENTO NUMERIC(22,0);
						  DECLARE @thisDISCOUNT FLOAT;
						  BEGIN
							BEGIN TRY
									SET @thisDISCOUNT = 0;
									IF @tDescuento__VALORPORCENTUAL <>0 BEGIN
									   SET @thisDISCOUNT= @cVALORVENTANETA*(@tDescuento__VALORPORCENTUAL/100);
									END 
									IF @tDescuento__VALORTRANSACCIONAL <>0 BEGIN
									  SET @thisDISCOUNT=@thisDISCOUNT+( @tREGISTRO__Numtransacciones*@tDescuento__VALORTRANSACCIONAL);
									END  
									--thisDISCOUNT:=ROUND(thisDISCOUNT);
									SET @cSUMDESCUENTOS=@cSUMDESCUENTOS+@thisDISCOUNT;
									EXEC WSXML_SFG.SFGREGISTROFACTDESCUENTO_AddRecord @tDescuento__ID_PRODUCTODESCUENTO,
																		@cCODENTRADAARCHIVOCONTROL,
																		@tREGISTRO__ID_REGISTROFACTURACION,
																		@tREGISTRO__CODTIPOREGISTRO,
																		@thisDISCOUNT,
																		@cCODUSUARIOMODIFICACION,
																		@cCODREGISTROFACTDESCUENTO OUT
							END TRY
							BEGIN CATCH
									  SET @tmpmsg = '-20054 No se pudo ingresar registro de descuentos : ' +
															  ISNULL(CONVERT(VARCHAR,@tREGISTRO__ID_REGISTROFACTURACION), '') + ': ' +
															  isnull(ERROR_MESSAGE ( ) , '');
									  RAISERROR(@tmpmsg, 16, 1);
							END CATCH
						  END;

						FETCH tDescuento INTO @tDescuento__ID_PRODUCTODESCUENTO, @tDescuento__VALORTRANSACCIONAL, @tDescuento__VALORPORCENTUAL
						END;

						CLOSE tDescuento;
						DEALLOCATE tDescuento;                 
       
						SET @cVALORVENTABRUTA = ((@cVALORVENTANETA-ROUND(@cSUMDESCUENTOS,0)) - @cRNDIMPUESTOS);
						SET @cVALORVENTANETA  = ((@cVALORVENTANETA-@cSUMDESCUENTOS) - @cSUMIMPUESTOS);
						EXEC WSXML_SFG.SFGREGISTROFACTURACION_UpdateRecordVentaBruta @tREGISTRO__ID_REGISTROFACTURACION,
																	  @cVALORVENTABRUTA,
																	  @cVALORVENTANETA,
																	  @cCODUSUARIOMODIFICACION

						EXEC WSXML_SFG.SFGREGISTROFACTURACION_UpdateRecordDescuento @tREGISTRO__ID_REGISTROFACTURACION,@cSUMDESCUENTOS
				  ---                        
                                                              
				  END;


					DECLARE @cVARIABLEPORCENTUAL NUMERIC(22,0) = 0;
					DECLARE @cVARIABLETRANSACCNL NUMERIC(22,0) = 0;
					BEGIN
						BEGIN TRY
							IF @xObtenerReglas = 1 BEGIN
							  -- Vuelve a obtener los valores de la comision variable
							  EXEC WSXML_SFG.SFGCATEGORIAPAGO_GetComissionRecordValuesByProd  @cCODPUNTODEVENTA,
																			  @cCODPRODUCTO,
																			  @cCODCATEGORIAPAGO OUT,
																			  @cVARIABLEPORCENTUAL OUT,
																			  @cVARIABLETRANSACCNL OUT
							END
							ELSE BEGIN
								  -- Utiliza la comision variable originalmente utilizada
								  SELECT @cCODCATEGORIAPAGO = ISNULL(CODCATEGORIAPAGO, 0)
								  FROM WSXML_SFG.REGISTROFACTURACION
								  WHERE ID_REGISTROFACTURACION = @tREGISTRO__ID_REGISTROFACTURACION;

								  EXEC WSXML_SFG.SFGCATEGORIAPAGO_GetComissionRecordValuesFromID @cCODCATEGORIAPAGO,
																				  @cVARIABLEPORCENTUAL,
																				  @cVARIABLETRANSACCNL
							END 

							/* C?lculo del valor de la comision */
							IF @flagADVANCEDCOMMISSION <> 0 BEGIN
								DECLARE @valueCOMMISSIONINQUIRY FLOAT = 0;
								DECLARE @valueCOMMISSIONTRANSCC FLOAT = 0;
								DECLARE @valueCOMMISSIONJOINTTX FLOAT = 0;
								DECLARE @advtypecodes           WSXML_SFG.IDCOMPLEXVALUE;
								DECLARE @conditionalNUMTRANSACC NUMERIC(22,0) = 0;
								  BEGIN
									INSERT INTO @advtypecodes
									SELECT ID_REGISTROFACTTRANSAVANZADO,
														  CODTIPOTRANSAVANZADO,
														  CANTIDADTRANSACCIONES
                      
									  FROM WSXML_SFG.REGISTROFACTTRANSAVANZADO
									 WHERE CODREGISTROFACTURACION = @tREGISTRO__ID_REGISTROFACTURACION;
									IF @@ROWCOUNT > 0 BEGIN
									  DECLARE txdv CURSOR FOR SELECT ID, MARKUP, VALUE  FROM @advtypecodes
									  OPEN txdv;

										DECLARE @txdv__ID NUMERIC(38,0), @txdv__MARKUP FLOAT, @txdv__VALUE FLOAT
										FETCH NEXT FROM txdv INTO @txdv__ID, @txdv__MARKUP, @txdv__VALUE;
										WHILE @@FETCH_STATUS=0
										BEGIN
											IF @txdv__MARKUP = @FEEINQUIRY BEGIN
												IF @txdv__VALUE > 0 BEGIN
													SET @valueCOMMISSIONINQUIRY = @txdv__VALUE * (SELECT  VALORTRANSACCIONAL FROM @p_cur_ADVANCEDLISTCOMMISSIONS WHERE ID = @FEEINQUIRY);
													IF @valueCOMMISSIONINQUIRY > 0 BEGIN
														SET @conditionalNUMTRANSACC = @conditionalNUMTRANSACC + @txdv__VALUE
													END 
												END
							

												EXEC WSXML_SFG.SFGREGISTROFACTTRANSAVANZADO_UpdateCommissionValues
														@txdv__ID,
														@valueCOMMISSIONINQUIRY

												SET @cVALORCOMISION = @cVALORCOMISION + @valueCOMMISSIONINQUIRY;
											END
											ELSE IF @txdv__MARKUP = @FTRANSACTION BEGIN
												  IF @txdv__VALUE > 0 BEGIN
													SET @valueCOMMISSIONTRANSCC = @txdv__VALUE * (SELECT  VALORTRANSACCIONAL FROM @p_cur_ADVANCEDLISTCOMMISSIONS WHERE ID = @FTRANSACTION);
													IF @valueCOMMISSIONTRANSCC > 0 BEGIN
													  SET @conditionalNUMTRANSACC = @conditionalNUMTRANSACC + @txdv__VALUE
													END 
												  END
												  exec WSXML_SFG.SFGREGISTROFACTTRANSAVANZADO_UpdateCommissionValues @txdv__ID, @valueCOMMISSIONTRANSCC
												  SET @cVALORCOMISION = @cVALORCOMISION + @valueCOMMISSIONTRANSCC;
											END
											ELSE IF @txdv__MARKUP = @BOTH BEGIN
												  IF @txdv__VALUE > 0 BEGIN
													SET @valueCOMMISSIONJOINTTX = @txdv__VALUE * (SELECT  VALORTRANSACCIONAL FROM @p_cur_ADVANCEDLISTCOMMISSIONS WHERE ID = @BOTH);
													IF @valueCOMMISSIONJOINTTX > 0 BEGIN
													  SET @conditionalNUMTRANSACC = @conditionalNUMTRANSACC + @txdv__VALUE;
													END 
												  END
												  EXEC WSXML_SFG.SFGREGISTROFACTTRANSAVANZADO_UpdateCommissionValues @txdv__VALUE,@valueCOMMISSIONJOINTTX
												  SET @cVALORCOMISION = @cVALORCOMISION + @valueCOMMISSIONJOINTTX;
                        
											END 
											FETCH NEXT FROM txdv INTO @txdv__ID, @txdv__MARKUP, @txdv__VALUE;
										END
										CLOSE txdv
										DEALLOCATE txdv
						
									END 
									-- Update conditional number of transactions
									IF @conditionalNUMTRANSACC <> @tREGISTRO__NUMTRANSACCIONES
										EXEC WSXML_SFG.SFGREGISTROFACTURACION_OverwriteConditionTransactions @tREGISTRO__ID_REGISTROFACTURACION, @conditionalNUMTRANSACC
                    
									END
                   
							  END;

							ELSE
							  IF @cCODTIPOCOMISION = 1 BEGIN
								-- El tipo de comision es porcentual
								SET @cVALORCOMISION = ((@cVALORVENTANETA *
												  (@cVALCALCPORCENTUA +
												  @cVARIABLEPORCENTUAL)) / 100);
							  END
							  ELSE IF @cCODTIPOCOMISION = 2 BEGIN
								-- El tipo de comision es transaccional
								SET @cVALORCOMISION = ((@cVALCALCTRANSCCNL +
												  @cVARIABLETRANSACCNL) *
												  @tREGISTRO__NUMTRANSACCIONES);
							  END
							  ELSE IF @cCODTIPOCOMISION = 3 BEGIN
								-- El tipo de comision es Mixto
								SET @cVALORCOMISION = ((@cVALORVENTANETA *
												  (@cVALCALCPORCENTUA +
												  @cVARIABLEPORCENTUAL)) / 100) +
												  ((@cVALCALCTRANSCCNL +
												  @cVARIABLETRANSACCNL) *
												  @tREGISTRO__NUMTRANSACCIONES);
							  END
							  ELSE BEGIN
								SET @cVALORCOMISION = 0;
							  END 


							  -- Valor de IVA de comision dependiente del tipo de contrato
								IF  @cCODTIPOCONTRATOPDV IN (1, 2, 4, 5 ) BEGIN
									SET @cVALORVAT = WSXML_SFG.SFGVATCOMISIONREGIMEN_GetVatValue(@cCODPUNTODEVENTA,@cCODPRODUCTO);
								END
								ELSE IF @cCODTIPOCONTRATOPDV = 3 BEGIN
									SET @cVALORVAT = WSXML_SFG.SFGTRIBUTARIOALIADOESTRATEGICO_GetVatValue(@cCODPRODUCTO, @cCODREGIMEN, @cCODCIUDAD);
								END 
								-- IVA de comision solo si no es anticipo
								IF @cCOMISIONANTICIPO = 0 BEGIN
								  SET @cIVACOMISION = ((@cVALORCOMISION * @cVALORVAT) / 100);
								END
								ELSE BEGIN
								  SET @cIVACOMISION = 0;
								END 
								SET @cVALORCOMISIONBRUTA = ROUND(@cVALORCOMISION,0) + ROUND(@cIVACOMISION,0);
							END TRY
							BEGIN CATCH
					
								SET @msg = '-20054 No se puede calcular la comision: ' + isnull(ERROR_MESSAGE ( ) , '');
								RAISERROR(@msg, 16, 1);
							END CATCH

					END;


					-- ELIMINAR RETENCIONES APLICADAS PREVIAMENTE
					DELETE FROM WSXML_SFG.RETENCIONREGFACTURACION
					   WHERE CODREGISTROFACTURACION =
							 @tREGISTRO__ID_REGISTROFACTURACION;
					DELETE FROM WSXML_SFG.RETUVTREGFACTURACION
					   WHERE CODREGISTROFACTURACION =
							 @tREGISTRO__ID_REGISTROFACTURACION;
				  -- Retenciones sobre la comision solo si existi? comision
				  IF @cVALORCOMISION IS NOT NULL AND @cVALORCOMISION <> 0 BEGIN
					SET @cVALORVENTANETA    = @cVALORVENTANETA - @cVALORCOMISIONBRUTA;
					SET @cVALORCOMISIONNETA = @cVALORCOMISION; -- Retenciones calculadas sobre comision sin iva

					/* Retenciones */
					  DECLARE @retenciones WSXML_SFG.BILLINGTAX;
					BEGIN
					  IF @cCOMISIONANTICIPO = 0 BEGIN
						-- Retenciones dependiendo del tipo de contrato del pdv
						IF @cCODTIPOCONTRATOPDV IN (1, 2, 4, 5) BEGIN

							INSERT INTO @retenciones
							SELECT ID_RETENCIONTRIBUTARIA, VALOR, CODBASERETENCION 
							FROM WSXML_SFG.SFGRETENCIONTRIBUTARIA_GetBillingTaxListByPOS(@cCODPRODUCTO,@cCODCIUDAD,@cCODREGIMEN,@cCODCOMPANIA,@cCODTIPOPERSONATRIBUTARIA,@cCODTIPOCONTRATOPDV)

						END
						ELSE IF @cCODTIPOCONTRATOPDV = 3 BEGIN
							INSERT INTO @retenciones
							SELECT * FROM WSXML_SFG.SFGRETENCIONTRIBUTARIA_GetBillingTaxListByProduct(@cCODALIADOESTRATEGICO,@cCODCIUDAD,@cCODREGIMEN)
						END 
						IF (SELECT COUNT(*) FROM @retenciones) > 0 BEGIN
						  DECLARE rt CURSOR FOR SELECT * FROM @retenciones
						  OPEN rt;
						  DECLARE @rt__ID_RETENCIONTRIBUTARIA NUMERIC(38,0), @rt__VALOR FLOAT, @rt__CODBASERETENCION NUMERIC(38,0)
						  FETCH next FROM rt INTO @rt__ID_RETENCIONTRIBUTARIA, @rt__VALOR, @rt__CODBASERETENCION
					  
						  WHILE @@FETCH_STATUS=0
						  BEGIN
						
							  BEGIN TRY
								DECLARE @cCODRETENCIONREGFACTURACION NUMERIC(22,0);
								DECLARE @cTHISRETENCION              FLOAT = 0;
								BEGIN
									  IF @rt__CODBASERETENCION = 1
										-- Comision Bruta
										SET @cTHISRETENCION = ((@cVALORCOMISIONNETA * @rt__VALOR) / 100);
									  ELSE IF @rt__CODBASERETENCION = 2
										-- IVA Comision
										SET @cTHISRETENCION = ((@cIVACOMISION * @rt__VALOR) / 100);
									  ELSE
										SET @cTHISRETENCION = 0;
								END
									/*Guillermo Ni?o -- 27 06 2013 -- */
								IF @cTHISRETENCION > 0.1 and @cTHISRETENCION < 0.5 BEGIN
									  SET @cTHISRETENCION =1;
								END


								IF @cTHISRETENCION IS NOT NULL AND @cTHISRETENCION <> 0 BEGIN
									SET @cTHISRETENCION = ROUND(@cTHISRETENCION,0)
									EXEC WSXML_SFG.SFGRETENCIONREGFACTURACION_AddRecord
																		@rt__ID_RETENCIONTRIBUTARIA,
																		cCODENTRADAARCHIVOCONTROL,
																		@tREGISTRO__ID_REGISTROFACTURACION,
																		@tREGISTRO__CODTIPOREGISTRO,
																		@cTHISRETENCION,
																		@cCODUSUARIOMODIFICACION,
																		@cCODRETENCIONREGFACTURACION OUT
																 
									IF @cCODRETENCIONREGFACTURACION IS NOT NULL AND @cCODRETENCIONREGFACTURACION > 0 BEGIN
									  SET @cSUMRETENCIONES = @cSUMRETENCIONES + ROUND(@cTHISRETENCION,0);
									END 
								 END 

							  END TRY
							  BEGIN CATCH
                        
								SET @tmpmsg = '-20054 No se pudo ingresar registro de retención: ' + ISNULL(CONVERT(VARCHAR,@tREGISTRO__ID_REGISTROFACTURACION), '') + ': ' + isnull(ERROR_MESSAGE ( ) , '');
								RAISERROR(@tmpmsg, 16, 1);
							  END CATCH

							  FETCH next FROM rt INTO @rt__ID_RETENCIONTRIBUTARIA, @rt__VALOR, @rt__CODBASERETENCION

						  END 
						  CLOSE rt
						  DEALLOCATE rt

						END 

					   END

					END
					SET @cVALORCOMISIONNETA = @cVALORCOMISIONBRUTA - @cSUMRETENCIONES; -- Se suma IVA
				  END 


			   END

				-- Actualizar el registro
				BEGIN
					BEGIN TRY
						SET @cVALORCOMISION = ROUND(@cVALORCOMISION,0)
						SET @cIVACOMISION = ROUND(@cIVACOMISION,0)
						EXEC WSXML_SFG.SFGREGISTROFACTURACION_UpdateRecordComisionVenta 
																		@tREGISTRO__ID_REGISTROFACTURACION,
																		@cCODRANGOCOMISION,
																		 @cCODCATEGORIAPAGO,
																		 @cVALORCOMISION,
																		 @cVALORCOMISION,
																		 @cIVACOMISION,
																		 @cVALORVAT,
																		 @cVALORCOMISIONBRUTA,
																		 @cVALORCOMISIONNETA,
																		 @cVALORVENTANETA,
																		 @cCODUSUARIOMODIFICACION
					END TRY
					BEGIN CATCH
						  SET @tmpmsg = '-20054 No se pudo actualizar el valor de la comisi?n despues de calcular la retención: ' +
												  ISNULL(CONVERT(VARCHAR,@tREGISTRO__ID_REGISTROFACTURACION), '') + ': ' +
												  isnull(ERROR_MESSAGE ( ) , '');
						  RAISERROR(@tmpmsg, 16, 1);

					END CATCH
				END;




				  -- Recalcular revenue solo si cambio la comision
				  /*IF @tREGISTRO__VALORCOMISION <> cVALORCOMISION THEN
					SFGREGISTROREVENUE.CalcularRevenueRegistro(@tREGISTRO__ID_REGISTROFACTURACION);
				  END IF;*/
					IF @tREGISTRO__CODTIPOREGISTRO = @FREETICKT 
						SELECT NULL;
					ELSE IF @tREGISTRO__CODTIPOREGISTRO = @PREMIOPAG BEGIN
						-- Actualizar el valor de venta neta. No se puede hacer nada con las retenciones de premios.
					  UPDATE WSXML_SFG.REGISTROFACTURACION
						 SET VALORVENTANETA = VALORTRANSACCION
					   WHERE ID_REGISTROFACTURACION =
							 @tREGISTRO__ID_REGISTROFACTURACION;
					END


					SET @countrows = @countrows + 1;
					  IF (@countrows % 50) = 0 BEGIN
						EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA, countrows
					  END 
					  /*COMMIT;*/
			END TRY
			BEGIN CATCH
              SET @msg = 'RECALCULAR: ' + isnull(ERROR_MESSAGE ( ) , '');
              EXEC WSXML_SFG.SFGTMPTRACE_TraceLog @msg
			END CATCH
		FETCH NEXT FROM tREGISTRO INTO @tREGISTRO__ID_REGISTROFACTURACION,
                                 @tREGISTRO__CODPRODUCTO,
                                 @tREGISTRO__CODPUNTODEVENTA,
                                 @tREGISTRO__CODTIPOREGISTRO,
                                 @tREGISTRO__VALORTRANSACCION,
                                 @tREGISTRO__NUMTRANSACCIONES,
                                 @tREGISTRO__VALORCOMISION;

      END;
		
		 CLOSE tREGISTRO
		 DEALLOCATE tREGISTRO
		 
         -- Retenciones UVT se debe lanzar de nuevo
         UPDATE WSXML_SFG.ENTRADAARCHIVOCONTROL
           SET UVTCALCULADO = 0
         WHERE ID_ENTRADAARCHIVOCONTROL = @cCODENTRADAARCHIVOCONTROL;
      END;

    END

    ---Calcular los productos de revenue afectados Guillermo Ni?o 30 01 2013
	/*COMMIT;*/

    DECLARE CUR_PRODUCTO CURSOR FOR SELECT PRODUCTO.ID_PRODUCTO
                           FROM WSXML_SFG.PRODUCTO
                          INNER JOIN WSXML_SFG.TIPOPRODUCTO
                             ON PRODUCTO.CODTIPOPRODUCTO =
                                TIPOPRODUCTO.ID_TIPOPRODUCTO
                          INNER JOIN WSXML_SFG.LINEADENEGOCIO
                             ON TIPOPRODUCTO.CODLINEADENEGOCIO =
                                LINEADENEGOCIO.ID_LINEADENEGOCIO
                          WHERE LINEADENEGOCIO.CODSERVICIO = @p_TIPOARCHIVO; OPEN CUR_PRODUCTO;

	 DECLARE @CUR_PRODUCTO__ID_PRODUCTO NUMERIC(38,0)
	 FETCH NEXT FROM CUR_PRODUCTO INTO @CUR_PRODUCTO__ID_PRODUCTO;
	 WHILE @@FETCH_STATUS=0
	 BEGIN
		BEGIN
			BEGIN TRY
			 EXEC WSXML_SFG.SFGREGISTROREVENUE_CalcularRevenueProducto @p_FECHAARCHIVO, @CUR_PRODUCTO__ID_PRODUCTO
			END TRY
			BEGIN CATCH
					SET @msg = 'Error on Invoked Product Revenue Calculation for ' +
								 ISNULL(FORMAT(@p_FECHAARCHIVO, 'dd/MM/yyyy'), '') + ' ' +
								 ISNULL(CONVERT(VARCHAR, @CUR_PRODUCTO__ID_PRODUCTO), '')
					 EXEC WSXML_SFG.sfgtmptrace_tracelog @msg
			END CATCH
        END;
		FETCH NEXT FROM CUR_PRODUCTO INTO @CUR_PRODUCTO__ID_PRODUCTO;
     END;

     CLOSE CUR_PRODUCTO;
     DEALLOCATE CUR_PRODUCTO;

     EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_FinalizeExecution @p_CODDETALLETAREAEJECUTADA, 'Se ha recalculado la prefacturación del archivo correctamente'
     SET @p_RETVALUE_out = @p_FINALIZADAOK;

 END TRY
 BEGIN CATCH
	
      SET @msg            = 'Error al recalcular la prefacturación: ' + isnull(ERROR_MESSAGE ( ) , '');
	  PRINT @msg
      SET @p_RETVALUE_out = @p_FINALIZADAFALLO
      EXEC WSXML_SFG.SFGALERTA_GenerarAlerta  @p_TIPOERROR, 'RECALCULAR_PREFACTURACION', @msg, 1;
      EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_FinalizeExecution  @p_CODDETALLETAREAEJECUTADA, @msg;
 END CATCH  
END;
GO


IF OBJECT_ID('WSXML_SFG.SFGREGISTROFACTURACION_RecalcularPrefactRegistro', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_RecalcularPrefactRegistro;
GO



CREATE PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_RecalcularPrefactRegistro(@pk_ID_REGISTROFACTURACION NUMERIC(22,0),
                                      @p_RETVALUE_out            NUMERIC(22,0) OUT) AS
 BEGIN
    DECLARE @msg            VARCHAR(MAX);
    DECLARE @xControlFile   NUMERIC(22,0);
    DECLARE @xObtenerReglas NUMERIC(22,0) = 1;
   
  SET NOCOUNT ON;
    BEGIN
		BEGIN TRY
			EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'RecalculoObtenerReglas', @xObtenerReglas OUT
		END TRY
		BEGIN CATCH
			SET @xObtenerReglas = 1;
		END CATCH
    END;

	DECLARE
			@p_REGISTRADA      			TINYINT,
			@p_INICIADA         		TINYINT,
			@p_FINALIZADAOK 			TINYINT,
			@p_FINALIZADAFALLO  		TINYINT,
			@p_ABORTADA  				TINYINT,
			@p_NOINICIADA  				TINYINT,
			@p_FINALIZADAADVERTENCIA  	TINYINT 
	EXEC WSXML_SFG.SFGESTADOTAREAEJECUTADA_CONSTANT
			@p_REGISTRADA      			 OUT,
			@p_INICIADA         		 OUT,
			@p_FINALIZADAOK 			 OUT,
			@p_FINALIZADAFALLO  		 OUT,
			@p_ABORTADA  				 OUT,
			@p_NOINICIADA  				 OUT,
			@p_FINALIZADAADVERTENCIA  	 OUT
    
	-- Obtener el identificador del archivo a recalcular
    DECLARE @xBilledFlag NUMERIC(22,0) = 0;
    BEGIN
		SELECT @xControlFile = CTR.ID_ENTRADAARCHIVOCONTROL, @xBilledFlag = CTR.FACTURADO
	    FROM WSXML_SFG.ENTRADAARCHIVOCONTROL CTR
			INNER JOIN WSXML_SFG.REGISTROFACTURACION REG ON (REG.CODENTRADAARCHIVOCONTROL = CTR.ID_ENTRADAARCHIVOCONTROL)
		WHERE REG.ID_REGISTROFACTURACION = @pk_ID_REGISTROFACTURACION;

		IF @@ROWCOUNT = 0 BEGIN
			RAISERROR('-20054 El registro de prefacturacion es invalido', 16, 1);
			RETURN 0
		END

		IF @xBilledFlag = 1 BEGIN
		    RAISERROR('-20035 No se puede recalcular la prefacturacion para un archivo ya facturado', 16, 1);
			RETURN 0
		END 
    END;

	DECLARE @VENTAFACT SMALLINT,
        @ANULACION SMALLINT,
		@FREETICKT SMALLINT,
		@PREMIOPAG SMALLINT,
		@RGSTOTROS SMALLINT,
		@VENNOFACT SMALLINT 

	  EXEC WSXML_SFG.SFGTIPOREGISTRO_CONSTANT
						@VENTAFACT OUT,
						@ANULACION OUT,
						@FREETICKT OUT,
						@PREMIOPAG OUT,
						@RGSTOTROS OUT,
						@VENNOFACT OUT


      /* Rule like values */
      DECLARE @cCODTIPOREGISTRO  NUMERIC(22,0);
      DECLARE @cCODPRODUCTO      NUMERIC(22,0);
      DECLARE @cCODPUNTODEVENTA  NUMERIC(22,0);
      DECLARE @cNUMTRANSACCIONES NUMERIC(22,0);
      DECLARE @cVALORVENTABRUTA  FLOAT;
      DECLARE @cVALORVENTANETA   FLOAT;
      DECLARE @cCODTIPOPERSONATRIBUTARIA NUMERIC(22,0);
      /* Original comparison value types */
      DECLARE @originalCOMMISSION    FLOAT = 0;
      DECLARE @originalCOMMISSIONVAT FLOAT = 0;
      /* New prebilling valores */
      DECLARE @cCODRANGOCOMISION NUMERIC(22,0) = 0;
      DECLARE @cCODTIPOCOMISION  NUMERIC(22,0) = 0;
      DECLARE @cCOMISIONANTICIPO NUMERIC(22,0) = 0;
      DECLARE @cVALCALCPORCENTUA FLOAT = 0;
      DECLARE @cVALCALCTRANSCCNL FLOAT = 0;
      DECLARE @cCODCATEGORIAPAGO NUMERIC(22,0);
      DECLARE @cPLANTILLA        NUMERIC(22,0);
      /* Generic commission holders */
      DECLARE @cVALORCOMISION          FLOAT = 0;
      DECLARE @cIVACOMISION            FLOAT = 0;
      DECLARE @cVALORVAT               FLOAT = 0;
      DECLARE @cVALORCOMISIONBRUTA     FLOAT = 0;
      DECLARE @cVALORCOMISIONNETA      FLOAT = 0;
      DECLARE @cSUMRETENCIONES         FLOAT = 0;
      DECLARE @cSUMIMPUESTOS           FLOAT = 0;
      DECLARE @cSUMDESCUENTOS          FLOAT = 0;
      DECLARE @cRNDIMPUESTOS           FLOAT = 0;
      DECLARE @cCODUSUARIOMODIFICACION NUMERIC(22,0) = 1;
      /* Rule watermark */
      DECLARE @cCODREGIMEN                NUMERIC(22,0);
      DECLARE @cCODAGRUPACIONPUNTODEVENTA NUMERIC(22,0);
      DECLARE @cCODREDPDV                 NUMERIC(22,0);
      DECLARE @cIDENTIFICACION            NUMERIC(22,0);
      DECLARE @cDIGITOVERIFICACION        NUMERIC(22,0);
      DECLARE @cCODCIUDAD                 NUMERIC(22,0);
      DECLARE @cCODCOMPANIA               NUMERIC(22,0);
      DECLARE @cCODALIADOESTRATEGICO      NUMERIC(22,0);
      DECLARE @cCODTIPOCONTRATOPDV        NUMERIC(22,0);
      DECLARE @cCODRAZONSOCIAL            NUMERIC(22,0);
      DECLARE @cCODTIPOCONTRATOPRODUCTO   NUMERIC(22,0);
      DECLARE @cCODDUENOTERMINAL          NUMERIC(22,0);
      DECLARE @cFACTURABLE                NUMERIC(22,0);
      DECLARE @tmpmsg                     NVARCHAR(2000);
      /* Advanced commission */
      DECLARE @flagADVANCEDCOMMISSION NUMERIC(22,0) = 0;
      DECLARE @advcommissions         CURSOR;--WSXML_SFG.ADVANCEDCOMMISSION;

	  DECLARE @FEEINQUIRY  SMALLINT,@FTRANSACTION SMALLINT, @BOTH  SMALLINT
					EXEC WSXML_SFG.SFGREGISTROFACTTRANSAVANZADO_CONSTANT
							  @FEEINQUIRY     OUT,
							  @FTRANSACTION   OUT,
							  @BOTH           OUT

    BEGIN
		BEGIN TRY
			  -- Obtain registry values
			  SELECT @cCODTIPOREGISTRO = CODTIPOREGISTRO,
					 @cCODPUNTODEVENTA = CODPUNTODEVENTA,
					 @cCODPRODUCTO = CODPRODUCTO,
					 @cNUMTRANSACCIONES = NUMTRANSACCIONES,
					 @cVALORVENTANETA = VALORTRANSACCION,
					 @originalCOMMISSION = VALORCOMISION,
					 @originalCOMMISSIONVAT = IVACOMISION
					   FROM WSXML_SFG.REGISTROFACTURACION
			   WHERE ID_REGISTROFACTURACION = @pk_ID_REGISTROFACTURACION;

			  IF @xObtenerReglas = 1 BEGIN
				-- Obtener nuevas reglas de facturaci?n y setear
				EXEC WSXML_SFG.SFGPUNTODEVENTA_ObtainBillingRules  
													@cCODPUNTODEVENTA,
												   @cCODPRODUCTO,
												   @cCODREGIMEN OUT,
												   @cCODAGRUPACIONPUNTODEVENTA OUT,
												   @cCODREDPDV OUT,
												   @cIDENTIFICACION OUT,
												   @cDIGITOVERIFICACION OUT,
												   @cCODCIUDAD OUT,
												   @cCODCOMPANIA OUT,
												   @cCODALIADOESTRATEGICO OUT,
												   @cCODTIPOCONTRATOPDV OUT,
												   @cCODRAZONSOCIAL OUT,
												   @cCODTIPOCONTRATOPRODUCTO OUT,
												   @cCODDUENOTERMINAL OUT,
												   @cFACTURABLE OUT

				EXEC WSXML_SFG.SFGREGISTROFACTURACION_AlterBillingRules 
														 @pk_ID_REGISTROFACTURACION,
														 @cCODCOMPANIA,
														 @cCODREGIMEN,
														 @cCODAGRUPACIONPUNTODEVENTA,
														 @cCODREDPDV,
														 @cIDENTIFICACION,
														 @cDIGITOVERIFICACION,
														 @cCODCIUDAD,
														 @cCODTIPOCONTRATOPDV,
														 @cCODRAZONSOCIAL,
														 @cCODTIPOCONTRATOPRODUCTO
			  END
			  ELSE BEGIN
				EXEC WSXML_SFG.SFGREGISTROFACTURACION_GetBillingRulesFromRegistry  
																@pk_ID_REGISTROFACTURACION,
																   @cCODCOMPANIA OUT,
																   @cCODREGIMEN OUT,
																   @cCODAGRUPACIONPUNTODEVENTA OUT,
																   @cCODREDPDV OUT,
																   @cIDENTIFICACION OUT,
																   @cDIGITOVERIFICACION OUT,
																   @cCODCIUDAD OUT,
																   @cCODTIPOCONTRATOPDV OUT,
																   @cCODRAZONSOCIAL OUT,
																   @cCODTIPOCONTRATOPRODUCTO OUT,
																   @cCODDUENOTERMINAL OUT
			  END 

				  /*24 jUNIO 2013 -- Obtener el tipo de persona tributaria*/
					EXEC WSXML_SFG.SFGPUNTODEVENTA_GetTipoPersonaTributaria @cCODPUNTODEVENTA,@cCODTIPOPERSONATRIBUTARIA

			  /* Busqueda de Comision */
			  EXEC WSXML_SFG.SFGPLANTILLAPRODUCTO_GetPinpointComissionValues 
																@cCODPUNTODEVENTA,
															  @cCODPRODUCTO,
															  @cCODRANGOCOMISION OUT,
															  @cCODTIPOCOMISION OUT,
															  @cCOMISIONANTICIPO OUT,
															  @cVALCALCPORCENTUA OUT,
															  @cVALCALCTRANSCCNL OUT,
															  @cPLANTILLA OUT,
															  @flagADVANCEDCOMMISSION OUT
				DECLARE @advcommissions__ID NUMERIC(38,0) = 0;
				DECLARE @advcommissions__CODRANGOCOMISION NUMERIC(38,0) = 0;
				DECLARE @advcommissions__CODTIPOCOMISION NUMERIC(38,0) = 0;
				DECLARE @advcommissions__COMISIONANTICIPO NUMERIC(38,0) = 0;
				DECLARE @advcommissions__VALORPORCENTUAL FLOAT = 0;
				DECLARE @advcommissions__VALORTRANSACCIONAL FLOAT = 0;

				DECLARE @p_cur_ADVANCEDLISTCOMMISSIONS WSXML_SFG.ADVANCEDCOMMISSION

			  IF @flagADVANCEDCOMMISSION > 0 BEGIN
					EXEC WSXML_SFG.SFGPLANTILLAPRODUCTO_GetAdvancedComissionValues @cCODPUNTODEVENTA,@cCODPRODUCTO,
																@advcommissions OUT

					FETCH NEXT FROM @advcommissions INTO @advcommissions__ID, @advcommissions__CODRANGOCOMISION, @advcommissions__CODTIPOCOMISION
								, @advcommissions__COMISIONANTICIPO, @advcommissions__VALORPORCENTUAL, @advcommissions__VALORTRANSACCIONAL
							WHILE @@FETCH_STATUS=0

							BEGIN
								INSERT INTO @p_cur_ADVANCEDLISTCOMMISSIONS VALUES (
														@advcommissions__ID,
														@advcommissions__CODRANGOCOMISION,
														@advcommissions__CODTIPOCOMISION,
														@advcommissions__COMISIONANTICIPO,
														@advcommissions__VALORPORCENTUAL,
														@advcommissions__VALORTRANSACCIONAL)

							FETCH NEXT FROM @advcommissions INTO @advcommissions__ID, @advcommissions__CODRANGOCOMISION, @advcommissions__CODTIPOCOMISION
								, @advcommissions__COMISIONANTICIPO, @advcommissions__VALORPORCENTUAL, @advcommissions__VALORTRANSACCIONAL
							END
							CLOSE @advcommissions
							DEALLOCATE @advcommissions

			  END 
			  IF (@cPLANTILLA IS NULL) BEGIN
				SET @tmpmsg = '-20054 No se encontró comisión Única para el punto de venta: ' +
										ISNULL(CONVERT(VARCHAR,@pk_ID_REGISTROFACTURACION), '') + ': ' + isnull(ERROR_MESSAGE ( ) , '');
				RAISERROR(@tmpmsg, 16, 1);
			  END 

			  /* Actualizacion de registro */
			  UPDATE WSXML_SFG.REGISTROFACTURACION
				 SET CODRANGOCOMISION = @cCODRANGOCOMISION,
					 COMISIONANTICIPO = @cCOMISIONANTICIPO
			   WHERE ID_REGISTROFACTURACION = @pk_ID_REGISTROFACTURACION;

			  IF @cCODTIPOREGISTRO = @VENTAFACT OR @cCODTIPOREGISTRO = @ANULACION BEGIN
				/* Impuestos: Deletion of previous records and reset */
				BEGIN
				  DELETE FROM WSXML_SFG.IMPUESTOREGFACTURACION
				   WHERE CODREGISTROFACTURACION = @pk_ID_REGISTROFACTURACION;
           
				 DECLARE tPRODUCTOIMPUESTO CURSOR FOR SELECT IMP.ID_IMPUESTO, PRIM.ID_PRODUCTOIMPUESTO, ISNULL(PRIM.Valorporcentual,0) AS Valorporcentual, ISNULL(prim.Valortransaccional,0) AS Valortransaccional
												FROM WSXML_SFG.PUNTODEVENTA PDV, WSXML_SFG.CIUDADIMPUESTO CIMP, WSXML_SFG.IMPUESTO IMP, WSXML_SFG.PRODUCTOIMPUESTO PRIM
											   WHERE PDV.ID_PUNTODEVENTA = @cCODPUNTODEVENTA
												 AND PDV.CODCIUDAD = CIMP.CODCIUDAD
												 AND CIMP.CODIMPUESTO = IMP.ID_IMPUESTO
												 AND CIMP.ACTIVE = 1
												 AND IMP.ID_IMPUESTO = PRIM.CODIMPUESTO
												 AND IMP.ACTIVE = 1
												 AND PRIM.CODPRODUCTO = @cCODPRODUCTO
												 AND PRIM.ACTIVE = 1; OPEN tPRODUCTOIMPUESTO;

					DECLARE @tPRODUCTOIMPUESTO__ID_IMPUESTO NUMERIC(38,0), @tPRODUCTOIMPUESTO__ID_PRODUCTOIMPUESTO NUMERIC(38,0), @tPRODUCTOIMPUESTO__Valorporcentual FLOAT, @tPRODUCTOIMPUESTO__Valortransaccional FLOAT
			 
					FETCH tPRODUCTOIMPUESTO INTO @tPRODUCTOIMPUESTO__ID_IMPUESTO, @tPRODUCTOIMPUESTO__ID_PRODUCTOIMPUESTO, @tPRODUCTOIMPUESTO__Valorporcentual, @tPRODUCTOIMPUESTO__Valortransaccional;
 
					 WHILE @@FETCH_STATUS=0
					 BEGIN
						DECLARE @cCODIMPUESTOREGFACTURACION NUMERIC(22,0);
						DECLARE @cPORCENTUALVALUE FLOAT =0;
						DECLARE @cTRANSACTIONALVALUE FLOAT =0;
						DECLARE @cTHISIMPUESTO FLOAT = 0;
						DECLARE @cTHISIMPUESTOROUNDED FLOAT = 0;                
						DECLARE @cTHISBASECALC FLOAT = 0;
						BEGIN
							BEGIN TRY
							--calcular la base porserntual
								SET @cTHISBASECALC = (@cVALORVENTANETA / (1 + (@tPRODUCTOIMPUESTO__Valorporcentual / 100)));
								--calcular el valor por transccion
								SET @cTRANSACTIONALVALUE = (@cNUMTRANSACCIONES * @tPRODUCTOIMPUESTO__Valortransaccional);
								SET @cTHISIMPUESTOROUNDED =( @cNUMTRANSACCIONES * ROUND(@tPRODUCTOIMPUESTO__Valortransaccional,0));
								--restar el valor por transaccion  a la base
								SET @cTHISBASECALC = @cTHISBASECALC - @cTRANSACTIONALVALUE;
								--calcular el valor porcentual 
								SET @cPORCENTUALVALUE = (@cTHISBASECALC * (@tPRODUCTOIMPUESTO__Valorporcentual / 100));

								SET @cTHISIMPUESTOROUNDED = @cTHISIMPUESTOROUNDED +  ROUND(@cPORCENTUALVALUE,0);
								SET @cTHISIMPUESTO=@cTRANSACTIONALVALUE + @cPORCENTUALVALUE;
                
								IF @cTHISIMPUESTO IS NOT NULL AND @cTHISIMPUESTO > 0 BEGIN
										EXEC WSXML_SFG.SFGIMPUESTOREGFACTURACION_AddRecord 
																	 @tPRODUCTOIMPUESTO__ID_IMPUESTO,
																	  @tPRODUCTOIMPUESTO__ID_PRODUCTOIMPUESTO,
																	  @xControlFile,
																	  @pk_ID_REGISTROFACTURACION,
																	  @cCODTIPOREGISTRO,
																	  @cTHISIMPUESTOROUNDED,
																	  @cCODUSUARIOMODIFICACION,
																	  @cCODIMPUESTOREGFACTURACION OUT
								  IF @cCODIMPUESTOREGFACTURACION IS NOT NULL AND @cCODIMPUESTOREGFACTURACION > 0 BEGIN
									SET @cSUMIMPUESTOS = @cSUMIMPUESTOS + @cTHISIMPUESTO;
									SET @cRNDIMPUESTOS = @cRNDIMPUESTOS + @cTHISIMPUESTOROUNDED;
								  END
								  ELSE BEGIN
									RAISERROR('-20054 No se pudo ingresar registro de impuesto', 16, 1);
								  END 
								 END 
							  END TRY
							  BEGIN CATCH
								SET @tmpmsg = 'No se pudo ingresar registro de impuesto: : ' +
															  ISNULL(CONVERT(VARCHAR,@pk_ID_REGISTROFACTURACION), '') + ': ' +
															  isnull(ERROR_MESSAGE ( ) , '');
								EXEC WSXML_SFG.SFGTMPTRACE_TraceLog @tmpmsg
								SET @tmpmsg = '-20054 No se pudo ingresar registro de impuesto: ' +
															  ISNULL(CONVERT(VARCHAR,@pk_ID_REGISTROFACTURACION), '') + ': ' +
															  isnull(ERROR_MESSAGE ( ) , '')
								RAISERROR(@tmpmsg, 16, 1);
							   END CATCH
						END;

					FETCH tPRODUCTOIMPUESTO INTO @tPRODUCTOIMPUESTO__ID_IMPUESTO, @tPRODUCTOIMPUESTO__ID_PRODUCTOIMPUESTO, @tPRODUCTOIMPUESTO__Valorporcentual, @tPRODUCTOIMPUESTO__Valortransaccional;
					END;

					CLOSE tPRODUCTOIMPUESTO;
					DEALLOCATE tPRODUCTOIMPUESTO;
				  --03 de Abril 2017-- Modificacion para aplicar descuentos a la venta neta por Guillermo Niño
					DELETE FROM WSXML_SFG.REGISTROFACTDESCUENTO WHERE CODREGISTROFACTURACION = @pk_ID_REGISTROFACTURACION;
          
					DECLARE tDescuento CURSOR FOR SELECT  PRODUCTODESCUENTO.ID_PRODUCTODESCUENTO,
											  PRODUCTODESCUENTO.VALORTRANSACCIONAL , 
											  PRODUCTODESCUENTO.VALORPORCENTUAL
									   FROM WSXML_SFG.PRODUCTODESCUENTO
									   WHERE CODPRODUCTO = @cCODPRODUCTO
									   AND CODCIUDAD= @cCODCIUDAD
									   AND ACTIVE= 1;
          
				  OPEN tDescuento;
				  DECLARE @tDescuento__ID_PRODUCTODESCUENTO NUMERIC(38,0), @tDescuento__VALORTRANSACCIONAL FLOAT, @tDescuento__VALORPORCENTUAL FLOAT
				  FETCH tDescuento INTO @tDescuento__ID_PRODUCTODESCUENTO, @tDescuento__VALORTRANSACCIONAL, @tDescuento__VALORPORCENTUAL

				  WHILE @@FETCH_STATUS=0
				  BEGIN
					DECLARE @cCODREGISTROFACTDESCUENTO NUMERIC(22,0);
					DECLARE @thisDISCOUNT FLOAT;
					BEGIN
						BEGIN TRY
							  SET @thisDISCOUNT = 0;
							  IF @tDescuento__VALORPORCENTUAL <>0 BEGIN
								 SET @thisDISCOUNT= @cVALORVENTANETA*(@tDescuento__VALORPORCENTUAL/100);
							  END 
							  IF @tDescuento__VALORTRANSACCIONAL <>0 BEGIN
								SET @thisDISCOUNT=@thisDISCOUNT+( @cNUMTRANSACCIONES*@tDescuento__VALORTRANSACCIONAL);
							  END  
							  --thisDISCOUNT:=ROUND(thisDISCOUNT);
							  SET @cSUMDESCUENTOS=@cSUMDESCUENTOS+@thisDISCOUNT;
							  EXEC WSXML_SFG.SFGREGISTROFACTDESCUENTO_AddRecord	
																	@tDescuento__ID_PRODUCTODESCUENTO,
																  @xControlFile,
																  @pk_ID_REGISTROFACTURACION,
																  @cCODTIPOREGISTRO,
																  @thisDISCOUNT,
																  @cCODUSUARIOMODIFICACION,
																  @cCODREGISTROFACTDESCUENTO OUT
						   END TRY
						   BEGIN CATCH
								SET @tmpmsg = '-20054 No se pudo ingresar registro de descuentos : ' +
														ISNULL(CONVERT(VARCHAR,@pk_ID_REGISTROFACTURACION), '') + ': ' +
														isnull(ERROR_MESSAGE ( ) , '');
								RAISERROR(@tmpmsg, 16, 1);
							END CATCH
					END;

					FETCH tDescuento INTO @tDescuento__ID_PRODUCTODESCUENTO, @tDescuento__VALORTRANSACCIONAL, @tDescuento__VALORPORCENTUAL
				  END;

				  CLOSE tDescuento;
				  DEALLOCATE tDescuento;                 
          
                
 
				  SET @cVALORVENTABRUTA = ((@cVALORVENTANETA-ROUND(@cSUMDESCUENTOS,0)) - @cRNDIMPUESTOS);
				  SET @cVALORVENTANETA  = ((@cVALORVENTANETA-@cSUMDESCUENTOS) - @cSUMIMPUESTOS);
          
				  EXEC WSXML_SFG.SFGREGISTROFACTURACION_UpdateRecordVentaBruta 
																@pk_ID_REGISTROFACTURACION,
																@cVALORVENTABRUTA,
																@cVALORVENTANETA,
																@cCODUSUARIOMODIFICACION
				  EXEC WSXML_SFG.SFGREGISTROFACTURACION_UpdateRecordDescuento @pk_ID_REGISTROFACTURACION,@cSUMDESCUENTOS
				  ---                                              
				END;

				/* Variable Commission Modifiers */
				  DECLARE @cVARIABLEPORCENTUAL NUMERIC(22,0) = 0;
				  DECLARE @cVARIABLETRANSACCNL NUMERIC(22,0) = 0;
				BEGIN
					BEGIN TRY
					  IF @xObtenerReglas = 1 BEGIN
						-- Vuelve a obtener los valores de la comision variable
						EXEC WSXML_SFG.SFGCATEGORIAPAGO_GetComissionRecordValuesByProd 
																		@cCODPUNTODEVENTA,
																		@cCODPRODUCTO,
																		@cCODCATEGORIAPAGO OUT,
																		@cVARIABLEPORCENTUAL OUT,
																		@cVARIABLETRANSACCNL OUT
					  END
					  ELSE BEGIN
						-- Utiliza la comision variable originalmente utilizada
							SELECT @cCODCATEGORIAPAGO = ISNULL(CODCATEGORIAPAGO, 0)
							FROM WSXML_SFG.REGISTROFACTURACION
							WHERE ID_REGISTROFACTURACION = @pk_ID_REGISTROFACTURACION;
				
							EXEC WSXML_SFG.SFGCATEGORIAPAGO_GetComissionRecordValuesFromID @cCODCATEGORIAPAGO,
																							  @cVARIABLEPORCENTUAL,
																							  @cVARIABLETRANSACCNL
					  END 
					  /* Commission Calculation */
					  IF  @flagADVANCEDCOMMISSION > 0 BEGIN
						  DECLARE @valueCOMMISSIONINQUIRY FLOAT = 0;
						  DECLARE @valueCOMMISSIONTRANSCC FLOAT = 0;
						  DECLARE @valueCOMMISSIONJOINTTX FLOAT = 0;
						  DECLARE @advtypecodes           WSXML_SFG.IDCOMPLEXVALUE;
						  DECLARE @conditionalNUMTRANSACC NUMERIC(22,0) = 0;
						BEGIN
							INSERT INTO @advtypecodes
							SELECT ID_REGISTROFACTTRANSAVANZADO,
												CODTIPOTRANSAVANZADO,
												CANTIDADTRANSACCIONES
							FROM WSXML_SFG.REGISTROFACTTRANSAVANZADO
						   WHERE CODREGISTROFACTURACION = @pk_ID_REGISTROFACTURACION;

						  IF @@ROWCOUNT > 0 BEGIN
							DECLARE txdv CURSOR FOR SELECT ID, MARKUP, VALUE FROM @advtypecodes
							OPEN txdv;
				
							DECLARE @txdv__ID NUMERIC(38,0), @txdv__MARKUP FLOAT, @txdv__VALUE FLOAT
							FETCH NEXT FROM txdv INTO @txdv__ID, @txdv__MARKUP, @txdv__VALUE
							 WHILE @@FETCH_STATUS=0
							 BEGIN
								IF @txdv__MARKUP = @FEEINQUIRY BEGIN
									IF @txdv__VALUE > 0 BEGIN
										SET @valueCOMMISSIONINQUIRY = @txdv__VALUE * (SELECT  VALORTRANSACCIONAL FROM @p_cur_ADVANCEDLISTCOMMISSIONS WHERE ID = @FEEINQUIRY);
                      
										IF @valueCOMMISSIONINQUIRY > 0 BEGIN
											SET @conditionalNUMTRANSACC = @conditionalNUMTRANSACC + @txdv__VALUE
										END 
                   
										EXEC WSXML_SFG.SFGREGISTROFACTTRANSAVANZADO_UpdateCommissionValues @txdv__ID,@valueCOMMISSIONINQUIRY
										SET @cVALORCOMISION = @cVALORCOMISION + @valueCOMMISSIONINQUIRY;
									END
								END ELSE IF @txdv__MARKUP = @FTRANSACTION BEGIN
									IF @txdv__VALUE > 0 BEGIN
									  SET @valueCOMMISSIONTRANSCC = @txdv__ID * (SELECT  VALORTRANSACCIONAL FROM @p_cur_ADVANCEDLISTCOMMISSIONS WHERE ID = @FTRANSACTION);

									  IF @valueCOMMISSIONTRANSCC > 0 BEGIN
										SET @conditionalNUMTRANSACC = @conditionalNUMTRANSACC + @txdv__VALUE
									  END 
									END
                    
									EXEC WSXML_SFG.SFGREGISTROFACTTRANSAVANZADO_UpdateCommissionValues @txdv__ID,@valueCOMMISSIONTRANSCC
									SET @cVALORCOMISION = @cVALORCOMISION +
												  @valueCOMMISSIONTRANSCC;
                   
							   END ELSE IF @txdv__MARKUP = @BOTH BEGIN
									IF @txdv__VALUE > 0 BEGIN
									  SET @valueCOMMISSIONJOINTTX = @txdv__ID * (SELECT  VALORTRANSACCIONAL FROM @p_cur_ADVANCEDLISTCOMMISSIONS WHERE ID = @BOTH);
									  IF @valueCOMMISSIONJOINTTX > 0 BEGIN
										SET @conditionalNUMTRANSACC = @conditionalNUMTRANSACC + @txdv__ID
									  END 
									END

									EXEC WSXML_SFG.SFGREGISTROFACTTRANSAVANZADO_UpdateCommissionValues @txdv__ID,@valueCOMMISSIONJOINTTX
									SET @cVALORCOMISION = @cVALORCOMISION +@valueCOMMISSIONJOINTTX;
								END
                
								FETCH NEXT FROM txdv INTO @txdv__ID, @txdv__MARKUP, @txdv__VALUE
							   END
                    
								CLOSE txdv;
								DEALLOCATE txdv;
						  END

						  -- Update conditional number of transactions
						  IF @conditionalNUMTRANSACC <> @cNUMTRANSACCIONES BEGIN
								EXEC WSXML_SFG.SFGREGISTROFACTURACION_OverwriteConditionTransactions @pk_ID_REGISTROFACTURACION,@conditionalNUMTRANSACC 
						  END;

						END;

					  END ELSE 
						BEGIN
							IF @cCODTIPOCOMISION = 1 BEGIN
							  -- El tipo de comision es porcentual
							  SET @cVALORCOMISION = ((@cVALORVENTANETA *(@cVALCALCPORCENTUA + @cVARIABLEPORCENTUAL)) / 100);
							END
							ELSE IF @cCODTIPOCOMISION = 2 BEGIN
							  -- El tipo de comision es transaccional
							  SET @cVALORCOMISION = ((@cVALCALCTRANSCCNL + @cVARIABLETRANSACCNL) * @cNUMTRANSACCIONES);
							END
							ELSE IF @cCODTIPOCOMISION = 3 BEGIN
							  -- El tipo de comision es Mixto
							  SET @cVALORCOMISION = ((@cVALORVENTANETA *
												(@cVALCALCPORCENTUA + @cVARIABLEPORCENTUAL)) / 100) +
												((@cVALCALCTRANSCCNL + @cVARIABLETRANSACCNL) * @cNUMTRANSACCIONES);
							END
							ELSE BEGIN
							  SET @cVALORCOMISION = 0;
							END
						END
          
					  -- Valor de IVA de comision dependiente del tipo de contrato
					  IF @cCODTIPOCONTRATOPDV IN (1, 2 ,4 ,5)
						SET @cVALORVAT = WSXML_SFG.SFGVATCOMISIONREGIMEN_GetVatValue(@cCODPUNTODEVENTA,@cCODPRODUCTO);
					  ELSE IF @cCODTIPOCONTRATOPDV = 3
						SET @cVALORVAT = WSXML_SFG.SFGTRIBUTARIOALIADOESTRATEGICO_GetVatValue(@cCODPRODUCTO,@cCODREGIMEN,@cCODCIUDAD);
			  
					  -- IVA de comision solo si no es anticipo
					  IF @cCOMISIONANTICIPO = 0
							SET @cIVACOMISION = ((@cVALORCOMISION * @cVALORVAT) / 100);
					  ELSE
						SET @cIVACOMISION = 0;
          
					  SET @cVALORCOMISIONBRUTA = ROUND(@cVALORCOMISION,0) + ROUND(@cIVACOMISION,0);
					END TRY
					BEGIN CATCH
							set @msg = '-20054 No se puede calcular la comisión: ' + isnull(ERROR_MESSAGE ( ) , '');
							RAISERROR(@msg, 16, 1);
					END CATCH
				END;

				/* Retenciones: Delete previous registries and reset */
				DELETE FROM WSXML_SFG.RETENCIONREGFACTURACION
				 WHERE CODREGISTROFACTURACION = @pk_ID_REGISTROFACTURACION;
				-- Retenciones sobre la comision solo si existi? comision
				IF @cVALORCOMISION IS NOT NULL AND @cVALORCOMISION > 0 BEGIN
				  SET @cVALORVENTANETA    = @cVALORVENTANETA - @cVALORCOMISIONBRUTA;
				  SET @cVALORCOMISIONNETA = @cVALORCOMISION; -- Retenciones calculadas sobre comision sin iva
				  /* Retenciones */
					DECLARE @retenciones WSXML_SFG.BILLINGTAX;
					BEGIN
						IF @cCOMISIONANTICIPO = 0 BEGIN
					  -- Retenciones dependiendo del tipo de contrato del pdv
							  IF @cCODTIPOCONTRATOPDV IN (1, 2, 4, 5) BEGIN

								INSERT INTO @retenciones
								SELECT ID_RETENCIONTRIBUTARIA, VALOR, CODBASERETENCION 
								FROM WSXML_SFG.SFGRETENCIONTRIBUTARIA_GetBillingTaxListByPOS(@cCODPRODUCTO,@cCODCIUDAD,@cCODREGIMEN,@cCODCOMPANIA,@cCODTIPOPERSONATRIBUTARIA,@cCODTIPOCONTRATOPDV)

							  END
							  ELSE IF @cCODTIPOCONTRATOPDV = 3 BEGIN
						
								INSERT INTO @retenciones
								SELECT * FROM WSXML_SFG.SFGRETENCIONTRIBUTARIA_GetBillingTaxListByProduct(@cCODALIADOESTRATEGICO,@cCODCIUDAD,@cCODREGIMEN)
								END 
								IF @@ROWCOUNT > 0 BEGIN
									DECLARE rt CURSOR FOR SELECT * FROM @retenciones
							
									OPEN rt;
									DECLARE @rt__ID_RETENCIONTRIBUTARIA NUMERIC(38,0), @rt__VALOR FLOAT, @rt__CODBASERETENCION NUMERIC(38,0)
									FETCH next FROM rt INTO @rt__ID_RETENCIONTRIBUTARIA, @rt__VALOR, @rt__CODBASERETENCION
							
									WHILE @@FETCH_STATUS=0
									BEGIN
											BEGIN TRY
												DECLARE @cCODRETENCIONREGFACTURACION NUMERIC(22,0);
												DECLARE @cTHISRETENCION              FLOAT = 0;
												BEGIN
													IF @rt__CODBASERETENCION = 1 
													  -- Comision Bruta
														SET @cTHISRETENCION = ((@cVALORCOMISIONNETA * @rt__VALOR) / 100);
													ELSE IF @rt__CODBASERETENCION = 2
														-- IVA Comision
														SET @cTHISRETENCION = ((@cIVACOMISION * @rt__VALOR) / 100);
													ELSE
														SET @cTHISRETENCION = 0;
										
													/*Guillermo Ni?o -- 27 06 2013 -- */
													IF @cTHISRETENCION > 0.1 and @cTHISRETENCION < 0.5
														SET @cTHISRETENCION =1;
								
												END
                   
                    
												IF @cTHISRETENCION IS NOT NULL AND @cTHISRETENCION > 0  BEGIN
													SET @cTHISRETENCION= ROUND(@cTHISRETENCION,0)
													EXEC WSXML_SFG.SFGRETENCIONREGFACTURACION_AddRecord
																			@rt__ID_RETENCIONTRIBUTARIA,
																			@xControlFile,
																			pk_ID_REGISTROFACTURACION,
																			cCODTIPOREGISTRO,
																			@cTHISRETENCION,
																			cCODUSUARIOMODIFICACION,
																			@cCODRETENCIONREGFACTURACION OUT
														IF @cCODRETENCIONREGFACTURACION IS NOT NULL AND @cCODRETENCIONREGFACTURACION > 0 
														BEGIN
															SET @cSUMRETENCIONES = @cSUMRETENCIONES + ROUND(@cTHISRETENCION,0);
														END 
												 END 
											END TRY
											BEGIN CATCH

												  SET @tmpmsg = '-20054 No se pudo ingresar registro de retención: ' +
																		  ISNULL(CONVERT(VARCHAR,@pk_ID_REGISTROFACTURACION), '') + ': ' +
																		  isnull(ERROR_MESSAGE ( ) , '');
												  RAISERROR(@tmpmsg, 16, 1);
											END CATCH

										FETCH next FROM rt INTO @rt__ID_RETENCIONTRIBUTARIA, @rt__VALOR, @rt__CODBASERETENCION
								   END 
						
								END
						END 
						SET @cVALORCOMISIONNETA = @cVALORCOMISIONBRUTA - @cSUMRETENCIONES; -- Se suma IVA
			
					END 
				END
		
				/* If NON Conventional retenciones are in place, substract */
					DECLARE @sumNCRetenciones FLOAT = 0;
					BEGIN
						SELECT @sumNCRetenciones = SUM(VALORRETENCION)
						FROM WSXML_SFG.RETUVTREGFACTURACION
						WHERE CODREGISTROFACTURACION = @pk_ID_REGISTROFACTURACION;
					  IF @sumNCRetenciones <> 0 BEGIN
						SET @cVALORCOMISIONNETA = @cVALORCOMISIONNETA - @sumNCRetenciones;
					  END 
					END;

				/* Update registry with final values */
					BEGIN
						BEGIN TRY
							SET @cVALORCOMISION = ROUND(@cVALORCOMISION,0)
							SET @cIVACOMISION = ROUND(@cIVACOMISION,0)
							EXEC WSXML_SFG.SFGREGISTROFACTURACION_UpdateRecordComisionVenta			
																	  @pk_ID_REGISTROFACTURACION,
																	   @cCODRANGOCOMISION,
																	   @cCODCATEGORIAPAGO,
																	   @cVALORCOMISION,
																	   @cVALORCOMISION,
																	   @cIVACOMISION,
																	   @cVALORVAT,
																	   @cVALORCOMISIONBRUTA,
																	   @cVALORCOMISIONNETA,
																	   @cVALORVENTANETA,
																	   @cCODUSUARIOMODIFICACION
						END TRY
						BEGIN CATCH
								SET @tmpmsg = '-20054 No se pudo actualizar el valor de la comisión despues de calcular la retención: ' +
														ISNULL(CONVERT(VARCHAR,@pk_ID_REGISTROFACTURACION), '') + ': ' +
														isnull(ERROR_MESSAGE ( ) , '');
								RAISERROR(@tmpmsg, 16, 1);
						END CATCH
					END;

				/* Recalculate revenue only if either calculated commission or commission vat have changed */
				-- IF originalCOMMISSION <> cVALORCOMISION OR
				--    originalCOMMISSIONVAT <> cIVACOMISION THEN
				EXEC WSXML_SFG.SFGREGISTROREVENUE_CalcularRevenueRegistro @pk_ID_REGISTROFACTURACION
				-- END IF;

			  END ELSE IF @cCODTIPOREGISTRO = @FREETICKT
					SELECT NULL;
			  ELSE IF @cCODTIPOREGISTRO = @PREMIOPAG 
				-- Actualizar el valor de venta neta para el caso de cambio de valor. No se puede hacer nada con las retenciones de premios.
				SELECT NULL

				UPDATE WSXML_SFG.REGISTROFACTURACION
				   SET VALORVENTANETA = VALORTRANSACCION
				 WHERE ID_REGISTROFACTURACION = @pk_ID_REGISTROFACTURACION;
      END TRY
	  BEGIN CATCH
    
        SET @msg = '-20015 No se puede recalcular el registro ' + ISNULL(CONVERT(VARCHAR,@pk_ID_REGISTROFACTURACION), '') + ' : '  + isnull(ERROR_MESSAGE ( ) , '')
        RAISERROR(@msg, 16, 1);
	  END CATCH
    END;

    SET @p_RETVALUE_out = @p_FINALIZADAOK
  END;
GO



    IF OBJECT_ID('WSXML_SFG.SFGREGISTROFACTURACION_OverwriteConditionTransactions', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_OverwriteConditionTransactions;
GO


  CREATE PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_OverwriteConditionTransactions(@pk_ID_REGISTROFACTURACION NUMERIC(22,0),
                                           @p_NUMTRANSACCIONES        NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
    UPDATE WSXML_SFG.REGISTROFACTURACION
       SET NUMTRANSACCIONES = @p_NUMTRANSACCIONES
     WHERE ID_REGISTROFACTURACION = @pk_ID_REGISTROFACTURACION;
  END;
GO


    IF OBJECT_ID('WSXML_SFG.SFGREGISTROFACTURACION_ValidateProductVrComisionBase', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_ValidateProductVrComisionBase;
GO


  CREATE PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_ValidateProductVrComisionBase(@p_ID_REGISTROFACTURACION NUMERIC(22,0),
                                          @p_VR_COMISION_BASE       NUMERIC(22,0) OUT) as
 begin

    declare @V_CODPRODUCTO NUMERIC(22,0);

   
  SET NOCOUNT ON;

    set @p_VR_COMISION_BASE = 0;

    SELECT @V_CODPRODUCTO = RF.CODPRODUCTO
      FROM WSXML_SFG.REGISTROFACTURACION RF
     WHERE RF.ID_REGISTROFACTURACION = @p_ID_REGISTROFACTURACION;

    IF @V_CODPRODUCTO IN (1255 --GIRO DEPOSITO COLPA
                        ,
                         1256 --GIRO RETIRO COLPA
                         ) BEGIN

      set @p_VR_COMISION_BASE = 1;

    END 
    --giros matrix
        IF @V_CODPRODUCTO IN (1872,1873,1874,1875) BEGIN

      set @p_VR_COMISION_BASE = 1;

    END 


  END;
GO


  IF OBJECT_ID('WSXML_SFG.SFGREGISTROFACTURACION_SetValuesToNegative', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_SetValuesToNegative;
GO


  CREATE PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_SetValuesToNegative(@p_FECHA                    DATETIME,
                                @p_CODPRODUCTO              NUMERIC(22,0),
                                @p_CODDETALLETAREAEJECUTADA NUMERIC(22,0),
                                @p_RETVALUE_out             NUMERIC(22,0) OUT) AS
 BEGIN
    DECLARE @v_TOTALPROGRESS   NUMERIC(22,0);
    DECLARE @v_CURRENTPROGRESS NUMERIC(22,0);
    DECLARE @v_COUNT           INT;
    DECLARE @v_CODSERVICIO     INT;
    DECLARE @v_CODARCHIVO      INT;
    DECLARE @msg               VARCHAR(2000);
	DECLARE @v_TOTALDETALLEMONTO FLOAT;
   
  SET NOCOUNT ON;
	BEGIN TRY
    --Capturar el codigo del servicio
    BEGIN
		BEGIN TRY

				DECLARE
					@p_REGISTRADA      			TINYINT,
					@p_INICIADA         		TINYINT,
					@p_FINALIZADAOK 			TINYINT,
					@p_FINALIZADAFALLO  		TINYINT,
					@p_ABORTADA  				TINYINT,
					@p_NOINICIADA  				TINYINT,
					@p_FINALIZADAADVERTENCIA  	TINYINT 

				EXEC WSXML_SFG.SFGESTADOTAREAEJECUTADA_CONSTANT
								@p_REGISTRADA      			 OUT,
								@p_INICIADA         		 OUT,
								@p_FINALIZADAOK 			 OUT,
								@p_FINALIZADAFALLO  		 OUT,
								@p_ABORTADA  				 OUT,
								@p_NOINICIADA  				 OUT,
								@p_FINALIZADAADVERTENCIA  	 OUT

		  SELECT @v_CODSERVICIO = LINEADENEGOCIO.CODSERVICIO
			FROM WSXML_SFG.PRODUCTO
		   INNER JOIN WSXML_SFG.TIPOPRODUCTO
			  ON PRODUCTO.CODTIPOPRODUCTO = TIPOPRODUCTO.ID_TIPOPRODUCTO
		   INNER JOIN WSXML_SFG.LINEADENEGOCIO
			  ON TIPOPRODUCTO.CODLINEADENEGOCIO =
				 LINEADENEGOCIO.ID_LINEADENEGOCIO
		   WHERE PRODUCTO.ID_PRODUCTO = @p_CODPRODUCTO;

			IF @@ROWCOUNT = 0 BEGIN
				SET @msg = 'No se encontro el producto o no tiene configurado correctamente el tipo de producto y la linea de negocio.';
				EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_FinalizeExecution @p_CODDETALLETAREAEJECUTADA, @msg
				SET @p_RETVALUE_out = @p_FINALIZADAFALLO;
				GOTO SALIR;
			END
		END TRY
		BEGIN CATCH
		 
			SET @msg = 'Se presento el siguiente error en la conversion de la facturacion a negativos (SFGREGISTROFACTURACION.SetValuesToNegative) : ' +
				   ISNULL(ERROR_MESSAGE ( ) , '');
			EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_FinalizeExecution @p_CODDETALLETAREAEJECUTADA, @msg
			SET @p_RETVALUE_out = @p_FINALIZADAFALLO
			GOTO SALIR;
		END CATCH
    END;


    --Capturar el id del entradaarchivocontrol
    BEGIN
		BEGIN TRY

		  SELECT @v_CODARCHIVO = ENTRADAARCHIVOCONTROL.ID_ENTRADAARCHIVOCONTROL
			FROM WSXML_SFG.ENTRADAARCHIVOCONTROL
		   WHERE ENTRADAARCHIVOCONTROL.FECHAARCHIVO = @p_FECHA
			 AND ENTRADAARCHIVOCONTROL.TIPOARCHIVO = @v_CODSERVICIO
			 AND ENTRADAARCHIVOCONTROL.REVERSADO = 0;
		  --          AND ENTRADAARCHIVOCONTROL.FACTURADO= 0;

			IF @@ROWCOUNT = 0 BEGIN
				SET @msg = 'No se encontro el archivo de facturacion para el producto y la fecha ingresados.';
				EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_FinalizeExecution @p_CODDETALLETAREAEJECUTADA,
														   @msg
				SET @p_RETVALUE_out =@p_FINALIZADAFALLO;
				GOTO SALIR;
			END
		END TRY
		BEGIN CATCH
			SET @msg = 'Se presento el siguiente error en la conversion de la facturacion a negativos (SFGREGISTROFACTURACION.SetValuesToNegative) : ' +
				   ISNULL(ERROR_MESSAGE ( ) , '');
			EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_FinalizeExecution @p_CODDETALLETAREAEJECUTADA, 
													   @msg
			SET @p_RETVALUE_out = @p_FINALIZADAFALLO;
			GOTO SALIR;
		END CATCH
    END;

    --Verificamos que el archivo este balanceado
      DECLARE @v_TOTALARCHIVOTRX   FLOAT;
      DECLARE @v_TOTALARCHIVOMONTO FLOAT;
      DECLARE @v_TOTALDETALLETRX   FLOAT;
      --DECLARE @v_TOTALDETALLEMONTO FLOAT;
    BEGIN

      SELECT @v_TOTALARCHIVOTRX = ENTRADAARCHIVOCONTROL.NUMEROTRANSACCIONES,
             @v_TOTALARCHIVOMONTO = ENTRADAARCHIVOCONTROL.VALORTRANSACCIONES
        FROM WSXML_SFG.ENTRADAARCHIVOCONTROL
       WHERE ID_ENTRADAARCHIVOCONTROL = @v_CODARCHIVO;

      SELECT @v_TOTALDETALLETRX = SUM(NUMTRANSACCIONES)
		, @v_TOTALDETALLEMONTO = SUM(VALORTRANSACCION)
        FROM WSXML_SFG.ENTRADAARCHIVOCONTROL CTR
       INNER JOIN WSXML_SFG.REGISTROFACTURACION
          ON (CODENTRADAARCHIVOCONTROL = ID_ENTRADAARCHIVOCONTROL)
       WHERE ID_ENTRADAARCHIVOCONTROL = @v_CODARCHIVO;

      IF NOT (@v_TOTALARCHIVOTRX = @v_TOTALDETALLETRX AND @v_TOTALARCHIVOMONTO = @v_TOTALDETALLEMONTO) BEGIN
        SET @msg = 'No es posible realizar la conversion a negativos de la facturacion por que el archivo de ventas no esta balanceado.';
        EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_FinalizeExecution @p_CODDETALLETAREAEJECUTADA,
                                                   @msg
        SET @p_RETVALUE_out =@p_FINALIZADAFALLO;
        GOTO SALIR;
      END

    END;


    SELECT @v_COUNT = COUNT(1)
      FROM WSXML_SFG.REGISTROFACTURACION
     INNER JOIN WSXML_SFG.ENTRADAARCHIVOCONTROL
        ON REGISTROFACTURACION.CODENTRADAARCHIVOCONTROL =
           ENTRADAARCHIVOCONTROL.ID_ENTRADAARCHIVOCONTROL
     WHERE ENTRADAARCHIVOCONTROL.FECHAARCHIVO = @p_FECHA
       AND REGISTROFACTURACION.CODPRODUCTO = @p_CODPRODUCTO
       AND REGISTROFACTURACION.FACTURADO = 1;

    IF @v_TOTALPROGRESS > 0 BEGIN
      EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_FinalizeExecution @p_CODDETALLETAREAEJECUTADA, 'No se pueden modificar registros que ya han sido facturados.'
      SET @p_RETVALUE_out =@p_FINALIZADAFALLO;
      GOTO SALIR;
    END 

    SELECT @v_TOTALPROGRESS = COUNT(1)
      FROM WSXML_SFG.REGISTROFACTURACION
     INNER JOIN WSXML_SFG.ENTRADAARCHIVOCONTROL
        ON REGISTROFACTURACION.CODENTRADAARCHIVOCONTROL =
           ENTRADAARCHIVOCONTROL.ID_ENTRADAARCHIVOCONTROL
     WHERE ENTRADAARCHIVOCONTROL.FECHAARCHIVO = @p_FECHA
       AND REGISTROFACTURACION.CODPRODUCTO = @p_CODPRODUCTO
       AND ENTRADAARCHIVOCONTROL.REVERSADO = 0
       AND ENTRADAARCHIVOCONTROL.FACTURADO = 0;

    IF @v_TOTALPROGRESS = 0 BEGIN
      EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_FinalizeExecution @p_CODDETALLETAREAEJECUTADA,
                                                 'No se encontraron registros para modificar.'
      SET @p_RETVALUE_out = @p_FINALIZADAOK
      GOTO SALIR;
    END 

    SET @v_CURRENTPROGRESS = 0;

    EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_SetTotalRecords @p_CODDETALLETAREAEJECUTADA,
                                             @v_TOTALPROGRESS

    DECLARE tREGISTRO CURSOR FOR SELECT REGISTROFACTURACION.ID_REGISTROFACTURACION
                        FROM WSXML_SFG.REGISTROFACTURACION
                       INNER JOIN WSXML_SFG.ENTRADAARCHIVOCONTROL
                          ON REGISTROFACTURACION.CODENTRADAARCHIVOCONTROL =
                             ENTRADAARCHIVOCONTROL.ID_ENTRADAARCHIVOCONTROL
                       WHERE ENTRADAARCHIVOCONTROL.FECHAARCHIVO = @p_FECHA
                         AND REGISTROFACTURACION.CODPRODUCTO = @p_CODPRODUCTO
                         AND ENTRADAARCHIVOCONTROL.REVERSADO = 0
                         AND ENTRADAARCHIVOCONTROL.FACTURADO = 0; OPEN tREGISTRO;
	
	DECLARE @tREGISTRO__ID_REGISTROFACTURACION NUMERIC(38,0);
	FETCH NEXT FROM tREGISTRO INTO @tREGISTRO__ID_REGISTROFACTURACION
	WHILE @@FETCH_STATUS=0
	BEGIN
      BEGIN

        --Actualizar registrofacturacion
        UPDATE WSXML_SFG.REGISTROFACTURACION
           SET VALORTRANSACCION            = ABS(VALORTRANSACCION) * -1,
               --VALORCOMISION               = ABS(VALORCOMISION) * -1,
               VALORVENTANETA              = ABS(VALORVENTANETA) * -1,
              -- VALORCOMISIONNETA           = ABS(VALORCOMISIONNETA) * -1,
               VALORVENTABRUTA             = ABS(VALORVENTABRUTA) * -1,
               --IVACOMISION                 = ABS(IVACOMISION) * -1,
               --VALORCOMISIONBRUTA          = ABS(VALORCOMISIONBRUTA) * -1,
               --RETENCIONPREMIO             = ABS(RETENCIONPREMIO) * -1,
               --VALORVAT                    = ABS(VALORVAT) * -1,
               --VALORCOMISIONNOREDONDEADO   = ABS(VALORCOMISIONNOREDONDEADO) * -1,
             VALORVENTABRUTANOREDONDEADO = ABS(VALORVENTABRUTANOREDONDEADO) * -1
         WHERE ID_REGISTROFACTURACION = @tREGISTRO__ID_REGISTROFACTURACION

        --Actualizar registrofacturacionreferencia
        UPDATE WSXML_SFG.REGISTROFACTREFERENCIA
           SET VALORTRANSACCION = ABS(VALORTRANSACCION) * -1
         WHERE CODREGISTROFACTURACION = @tREGISTRO__ID_REGISTROFACTURACION

     

        SET @v_CURRENTPROGRESS = @v_CURRENTPROGRESS + 1;

        EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA,@v_CURRENTPROGRESS

      END;

    FETCH NEXT FROM tREGISTRO INTO @tREGISTRO__ID_REGISTROFACTURACION
    END;

    CLOSE tREGISTRO;
    DEALLOCATE tREGISTRO;

    --Si el programa llega hasta aqui es por que antes de todo el archivo estaba balanceado.. por lo que ahora lo igualamos a el valor de el detalle
      --DECLARE @v_TOTALDETALLEMONTO FLOAT;
	BEGIN

		  SELECT @v_TOTALDETALLEMONTO = SUM(VALORTRANSACCION)
			FROM WSXML_SFG.ENTRADAARCHIVOCONTROL CTR
		   INNER JOIN WSXML_SFG.REGISTROFACTURACION
			  ON (CODENTRADAARCHIVOCONTROL = ID_ENTRADAARCHIVOCONTROL)
		   WHERE ID_ENTRADAARCHIVOCONTROL = @v_CODARCHIVO;

		  UPDATE WSXML_SFG.ENTRADAARCHIVOCONTROL
			 SET VALORTRANSACCIONES = @v_TOTALDETALLEMONTO
		   WHERE ID_ENTRADAARCHIVOCONTROL = @v_CODARCHIVO;

		END;


    SET @p_RETVALUE_out = @p_FINALIZADAOK
    EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_FinalizeExecution @p_CODDETALLETAREAEJECUTADA, 'Proceso finalizado con exito.'

    SALIR:

    SET @p_RETVALUE_out = @p_RETVALUE_out;

	END TRY
	BEGIN CATCH
      SET @msg = 'Se presento el siguiente error en la conversion de la facturacion a negativos (SFGREGISTROFACTURACION.SetValuesToNegative) : ' + ISNULL(ERROR_MESSAGE ( ) , '');
      EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_FinalizeExecution @p_CODDETALLETAREAEJECUTADA, @msg
      SET @p_RETVALUE_out =@p_FINALIZADAFALLO;
	
	END CATCH

  END;
GO

 IF OBJECT_ID('WSXML_SFG.SFGREGISTROFACTURACION_LimpiarArchivo', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_LimpiarArchivo;
GO


CREATE PROCEDURE WSXML_SFG.SFGREGISTROFACTURACION_LimpiarArchivo(@p_CODENTRADAARCHIVOCONTROL NUMERIC(38,0)) AS
 BEGIN
    DECLARE @cREVERSADO FLOAT;
    DECLARE @cFACTURADO FLOAT;
   
  SET NOCOUNT ON;
    SELECT @cREVERSADO = REVERSADO
      FROM WSXML_SFG.ENTRADAARCHIVOCONTROL
     WHERE ID_ENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;
    IF @cREVERSADO <> 0 BEGIN
      RAISERROR('-20054 El archivo ya fue reversado', 16, 1);
	  RETURN 0
    END 

    SELECT @cFACTURADO = FACTURADO
      FROM WSXML_SFG.ENTRADAARCHIVOCONTROL
     WHERE ID_ENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;
    IF @cFACTURADO > 0 BEGIN
      RAISERROR('-20054 Uno o mas registros creados ya fueron considerados por el proceso de facturacion', 16, 1);
	  RETURN 0
    END 

    DELETE FROM WSXML_SFG.HUERFANOJUEGOS
     WHERE CODENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;
    /*COMMIT;*/
    DELETE FROM WSXML_SFG.HUERFANOSERVICIOSCOMERCIALES
     WHERE CODENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;
    /*COMMIT;*/
    DELETE FROM WSXML_SFG.IMPUESTOREGFACTURACION
     WHERE CODENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;
    /*COMMIT;*/
    DELETE FROM WSXML_SFG.RETENCIONREGFACTURACION
     WHERE CODENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;
    /*COMMIT;*/
    DELETE FROM WSXML_SFG.RETUVTREGFACTURACION
     WHERE CODENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;
    /*COMMIT;*/
    DELETE FROM WSXML_SFG.REGISTROFACTREFERENCIA
     WHERE CODREGISTROFACTURACION IN
           (SELECT ID_REGISTROFACTURACION
              FROM WSXML_SFG.REGISTROFACTURACION
             WHERE CODENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL);
    /*COMMIT;*/
    UPDATE WSXML_SFG.REGISTROFACTURACION
       SET NUMTRANSACCIONES          = 0,
           VALORTRANSACCION          = 0,
           VALORVENTABRUTA           = 0,
           VALORCOMISION             = 0,
           IVACOMISION               = 0,
           VALORVAT                  = 0,
           VALORCOMISIONBRUTA        = 0,
           VALORCOMISIONNETA         = 0,
           VALORVENTANETA            = 0,
           RETENCIONPREMIO           = 0,
           CODDETALLEFACTURACIONPDV  = NULL,
           CODCATEGORIAPAGO          = NULL,
           CODREGIMEN                = NULL,
           CODAGRUPACIONPUNTODEVENTA = NULL,
           IDENTIFICACION            = NULL,
           DIGITOVERIFICACION        = NULL,
           CODCIUDAD                 = NULL
     WHERE CODENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;

    UPDATE WSXML_SFG.ENTRADAARCHIVOCONTROL
       SET REVERSADO              = 1,
           CODCICLOFACTURACIONPDV = NULL,
           FECHAHORAREVERSADO     = GETDATE(),
           FECHAHORAMODIFICACION  = GETDATE()
     WHERE ID_ENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;
  END;
  GO
