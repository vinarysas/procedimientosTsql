USE SFGPRODU;
--  DDL for Package Body SFG_PACKAGE
--------------------------------------------------------


  /* PACKAGE BODY WSXML_SFG.SFG_PACKAGE */ 
IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_CONSTANT', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFG_PACKAGE_CONSTANT;
GO

CREATE     PROCEDURE WSXML_SFG.SFG_PACKAGE_CONSTANT(
					@SORTEOMULTIPLIER      			INT OUT,
                    @C_INICIO_OPERACION         	INT OUT,
                    @C_FIN_OPERACION 				INT OUT
                    
					
) AS
  BEGIN
  SET NOCOUNT ON;

    SET @SORTEOMULTIPLIER = 401;
	SET @C_INICIO_OPERACION = 600;
	SET @C_FIN_OPERACION    = 2230;
  END;
GO

  
  
  -- FUNCTION AND PROCEDURE IMPLEMENTATIONS
  IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_SUM_MES', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_MES;
GO

CREATE     FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_MES(@P_FECHA DATETIME, @P_INCREMENTO INTEGER) RETURNS VARCHAR(4000) AS
 BEGIN
    DECLARE @L_FECHATMP DATETIME;
   

   /*
    SELECT @L_FECHATMP = CONVERT(ISNULL(DATETIME, TO_CHAR(CONVERT(DATETIME, DATEADD(MONTH, @P_INCREMENTO, CONVERT(DATETIME, @P_FECHA, 'DD/MM/YYYY'))),
                           'DD/MM/YYYY'), '') + ISNULL(TO_CHAR(@P_FECHA, ' HH24:MI'), ''),
                   'DD/MM/YYYY HH24:MI');
	*/
	
	SET @L_FECHATMP = DATEADD(MONTH, @P_INCREMENTO,@P_FECHA)
	
    --RETURN(TO_CHAR(@L_FECHATMP, 'DD/MM/YYYY HH24:MI'));
	RETURN FORMAT(@L_FECHATMP,'dd/MM/yyyy HH:mm')

  END;
  GO

IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_SUM_DIA', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_DIA;
GO

CREATE     FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_DIA(@P_FECHA DATETIME, @P_INCREMENTO INTEGER) RETURNS VARCHAR(4000) AS
 BEGIN
    DECLARE @L_FECHATMP DATETIME;
   

   /*
    SELECT @L_FECHATMP = CONVERT(ISNULL(DATETIME, TO_CHAR((@P_FECHA + @P_INCREMENTO), 'DD/MM/YYYY'), '') +
                   ISNULL(TO_CHAR(@P_FECHA, ' HH24:MI'), ''),
                   'DD/MM/YYYY HH24:MI')
     ;
	
    RETURN(TO_CHAR(@L_FECHATMP, 'DD/MM/YYYY HH24:MI'));
	*/
	
	SET @L_FECHATMP = DATEADD(DAY, @P_INCREMENTO,@P_FECHA)
	RETURN FORMAT(@L_FECHATMP,'dd/MM/yyyy HH:mm')

END;
GO

  IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_SUM_DIA_HABIL', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_DIA_HABIL;
GO

CREATE     FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_DIA_HABIL(@P_FECHA DATETIME, @P_INCREMENTO INTEGER) RETURNS VARCHAR(4000) AS
 BEGIN
    DECLARE @L_FECHATMP DATETIME;
    DECLARE @L_CANT     NUMERIC(22,0);
   

   /*
    SELECT @L_FECHATMP = CONVERT(ISNULL(DATETIME, TO_CHAR((@P_FECHA + @P_INCREMENTO), 'DD/MM/YYYY'), '') +
                   ISNULL(TO_CHAR(@P_FECHA, ' HH24:MI'), ''),
                   'DD/MM/YYYY HH24:MI')
     ;
	*/
	SET @L_FECHATMP = DATEADD(DAY, @P_INCREMENTO,@P_FECHA)
	
    SELECT @L_CANT = SUM(CANT)
      FROM (SELECT COUNT(*) AS CANT
              FROM SFG_CONCILIACION.CON_CALENDARIO_GRAL CG
             WHERE FORMAT(CG.FECHA_CALENDARIO,'yyyy-MM-dd') = FORMAT(@L_FECHATMP,'yyyy-MM-dd')
               AND datepart(dw,CG.FECHA_CALENDARIO) IN (1, 7)
            UNION
            SELECT COUNT(*) AS CANT
              FROM SFG_CONCILIACION.CON_CALENDARIO_FEST_GRAL CF,
                   SFG_CONCILIACION.CON_CALENDARIO_GRAL      CG
             WHERE CG.ID_CALENDARIO_GRAL = CF.CODCALENDARIO_GRAL
               AND FORMAT(CG.FECHA_CALENDARIO,'yyyy-MM-dd') = FORMAT(@L_FECHATMP,'yyyy-MM-dd')
		) s;
		
    IF @L_CANT > 0 BEGIN
      --SET @L_FECHATMP = CONVERT(DATETIME, SUM_DIA_HABIL(@P_FECHA + 1, @P_INCREMENTO), 'DD/MM/YYYY HH24:MI');
	  SET @L_FECHATMP = DATEADD(DAY, @P_INCREMENTO + 1,@P_FECHA)
    END 

    --RETURN(TO_CHAR(@L_FECHATMP, 'DD/MM/YYYY HH24:MI'));
	RETURN FORMAT(@L_FECHATMP,'dd/MM/yyyy HH:mm')
  END;
 GO 

  IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_SUM_DIA_NO_HABIL', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_DIA_NO_HABIL;
GO

CREATE     FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_DIA_NO_HABIL(@P_FECHA DATETIME, @P_INCREMENTO INTEGER)
    RETURNS VARCHAR(4000) AS
 BEGIN
    DECLARE @L_FECHATMP DATETIME;
    DECLARE @L_CANT     NUMERIC(22,0);
   
	/*
    SELECT @L_FECHATMP = CONVERT(ISNULL(DATETIME, TO_CHAR((@P_FECHA + @P_INCREMENTO), 'DD/MM/YYYY'), '') +
                   ISNULL(TO_CHAR(@P_FECHA, ' HH24:MI'), ''),
                   'DD/MM/YYYY HH24:MI')
     ;
	 */
	SET @L_FECHATMP = DATEADD(DAY, @P_INCREMENTO,@P_FECHA)

    SELECT @L_CANT = SUM(CANT)
      FROM (SELECT COUNT(*) AS CANT
              FROM SFG_CONCILIACION.CON_CALENDARIO_GRAL CG
             WHERE FORMAT(CG.FECHA_CALENDARIO,'yyyy-MM-dd') = FORMAT(@L_FECHATMP,'yyyy-MM-dd')
               AND datepart(dw,CG.FECHA_CALENDARIO) IN (1, 7)
			   
            UNION
            SELECT COUNT(*) AS CANT
              FROM SFG_CONCILIACION.CON_CALENDARIO_FEST_GRAL CF,
                   SFG_CONCILIACION.CON_CALENDARIO_GRAL      CG
             WHERE CG.ID_CALENDARIO_GRAL = CF.CODCALENDARIO_GRAL
			   AND FORMAT(CG.FECHA_CALENDARIO,'yyyy-MM-dd') = FORMAT(@L_FECHATMP,'yyyy-MM-dd')
		) s;

    IF @L_CANT = 0 BEGIN
      --SET @L_FECHATMP = CONVERT(DATETIME, SUM_DIA_HABIL(@P_FECHA + 1, @P_INCREMENTO),'DD/MM/YYYY HH24:MI');
	  SET @L_FECHATMP = DATEADD(DAY, @P_INCREMENTO + 1,@P_FECHA)
    END 

    --RETURN(TO_CHAR(@L_FECHATMP, 'DD/MM/YYYY HH24:MI'));
	RETURN FORMAT(@L_FECHATMP,'dd/MM/yyyy HH:mm')

  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_SUM_DIA_DATE', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_DIA_DATE;
GO

CREATE     FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_DIA_DATE(@P_FECHA DATETIME, @P_INCREMENTO INTEGER) RETURNS DATETIME AS
 BEGIN
    DECLARE @TMPFECHA VARCHAR(255);
   
    --SET @TMPFECHA = SUM_DIA(@P_FECHA, @P_INCREMENTO);
    --RETURN CONVERT(DATETIME, @TMPFECHA, 'DD/MM/YYYY HH24:MI');
	RETURN DATEADD(DAY, @P_INCREMENTO,@P_FECHA)
  END;
GO

IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_SUM_SEMANA', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_SEMANA;
GO

CREATE     FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_SEMANA(@P_FECHA DATETIME, @P_INCREMENTO INTEGER) RETURNS VARCHAR(4000) AS
 BEGIN
    
	/*
	DECLARE @L_FECHATMP DATETIME;
    SELECT @L_FECHATMP = CONVERT(ISNULL(DATETIME, TO_CHAR((@P_FECHA + (@P_INCREMENTO * 7)), 'DD/MM/YYYY'), '') +
                   ISNULL(TO_CHAR(@P_FECHA, ' HH24:MI'), ''),
                   'DD/MM/YYYY HH24:MI')
     ;

    RETURN(TO_CHAR(@L_FECHATMP, 'DD/MM/YYYY HH24:MI'));
	*/
	RETURN FORMAT(DATEADD(WK, @P_INCREMENTO, @P_FECHA), 'dd/MM/yyyy HH:mm' )
  END;
GO

 IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_SUM_HORA', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_HORA;
GO

CREATE     FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_HORA(@P_FECHA_PROG DATETIME, @P_FECHA_ACTU DATETIME) RETURNS VARCHAR(4000) AS
 BEGIN
    DECLARE @L_FECHATMP VARCHAR(MAX);
   
    IF datepart(mi, @P_FECHA_PROG) = datepart(mi, @P_FECHA_ACTU) BEGIN
      SET @L_FECHATMP = 'TRUE';
    END
    ELSE BEGIN
      SET @L_FECHATMP = 'FALSE';
    END 
    RETURN @L_FECHATMP
  END;
GO  

  IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_SUM_HORA_6_10', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_HORA_6_10;
GO

CREATE     FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_HORA_6_10(@P_FECHA_PROG DATETIME, @P_FECHA_ACTU DATETIME)
    RETURNS VARCHAR(4000) AS
 BEGIN
    DECLARE @L_FECHATMP  VARCHAR(MAX);
    DECLARE @L_HORA_ACTU NUMERIC(22,0);
	
	DECLARE @SORTEOMULTIPLIER INT = 401,@C_INICIO_OPERACION INT = 600, @C_FIN_OPERACION INT = 2230
	--EXEC WSXML_SFG.SFG_PACKAGE_CONSTANT @SORTEOMULTIPLIER  OUT, @C_INICIO_OPERACION OUT, @C_FIN_OPERACION  OUT
	   
    IF datepart(mi, @P_FECHA_PROG) = datepart(mi, @P_FECHA_ACTU) BEGIN

      --SET @L_HORA_ACTU = TO_CHAR(@P_FECHA_ACTU, 'HH24MI');
	  SET @L_HORA_ACTU = RIGHT(REPLICATE('0', 2) + left(datepart(hour,@P_FECHA_ACTU),2), 2) +  RIGHT(REPLICATE('0', 2) + left(datepart(minute,@P_FECHA_ACTU),2), 2);

      IF @L_HORA_ACTU < @C_INICIO_OPERACION or @L_HORA_ACTU > @C_FIN_OPERACION BEGIN

        SET @L_FECHATMP = 'FALSE';

      END
      ELSE BEGIN
        SET @L_FECHATMP = 'TRUE';
      END 
    END
    ELSE BEGIN
      SET @L_FECHATMP = 'FALSE';
    END 
    RETURN(@L_FECHATMP);
  END;
GO

   IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_SUM_HORA_8_10', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_HORA_8_10;
GO

CREATE       FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_HORA_8_10(@P_FECHA_PROG DATETIME, @P_FECHA_ACTU DATETIME)
    RETURNS VARCHAR(4000) AS
 BEGIN
    DECLARE @L_FECHATMP  VARCHAR(MAX);
    DECLARE @L_HORA_ACTU NUMERIC(22,0);
	
	DECLARE @SORTEOMULTIPLIER INT = 401,@C_INICIO_OPERACION INT = 600, @C_FIN_OPERACION INT = 2230
	--EXEC WSXML_SFG.SFG_PACKAGE_CONSTANT @SORTEOMULTIPLIER  OUT, @C_INICIO_OPERACION OUT, @C_FIN_OPERACION  OUT
   
    IF DATEPART(mi, @P_FECHA_PROG) = datepart(mi,@P_FECHA_ACTU) BEGIN

      --SET @L_HORA_ACTU = TO_CHAR(@P_FECHA_ACTU, 'HH24MI');
	  SET @L_HORA_ACTU = RIGHT(REPLICATE('0', 2) + left(datepart(hour,@P_FECHA_ACTU),2), 2) +  RIGHT(REPLICATE('0', 2) + left(datepart(minute,@P_FECHA_ACTU),2), 2);

      IF @L_HORA_ACTU < 800 or @L_HORA_ACTU > @C_FIN_OPERACION BEGIN

        SET @L_FECHATMP = 'FALSE';

      END
      ELSE BEGIN
        SET @L_FECHATMP = 'TRUE';
      END 
    END
    ELSE BEGIN
      SET @L_FECHATMP = 'FALSE';
    END 
    RETURN(@L_FECHATMP);
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_SUM_DOSHORAS', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_DOSHORAS;
GO

CREATE     FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_DOSHORAS(@P_FECHA_PROG DATETIME, @P_FECHA_ACTU DATETIME) RETURNS VARCHAR(4000) AS
 BEGIN
    DECLARE @L_FECHATMP VARCHAR(MAX);
   
    IF datepart(mi,@P_FECHA_PROG) = datepart(mi,@P_FECHA_ACTU) AND
       --(TO_NUMBER(TO_CHAR(@P_FECHA_PROG, 'HH24')) % 2) = (TO_NUMBER(TO_CHAR(@P_FECHA_ACTU, 'HH24')) % 2) 
	   datepart(hour,@P_FECHA_PROG) % 2 = datepart(hour, @P_FECHA_ACTU) % 2
	   
	
      SET @L_FECHATMP = 'TRUE';
   
    ELSE 
      SET @L_FECHATMP = 'FALSE';
   
    RETURN(@L_FECHATMP);
  END;
GO
 
  IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_SUM_DOSHORAS_6_10', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_DOSHORAS_6_10;
GO

CREATE     FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_DOSHORAS_6_10(@P_FECHA_PROG DATETIME, @P_FECHA_ACTU DATETIME)
    RETURNS VARCHAR(4000) AS
 BEGIN
    DECLARE @L_FECHATMP  VARCHAR(MAX);
    DECLARE @L_HORA_ACTU NUMERIC(22,0);
	
	DECLARE @SORTEOMULTIPLIER INT = 401,@C_INICIO_OPERACION INT = 600, @C_FIN_OPERACION INT = 2230
	--EXEC WSXML_SFG.SFG_PACKAGE_CONSTANT @SORTEOMULTIPLIER  OUT, @C_INICIO_OPERACION OUT, @C_FIN_OPERACION  OUT
	   
    IF datepart(mi, @P_FECHA_PROG) = datepart(mi, @P_FECHA_ACTU) AND
       datepart(hour,@P_FECHA_PROG) % 2 = datepart(hour, @P_FECHA_ACTU) % 2 BEGIN

      SET @L_HORA_ACTU = RIGHT(REPLICATE('0', 2) + left(datepart(hour,@P_FECHA_ACTU),2), 2) +  RIGHT(REPLICATE('0', 2) + left(datepart(minute,@P_FECHA_ACTU),2), 2); --TO_CHAR(@P_FECHA_ACTU, 'HH24MI');

      IF @L_HORA_ACTU < @C_INICIO_OPERACION or @L_HORA_ACTU > @C_FIN_OPERACION BEGIN

        SET @L_FECHATMP = 'FALSE';

      END
      ELSE BEGIN
        SET @L_FECHATMP = 'TRUE';
      END 

    END
    ELSE BEGIN
      SET @L_FECHATMP = 'FALSE';
    END 
    RETURN(@L_FECHATMP);
  END;
GO

IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_SUM_TREINTAMINS', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_TREINTAMINS;
GO

CREATE     FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_TREINTAMINS(@P_FECHA_PROG DATETIME, @P_FECHA_ACTU DATETIME)
    RETURNS VARCHAR(4000) AS
 BEGIN
    DECLARE @L_FECHATMP VARCHAR(MAX);
   
    IF datepart(mi, @P_FECHA_PROG) = datepart(mi, @P_FECHA_ACTU) OR
       datepart(mi, (@P_FECHA_PROG + 30 / 1440)) = datepart(mi, @P_FECHA_ACTU) 
	BEGIN
      SET @L_FECHATMP = 'TRUE';
    END
    ELSE BEGIN
      SET @L_FECHATMP = 'FALSE';
    END 
    RETURN(@L_FECHATMP);
  END;
GO

IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_SUM_TREINTAMINS_6_10', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_TREINTAMINS_6_10;
GO

CREATE     FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_TREINTAMINS_6_10(@P_FECHA_PROG DATETIME, @P_FECHA_ACTU DATETIME)
    RETURNS VARCHAR(4000) AS
 BEGIN
    DECLARE @L_FECHATMP  VARCHAR(MAX);
    DECLARE @L_HORA_ACTU NUMERIC(22,0);
   
	DECLARE @SORTEOMULTIPLIER INT = 401,@C_INICIO_OPERACION INT = 600, @C_FIN_OPERACION INT = 2230
	--EXEC WSXML_SFG.SFG_PACKAGE_CONSTANT @SORTEOMULTIPLIER  OUT, @C_INICIO_OPERACION OUT, @C_FIN_OPERACION  OUT
	
	
    IF datepart(mi, @P_FECHA_PROG) = datepart(mi, @P_FECHA_ACTU) OR
       datepart(mi, (@P_FECHA_PROG + 30 / 1440)) = datepart(mi, @P_FECHA_ACTU) 
	BEGIN

      SET @L_HORA_ACTU =  RIGHT(REPLICATE('0', 2) + left(datepart(hour,@P_FECHA_ACTU),2), 2) +  RIGHT(REPLICATE('0', 2) + left(datepart(minute,@P_FECHA_ACTU),2), 2); --TO_CHAR(@P_FECHA_ACTU, 'HH24MI');

      IF @L_HORA_ACTU < @C_INICIO_OPERACION or @L_HORA_ACTU > @C_FIN_OPERACION BEGIN

        SET @L_FECHATMP = 'FALSE';

      END
      ELSE BEGIN
        SET @L_FECHATMP = 'TRUE';
      END 

    END
    ELSE BEGIN
      SET @L_FECHATMP = 'FALSE';
    END 
    RETURN(@L_FECHATMP);
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_SUM_VEINTEMINS', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_VEINTEMINS;
GO

CREATE     FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_VEINTEMINS(@P_FECHA_PROG DATETIME, @P_FECHA_ACTU DATETIME)
    RETURNS VARCHAR(4000) AS
 BEGIN
    DECLARE @L_FECHATMP VARCHAR(MAX);
   
    IF datepart(mi, @P_FECHA_PROG) = datepart(mi, @P_FECHA_ACTU) OR
       datepart(mi,(@P_FECHA_PROG + 20 / 1440)) = datepart(mi, (@P_FECHA_ACTU)) OR
       datepart(mi,(@P_FECHA_PROG + 40 / 1440)) = datepart(mi, (@P_FECHA_ACTU)) BEGIN
      SET @L_FECHATMP = 'TRUE';
    END
    ELSE BEGIN
      SET @L_FECHATMP = 'FALSE';
    END 
    RETURN(@L_FECHATMP);
  END;
GO

IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_SUM_VEINTEMINS_6_10', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_VEINTEMINS_6_10;
GO

CREATE     FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_VEINTEMINS_6_10(@P_FECHA_PROG DATETIME, @P_FECHA_ACTU DATETIME)
    RETURNS VARCHAR(4000) AS
 BEGIN
    DECLARE @L_FECHATMP  VARCHAR(MAX);
    DECLARE @L_HORA_ACTU NUMERIC(22,0);
	
	DECLARE @SORTEOMULTIPLIER INT = 401,@C_INICIO_OPERACION INT = 600, @C_FIN_OPERACION INT = 2230
	--EXEC WSXML_SFG.SFG_PACKAGE_CONSTANT @SORTEOMULTIPLIER  OUT, @C_INICIO_OPERACION OUT, @C_FIN_OPERACION  OUT
	
	
    IF datepart(mi,(@P_FECHA_PROG)) = datepart(mi, (@P_FECHA_ACTU)) OR
       datepart(mi, (@P_FECHA_PROG + 20 / 1440)) = datepart(mi, (@P_FECHA_ACTU)) OR
       datepart(mi, (@P_FECHA_PROG + 40 / 1440)) = datepart(mi, (@P_FECHA_ACTU)) 
	BEGIN

      SET @L_HORA_ACTU = RIGHT(REPLICATE('0', 2) + left(datepart(hour,@P_FECHA_ACTU),2), 2) +  RIGHT(REPLICATE('0', 2) + left(datepart(minute,@P_FECHA_ACTU),2), 2); -- TO_CHAR(@P_FECHA_ACTU, 'HH24MI');

      IF @L_HORA_ACTU < @C_INICIO_OPERACION or @L_HORA_ACTU > @C_FIN_OPERACION BEGIN

        SET @L_FECHATMP = 'FALSE';

      END
      ELSE BEGIN
        SET @L_FECHATMP = 'TRUE';
      END 

    END
    ELSE BEGIN
      SET @L_FECHATMP = 'FALSE';
    END 
    RETURN(@L_FECHATMP);
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_SUM_DIEZMINS', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_DIEZMINS;
GO

CREATE     FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_DIEZMINS(@P_FECHA_PROG DATETIME, @P_FECHA_ACTU DATETIME) RETURNS VARCHAR(4000) AS
 BEGIN
    DECLARE @L_FECHATMP VARCHAR(MAX);
   
    IF datepart(mi,(@P_FECHA_PROG)) = datepart(mi,(@P_FECHA_ACTU)) OR
       datepart(mi, (@P_FECHA_PROG + 10 / 1440)) =
       datepart(mi, (@P_FECHA_ACTU)) OR
       datepart(mi, (@P_FECHA_PROG + 20 / 1440)) =
       datepart(mi, (@P_FECHA_ACTU)) OR
       datepart(mi, (@P_FECHA_PROG + 30 / 1440)) =
       datepart(mi, (@P_FECHA_ACTU)) OR
       datepart(mi, (@P_FECHA_PROG + 40 / 1440)) =
       datepart(mi, (@P_FECHA_ACTU)) OR
       datepart(mi, (@P_FECHA_PROG + 50 / 1440)) =
       datepart(mi, @P_FECHA_ACTU) 
	BEGIN
      SET @L_FECHATMP = 'TRUE';
    END
    ELSE BEGIN
      SET @L_FECHATMP = 'FALSE';
    END 
    RETURN(@L_FECHATMP);
  END;
GO
  
IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_SUM_DIEZMINS_6_10', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_DIEZMINS_6_10;
GO

CREATE     FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_DIEZMINS_6_10(@P_FECHA_PROG DATETIME, @P_FECHA_ACTU DATETIME)
    RETURNS VARCHAR(4000) AS
 BEGIN
    DECLARE @L_FECHATMP  VARCHAR(MAX);
    DECLARE @L_HORA_ACTU NUMERIC(22,0);

	DECLARE @SORTEOMULTIPLIER INT = 401,@C_INICIO_OPERACION INT = 600, @C_FIN_OPERACION INT = 2230
	--EXEC WSXML_SFG.SFG_PACKAGE_CONSTANT @SORTEOMULTIPLIER  OUT, @C_INICIO_OPERACION OUT, @C_FIN_OPERACION  OUT	
	   
    IF DATEPART(MI,(@P_FECHA_PROG)) = DATEPART(MI,(@P_FECHA_ACTU)) OR
       DATEPART(MI,(@P_FECHA_PROG + 10 / 1440)) =
       DATEPART(MI,(@P_FECHA_ACTU)) OR
       DATEPART(MI,(@P_FECHA_PROG + 20 / 1440)) =
       DATEPART(MI,(@P_FECHA_ACTU)) OR
       DATEPART(MI,(@P_FECHA_PROG + 30 / 1440)) =
       DATEPART(MI,(@P_FECHA_ACTU)) OR
       DATEPART(MI,(@P_FECHA_PROG + 40 / 1440)) =
       DATEPART(MI,(@P_FECHA_ACTU)) OR
       DATEPART(MI,(@P_FECHA_PROG + 50 / 1440)) =
       DATEPART(MI,(@P_FECHA_ACTU)) BEGIN

      SET @L_HORA_ACTU = FORMAT(@P_FECHA_ACTU, 'HHmm');

      IF @L_HORA_ACTU < @C_INICIO_OPERACION or @L_HORA_ACTU > @C_FIN_OPERACION BEGIN

        SET @L_FECHATMP = 'FALSE';

      END
      ELSE BEGIN
        SET @L_FECHATMP = 'TRUE';
      END 

    END
    ELSE BEGIN
      SET @L_FECHATMP = 'FALSE';
    END 
    RETURN(@L_FECHATMP);
  END;
GO


IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_SUM_TRESMINS_6_10', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_TRESMINS_6_10;
GO

CREATE FUNCTION WSXML_SFG.SFG_PACKAGE_SUM_TRESMINS_6_10(@P_FECHA_PROG DATETIME, @P_FECHA_ACTU DATETIME)
    RETURNS VARCHAR(4000) AS
 BEGIN
    DECLARE @L_FECHATMP  VARCHAR(MAX);
    DECLARE @L_HORA_ACTU NUMERIC(22,0);

	DECLARE @SORTEOMULTIPLIER INT = 401, @C_INICIO_OPERACION  INT = 600, @C_FIN_OPERACION INT = 2230;
	--EXEC WSXML_SFG.SFG_PACKAGE_CONSTANT @SORTEOMULTIPLIER  OUT, @C_INICIO_OPERACION OUT, @C_FIN_OPERACION OUT
	
   
    IF datepart(MI,(@P_FECHA_PROG)) = DATEPART(MI,(@P_FECHA_ACTU)) OR
       DATEPART(MI,(@P_FECHA_PROG + 3 / 1440)) =
       DATEPART(MI,(@P_FECHA_ACTU)) OR
       DATEPART(MI,(@P_FECHA_PROG + 6 / 1440)) =
       DATEPART(MI,(@P_FECHA_ACTU)) OR
       DATEPART(MI,(@P_FECHA_PROG + 9 / 1440)) =
       DATEPART(MI,(@P_FECHA_ACTU)) OR
       DATEPART(MI,(@P_FECHA_PROG + 12 / 1440)) =
       DATEPART(MI,(@P_FECHA_ACTU)) OR
       DATEPART(MI,(@P_FECHA_PROG + 15 / 1440)) =
       DATEPART(MI,(@P_FECHA_ACTU)) OR
       DATEPART(MI,(@P_FECHA_PROG + 18 / 1440)) =
       DATEPART(MI,(@P_FECHA_ACTU)) OR
       DATEPART(MI,(@P_FECHA_PROG + 21 / 1440)) =
       DATEPART(MI,(@P_FECHA_ACTU)) OR
       DATEPART(MI,(@P_FECHA_PROG + 24 / 1440)) =
       DATEPART(MI,(@P_FECHA_ACTU)) OR
       DATEPART(MI,(@P_FECHA_PROG + 27 / 1440)) =
       DATEPART(MI,(@P_FECHA_ACTU)) OR
       DATEPART(MI,(@P_FECHA_PROG + 30 / 1440)) =
       DATEPART(MI,(@P_FECHA_ACTU)) OR
       DATEPART(MI,(@P_FECHA_PROG + 33 / 1440)) =
       DATEPART(MI,(@P_FECHA_ACTU)) OR
       DATEPART(MI,(@P_FECHA_PROG + 36 / 1440)) =
       DATEPART(MI,(@P_FECHA_ACTU)) OR
       DATEPART(MI,(@P_FECHA_PROG + 39 / 1440)) =
       DATEPART(MI,(@P_FECHA_ACTU)) OR
       DATEPART(MI,(@P_FECHA_PROG + 42 / 1440)) =
       DATEPART(MI,(@P_FECHA_ACTU)) OR
       DATEPART(MI,(@P_FECHA_PROG + 45 / 1440)) =
       DATEPART(MI,(@P_FECHA_ACTU)) OR
       DATEPART(MI,(@P_FECHA_PROG + 48 / 1440)) =
       DATEPART(MI,(@P_FECHA_ACTU)) OR
       DATEPART(MI,(@P_FECHA_PROG + 51 / 1440)) =
       DATEPART(MI,(@P_FECHA_ACTU)) OR
       DATEPART(MI,(@P_FECHA_PROG + 54 / 1440)) =
       DATEPART(MI,(@P_FECHA_ACTU)) OR
       DATEPART(MI,(@P_FECHA_PROG + 57 / 1440)) =
       DATEPART(MI,(@P_FECHA_ACTU)) BEGIN

      SET @L_HORA_ACTU = FORMAT(@P_FECHA_ACTU, 'HHmm');

      IF @L_HORA_ACTU < @C_INICIO_OPERACION or @L_HORA_ACTU > @C_FIN_OPERACION BEGIN

        SET @L_FECHATMP = 'FALSE';

      END
      ELSE BEGIN
        SET @L_FECHATMP = 'TRUE';
      END 

    END
    ELSE BEGIN
      SET @L_FECHATMP = 'FALSE';
    END 
    RETURN(@L_FECHATMP);
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_UNA_VEZ', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFG_PACKAGE_UNA_VEZ;
GO

CREATE     FUNCTION WSXML_SFG.SFG_PACKAGE_UNA_VEZ(@P_FECHA_PROG DATETIME, @P_FECHA_ACTU DATETIME) RETURNS VARCHAR(4000) AS
 BEGIN
    DECLARE @L_FECHATMP VARCHAR(MAX);
   

    IF FORMAT((@P_FECHA_PROG), 'dd/MM/yyyy HH:mm') = FORMAT((@P_FECHA_ACTU), 'dd/MM/yyyy HH:mm') BEGIN

      SET @L_FECHATMP = 'TRUE';
    END
    ELSE BEGIN
      SET @L_FECHATMP = 'FALSE';
    END 

    RETURN(@L_FECHATMP);

  END;
GO

IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_ENVIARCORREO', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFG_PACKAGE_ENVIARCORREO;
GO

CREATE     FUNCTION WSXML_SFG.SFG_PACKAGE_ENVIARCORREO(@RECIBE        VARCHAR(4000),
                        @COPIADO       VARCHAR(4000),
                        @COPIADOOCULTO VARCHAR(4000),
                        @ASUNTO        VARCHAR(4000),
                        @MENSAJE       VARCHAR(4000)) RETURNS NUMERIC(38,0) AS
 BEGIN
	RETURN 0
 /*
	--No es posible migrar la funcion ya que el motor no soporta la funcionaldad UTL_SMTP
	
    DECLARE @HOST_      VARCHAR(50) = WSXML_SFG.PARAMETRO_F('SMTPServer');
    DECLARE @ENVIA     VARCHAR(100) = PARAMETRO_F('MailerDaemonMail');
    DECLARE @MAILHOST  VARCHAR(30) = WSXML_SFG.LTRIM(RTRIM(@HOST_));
    DECLARE @MAIL_CONN UTL_SMTP.CONNECTION;
    DECLARE @CRLF      VARCHAR(2) = ISNULL(CHAR(13), '') + ISNULL(CHAR(10), '');
    DECLARE @V_HEADER  VARCHAR(1000);
   

    SET @MAIL_CONN = UTL_SMTP.OPEN_CONNECTION(@MAILHOST, 25);
    UTL_SMTP.EHLO(@MAIL_CONN, @MAILHOST);
    UTL_SMTP.EHLO(@MAIL_CONN, @MAILHOST);


    -- Formato dd/mm/yyyy hh:mm

    SET @V_HEADER = 'DATE: ' + TO_CHAR(GETDATE(), 'DD/MM/YY HH24:MI') + ISNULL(@CRLF, '') +

                'FROM: <' + ISNULL(@ENVIA, '') + '>' + ISNULL(@CRLF, '') +

                'SUBJECT: ' + ISNULL(@ASUNTO, '') + ISNULL(@CRLF, '') +

                'TO: ' + ISNULL(@RECIBE, '') + ISNULL(@CRLF, '') +

                'CC: ' + ISNULL(@COPIADO, '') + ISNULL(@CRLF, '');

    UTL_SMTP.HELO(@MAIL_CONN, @MAILHOST);

    UTL_SMTP.MAIL(@MAIL_CONN, @ENVIA);
    UTL_SMTP.RCPT(@MAIL_CONN, @RECIBE);

    IF @COPIADO IS NOT NULL BEGIN
      UTL_SMTP.RCPT(@MAIL_CONN, @COPIADO);
    END 

    IF @COPIADOOCULTO IS NOT NULL BEGIN
      UTL_SMTP.RCPT(@MAIL_CONN, @COPIADOOCULTO);
    END 

    UTL_SMTP.OPEN_DATA(@MAIL_CONN);
    UTL_SMTP.WRITE_DATA(@MAIL_CONN, @V_HEADER);
    UTL_SMTP.WRITE_DATA(@MAIL_CONN, ISNULL(@CRLF, '') + ISNULL(@MENSAJE, ''));
    UTL_SMTP.CLOSE_DATA(@MAIL_CONN);
    UTL_SMTP.QUIT(@MAIL_CONN);

    RETURN(SQLCODE);

  EXCEPTION
    WHEN OTHERS THEN
      RETURN(SQLCODE);

        DECLARE @CCODESTADOABIERTA NUMERIC(22,0);
        DECLARE @CCODUSUARIO       NUMERIC(22,0);
      BEGIN
        EXEC WSXML_SFG.SFGPARAMETRO_GETVALORBYKEY 'ALERTAESTADOABIERTO',@CCODESTADOABIERTA OUT
          DECLARE @CUSERNAME NVARCHAR(1000);
        BEGIN
          SELECT @CCODUSUARIO = CODUSUARIORESPONSABLE
            FROM WSXML_SFG.PROCESO
           WHERE ID_PROCESO = SFGALERTA.PROCESONOTIFICACION;
        
			IF @@ROWCOUNT = 0 BEGIN
				EXEC WSXML_SFG.SFGPARAMETRO_GETVALORBYKEY 'USUARIOALERTA', @CUSERNAME OUT
				EXEC WSXML_SFG.SFGUSUARIO_GETCODIGOBYNOMUSUARIO @CUSERNAME, @CCODUSUARIO OUT
			END
        END;
        SFGALERTA.GenerarAlerta(SFGALERTA.TIPOADVERTENCIA,
                                'SFGMAILER',
                                'No se pudo notificar a ' + ISNULL(@RECIBE, '') +
                                ' acerca de ' + ISNULL(@ASUNTO, ''),
                                @CCODUSUARIO);
      EXCEPTION
        WHEN OTHERS THEN
          NULL;
      END;
*/
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_ENVIARCORREOHTML', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFG_PACKAGE_ENVIARCORREOHTML;
GO

CREATE     FUNCTION WSXML_SFG.SFG_PACKAGE_ENVIARCORREOHTML(@RECIBE        VARCHAR(4000),
                            @COPIADO       VARCHAR(4000),
                            @COPIADOOCULTO VARCHAR(4000),
                            @ASUNTO        VARCHAR(4000),
                            @MENSAJEHTML   VARCHAR(max)) RETURNS NUMERIC(38,0) AS
 BEGIN RETURN 0
 /*
	--No es posible migrar la funcion ya que el motor no soporta la funcionaldad UTL_SMTP
    DECLARE @HOST      VARCHAR(50) = PARAMETRO_F('SMTPServer');
    DECLARE @ENVIA     VARCHAR(100) = PARAMETRO_F('MailerDaemonMail');
    DECLARE @ENVIANAME VARCHAR(100) = PARAMETRO_F('MailerDaemonName');
    DECLARE @MAILHOST  VARCHAR(30) = LTRIM(RTRIM(@HOST));
    DECLARE @MAIL_CONN UTL_SMTP.CONNECTION;
    DECLARE @CRLF      VARCHAR(2) = ISNULL(CHAR(13), '') + ISNULL(CHAR(10), '');
    -- HTML
    DECLARE @l_boundary  VARCHAR(255) DEFAULT 'a1b2c3d4e3f2g1';
    DECLARE @l_body_html VARCHAR(max) = EMPTY_CLOB; --This LOB will be the email message
    DECLARE @l_offset    NUMERIC(22,0);
    DECLARE @l_ammount   NUMERIC(22,0);
    DECLARE @l_temp      VARCHAR(MAX) DEFAULT NULL;

    DECLARE @errormessage VARCHAR(MAX);
   
    SET @MAIL_CONN = UTL_SMTP.OPEN_CONNECTION(@MAILHOST, 25);
    UTL_SMTP.EHLO(@MAIL_CONN, @MAILHOST);
    UTL_SMTP.EHLO(@MAIL_CONN, @MAILHOST);
    UTL_SMTP.HELO(@MAIL_CONN, @MAILHOST);
    UTL_SMTP.MAIL(@MAIL_CONN, @ENVIA);
    UTL_SMTP.RCPT(@MAIL_CONN, @RECIBE);

    IF @COPIADO IS NOT NULL BEGIN
      UTL_SMTP.RCPT(@MAIL_CONN, @COPIADO);
    END 

    IF @COPIADOOCULTO IS NOT NULL BEGIN
      UTL_SMTP.RCPT(@MAIL_CONN, @COPIADOOCULTO);
    END 


    SET @l_temp = isnull(@l_temp, '') + 'From: ' + ISNULL(@ENVIANAME, '') + ' <' + ISNULL(@ENVIA, '') + '>' + ISNULL(@CRLF, '');
    SET @l_temp = isnull(@l_temp, '') + 'Reply-To: ' + ISNULL(@ENVIA, '') + ISNULL(@CRLF, '');
    SET @l_temp = isnull(@l_temp, '') + 'To: ' + ISNULL(@RECIBE, '') + ISNULL(@CRLF, '');
    SET @l_temp = isnull(@l_temp, '') + 'Subject: ' + ISNULL(@ASUNTO, '') + ISNULL(@CRLF, '');
    SET @l_temp = isnull(@l_temp, '') + 'Date: ' +
              TO_CHAR(GETDATE(), 'Dy DD-Mon-YYYY HH24:MI:SS') + ' -0500' + ISNULL(@CRLF, '');
    SET @l_temp = isnull(@l_temp, '') + 'Message-ID: ' +
              ISNULL(TRANSLATE(ISNULL(@RECIBE, '') + 'KazRawks' +
                        to_char(getdate(), 'Dy-DD-Mon-YYYY-HH24-MI-SS'),
                        '012345.6789qwer@-tyuiop[kjhbv',
                        'abcdefghijklmnopqrstuvxyz'), '') + ISNULL(@CRLF, '');
    SET @l_temp = isnull(@l_temp, '') + 'MIME-Version: 1.0' + ISNULL(@CRLF, '');
    SET @l_temp = isnull(@l_temp, '') + 'Content-Type: multipart/alternative; boundary=' +
              isnull(char(34), '') + isnull(@l_boundary, '') + isnull(char(34), '') + ISNULL(@CRLF, '');
    SET @l_temp = isnull(@l_temp, '') + 'Content-Language: es-co';

    ----------------------------------------------------
    -- Write the headers
    dbms_lob.createtemporary(@l_body_html, false, 10);
    dbms_lob.write(@l_body_html, len(@l_temp), 1, @l_temp);

    IF @MENSAJEHTML IS NOT NULL BEGIN

      ----------------------------------------------------
      -- Write the HTML boundary
      SET @l_temp   = ISNULL(@CRLF, '') + ISNULL(@CRLF, '') + '--' + isnull(@l_boundary, '') + ISNULL(@CRLF, '');
      SET @l_temp   = isnull(@l_temp, '') + 'content-type: text/html;' + ISNULL(@CRLF, '') + ISNULL(@CRLF, '');
      SET @l_offset = dbms_lob.getlength(@l_body_html) + 1;
      dbms_lob.write(@l_body_html, len(@l_temp), @l_offset, @l_temp);

      ----------------------------------------------------
      -- Write the HTML portion of the message
      SET @l_offset = dbms_lob.getlength(@l_body_html) + 1;
      dbms_lob.write(@l_body_html,
                     len(@MENSAJEHTML),
                     @l_offset,
                     @MENSAJEHTML);

      ----------------------------------------------------
      -- Write the final html boundary
      SET @l_temp   = ISNULL(@CRLF, '') + '--' + isnull(@l_boundary, '') + '--' + isnull(char(13), '');
      SET @l_offset = dbms_lob.getlength(@l_body_html) + 1;
      dbms_lob.write(@l_body_html, len(@l_temp), @l_offset, @l_temp);

    END 

    ----------------------------------------------------
    -- Send the email in 2500 byte chunks to UTL_SMTP
    SET @l_offset  = 1;
    SET @l_ammount = 2500;
    UTL_SMTP.open_data(@MAIL_CONN);
    while @l_offset < dbms_lob.getlength(@l_body_html) begin
      UTL_SMTP.write_data(@MAIL_CONN,
                          dbms_lob.substr(@l_body_html, @l_ammount, @l_offset));
      SET @l_offset  = @l_offset + @l_ammount;
      SET @l_ammount = least(2500, dbms_lob.getlength(@l_body_html) - @l_ammount);
    end;
    UTL_SMTP.close_data(@MAIL_CONN);
    UTL_SMTP.quit(@MAIL_CONN);
    dbms_lob.freetemporary(@l_body_html);

    RETURN(521);
  EXCEPTION
    WHEN UTL_SMTP.TRANSIENT_ERROR OR UTL_SMTP.PERMANENT_ERROR THEN
      NULL;
    WHEN OTHERS THEN
      SET @errormessage = SQLERRM;
      SFGTMPTRACE.TraceLog(@errormessage, 'ENVIARCORREOHTML');
      RETURN(SQLCODE);
*/
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_ENVIARSMS', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFG_PACKAGE_ENVIARSMS;
GO

CREATE     FUNCTION WSXML_SFG.SFG_PACKAGE_ENVIARSMS(@RECIBE VARCHAR(4000), @ASUNTO VARCHAR(4000), @MENSAJE VARCHAR(4000))
    RETURNS NUMERIC(38,0) AS
  BEGIN
	--No es posible migrar la funcion ya que el motor no soporta la funcionaldad UTL_SMTP
    -- Calcular mensaje por numero?
    RETURN 0
	/*
	ENVIARCORREO(ISNULL(@RECIBE, '') + '@comcel.com',
                        NULL,
                        NULL,
                        'SFG SMS Service',
                        ISNULL(@ASUNTO, '') + ': ' + ISNULL(@MENSAJE, ''));
	*/
  END;
GO

IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_CALL_CORREO', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFG_PACKAGE_CALL_CORREO;
GO

CREATE     PROCEDURE WSXML_SFG.SFG_PACKAGE_CALL_CORREO(@RECIBE VARCHAR(4000), @ASUNTO VARCHAR(4000), @MENSAJE VARCHAR(4000)) AS
  BEGIN
  SET NOCOUNT ON;
      DECLARE @SUCCESS NUMERIC(38,0) = -1;
    BEGIN
		--No es posible migrar la funcion ya que el motor no soporta la funcionaldad UTL_SMTP
      SET @SUCCESS = 0 /*WSXML_SFG.SFG_PACKAGE_ENVIARCORREO(@RECIBE,
                                          NULL,
                                          NULL,
                                          @ASUNTO,
                                          @MENSAJE);*/
      IF @SUCCESS >= 0 BEGIN
        SELECT NULL; -- Success! Guardar exito?
      END 
    END;
  END;
GO


  IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_CALL_CORREOHTML', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFG_PACKAGE_CALL_CORREOHTML;
GO

CREATE     PROCEDURE WSXML_SFG.SFG_PACKAGE_CALL_CORREOHTML(@RECIBE      VARCHAR(4000),
                            @ASUNTO      VARCHAR(4000),
                            @MENSAJEHTML VARCHAR(max)) AS
  BEGIN
  SET NOCOUNT ON;
      DECLARE @SUCCESS NUMERIC(38,0) = -1;
    BEGIN
		--No es posible migrar la funcion ya que el motor no soporta la funcionaldad UTL_SMTP
      COMMIT;
      SET @SUCCESS = 0/*WSXML_SFG.SFG_PACKAGE_ENVIARCORREOHTML(@RECIBE,
                                              NULL,
                                              NULL,
                                              @ASUNTO,
                                              @MENSAJEHTML);
											  */
      IF @SUCCESS >= 0 BEGIN
        SELECT NULL; -- Success! Guardar exito?
      END 
    END;
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_CALL_SMS', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFG_PACKAGE_CALL_SMS;
GO

CREATE     PROCEDURE WSXML_SFG.SFG_PACKAGE_CALL_SMS(@RECIBE VARCHAR(4000), @ASUNTO VARCHAR(4000), @MENSAJE VARCHAR(4000)) AS
  BEGIN
  SET NOCOUNT ON;
      DECLARE @SUCCESS NUMERIC(38,0) = -1;
    BEGIN
      SET @SUCCESS = 0/*WSXML_SFG.SFG_PACKAGE_ENVIARSMS(@RECIBE, @ASUNTO, @MENSAJE);*/
      IF @SUCCESS >= 0 BEGIN
        SELECT NULL; -- Success! Guardar exito?
      END 
    END;
  END;
GO


  IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_GetNumeroCDCProc', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFG_PACKAGE_GetNumeroCDCProc;
GO

CREATE     PROCEDURE WSXML_SFG.SFG_PACKAGE_GetNumeroCDCProc(@FechaCDC DATETIME, @NumeroCDC NUMERIC(22,0) OUT) AS
  BEGIN
  SET NOCOUNT ON;
    SELECT @NumeroCDC = WSXML_SFG.SFG_PACKAGE_GETNUMEROCDC(@FechaCDC);
  END;
go

IF EXISTS (
    SELECT * FROM sys.objects WHERE OBJECT_NAME(object_id) = N'SFG_PACKAGE_GETNUMEROCDC'
    AND type IN (N'FN', N'IF', N'TF')
)
    DROP FUNCTION WSXML_SFG.SFG_PACKAGE_GETNUMEROCDC
GO

CREATE     FUNCTION WSXML_SFG.SFG_PACKAGE_GETNUMEROCDC(@FECHA DATETIME) RETURNS NUMERIC(22,0) AS
BEGIN
    DECLARE @strPARAM     NVARCHAR(255);
    DECLARE @iniNUMEROCDC NUMERIC(22,0);
    DECLARE @iniFECHACDC  DATETIME;
    DECLARE @sector       NUMERIC(22,0);
    DECLARE @difference   NUMERIC(22,0);

    BEGIN
	
		SET @strPARAM = WSXML_SFG.SFGPARAMETRO_GetValorByKey_F('NumeroCDCInicial')
		SET @iniNUMEROCDC = CONVERT(NUMERIC,@strPARAM);
	  
		SET @strPARAM = WSXML_SFG.SFGPARAMETRO_GetValorByKey_F('FechaCDCInicial')
		SET @iniFECHACDC = CONVERT(DATETIME, @strPARAM, 103);
	  
		SET @difference = WSXML_SFG.SFG_PACKAGE_DIAS_ENTRE(@iniFECHACDC, @FECHA);
		SET @sector = FLOOR(@difference / 100);
	  
		IF @sector > 0 
		BEGIN
			DECLARE @updNUMEROCDC NUMERIC(22,0);
			DECLARE @updFECHACDC  DATETIME;
			
			BEGIN
			  SET @updNUMEROCDC = @iniNUMEROCDC + (@sector * 100);
			  SET @updFECHACDC  = WSXML_SFG.SFG_PACKAGE_SUM_DIA_DATE(@iniFECHACDC,(@sector * 100));
			  
			  UPDATE WSXML_SFG.PARAMETRO
				 SET VALOR = @updNUMEROCDC
			   WHERE NOMPARAMETRO = 'NumeroCDCInicial';
			   
			  UPDATE WSXML_SFG.PARAMETRO
				 SET VALOR = FORMAT(@updFECHACDC, 'dd/MM/yyyy')
			   WHERE NOMPARAMETRO = 'FechaCDCInicial';
			  
			  IF @@ROWCOUNT = 0
				RETURN 0;
			END;
		END
			
		RETURN(@iniNUMEROCDC + @difference);
    
    END 
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_GETFECHACDC', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFG_PACKAGE_GETFECHACDC;
GO
CREATE     PROCEDURE WSXML_SFG.SFG_PACKAGE_GETFECHACDC(@NUMERO NUMERIC(22,0), @p_iniFECHACDC DATETIME OUT) AS
  BEGIN
      DECLARE @strPARAM     NVARCHAR(255);
      DECLARE @iniNUMEROCDC NUMERIC(22,0);
      DECLARE @iniFECHACDC  DATETIME;
      DECLARE @difference   NUMERIC(22,0);
      DECLARE @sector       NUMERIC(22,0);
    BEGIN
		
			EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'NumeroCDCInicial', @strPARAM OUT
			SELECT @iniNUMEROCDC = CAST(@strPARAM AS NUMERIC(38,0));
			EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'FechaCDCInicial', @strPARAM OUT
			SELECT @iniFECHACDC = CONVERT(DATETIME, @strPARAM, 103);
			SET @difference = @NUMERO - @iniNUMEROCDC;
			SELECT @sector = FLOOR(@difference / 100);
			BEGIN TRY
			  IF @sector > 0 BEGIN
				  DECLARE @updNUMEROCDC NUMERIC(22,0);
				  DECLARE @updFECHACDC  DATETIME;
				
					BEGIN TRY
					  SET @updNUMEROCDC = @iniNUMEROCDC + (@sector * 100);
					  SET @updFECHACDC  = WSXML_SFG.SFG_PACKAGE_SUM_DIA_DATE(@iniFECHACDC,(@sector * 100));
					  UPDATE WSXML_SFG.PARAMETRO
						 SET VALOR = @updNUMEROCDC
					   WHERE NOMPARAMETRO = 'NumeroCDCInicial';
					  UPDATE WSXML_SFG.PARAMETRO
						 SET VALOR = FORMAT(@updFECHACDC, 'dd/MM/yyyy')
					   WHERE NOMPARAMETRO = 'FechaCDCInicial';
					END TRY
					BEGIN CATCH
						SET @p_iniFECHACDC = NULL;
					END CATCH
				END;
		   
			SET @p_iniFECHACDC = WSXML_SFG.SFG_PACKAGE_SUM_DIA_DATE(@iniFECHACDC, @difference);
			END TRY
			BEGIN CATCH
				SET @p_iniFECHACDC = @iniFECHACDC
			END CATCH

    END;
  END;
GO

IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_GetFechaCDCProc', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFG_PACKAGE_GetFechaCDCProc;
GO

CREATE     PROCEDURE WSXML_SFG.SFG_PACKAGE_GetFechaCDCProc(@NumeroCDC NUMERIC(22,0), @FechaCDC DATETIME OUT) AS
  BEGIN
  SET NOCOUNT ON;
    EXEC WSXML_SFG.SFG_PACKAGE_GETFECHACDC @NumeroCDC,  @FechaCDC OUT
  END;
GO

IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_GetMonthRange', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFG_PACKAGE_GetMonthRange;
GO

CREATE     PROCEDURE WSXML_SFG.SFG_PACKAGE_GetMonthRange(@p_CURRENTDATE  DATETIME,
                          @p_FRSTDATE_out DATETIME OUT,
                          @p_LASTDATE_out DATETIME OUT) AS
 BEGIN
    DECLARE @sFECHAFRST   DATETIME;
    DECLARE @sFECHALAST   DATETIME;
    DECLARE @cCURRENTMNTH NUMERIC(22,0);
   
  SET NOCOUNT ON;
    SELECT @cCURRENTMNTH = CAST(DATEPART(MONTH,@p_CURRENTDATE) AS INT);
    SET @sFECHAFRST = @p_CURRENTDATE;
    DECLARE @actualMNTH NUMERIC(22,0);
    BEGIN
      SELECT @actualMNTH = CAST(DATEPART(MONTH, @sFECHAFRST) AS INT);
      WHILE @actualMNTH = @cCURRENTMNTH BEGIN
        SELECT @actualMNTH = CAST(DATEPART(MONTH, @sFECHAFRST - 1) AS INT);
        IF @actualMNTH = @cCURRENTMNTH BEGIN
          SET @sFECHAFRST = @sFECHAFRST - 1;
        END 
      END;
    END;
    SET @p_FRSTDATE_out = CONVERT(DATETIME, CONVERT(DATE,@sFECHAFRST));

    SET @sFECHALAST = @p_CURRENTDATE;
    --DECLARE @actualMNTH NUMERIC(22,0);
    BEGIN
      SELECT @actualMNTH = CAST(DATEPART(MONTH,@sFECHALAST) AS INT)
       ;
      WHILE @actualMNTH = @cCURRENTMNTH BEGIN
        SELECT @actualMNTH = CAST(DATEPART(MONTH, @sFECHALAST + 1) AS INT)
         ;
        IF @actualMNTH = @cCURRENTMNTH BEGIN
          SET @sFECHALAST = @sFECHALAST + 1;
        END 
      END;
    END;
    SET @p_LASTDATE_out = CONVERT(DATETIME, CONVERT(DATE,@sFECHALAST));
  END;
GO

IF EXISTS (
    SELECT * FROM sys.objects WHERE OBJECT_NAME(object_id) = N'SFG_PACKAGE_GetMonthRange_F'
    AND type IN (N'FN', N'IF', N'TF')
)
    DROP FUNCTION WSXML_SFG.SFG_PACKAGE_GetMonthRange_F
GO

CREATE     FUNCTION WSXML_SFG.SFG_PACKAGE_GetMonthRange_F(@p_CURRENTDATE  DATETIME) 
RETURNS @fechas TABLE(FRSTDATE DATETIME,  LASTDATE DATETIME) AS
 BEGIN

	DECLARE @p_FRSTDATE_out DATETIME
    DECLARE @p_LASTDATE_out DATETIME

    DECLARE @sFECHAFRST   DATETIME;
    DECLARE @sFECHALAST   DATETIME;
    DECLARE @cCURRENTMNTH NUMERIC(22,0);
   

    SELECT @cCURRENTMNTH = CAST(DATEPART(MONTH,@p_CURRENTDATE) AS INT);
    SET @sFECHAFRST = @p_CURRENTDATE;
    DECLARE @actualMNTH NUMERIC(22,0);
    BEGIN
      SELECT @actualMNTH = CAST(DATEPART(MONTH, @sFECHAFRST) AS INT);
      WHILE @actualMNTH = @cCURRENTMNTH BEGIN
        SELECT @actualMNTH = CAST(DATEPART(MONTH, @sFECHAFRST - 1) AS INT);
        IF @actualMNTH = @cCURRENTMNTH BEGIN
          SET @sFECHAFRST = @sFECHAFRST - 1;
        END 
      END;
    END;
    SET @p_FRSTDATE_out = CONVERT(DATETIME, CONVERT(DATE,@sFECHAFRST));

    SET @sFECHALAST = @p_CURRENTDATE;
    --DECLARE @actualMNTH NUMERIC(22,0);
    BEGIN
      SELECT @actualMNTH = CAST(DATEPART(MONTH,@sFECHALAST) AS INT)
       ;
      WHILE @actualMNTH = @cCURRENTMNTH BEGIN
        SELECT @actualMNTH = CAST(DATEPART(MONTH, @sFECHALAST + 1) AS INT)
         ;
        IF @actualMNTH = @cCURRENTMNTH BEGIN
          SET @sFECHALAST = @sFECHALAST + 1;
        END 
      END;
    END;
    SET @p_LASTDATE_out = CONVERT(DATETIME, CONVERT(DATE,@sFECHALAST));

	INSERT INTO @fechas VALUES (@sFECHAFRST, @sFECHALAST)
	RETURN

  END;
GO


  IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_DIAS_ENTRE', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFG_PACKAGE_DIAS_ENTRE;
GO

CREATE     FUNCTION WSXML_SFG.SFG_PACKAGE_DIAS_ENTRE(@FECHA1 DATETIME, @FECHA2 DATETIME) RETURNS NUMERIC(22,0) AS
 BEGIN
	/*
    DECLARE @DATE_1    DATETIME;
    DECLARE @DATE_2    DATETIME;
    DECLARE @NDATE_1   NUMERIC(22,0);
    DECLARE @NDATE_2   NUMERIC(22,0);
    DECLARE @NSECOND_1 INT;
    DECLARE @NSECOND_2 INT;
   
    SELECT @DATE_1 = CONVERT(DATETIME, CONVERT(DATE,@FECHA1));
    SELECT @DATE_2 = CONVERT(DATETIME, CONVERT(DATE,@FECHA2));

    -- Get Julian date number from first date (DATE_1)
    SET @NDATE_1 = TO_NUMBER(TO_CHAR(@DATE_1, 'J'));

    -- Get Julian date number from second date (DATE_2)
    SET @NDATE_2 = TO_NUMBER(TO_CHAR(@DATE_2, 'J'));

    -- Get seconds since midnight from first date (DATE_1)
    SET @NSECOND_1 = TO_NUMBER(TO_CHAR(@DATE_1, 'SSSSS'));

    -- Get seconds since midnight from second date (DATE_2)
    SET @NSECOND_2 = TO_NUMBER(TO_CHAR(@DATE_2, 'SSSSS'));

    RETURN FLOOR((((@NDATE_2 - @NDATE_1) * 86400) + (@NSECOND_2 - @NSECOND_1)) /
                 86400);
	*/
	RETURN DATEDIFF(DAY, @FECHA1, @FECHA2)
  END;
GO



IF EXISTS (
    SELECT * FROM sys.objects WHERE OBJECT_NAME(object_id) = N'SFG_PACKAGE_SPLIT'
    AND type IN (N'FN', N'IF', N'TF')
)
    DROP FUNCTION WSXML_SFG.SFG_PACKAGE_SPLIT
GO

CREATE     FUNCTION WSXML_SFG.SFG_PACKAGE_SPLIT(@STRING NVARCHAR(2000), @DELIMITER NVARCHAR(2000)) 
	RETURNS @SPLIT_TBL TABLE(VALUE VARCHAR(MAX))
 BEGIN

	INSERT INTO @SPLIT_TBL
	SELECT VALUE 
	FROM STRING_SPLIT(@STRING, @DELIMITER)  
    RETURN;
  END
GO


IF EXISTS (
    SELECT * FROM sys.objects WHERE OBJECT_NAME(object_id) = N'SFG_PACKAGE_SplitList'
    AND type IN (N'FN', N'IF', N'TF')
)
    DROP FUNCTION WSXML_SFG.SFG_PACKAGE_SplitList
GO

CREATE     FUNCTION WSXML_SFG.SFG_PACKAGE_SplitList(@StringValue NVARCHAR(2000), @Delimiter NVARCHAR(2000))
    RETURNS @resultlist TABLE (ID INT, IDSTRINGVALUE VARCHAR(MAX)) AS
 BEGIN
    --DECLARE @resultlist WSXML_SFG.IDSTRINGVALUELIST;
    DECLARE @idx        INT;
    DECLARE @strlist    VARCHAR(MAX) = @StringValue;
    DECLARE @counter    INT = 0;
   
    --SET @resultlist = IDSTRINGVALUELIST();
    WHILE 1=1 BEGIN
      SET @idx = CHARINDEX(@Delimiter, @strlist);
      IF @idx > 0 BEGIN
        SET @counter = @counter + 1;
		
		INSERT INTO @resultlist VALUES ( @counter, SUBSTRING(@strlist,1,@idx - 1) )

        SET @strlist = SUBSTRING(@strlist, @idx + LEN(@Delimiter), LEN(@strlist));
      END
      ELSE BEGIN
        SET @counter = @counter + 1;
		INSERT INTO @resultlist VALUES ( @counter, @strlist )
        BREAK;
      END 
    END;
    RETURN;
  END;
GO

IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_GetWeekDayName', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFG_PACKAGE_GetWeekDayName;
GO

CREATE     FUNCTION WSXML_SFG.SFG_PACKAGE_GetWeekDayName(@weekdayDATE DATETIME) RETURNS NVARCHAR(2000) AS
 BEGIN
    /*
    cDAYENDOFWEEKNO NUMBER := 7; -- Saturday marks the end of week
    --cDAYENDOFWEEKNO NUMBER := 6; -- Saturday marks the end of week
    */
    DECLARE @weekdayNAME NVARCHAR(10);
   
    SELECT @weekdayNAME = CASE
             WHEN CAST(DATEPART(weekday, @weekdayDATE) AS SMALLINT) = 1 THEN
              'Domingo'
             WHEN CAST(DATEPART(weekday, @weekdayDATE) AS SMALLINT) = 2 THEN
              'Lunes'
             WHEN CAST(DATEPART(weekday, @weekdayDATE) AS SMALLINT) = 3 THEN
              'Martes'
             WHEN CAST(DATEPART(weekday, @weekdayDATE) AS SMALLINT) = 4 THEN
              'Mi?rcoles'
             WHEN CAST(DATEPART(weekday, @weekdayDATE) AS SMALLINT) = 5 THEN
              'Jueves'
             WHEN CAST(DATEPART(weekday, @weekdayDATE) AS SMALLINT) = 6 THEN
              'Viernes'
             WHEN CAST(DATEPART(weekday, @weekdayDATE) AS SMALLINT) = 7 THEN
              'Sabado'
           END
     ;
    RETURN @weekdayNAME;
  END;
GO

IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_GetWeekNumber', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFG_PACKAGE_GetWeekNumber;
GO

CREATE     FUNCTION WSXML_SFG.SFG_PACKAGE_GetWeekNumber(@weekDATE DATETIME) RETURNS NUMERIC(22,0) AS
 BEGIN
	/*
    DECLARE @cDAYENDOFWEEKNO NUMERIC(22,0) = 7; -- Saturday marks the end of week
    --cDAYENDOFWEEKNO NUMBER := 6; -- Saturday marks the end of week
    DECLARE @cFIRSTDAYOFYEAR DATETIME;
    DECLARE @cFIRSTDAYWEEKNO NUMERIC(22,0);
    DECLARE @cLASTDAYOFWEEKN DATETIME;
   
   DECLARE @firstday DATETIME = CONVERT(DATETIME, @weekDATE);
   
    SELECT	@cFIRSTDAYOFYEAR = @firstday, 
			@cFIRSTDAYWEEKNO = CAST(DATEPART(weekday, @firstday) AS INT), 
			@cLASTDAYOFWEEKN = @firstday + (@cDAYENDOFWEEKNO - CAST(DATEPART(weekday,@firstday) AS INT))
      
    IF CONVERT(DATETIME, CONVERT(DATE,@weekDATE)) BETWEEN @cFIRSTDAYOFYEAR AND @cLASTDAYOFWEEKN BEGIN
      RETURN 1; -- Belongs to the first week
    END
    ELSE BEGIN
      RETURN CEILING((@weekDATE - (@cLASTDAYOFWEEKN)) / 7) + 1;
    END 
    RETURN 0;*/
	RETURN DATEPART(week,@weekDATE);
  END;
GO


IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_GetWeekNumberProc', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFG_PACKAGE_GetWeekNumberProc;
GO

CREATE     PROCEDURE WSXML_SFG.SFG_PACKAGE_GetWeekNumberProc(@FechaWeek DATETIME, @NumeroWeek NUMERIC(22,0) OUT) AS
  BEGIN
  SET NOCOUNT ON;
    SELECT @NumeroWeek = WSXML_SFG.SFG_PACKAGE_GetWeekNumber(@FechaWeek);
  END;
GO


IF EXISTS (
    SELECT * FROM sys.objects WHERE OBJECT_NAME(object_id) = N'SFG_PACKAGE_GetYearNumber'
    AND type IN (N'FN', N'IF', N'TF')
)
    DROP FUNCTION WSXML_SFG.SFG_PACKAGE_GetYearNumber
GO

CREATE     FUNCTION WSXML_SFG.SFG_PACKAGE_GetYearNumber(@yearDATE DATETIME) RETURNS NUMERIC(22,0) AS
 BEGIN
    DECLARE @cFirstYear INT = 1999;
    RETURN DATEPART(YEAR,@yearDATE) - @cFirstYear;
  END;
GO

  -- Copied from webservice
  -- Private DateFormat As String = dd/MM/yyyy HH:mm
IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_DateToString', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFG_PACKAGE_DateToString;
GO

  CREATE FUNCTION WSXML_SFG.SFG_PACKAGE_DateToString(@convdate DATETIME) RETURNS VARCHAR(4000) AS
  BEGIN
    --RETURN TO_CHAR(@convdate, 'DD/MM/YYYY HH24:MI');
	  RETURN FORMAT(@convdate,'dd/MM/yyyy HH:mm')
  END;
go

IF EXISTS (
    SELECT * FROM sys.objects WHERE OBJECT_NAME(object_id) = N'SFG_PACKAGE_DateToShortString'
    AND type IN (N'FN', N'IF', N'TF')
)
    DROP FUNCTION WSXML_SFG.SFG_PACKAGE_DateToShortString
GO

  CREATE FUNCTION WSXML_SFG.SFG_PACKAGE_DateToShortString(@convdate DATETIME) RETURNS VARCHAR(4000) AS
  BEGIN
    RETURN FORMAT(@convdate, 'dd/MM/yyyy');
  END;
GO

IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_StringToDate', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFG_PACKAGE_StringToDate;
GO

  CREATE FUNCTION WSXML_SFG.SFG_PACKAGE_StringToDate(@convstring VARCHAR(4000)) RETURNS DATETIME AS
  BEGIN
    --RETURN CONVERT(DATETIME, @convstring, 'DD/MM/YYYY HH24:MI'); 
	RETURN CONVERT(DATETIME, @convstring, 103);

  END;
GO

IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_StringRangoDeFechas', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFG_PACKAGE_StringRangoDeFechas;
GO

  CREATE FUNCTION WSXML_SFG.SFG_PACKAGE_StringRangoDeFechas(@iniDATE DATETIME, @endDATE DATETIME) RETURNS VARCHAR(4000) AS
 BEGIN
    DECLARE @returnval VARCHAR(2000);
   
    IF cast(datepart(year,@iniDATE) as int) =
       CAST(datepart(year, @endDATE) AS INT) BEGIN
      IF CAST(datepart(month,@iniDATE) AS INT) =
         CAST(datepart(month,@endDATE) AS INT) BEGIN
        IF cast(datepart(day,@iniDATE) AS INT) =
           cast(datepart(day,@endDATE) AS INT) BEGIN
          SET @returnval = RTRIM(LTRIM(dbo.InitCap(WSXML_SFG.SFG_PACKAGE_GetWeekMonthName(@iniDATE)))) + ' ' +
                       ISNULL(CAST(Datepart(day,@iniDATE) AS INT), '') + ' de ' +
                       ISNULL(CAST(datepart(year, @iniDATE) AS INT), '');
        END
        ELSE BEGIN
          SET @returnval = RTRIM(LTRIM(dbo.InitCap(WSXML_SFG.SFG_PACKAGE_GetWeekMonthName(@iniDATE)))) + ' ' +
                       ISNULL(cast(datepart(day,@iniDATE) as int), '') + ' a ' +
                       ISNULL(cast(datepart(day,@endDATE) as int), '') + ' de ' +
                       ISNULL(cast(datepart(year,@iniDATE) as int), '');
        END 
      END
      ELSE BEGIN
        SET @returnval = RTRIM(LTRIM(dbo.InitCap(WSXML_SFG.SFG_PACKAGE_GetWeekMonthName(@iniDATE)))) + ' ' +
                     ISNULL(cast(datepart(day,@iniDATE) as int), '') + ' a ' +
                     ISNULL(dbo.InitCap(WSXML_SFG.SFG_PACKAGE_GetWeekMonthName(@endDATE)), '') + ' ' +
                     ISNULL(cast(datepart(day,@endDATE) as int), '') + ' de ' +
                     ISNULL(cast(datepart(year,@iniDATE) as int), '');
      END 
    END
    ELSE BEGIN
      SET @returnval = dbo.InitCap(WSXML_SFG.SFG_PACKAGE_GetWeekMonthName(@iniDATE)) + ' ' +
                   ISNULL(cast(datepart(day,@iniDATE) as int), '') + ' de ' +
                   ISNULL(cast(datepart(year,@iniDATE) as int), '') + ' a ' +
                   ISNULL(dbo.InitCap(WSXML_SFG.SFG_PACKAGE_GetWeekMonthName(@endDATE)), '') + ' ' +
                   ISNULL(cast(datepart(day,@endDATE) as int), '') + ' de ' +
                   ISNULL(cast(datepart(year,@endDATE) as int), '');
    END 
    RETURN @returnval;
  END;
GO

IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_StringShortRangoDeFechas', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFG_PACKAGE_StringShortRangoDeFechas;
GO

  CREATE FUNCTION WSXML_SFG.SFG_PACKAGE_StringShortRangoDeFechas(@iniDATE DATETIME, @endDATE DATETIME)
    RETURNS VARCHAR(4000) AS
 BEGIN
    DECLARE @returnval VARCHAR(2000);
   
    IF CAST(DATEPART(YEAR,@iniDATE) AS INT) = CAST(DATEPART(YEAR,@endDATE) AS INT) BEGIN
      IF CAST(DATEPART(MONTH,@iniDATE) AS INT) = CAST(DATEPART(MONTH,@endDATE) AS INT) BEGIN
        IF CAST(DATEPART(DAY,@iniDATE) AS INT) = CAST(DATEPART(DAY,@endDATE) AS INT) BEGIN
          SET @returnval = ISNULL(RTRIM(LTRIM(dbo.InitCap(WSXML_SFG.SFG_PACKAGE_GetWeekMonthName(@iniDATE)))), '') + ' ' +
                       ISNULL(CAST(DATEPART(DAY,@iniDATE) AS VARCHAR), '') + '-' +
                       ISNULL(CAST(datepart(yy,@endDATE) AS VARCHAR), '');
        END
        ELSE BEGIN
          SET @returnval = ISNULL(RTRIM(LTRIM(dbo.InitCap(WSXML_SFG.SFG_PACKAGE_GetWeekMonthName(@iniDATE)))), '') + ' ' +
                       ISNULL(CAST(datepart(day,@iniDATE) AS VARCHAR), '') + ' a ' +
                       ISNULL(CAST(datepart(day, @endDATE) AS VARCHAR), '') + '-' +
                       ISNULL(CAST(datepart(yy,@endDATE) AS VARCHAR), '');
        END 
      END
      ELSE BEGIN
        SET @returnval = ISNULL(RTRIM(LTRIM(dbo.InitCap(WSXML_SFG.SFG_PACKAGE_GetWeekMonthName(@iniDATE)))), '') + ' ' +
                     ISNULL(cast(datepart(day,@iniDATE) AS VARCHAR), '') + ' a ' +
                     ISNULL(RTRIM(LTRIM(dbo.InitCap(WSXML_SFG.SFG_PACKAGE_GetWeekMonthName(@endDATE)))), '') + ' ' +
                     ISNULL(CAST(datepart(dd,@endDATE) AS VARCHAR), '') + '-' +
                     ISNULL(CAST(datepart(yy,@endDATE) AS VARCHAR), '');
      END 
    END
    ELSE BEGIN
      SET @returnval = ISNULL(RTRIM(LTRIM(dbo.InitCap(WSXML_SFG.SFG_PACKAGE_GetWeekMonthName(@iniDATE)))), '') + ' ' +
                   ISNULL(cast(datepart(dd,@iniDATE) as VARCHAR), '') + '-' +
                   ISNULL(datepart(yy,@endDATE), '') + ' a ' +
                   ISNULL(RTRIM(LTRIM(dbo.InitCap(WSXML_SFG.SFG_PACKAGE_GetWeekMonthName(@endDATE)))), '') + ' ' +
                   ISNULL(CAST(DATEPART(DAY,@endDATE) AS VARCHAR), '') + '-' +
                   ISNULL(CAST(DATEPART(yy,@endDATE) AS VARCHAR), '');
    END 
    RETURN @returnval;
  END;
GO


IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_DaysInMonth', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFG_PACKAGE_DaysInMonth;
GO

  CREATE FUNCTION WSXML_SFG.SFG_PACKAGE_DaysInMonth(@monthDATE DATETIME) RETURNS NUMERIC(22,0) AS
 BEGIN
    DECLARE @daysinmonth NUMERIC(22,0) = 0;
   
    SELECT @daysinmonth = CAST(DATEPART(DAY,dbo.LAST_DAY(@monthDATE)) AS INT)
     ;
    RETURN @daysinmonth;
  END;
GO

IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_GetCycleSorteos', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFG_PACKAGE_GetCycleSorteos;
GO

  CREATE FUNCTION WSXML_SFG.SFG_PACKAGE_GetCycleSorteos(@p_SECUENCIA NUMERIC(22,0)) RETURNS NVARCHAR(2000) AS
 BEGIN
    DECLARE @result NVARCHAR(15);
   
   DECLARE @SORTEOMULTIPLIER INT = 401, @C_INICIO_OPERACION  INT = 600, @C_FIN_OPERACION INT = 2230
   --EXEC WSXML_SFG.SFG_PACKAGE_CONSTANT @SORTEOMULTIPLIER  OUT, @C_INICIO_OPERACION OUT, @C_FIN_OPERACION OUT

    SELECT @result = CONVERT(VARCHAR,ISNULL(((@p_SECUENCIA + @SORTEOMULTIPLIER) * 2), '')) + '-' +
           CONVERT(VARCHAR,ISNULL((((@p_SECUENCIA + @SORTEOMULTIPLIER) * 2) + 1), ''))
     ;
    RETURN @result;
  END;
GO
  -- Burnt application for game number
IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_GetLastSorteoNumber', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFG_PACKAGE_GetLastSorteoNumber;
GO

  CREATE FUNCTION WSXML_SFG.SFG_PACKAGE_GetLastSorteoNumber(@p_DATE DATETIME) RETURNS NUMERIC(22,0) AS
 BEGIN
    DECLARE @result   NUMERIC(22,0);
    DECLARE @sequence NUMERIC(22,0);
    DECLARE @daynumbr NUMERIC(22,0) = CAST(DATEPART(WEEKDAY, @p_DATE) AS INT);

   DECLARE @SORTEOMULTIPLIER INT = 401, @C_INICIO_OPERACION  INT = 600, @C_FIN_OPERACION INT = 2230
   --EXEC WSXML_SFG.SFG_PACKAGE_CONSTANT @SORTEOMULTIPLIER  OUT, @C_INICIO_OPERACION OUT, @C_FIN_OPERACION OUT
      
    SELECT @sequence = SECUENCIA
      FROM WSXML_SFG.CICLOFACTURACIONPDV
     WHERE ID_CICLOFACTURACIONPDV = WSXML_SFG.ULTIMO_CICLOFACTURACION(@p_DATE);
    IF @daynumbr IN (1, 2, 3, 4) BEGIN
      -- Sorteo from last Saturday
      SELECT @result = ((@sequence + @SORTEOMULTIPLIER) * 2) + 1;
    END
    ELSE IF @daynumbr IN (5, 6, 7) BEGIN
      -- Sorteo from last Wednesday
      SELECT @result = (@sequence + @SORTEOMULTIPLIER + 1) * 2;
    END 
    RETURN @result;
  END;
GO

 IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_GetDateFromSorteo', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFG_PACKAGE_GetDateFromSorteo;
GO

  CREATE FUNCTION WSXML_SFG.SFG_PACKAGE_GetDateFromSorteo(@p_SORTEO NUMERIC(22,0)) RETURNS DATETIME AS
 BEGIN
    DECLARE @result   DATETIME;
    DECLARE @sequence NUMERIC(22,0);
   
	DECLARE @SORTEOMULTIPLIER INT = 401, @C_INICIO_OPERACION  INT = 600, @C_FIN_OPERACION INT = 2230
	--EXEC WSXML_SFG.SFG_PACKAGE_CONSTANT @SORTEOMULTIPLIER  OUT, @C_INICIO_OPERACION OUT, @C_FIN_OPERACION OUT

    IF (@p_SORTEO % 2) = 1 BEGIN
      -- Sorteo from Saturday
      SET @sequence = ((@p_SORTEO - 1) / 2) - @SORTEOMULTIPLIER;
      SELECT @result = FECHAEJECUCION
        FROM WSXML_SFG.CICLOFACTURACIONPDV
       WHERE ID_CICLOFACTURACIONPDV = WSXML_SFG.CICLO_F(@sequence);
    END
    ELSE IF (@p_SORTEO % 2) = 0 BEGIN
      SET @sequence = (@p_SORTEO / 2) - @SORTEOMULTIPLIER;
      -- Ciclo may not exist
      BEGIN
        SELECT @result = convert(datetime,FECHAEJECUCION) - 3
          FROM WSXML_SFG.CICLOFACTURACIONPDV
         WHERE ID_CICLOFACTURACIONPDV = WSXML_SFG.CICLO_F(@sequence);
		
		if @@ROWCOUNT = 0 begin
          SELECT @result = convert(datetime,FECHAEJECUCION) + 4
            FROM WSXML_SFG.CICLOFACTURACIONPDV
           WHERE ID_CICLOFACTURACIONPDV = WSXML_SFG.CICLO_F(@sequence - 1);
		end
      END;
    END 
    RETURN CONVERT(DATETIME, CONVERT(DATE,@result))
  END
GO

 IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_CheckDatabaseConnectivity', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFG_PACKAGE_CheckDatabaseConnectivity;
GO

  CREATE PROCEDURE WSXML_SFG.SFG_PACKAGE_CheckDatabaseConnectivity(@p_Connected INT OUT) AS
  BEGIN
  SET NOCOUNT ON;
    SELECT @p_Connected = COUNT(1);
  END;
GO


IF EXISTS (
    SELECT * FROM sys.objects WHERE OBJECT_NAME(object_id) = N'SFG_PACKAGE_CalculateDV'
    AND type IN (N'FN', N'IF', N'TF')
)
    DROP FUNCTION WSXML_SFG.SFG_PACKAGE_CalculateDV
GO

  CREATE function WSXML_SFG.SFG_PACKAGE_CalculateDV(@p_IDENTIFICACION VARCHAR(4000)) RETURNS INT AS
 BEGIN
    DECLARE @residuo INT;
    DECLARE @fcheck  INT;
    DECLARE @Primos  WSXML_SFG.IDVALUE;
   
    --SET @Primos = NUMBERARRAY();
	INSERT INTO @Primos VALUES (1,3);
	INSERT INTO @Primos VALUES (2,7);
	INSERT INTO @Primos VALUES (3,13);
	INSERT INTO @Primos VALUES (4,17);
	INSERT INTO @Primos VALUES (5,19);
	INSERT INTO @Primos VALUES (6,23);
	INSERT INTO @Primos VALUES(7,29);
	INSERT INTO @Primos VALUES (8,37);
	INSERT INTO @Primos VALUES(9,41);
	INSERT INTO @Primos VALUES(10,43);
	INSERT INTO @Primos VALUES(11,47);
	INSERT INTO @Primos VALUES(12,53);
	INSERT INTO @Primos VALUES(13,59);
	INSERT INTO @Primos VALUES(14,67);
	INSERT INTO @Primos VALUES(15,71);
    SET @fcheck = 0;
	DECLARE @i INT = 1;
	WHILE @i <= LEN(@p_IDENTIFICACION)  BEGIN
        DECLARE @tmp VARCHAR(1);
      
        SET @tmp    = SUBSTRING(@p_IDENTIFICACION, (LEN(@p_IDENTIFICACION)) - (@i - 1),1);
        SET @fcheck = @fcheck + (CAST(@tmp AS INT) * (select VALUE from @Primos where id = @i));
      
	  SET @i=@i+1
    END;

    SET @residuo = (@fcheck % 11);

    IF @residuo IN (0, 1) BEGIN
      RETURN @residuo;
    END
    
    RETURN (11 - @residuo);
 
END
GO

 IF OBJECT_ID('WSXML_SFG.SFG_PACKAGE_CurrencyFormat', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFG_PACKAGE_CurrencyFormat;
GO

  CREATE FUNCTION WSXML_SFG.SFG_PACKAGE_CurrencyFormat(@p_VALUE FLOAT) RETURNS VARCHAR(4000) AS
  BEGIN
    RETURN RTRIM(LTRIM(FORMAT(@p_VALUE, '#,##0')));
  END;

GO


