USE SFGPRODU;
--  DDL for Package Body SFGUNIFIEDXMLDEPOSITSLIP
--------------------------------------------------------

  /* PACKAGE BODY WSXML_SFG.SFGUNIFIEDXMLDEPOSITSLIP */ 

  IF OBJECT_ID('WSXML_SFG.SFGUNIFIEDXMLDEPOSITSLIP_GetDepositSlipHeader', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGUNIFIEDXMLDEPOSITSLIP_GetDepositSlipHeader;
GO
CREATE     PROCEDURE WSXML_SFG.SFGUNIFIEDXMLDEPOSITSLIP_GetDepositSlipHeader(@p_SECUENCIACICLO NUMERIC(22,0), @p_CODIGOGTECHPUNTODEVENTA NVARCHAR(2000)) AS
 BEGIN
    DECLARE @cMAXSECUENCIAFACTURACION NUMERIC(22,0);
    DECLARE @cCODCICLOFACTURACIONPDV NUMERIC(22,0);

    DECLARE @xBILLPAY NUMERIC(22,0) = 3; -- Linea de negocio Bill Payment
    DECLARE @xPREPAID NUMERIC(22,0) = 2; -- Linea de negocio Pines y Recargas
    DECLARE @xLOTTERY NUMERIC(22,0) = 1; -- Linea de negocio Juegos

    DECLARE @xBPAYMNT NUMERIC(22,0) = 8; -- Tipo de producto Bill Payment
    DECLARE @xDEPONLN NUMERIC(22,0) = 9; -- Tipo de producto Deposit Online
    DECLARE @xEVOUCHR NUMERIC(22,0) = 6; -- Tipo de producto EVoucher
    DECLARE @xERECHRG NUMERIC(22,0) = 7; -- Tipo de producto ERecharge

    DECLARE @xTAXRENTA NUMERIC(22,0) = 1; -- Retencion Tributaria RENTA
    DECLARE @xTAXICA   NUMERIC(22,0) = 2; -- Retencion Tributaria ICA
    DECLARE @xTAXIVA   NUMERIC(22,0) = 3; -- Retencion Tributaria IVA

    DECLARE @xPRODTX   NUMERIC(22,0) = 1; -- Impuesto IVA

    DECLARE @vBarcodeGTECH VARCHAR(4000)    /* Use -meta option PARAMETRO.VALOR%TYPE */;
    DECLARE @vBarcodeFiducia VARCHAR(4000)  /* Use -meta option PARAMETRO.VALOR%TYPE */;
    DECLARE @vLastBillingDate DATETIME;
    DECLARE @msg VARCHAR(2000);
   
	SET NOCOUNT ON;
    -- Get expected cycle identifier
    BEGIN
      IF @p_SECUENCIACICLO = -1 BEGIN
        SELECT @cMAXSECUENCIAFACTURACION = MAX(SECUENCIA) FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ACTIVE = 1;
      END
      ELSE BEGIN
        SET @cMAXSECUENCIAFACTURACION = @p_SECUENCIACICLO;
      END 

		SELECT @cCODCICLOFACTURACIONPDV = ID_CICLOFACTURACIONPDV FROM WSXML_SFG.CICLOFACTURACIONPDV
		WHERE SECUENCIA = @cMAXSECUENCIAFACTURACION AND ACTIVE = 1;
		
		DECLARE @rowcount NUMERIC(22,0) = @@ROWCOUNT;
		
		IF @rowcount = 0 BEGIN
			SET @msg = '-20054 No existe el ciclo de facturacion No. ' + ISNULL(CONVERT(VARCHAR,@p_SECUENCIACICLO), '') 
			RAISERROR(@msg, 16, 1);
			RETURN 0;
		END	
		IF @rowcount > 1 BEGIN	
			RAISERROR('-20054 Hay mas de un ciclo de facturacion con el mismo codigo de secuencia. Este es un problema de consistencia de datos.', 16, 1);
			RETURN 0;  
		END
    END;

    /* Ciclo de facturacion previo (SECUENCIA MENOR ACTIVA) */
    BEGIN
		BEGIN TRY
		  SELECT @vLastBillingDate = ISNULL(CFPREV.FECHAEJECUCION, CONVERT(VARCHAR, '01/01/2000', 103))
		  FROM WSXML_SFG.CICLOFACTURACIONPDV CFPREV
		  WHERE CFPREV.SECUENCIA = (@cMAXSECUENCIAFACTURACION - 1) AND CFPREV.ACTIVE = 1;
		END TRY
		BEGIN CATCH
			SELECT @vLastBillingDate = CONVERT(VARCHAR, '01/01/2000', 103);
		END CATCH
    END;
	
	BEGIN TRY
    EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'BarcodeGamesGTECH', @vBarcodeGTECH OUT
    EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'BarcodeGamesFiducia', @vBarcodeFiducia OUT

	SELECT @vLastBillingDate                 AS LASTBILLINGDATE,
             CFP.FECHAEJECUCION               AS BILLINGDATE,
             AGR.CODIGOAGRUPACIONGTECH        AS CHAINNUMBER,
             PDV.CODIGOGTECHPUNTODEVENTA      AS POSNUMBER,
             PDV.NUMEROTERMINAL               AS TERMINALNUMBER,
             MFT.ID_MAESTROFACTURACIONTIRILLA AS SLIPID,

             -- Cualquiera de las referencias por linea de negocio.
             COALESCE(BILLPAYBILLING.REFERENCIAGTECH,
                      PREPAIDBILLING.REFERENCIAGTECH,
                      LOTTERYBILLING.REFERENCIAGTECH)          AS REFERENCENUMBER,
             -- No longer per LDN
             '1780403759-1'                                    AS GTECHBANKACCOUNTNUMBER,
             '1260594754-4'                                    AS FIDUCIABANKACCOUNTNUMBER,
             @vBarcodeGTECH                                     AS GTECHBARCODE,
             @vBarcodeFiducia                                   AS FIDUCIABARCODE,

             -- Consolidated Previous Balances
             ISNULL(LOTTERYBILLING.SALDOANTERIORFIDUCIA, 0)       AS FIDUCIAPREVIOUSBALANCELOTTERY,
             ISNULL(LOTTERYBILLING.SALDOANTERIORFIDUCIA, 0)       AS FIDUCIAPREVIOUSBALANCETOTAL,

             ISNULL(LOTTERYBILLING.NUEVOSALDOFIDUCIA -
                 LOTTERYBILLING.SALDOANTERIORFIDUCIA, 0)       AS FIDUCIATOTALBILLING,

             ISNULL(LOTTERYBILLING.NUEVOSALDOFIDUCIA, 0)          AS FIDUCIACURRENTBALANCETOTAL,

             ISNULL(LOTTERYBILLING.SALDOANTERIORGTECH, 0)         AS GTECHPREVIOUSBALANCELOTTERY,
             ISNULL(PREPAIDBILLING.SALDOANTERIORGTECH, 0)         AS GTECHPREVIOUSBALANCEPREPAID,
             ISNULL(BILLPAYBILLING.SALDOANTERIORGTECH, 0)         AS GTECHPREVIOUSBALANCEBILLPAY,

             ISNULL(LOTTERYBILLING.SALDOANTERIORGTECH, 0) +
             ISNULL(PREPAIDBILLING.SALDOANTERIORGTECH, 0) +
             ISNULL(BILLPAYBILLING.SALDOANTERIORGTECH, 0)         AS GTECHPREVIOUSBALANCETOTAL,

             ISNULL(BILLPAYBILLING.NUEVOSALDOGTECH -
                 BILLPAYBILLING.SALDOANTERIORGTECH, 0) +
             ISNULL(PREPAIDBILLING.NUEVOSALDOGTECH -
                 PREPAIDBILLING.SALDOANTERIORGTECH, 0) +
             ISNULL(LOTTERYBILLING.NUEVOSALDOGTECH -
                 LOTTERYBILLING.SALDOANTERIORGTECH, 0)         AS GTECHTOTALBILLING,

             ISNULL(LOTTERYBILLING.NUEVOSALDOGTECH, 0) +
             ISNULL(PREPAIDBILLING.NUEVOSALDOGTECH, 0) +
             ISNULL(BILLPAYBILLING.NUEVOSALDOGTECH, 0)            AS GTECHCURRENTBALANCETOTAL,

             /* Commercial Services */
             ISNULL(BILLPAYBILLING.CANTIDADVENTAx8, 0)            AS GCSBPAYMNTPRODTOTALQUANTITY,
             ISNULL(BILLPAYBILLING.VALORVENTAx8, 0)               AS GCSBPAYMNTPRODTOTALAMOUNT,
             ISNULL(BILLPAYBILLING.CANTIDADVENTAx9, 0)            AS GCSDEPONLNPRODTOTALQUANTITY,
             ISNULL(BILLPAYBILLING.VALORVENTAx9, 0)               AS GCSDEPONLNPRODTOTALAMOUNT,
             ISNULL(PREPAIDBILLING.CANTIDADVENTAx6, 0)            AS GCSEVOUCHRPRODTOTALQUANTITY,
             ISNULL(PREPAIDBILLING.VALORVENTAx6, 0)               AS GCSEVOUCHRPRODTOTALAMOUNT,
             ISNULL(PREPAIDBILLING.CANTIDADVENTAx7, 0)            AS GCSERECHRGPRODTOTALQUANTITY,
             ISNULL(PREPAIDBILLING.VALORVENTAx7, 0)               AS GCSERECHRGPRODTOTALAMOUNT,

             /* Comission */
             ISNULL(BILLPAYBILLING.VALORCOMISIONx8, 0)            AS GCSBPAYMNTGROSSCOMMISSION,
             ISNULL(BILLPAYBILLING.VALORCOMISIONx9, 0)            AS GCSDEPONLNGROSSCOMMISSION,
             ISNULL(PREPAIDBILLING.VALORCOMISIONx6, 0)            AS GCSEVOUCHRGROSSCOMMISSION,
             ISNULL(PREPAIDBILLING.VALORCOMISIONx7, 0)            AS GCSERECHRGGROSSCOMMISSION,

             ISNULL(BILLPAYBILLING.VALORCOMISIONx8, 0) +
             ISNULL(BILLPAYBILLING.VALORCOMISIONx9, 0) +
             ISNULL(PREPAIDBILLING.VALORCOMISIONx6, 0) +
             ISNULL(PREPAIDBILLING.VALORCOMISIONx7, 0)            AS GCSTOTALGROSSCOMMISSION,

             ISNULL(BILLPAYBILLING.VATCOMISIONx8, 0) +
             ISNULL(BILLPAYBILLING.VATCOMISIONx9, 0) +
             ISNULL(PREPAIDBILLING.VATCOMISIONx6, 0) +
             ISNULL(PREPAIDBILLING.VATCOMISIONx7, 0)              AS GCSVATCOMMISSION,

             ISNULL(BILLPAYBILLING.RETVALORx1, 0) +
             ISNULL(PREPAIDBILLING.RETVALORx1, 0)                 AS GCSTAXRENTA,
             ISNULL(BILLPAYBILLING.RETVALORx2, 0) +
             ISNULL(PREPAIDBILLING.RETVALORx2, 0)                 AS GCSTAXICA,
             ISNULL(BILLPAYBILLING.RETVALORx3, 0) +
             ISNULL(PREPAIDBILLING.RETVALORx3, 0)                 AS GCSTAXIVA,

             ISNULL(BILLPAYBILLING.VALORCOMISIONNETAx8, 0) +
             ISNULL(BILLPAYBILLING.VALORCOMISIONNETAx9, 0) +
             ISNULL(PREPAIDBILLING.VALORCOMISIONNETAx6, 0) +
             ISNULL(PREPAIDBILLING.VALORCOMISIONNETAx7, 0)        AS GCSFINALCOMMISSION,

             ISNULL(BILLPAYBILLING.NUEVOSALDOGTECH -
                 BILLPAYBILLING.SALDOANTERIORGTECH, 0) +
             ISNULL(PREPAIDBILLING.NUEVOSALDOGTECH -
                 PREPAIDBILLING.SALDOANTERIORGTECH, 0)         AS GCSTOTALBILLING,

             ISNULL(BILLPAYBILLING.NUEVOSALDOGTECH, 0) +
             ISNULL(PREPAIDBILLING.NUEVOSALDOGTECH, 0)            AS GCSCURRENTBALANCE,

             /* Games */
             ISNULL(LOTTERYBILLING.CANTIDADVENTA, 0)              AS GGMLOTTERYPRODTOTALQUANTITY,
             ISNULL(LOTTERYBILLING.VALORVENTA, 0)                 AS GGMLOTTERYPRODTOTALAMOUNT,
             0                                                 AS GGMLOTTERYADJUSTMENTS,
             ISNULL(LOTTERYBILLING.IMPVALORx1, 0)                 AS GGMLOTTERYTAXIVA,
             ISNULL(LOTTERYBILLING.VALORPREMIOS, 0)               AS GGMLOTTERYAWARDPAIDAMOUNT,
             ISNULL(LOTTERYBILLING.VALORRETENCIONPREMIOS, 0)      AS GGMLOTTERYAWARDPAIDTAXDISCOUNT,
             ISNULL(LOTTERYBILLING.VALORCOMISION, 0)              AS GGMTOTALGROSSCOMMISSION,
             ISNULL(LOTTERYBILLING.VATCOMISION, 0)                AS GGMVATCOMMISSION,
             ISNULL(LOTTERYBILLING.RETVALORx1, 0)                 AS GGMTAXRENTA,
             ISNULL(LOTTERYBILLING.RETVALORx2, 0)                 AS GGMTAXICA,
             ISNULL(LOTTERYBILLING.RETVALORx3, 0)                 AS GGMTAXIVA,
             ISNULL(LOTTERYBILLING.VALORCOMISIONNETA, 0)          AS GGMFINALCOMMISSION,
             ISNULL(LOTTERYBILLING.NUEVOSALDOGTECH -
                 LOTTERYBILLING.SALDOANTERIORGTECH, 0)         AS GGMTOTALBILLING,
             ISNULL(LOTTERYBILLING.NUEVOSALDOGTECH, 0)            AS GGMCURRENTBALANCE,

             /* Games */
             ISNULL(LOTTERYBILLING.CANTIDADVENTA, 0)              AS FGMLOTTERYPRODTOTALQUANTITY,
             ISNULL(LOTTERYBILLING.VALORVENTA, 0)                 AS FGMLOTTERYPRODTOTALAMOUNT,
             0                                                 AS FGMLOTTERYADJUSTMENTS,
             ISNULL(LOTTERYBILLING.IMPVALORx1, 0)                 AS FGMLOTTERYTAXIVA,
             ISNULL(LOTTERYBILLING.VALORPREMIOS, 0)               AS FGMLOTTERYAWARDPAIDAMOUNT,
             ISNULL(LOTTERYBILLING.VALORRETENCIONPREMIOS, 0)      AS FGMLOTTERYAWARDPAIDTAXDISCOUNT,
             ISNULL(LOTTERYBILLING.VALORCOMISION, 0)              AS FGMTOTALGROSSCOMMISSION,
             ISNULL(LOTTERYBILLING.VATCOMISION, 0)                AS FGMVATCOMMISSION,
             ISNULL(LOTTERYBILLING.RETVALORx1, 0)                 AS FGMTAXRENTA,
             ISNULL(LOTTERYBILLING.RETVALORx2, 0)                 AS FGMTAXICA,
             ISNULL(LOTTERYBILLING.RETVALORx3, 0)                 AS FGMTAXIVA,
             ISNULL(LOTTERYBILLING.VALORCOMISIONNETA, 0)          AS FGMFINALCOMMISSION,
             ISNULL(LOTTERYBILLING.NUEVOSALDOFIDUCIA -
                 LOTTERYBILLING.SALDOANTERIORFIDUCIA, 0)       AS FGMTOTALBILLING,
             ISNULL(LOTTERYBILLING.NUEVOSALDOFIDUCIA, 0)          AS FGMCURRENTBALANCE,

             /* Informacion de control */
             PDV.ID_PUNTODEVENTA,
             AGR.ID_AGRUPACIONPUNTODEVENTA,
             COALESCE(BILLPAYBILLING.CODTIPOPUNTODEVENTA,
                      PREPAIDBILLING.CODTIPOPUNTODEVENTA,
                      LOTTERYBILLING.CODTIPOPUNTODEVENTA,
                      AGR.CODTIPOPUNTODEVENTA)                 AS CODTIPOPUNTODEVENTA,
             COALESCE(BILLPAYBILLING.CODPUNTODEVENTACABEZA,
                      PREPAIDBILLING.CODPUNTODEVENTACABEZA,
                      LOTTERYBILLING.CODPUNTODEVENTACABEZA,
                      AGR.CODPUNTODEVENTACABEZA)               AS CODPUNTODEVENTACABEZA,
             ISNULL(PDV.SLIPXML, 0)                               AS SLIPXML
      FROM WSXML_SFG.PUNTODEVENTA PDV
      INNER JOIN WSXML_SFG.CICLOFACTURACIONPDV CFP ON (CFP.ID_CICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV)
      INNER JOIN WSXML_SFG.MAESTROFACTURACIONTIRILLA MFT ON (MFT.CODCICLOFACTURACIONPDV = CFP.ID_CICLOFACTURACIONPDV
                                               AND MFT.CODPUNTODEVENTA = PDV.ID_PUNTODEVENTA)
      /* Facturacion de BillPayment */
      LEFT OUTER JOIN (SELECT /*+ index MAESTROFACTURACIONPDV GLOBALXML_MAESTROFACT_IX) */
                              MFPBILLPAY.ID_MAESTROFACTURACIONPDV     AS ID_MAESTROFACTURACIONPDV,
                              MFPBILLPAY.CODMAESTROFACTURACIONTIRILLA AS CODMAESTROFACTURACIONTIRILLA,
                              MFPBILLPAY.CODCICLOFACTURACIONPDV       AS CODCICLOFACTURACIONPDV,
                              MFPBILLPAY.CODPUNTODEVENTA              AS CODPUNTODEVENTA,
                              MFCBILLPAY.CODAGRUPACIONPUNTODEVENTA    AS CODAGRUPACIONPUNTODEVENTA,
                              MFCBILLPAY.CODPUNTODEVENTA              AS CODPUNTODEVENTACABEZA,
                              MFCBILLPAY.CODTIPOPUNTODEVENTA          AS CODTIPOPUNTODEVENTA,

                              ISNULL(MFPBILLPAY.SALDOANTERIORENCONTRAGTECH -
                                  MFPBILLPAY.SALDOANTERIORAFAVORGTECH, 0)  AS SALDOANTERIORGTECH,
                              ISNULL(MFPxBP.FACTURADOGTECH, 0)                AS FACTURACIONGTECH,
                              ISNULL(MFPBILLPAY.NUEVOSALDOENCONTRAGTECH -
                                  MFPBILLPAY.NUEVOSALDOAFAVORGTECH, 0)     AS NUEVOSALDOGTECH,
                              MFCBILLPAY.REFERENCIAGTECH                   AS REFERENCIAGTECH,
                              CNTBILLPAY.NUMEROCUENTA                      AS NUMEROCUENTA,

                              ISNULL(MFPxBP.CANTIDADVENTAxBP, 0)         AS CANTIDADVENTAx8,
                              ISNULL(MFPxBP.VALORVENTAxBP, 0)            AS VALORVENTAx8,
                              ISNULL(MFPxBP.VALORVENTANETAxBP, 0)        AS VALORVENTANETAx8,
                              ISNULL(MFPxBP.VALORCOMISIONxBP, 0)         AS VALORCOMISIONx8,
                              ISNULL(MFPxBP.VALORCOMISIONBRUTAxBP, 0)    AS VALORCOMISIONBRUTAx8,
                              ISNULL(MFPxBP.VALORCOMISIONNETAxBP, 0)     AS VALORCOMISIONNETAx8,
                              ISNULL(MFPxBP.IVACOMISIONxBP, 0)           AS VATCOMISIONx8,
                              ISNULL(MFPxBP.CANTIDADVENTAxDO, 0)         AS CANTIDADVENTAx9,
                              ISNULL(MFPxBP.VALORVENTAxDO, 0)            AS VALORVENTAx9,
                              ISNULL(MFPxBP.VALORVENTANETAxDO, 0)        AS VALORVENTANETAx9,
                              ISNULL(MFPxBP.VALORCOMISIONxDO, 0)         AS VALORCOMISIONx9,
                              ISNULL(MFPxBP.VALORCOMISIONBRUTAxDO, 0)    AS VALORCOMISIONBRUTAx9,
                              ISNULL(MFPxBP.VALORCOMISIONNETAxDO, 0)     AS VALORCOMISIONNETAx9,
                              ISNULL(MFPxBP.IVACOMISIONxDO, 0)           AS VATCOMISIONx9,
                              ISNULL(RETBILLPAY.VALORRETENCIONx1, 0)     AS RETVALORx1,
                              ISNULL(RETBILLPAY.VALORRETENCIONx2, 0)     AS RETVALORx2,
                              ISNULL(RETBILLPAY.VALORRETENCIONx3, 0)     AS RETVALORx3,
                              MFPBILLPAY.CODLINEADENEGOCIODESCUENTO   AS DESCONTADA
                       FROM WSXML_SFG.MAESTROFACTURACIONPDV MFPBILLPAY
                       INNER JOIN WSXML_SFG.MAESTROFACTURACIONCOMPCONSIG MFCBILLPAY ON (MFCBILLPAY.ID_MAESTROFACTCOMPCONSIG = MFPBILLPAY.CODMAESTROFACTURACIONCOMPCONSI)
                       INNER JOIN WSXML_SFG.CUENTA CNTBILLPAY ON (CNTBILLPAY.ID_CUENTA = MFCBILLPAY.CODCUENTAPAGOGTECH)
                       -- Easily tradable for a redundant table
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONPDV GLOBALTIPO_DETALLEFACTPDV_IX) */
                                               DFPBILLPAY.CODMAESTROFACTURACIONPDV,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xBPAYMNT THEN DFPBILLPAY.CANTIDADVENTA ELSE 0 END)      AS CANTIDADVENTAxBP,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xBPAYMNT THEN DFPBILLPAY.VALORVENTA ELSE 0 END)         AS VALORVENTAxBP,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xBPAYMNT THEN DFPBILLPAY.VALORVENTANETA ELSE 0 END)     AS VALORVENTANETAxBP,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xBPAYMNT THEN DFPBILLPAY.VALORCOMISION ELSE 0 END)      AS VALORCOMISIONxBP,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xBPAYMNT THEN DFPBILLPAY.VALORCOMISIONBRUTA ELSE 0 END) AS VALORCOMISIONBRUTAxBP,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xBPAYMNT THEN DFPBILLPAY.VALORCOMISIONNETA ELSE 0 END)  AS VALORCOMISIONNETAxBP,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xBPAYMNT THEN DFPBILLPAY.IVACOMISION ELSE 0 END)        AS IVACOMISIONxBP,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xDEPONLN THEN DFPBILLPAY.CANTIDADVENTA ELSE 0 END)      AS CANTIDADVENTAxDO,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xDEPONLN THEN DFPBILLPAY.VALORVENTA ELSE 0 END)         AS VALORVENTAxDO,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xDEPONLN THEN DFPBILLPAY.VALORVENTANETA ELSE 0 END)     AS VALORVENTANETAxDO,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xDEPONLN THEN DFPBILLPAY.VALORCOMISION ELSE 0 END)      AS VALORCOMISIONxDO,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xDEPONLN THEN DFPBILLPAY.VALORCOMISIONBRUTA ELSE 0 END) AS VALORCOMISIONBRUTAxDO,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xDEPONLN THEN DFPBILLPAY.VALORCOMISIONNETA ELSE 0 END)  AS VALORCOMISIONNETAxDO,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xDEPONLN THEN DFPBILLPAY.IVACOMISION ELSE 0 END)        AS IVACOMISIONxDO,
                                               SUM(DFPBILLPAY.NUEVOSALDOENCONTRAGTECH - DFPBILLPAY.NUEVOSALDOAFAVORGTECH)                         AS FACTURADOGTECH,
                                               SUM(DFPBILLPAY.NUEVOSALDOENCONTRAFIDUCIA - DFPBILLPAY.NUEVOSALDOAFAVORFIDUCIA)                     AS FACTURADOFIDUCIA
                                        FROM WSXML_SFG.DETALLEFACTURACIONPDV DFPBILLPAY
                                        GROUP BY DFPBILLPAY.CODMAESTROFACTURACIONPDV) MFPxBP ON (MFPxBP.CODMAESTROFACTURACIONPDV = MFPBILLPAY.ID_MAESTROFACTURACIONPDV)
                       -- End Easily tradable
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONRETENCION GLOBALBILL_DETALLEFACTRET_IX) */
                                               CODMAESTROFACTURACIONPDV,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXRENTA THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx1,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXICA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx2,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXIVA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx3
                                        FROM WSXML_SFG.DETALLEFACTURACIONRETENCION
                                        GROUP BY CODMAESTROFACTURACIONPDV) RETBILLPAY ON (RETBILLPAY.CODMAESTROFACTURACIONPDV = MFPBILLPAY.ID_MAESTROFACTURACIONPDV)
                       WHERE MFPBILLPAY.CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV
                         AND MFPBILLPAY.CODLINEADENEGOCIO = @xBILLPAY
                       ) BILLPAYBILLING ON (BILLPAYBILLING.CODCICLOFACTURACIONPDV = CFP.ID_CICLOFACTURACIONPDV
                                        AND BILLPAYBILLING.CODMAESTROFACTURACIONTIRILLA = MFT.ID_MAESTROFACTURACIONTIRILLA)
      /* Facturacion de PrePaid */
      LEFT OUTER JOIN (SELECT /*+ index MAESTROFACTURACIONPDV GLOBALXML_MAESTROFACT_IX) */
                              MFPPREPAID.ID_MAESTROFACTURACIONPDV     AS ID_MAESTROFACTURACIONPDV,
                              MFPPREPAID.CODMAESTROFACTURACIONTIRILLA AS CODMAESTROFACTURACIONTIRILLA,
                              MFPPREPAID.CODCICLOFACTURACIONPDV       AS CODCICLOFACTURACIONPDV,
                              MFPPREPAID.CODPUNTODEVENTA              AS CODPUNTODEVENTA,
                              MFCPREPAID.CODAGRUPACIONPUNTODEVENTA    AS CODAGRUPACIONPUNTODEVENTA,
                              MFCPREPAID.CODPUNTODEVENTA              AS CODPUNTODEVENTACABEZA,
                              MFCPREPAID.CODTIPOPUNTODEVENTA          AS CODTIPOPUNTODEVENTA,

                              ISNULL(MFPPREPAID.SALDOANTERIORENCONTRAGTECH -
                                  MFPPREPAID.SALDOANTERIORAFAVORGTECH, 0)     AS SALDOANTERIORGTECH,
                              ISNULL(MFPxPN.FACTURADOGTECH, 0)                   AS FACTURACIONGTECH,
                              ISNULL(MFPPREPAID.NUEVOSALDOENCONTRAGTECH -
                                  MFPPREPAID.NUEVOSALDOAFAVORGTECH, 0)        AS NUEVOSALDOGTECH,
                              MFCPREPAID.REFERENCIAGTECH                      AS REFERENCIAGTECH,
                              CNTPREPAID.NUMEROCUENTA                         AS NUMEROCUENTA,

                              ISNULL(MFPxPN.CANTIDADVENTAxEV, 0)         AS CANTIDADVENTAx6,
                              ISNULL(MFPxPN.VALORVENTAxEV, 0)            AS VALORVENTAx6,
                              ISNULL(MFPxPN.VALORVENTANETAxEV, 0)        AS VALORVENTANETAx6,
                              ISNULL(MFPxPN.VALORCOMISIONxEV, 0)         AS VALORCOMISIONx6,
                              ISNULL(MFPxPN.VALORCOMISIONBRUTAxEV, 0)    AS VALORCOMISIONBRUTAx6,
                              ISNULL(MFPxPN.VALORCOMISIONNETAxEV, 0)     AS VALORCOMISIONNETAx6,
                              ISNULL(MFPxPN.IVACOMISIONxEV, 0)           AS VATCOMISIONx6,
                              ISNULL(MFPxPN.CANTIDADVENTAxER, 0)         AS CANTIDADVENTAx7,
                              ISNULL(MFPxPN.VALORVENTAxER, 0)            AS VALORVENTAx7,
                              ISNULL(MFPxPN.VALORVENTANETAxER, 0)        AS VALORVENTANETAx7,
                              ISNULL(MFPxPN.VALORCOMISIONxER, 0)         AS VALORCOMISIONx7,
                              ISNULL(MFPxPN.VALORCOMISIONBRUTAxER, 0)    AS VALORCOMISIONBRUTAx7,
                              ISNULL(MFPxPN.VALORCOMISIONNETAxER, 0)     AS VALORCOMISIONNETAx7,
                              ISNULL(MFPxPN.IVACOMISIONxER, 0)           AS VATCOMISIONx7,
                              ISNULL(RETPREPAID.VALORRETENCIONx1, 0)     AS RETVALORx1,
                              ISNULL(RETPREPAID.VALORRETENCIONx2, 0)     AS RETVALORx2,
                              ISNULL(RETPREPAID.VALORRETENCIONx3, 0)     AS RETVALORx3,
                              MFPPREPAID.CODLINEADENEGOCIODESCUENTO   AS DESCONTADA
                       FROM WSXML_SFG.MAESTROFACTURACIONPDV MFPPREPAID
                       INNER JOIN WSXML_SFG.MAESTROFACTURACIONCOMPCONSIG MFCPREPAID ON (MFCPREPAID.ID_MAESTROFACTCOMPCONSIG = MFPPREPAID.CODMAESTROFACTURACIONCOMPCONSI)
                       INNER JOIN WSXML_SFG.CUENTA CNTPREPAID ON (CNTPREPAID.ID_CUENTA = MFCPREPAID.CODCUENTAPAGOGTECH)
                       -- Easily tradable for a redundant table
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONPDV GLOBALTIPO_DETALLEFACTPDV_IX) */
                                               DFPPREPAID.CODMAESTROFACTURACIONPDV,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xEVOUCHR THEN DFPPREPAID.CANTIDADVENTA ELSE 0 END)      AS CANTIDADVENTAxEV,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xEVOUCHR THEN DFPPREPAID.VALORVENTA ELSE 0 END)         AS VALORVENTAxEV,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xEVOUCHR THEN DFPPREPAID.VALORVENTANETA ELSE 0 END)     AS VALORVENTANETAxEV,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xEVOUCHR THEN DFPPREPAID.VALORCOMISION ELSE 0 END)      AS VALORCOMISIONxEV,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xEVOUCHR THEN DFPPREPAID.VALORCOMISIONBRUTA ELSE 0 END) AS VALORCOMISIONBRUTAxEV,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xEVOUCHR THEN DFPPREPAID.VALORCOMISIONNETA ELSE 0 END)  AS VALORCOMISIONNETAxEV,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xEVOUCHR THEN DFPPREPAID.IVACOMISION ELSE 0 END)        AS IVACOMISIONxEV,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xERECHRG THEN DFPPREPAID.CANTIDADVENTA ELSE 0 END)      AS CANTIDADVENTAxER,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xERECHRG THEN DFPPREPAID.VALORVENTA ELSE 0 END)         AS VALORVENTAxER,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xERECHRG THEN DFPPREPAID.VALORVENTANETA ELSE 0 END)     AS VALORVENTANETAxER,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xERECHRG THEN DFPPREPAID.VALORCOMISION ELSE 0 END)      AS VALORCOMISIONxER,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xERECHRG THEN DFPPREPAID.VALORCOMISIONBRUTA ELSE 0 END) AS VALORCOMISIONBRUTAxER,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xERECHRG THEN DFPPREPAID.VALORCOMISIONNETA ELSE 0 END)  AS VALORCOMISIONNETAxER,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xERECHRG THEN DFPPREPAID.IVACOMISION ELSE 0 END)        AS IVACOMISIONxER,
                                               SUM(DFPPREPAID.NUEVOSALDOENCONTRAGTECH - DFPPREPAID.NUEVOSALDOAFAVORGTECH)                         AS FACTURADOGTECH,
                                               SUM(DFPPREPAID.NUEVOSALDOENCONTRAFIDUCIA - DFPPREPAID.NUEVOSALDOAFAVORFIDUCIA)                     AS FACTURADOFIDUCIA
                                        FROM DETALLEFACTURACIONPDV DFPPREPAID
                                        GROUP BY DFPPREPAID.CODMAESTROFACTURACIONPDV) MFPxPN ON (MFPxPN.CODMAESTROFACTURACIONPDV = MFPPREPAID.ID_MAESTROFACTURACIONPDV)
                       -- End Easily tradable
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONRETENCION GLOBALBILL_DETALLEFACTRET_IX) */
                                               CODMAESTROFACTURACIONPDV,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXRENTA THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx1,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXICA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx2,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXIVA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx3
                                        FROM WSXML_SFG.DETALLEFACTURACIONRETENCION
                                        GROUP BY CODMAESTROFACTURACIONPDV) RETPREPAID ON (RETPREPAID.CODMAESTROFACTURACIONPDV = MFPPREPAID.ID_MAESTROFACTURACIONPDV)
                       WHERE MFPPREPAID.CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV
                         AND MFPPREPAID.CODLINEADENEGOCIO = @xPREPAID
                       ) PREPAIDBILLING ON (PREPAIDBILLING.CODCICLOFACTURACIONPDV = CFP.ID_CICLOFACTURACIONPDV
                                        AND PREPAIDBILLING.CODMAESTROFACTURACIONTIRILLA = MFT.ID_MAESTROFACTURACIONTIRILLA)
      /* Facturacion de Lottery */
      LEFT OUTER JOIN (SELECT /*+ index MAESTROFACTURACIONPDV GLOBALXML_MAESTROFACT_IX) */
                              MFPLOTTERY.ID_MAESTROFACTURACIONPDV     AS ID_MAESTROFACTURACIONPDV,
                              MFPLOTTERY.CODMAESTROFACTURACIONTIRILLA AS CODMAESTROFACTURACIONTIRILLA,
                              MFPLOTTERY.CODCICLOFACTURACIONPDV       AS CODCICLOFACTURACIONPDV,
                              MFPLOTTERY.CODPUNTODEVENTA              AS CODPUNTODEVENTA,
                              MFCLOTTERY.CODAGRUPACIONPUNTODEVENTA    AS CODAGRUPACIONPUNTODEVENTA,
                              MFCLOTTERY.CODPUNTODEVENTA              AS CODPUNTODEVENTACABEZA,
                              MFCLOTTERY.CODTIPOPUNTODEVENTA          AS CODTIPOPUNTODEVENTA,

                              ISNULL(MFPLOTTERY.SALDOANTERIORENCONTRAGTECH -
                                  MFPLOTTERY.SALDOANTERIORAFAVORGTECH, 0)     AS SALDOANTERIORGTECH,
                              ISNULL(MFPLOTTERY.SALDOANTERIORENCONTRAFIDUCIA -
                                  MFPLOTTERY.SALDOANTERIORAFAVORFIDUCIA, 0)   AS SALDOANTERIORFIDUCIA,
                              ISNULL(MFPLOTTERY.NUEVOSALDOENCONTRAGTECH -
                                  MFPLOTTERY.NUEVOSALDOAFAVORGTECH, 0)        AS NUEVOSALDOGTECH,
                              ISNULL(MFPLOTTERY.NUEVOSALDOENCONTRAFIDUCIA -
                                  MFPLOTTERY.NUEVOSALDOAFAVORFIDUCIA, 0)      AS NUEVOSALDOFIDUCIA,
                              MFCLOTTERY.REFERENCIAGTECH                      AS REFERENCIAGTECH,
                              MFCLOTTERY.REFERENCIAFIDUCIA                    AS REFERENCIAFIDUCIA,
                              CNTLOTTEGT.NUMEROCUENTA                         AS NUMEROCUENTAGTECH,
                              CNTLOTTEFD.NUMEROCUENTA                         AS NUMEROCUENTAFIDUCIA,

                              ISNULL(MFPxLT.CANTIDADVENTA, 0)            AS CANTIDADVENTA,
                              ISNULL(MFPxLT.VALORVENTA, 0)               AS VALORVENTA,
                              ISNULL(MFPxLT.VALORVENTANETA, 0)           AS VALORVENTANETA,
                              ISNULL(MFPxLT.VALORCOMISION, 0)            AS VALORCOMISION,
                              ISNULL(MFPxLT.VALORCOMISIONBRUTA, 0)       AS VALORCOMISIONBRUTA,
                              ISNULL(MFPxLT.VALORCOMISIONNETA, 0)        AS VALORCOMISIONNETA,
                              ISNULL(MFPxLT.IVACOMISION, 0)              AS VATCOMISION,
                              ISNULL(MFPxLT.VALORPREMIOS, 0)             AS VALORPREMIOS,
                              ISNULL(MFPxLT.VALORRETENCIONPREMIOS, 0)    AS VALORRETENCIONPREMIOS,
                              ISNULL(MFPxLT.FACTURACIONGTECH, 0)         AS FACTURACIONGTECH,
                              ISNULL(MFPxLT.FACTURACIONFIDUCIA, 0)       AS FACTURACIONFIDUCIA,
                              ISNULL(IMPLOTTERY.VALORIMPUESTOx1, 0)      AS IMPVALORx1,
                              ISNULL(RETLOTTERY.VALORRETENCIONx1, 0)     AS RETVALORx1,
                              ISNULL(RETLOTTERY.VALORRETENCIONx2, 0)     AS RETVALORx2,
                              ISNULL(RETLOTTERY.VALORRETENCIONx3, 0)     AS RETVALORx3,
                              ISNULL(UVTLOTTERY.VALORRETENCION, 0)       AS UVTVALOR,
                              MFPLOTTERY.CODLINEADENEGOCIODESCUENTO   AS DESCONTADA
                       FROM WSXML_SFG.MAESTROFACTURACIONPDV MFPLOTTERY
                       INNER JOIN WSXML_SFG.MAESTROFACTURACIONCOMPCONSIG MFCLOTTERY ON (MFCLOTTERY.ID_MAESTROFACTCOMPCONSIG = MFPLOTTERY.CODMAESTROFACTURACIONCOMPCONSI)
                       INNER JOIN WSXML_SFG.CUENTA CNTLOTTEGT ON (CNTLOTTEGT.ID_CUENTA = MFCLOTTERY.CODCUENTAPAGOGTECH)
                       INNER JOIN WSXML_SFG.CUENTA CNTLOTTEFD ON (CNTLOTTEFD.ID_CUENTA = MFCLOTTERY.CODCUENTAPAGOFIDUCIA)
                       -- Easily tradable for a redundant table
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONPDV XMLGENERACION_DFP_IX) */
                                               DFPLOTTERY.CODMAESTROFACTURACIONPDV,
                                               SUM(DFPLOTTERY.CANTIDADVENTA)           AS CANTIDADVENTA,
                                               SUM(DFPLOTTERY.VALORVENTA)              AS VALORVENTA,
                                               SUM(DFPLOTTERY.VALORVENTANETA)          AS VALORVENTANETA,
                                               SUM(DFPLOTTERY.VALORCOMISION)           AS VALORCOMISION,
                                               SUM(DFPLOTTERY.VALORCOMISIONBRUTA)      AS VALORCOMISIONBRUTA,
                                               SUM(DFPLOTTERY.VALORCOMISIONNETA)       AS VALORCOMISIONNETA,
                                               SUM(DFPLOTTERY.IVACOMISION)             AS IVACOMISION,
                                               SUM(DFPLOTTERY.VALORPREMIOPAGO)         AS VALORPREMIOS,
                                               SUM(DFPLOTTERY.RETENCIONPREMIOSPAGADOS) AS VALORRETENCIONPREMIOS,
                                               SUM(DFPLOTTERY.NUEVOSALDOENCONTRAGTECH - DFPLOTTERY.NUEVOSALDOAFAVORGTECH)     AS FACTURACIONGTECH,
                                               SUM(DFPLOTTERY.NUEVOSALDOENCONTRAFIDUCIA - DFPLOTTERY.NUEVOSALDOAFAVORFIDUCIA) AS FACTURACIONFIDUCIA
                                        FROM WSXML_SFG.DETALLEFACTURACIONPDV DFPLOTTERY
                                        GROUP BY DFPLOTTERY.CODMAESTROFACTURACIONPDV) MFPxLT ON (MFPxLT.CODMAESTROFACTURACIONPDV = MFPLOTTERY.ID_MAESTROFACTURACIONPDV)
                       -- End Easily tradable
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONIMPUESTO GLOBALBILL_DETALLEFACTIMP_IX) */
                                               CODMAESTROFACTURACIONPDV,
                                               SUM(CASE WHEN CODIMPUESTO = @xPRODTX THEN VALORIMPUESTO ELSE 0 END) AS VALORIMPUESTOx1
                                        FROM WSXML_SFG.DETALLEFACTURACIONIMPUESTO
                                        GROUP BY CODMAESTROFACTURACIONPDV) IMPLOTTERY ON (IMPLOTTERY.CODMAESTROFACTURACIONPDV = MFPLOTTERY.ID_MAESTROFACTURACIONPDV)
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONRETENCION GLOBALBILL_DETALLEFACTRET_IX) */
                                               CODMAESTROFACTURACIONPDV,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXRENTA THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx1,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXICA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx2,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXIVA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx3
                                        FROM WSXML_SFG.DETALLEFACTURACIONRETENCION
                                        GROUP BY CODMAESTROFACTURACIONPDV) RETLOTTERY ON (RETLOTTERY.CODMAESTROFACTURACIONPDV = MFPLOTTERY.ID_MAESTROFACTURACIONPDV)
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONRETUVT GLOBALBILL_DETALLEFACTUVT_IX) */
                                               CODMAESTROFACTURACIONPDV,
                                               SUM(VALORRETENCION) AS VALORRETENCION
                                        FROM DETALLEFACTURACIONRETUVT
                                        GROUP BY CODMAESTROFACTURACIONPDV) UVTLOTTERY ON (UVTLOTTERY.CODMAESTROFACTURACIONPDV = MFPLOTTERY.ID_MAESTROFACTURACIONPDV)
                       WHERE MFPLOTTERY.CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV
                         AND MFPLOTTERY.CODLINEADENEGOCIO = @xLOTTERY
                       ) LOTTERYBILLING ON (LOTTERYBILLING.CODCICLOFACTURACIONPDV = CFP.ID_CICLOFACTURACIONPDV
                                        AND LOTTERYBILLING.CODMAESTROFACTURACIONTIRILLA = MFT.ID_MAESTROFACTURACIONTIRILLA)
      LEFT OUTER JOIN AGRUPACIONPUNTODEVENTA AGR ON (COALESCE(BILLPAYBILLING.CODAGRUPACIONPUNTODEVENTA,
                                                              PREPAIDBILLING.CODAGRUPACIONPUNTODEVENTA,
                                                              LOTTERYBILLING.CODAGRUPACIONPUNTODEVENTA) = AGR.ID_AGRUPACIONPUNTODEVENTA)
    WHERE CAST(PDV.CODIGOGTECHPUNTODEVENTA AS NUMERIC(38,0)) = CAST(@p_CODIGOGTECHPUNTODEVENTA AS NUMERIC(38,0));
	
	END TRY
	BEGIN CATCH
		DECLARE @p_TIPOINFORMATIVO TINYINT, @p_TIPOERROR TINYINT,@p_TIPOADVERTENCIA TINYINT,@p_TIPOCUALQUIERA TINYINT,@p_PROCESONOTIFICACION TINYINT,@p_ESTADOABIERTA TINYINT,@p_ESTADOCERRADA TINYINT
	
		EXEC WSXML_SFG.SFGALERTA_CONSTANT 
			@p_TIPOINFORMATIVO OUT, @p_TIPOERROR OUT, @p_TIPOADVERTENCIA OUT, @p_TIPOCUALQUIERA OUT, @p_PROCESONOTIFICACION OUT, @p_ESTADOABIERTA OUT, @p_ESTADOCERRADA OUT

		SET @msg = 'No se pudo obtener la informacion de Deposit Slips: ' + isnull(ERROR_MESSAGE() , '')
		EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @p_TIPOADVERTENCIA, 'GENERACIONXML', @msg, 1
	END CATCH
  END;
 GO
 

IF OBJECT_ID('WSXML_SFG.SFGUNIFIEDXMLDEPOSITSLIP_GetDepositSlipChainHeader', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGUNIFIEDXMLDEPOSITSLIP_GetDepositSlipChainHeader;
GO

CREATE     PROCEDURE WSXML_SFG.SFGUNIFIEDXMLDEPOSITSLIP_GetDepositSlipChainHeader(@p_SECUENCIACICLO NUMERIC(22,0), @p_CODIGOAGRUPACIONGTECH NVARCHAR(2000)) AS
 BEGIN
    DECLARE @cMAXSECUENCIAFACTURACION NUMERIC(22,0);
    DECLARE @cCODCICLOFACTURACIONPDV NUMERIC(22,0);

    DECLARE @xBILLPAY NUMERIC(22,0) = 3; -- Linea de negocio Bill Payment
    DECLARE @xPREPAID NUMERIC(22,0) = 2; -- Linea de negocio Pines y Recargas
    DECLARE @xLOTTERY NUMERIC(22,0) = 1; -- Linea de negocio Juegos

    DECLARE @xBPAYMNT NUMERIC(22,0) = 8; -- Tipo de producto Bill Payment
    DECLARE @xDEPONLN NUMERIC(22,0) = 9; -- Tipo de producto Deposit Online
    DECLARE @xEVOUCHR NUMERIC(22,0) = 6; -- Tipo de producto EVoucher
    DECLARE @xERECHRG NUMERIC(22,0) = 7; -- Tipo de producto ERecharge

    DECLARE @xTAXRENTA NUMERIC(22,0) = 1; -- Retencion Tributaria RENTA
    DECLARE @xTAXICA   NUMERIC(22,0) = 2; -- Retencion Tributaria ICA
    DECLARE @xTAXIVA   NUMERIC(22,0) = 3; -- Retencion Tributaria IVA

    DECLARE @xPRODTX   NUMERIC(22,0) = 1; -- Impuesto IVA

    DECLARE @vBarcodeGTECH VARCHAR(4000)    /* Use -meta option PARAMETRO.VALOR%TYPE */;
    DECLARE @vBarcodeFiducia VARCHAR(4000)  /* Use -meta option PARAMETRO.VALOR%TYPE */;
    DECLARE @vLastBillingDate DATETIME;
    DECLARE @msg VARCHAR(2000);
   
  SET NOCOUNT ON;
    -- Get expected cycle identifier
    BEGIN
      IF @p_SECUENCIACICLO = -1 BEGIN
        SELECT @cMAXSECUENCIAFACTURACION = MAX(SECUENCIA) FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ACTIVE = 1;
      END
      ELSE BEGIN
        SET @cMAXSECUENCIAFACTURACION = @p_SECUENCIACICLO;
      END 

		SELECT @cCODCICLOFACTURACIONPDV = ID_CICLOFACTURACIONPDV FROM WSXML_SFG.CICLOFACTURACIONPDV
		WHERE SECUENCIA = @cMAXSECUENCIAFACTURACION AND ACTIVE = 1;
		
		DECLARE @rowcount NUMERIC(22,0) = @@ROWCOUNT;
		IF @rowcount = 0 BEGIN
			SET @msg = '-20054 No existe el ciclo de facturacion No. ' + ISNULL(CONVERT(VARCHAR,@p_SECUENCIACICLO), '') 
			RAISERROR(@msg, 16, 1);
			RETURN 0;
		END
		IF @rowcount > 1 BEGIN
			RAISERROR('-20054 Hay mas de un ciclo de facturacion con el mismo codigo de secuencia. Este es un problema de consistencia de datos.', 16, 1);
			RETURN 0;
		END
    END;

    /* Ciclo de facturacion previo (SECUENCIA MENOR ACTIVA) */
    BEGIN
		BEGIN TRY
		  SELECT @vLastBillingDate = ISNULL(CFPREV.FECHAEJECUCION, CONVERT(VARCHAR, '01/01/2000', 103))
		  FROM WSXML_SFG.CICLOFACTURACIONPDV CFPREV
		  WHERE CFPREV.SECUENCIA = (@cMAXSECUENCIAFACTURACION - 1) AND CFPREV.ACTIVE = 1;
		END TRY
		BEGIN CATCH
			SELECT @vLastBillingDate = CONVERT(VARCHAR, '01/01/2000', 103);
		END CATCH
    END;
	BEGIN TRY
    EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'BarcodeGamesGTECH', @vBarcodeGTECH OUT
    EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'BarcodeGamesFiducia', @vBarcodeFiducia OUT

      SELECT @vLastBillingDate                 AS LASTBILLINGDATE,
             CFP.FECHAEJECUCION               AS BILLINGDATE,
             AGR.CODIGOAGRUPACIONGTECH        AS CHAINNUMBER,

             -- Cualquiera de las referencias por linea de negocio.
             COALESCE(BILLPAYBILLING.REFERENCIAGTECH,
                      PREPAIDBILLING.REFERENCIAGTECH,
                      LOTTERYBILLING.REFERENCIAGTECH)          AS REFERENCENUMBER,
             -- No longer per LDN
             '1780403759-1'                                    AS GTECHBANKACCOUNTNUMBER,
             '1260594754-4'                                    AS FIDUCIABANKACCOUNTNUMBER,
             @vBarcodeGTECH                                     AS GTECHBARCODE,
             @vBarcodeFiducia                                   AS FIDUCIABARCODE,

             -- Consolidated Previous Balances
             ISNULL(LOTTERYBILLING.SALDOANTERIORFIDUCIA, 0)       AS FIDUCIAPREVIOUSBALANCELOTTERY,
             ISNULL(LOTTERYBILLING.SALDOANTERIORFIDUCIA, 0)       AS FIDUCIAPREVIOUSBALANCETOTAL,

             ISNULL(LOTTERYBILLING.NUEVOSALDOFIDUCIA -
                 LOTTERYBILLING.SALDOANTERIORFIDUCIA, 0)       AS FIDUCIATOTALBILLING,

             ISNULL(LOTTERYBILLING.NUEVOSALDOFIDUCIA, 0)          AS FIDUCIACURRENTBALANCETOTAL,

             ISNULL(LOTTERYBILLING.SALDOANTERIORGTECH, 0)         AS GTECHPREVIOUSBALANCELOTTERY,
             ISNULL(PREPAIDBILLING.SALDOANTERIORGTECH, 0)         AS GTECHPREVIOUSBALANCEPREPAID,
             ISNULL(BILLPAYBILLING.SALDOANTERIORGTECH, 0)         AS GTECHPREVIOUSBALANCEBILLPAY,

             ISNULL(LOTTERYBILLING.SALDOANTERIORGTECH, 0) +
             ISNULL(PREPAIDBILLING.SALDOANTERIORGTECH, 0) +
             ISNULL(BILLPAYBILLING.SALDOANTERIORGTECH, 0)         AS GTECHPREVIOUSBALANCETOTAL,

             ISNULL(BILLPAYBILLING.NUEVOSALDOGTECH -
                 BILLPAYBILLING.SALDOANTERIORGTECH, 0) +
             ISNULL(PREPAIDBILLING.NUEVOSALDOGTECH -
                 PREPAIDBILLING.SALDOANTERIORGTECH, 0) +
             ISNULL(LOTTERYBILLING.NUEVOSALDOGTECH -
                 LOTTERYBILLING.SALDOANTERIORGTECH, 0)         AS GTECHTOTALBILLING,

             ISNULL(LOTTERYBILLING.NUEVOSALDOGTECH, 0) +
             ISNULL(PREPAIDBILLING.NUEVOSALDOGTECH, 0) +
             ISNULL(BILLPAYBILLING.NUEVOSALDOGTECH, 0)            AS GTECHCURRENTBALANCETOTAL,

             /* Commercial Services */
             ISNULL(BILLPAYBILLING.CANTIDADVENTAx8, 0)            AS GCSBPAYMNTPRODTOTALQUANTITY,
             ISNULL(BILLPAYBILLING.VALORVENTAx8, 0)               AS GCSBPAYMNTPRODTOTALAMOUNT,
             ISNULL(BILLPAYBILLING.CANTIDADVENTAx9, 0)            AS GCSDEPONLNPRODTOTALQUANTITY,
             ISNULL(BILLPAYBILLING.VALORVENTAx9, 0)               AS GCSDEPONLNPRODTOTALAMOUNT,
             ISNULL(PREPAIDBILLING.CANTIDADVENTAx6, 0)            AS GCSEVOUCHRPRODTOTALQUANTITY,
             ISNULL(PREPAIDBILLING.VALORVENTAx6, 0)               AS GCSEVOUCHRPRODTOTALAMOUNT,
             ISNULL(PREPAIDBILLING.CANTIDADVENTAx7, 0)            AS GCSERECHRGPRODTOTALQUANTITY,
             ISNULL(PREPAIDBILLING.VALORVENTAx7, 0)               AS GCSERECHRGPRODTOTALAMOUNT,

             /* Comission */
             ISNULL(BILLPAYBILLING.VALORCOMISIONx8, 0)            AS GCSBPAYMNTGROSSCOMMISSION,
             ISNULL(BILLPAYBILLING.VALORCOMISIONx9, 0)            AS GCSDEPONLNGROSSCOMMISSION,
             ISNULL(PREPAIDBILLING.VALORCOMISIONx6, 0)            AS GCSEVOUCHRGROSSCOMMISSION,
             ISNULL(PREPAIDBILLING.VALORCOMISIONx7, 0)            AS GCSERECHRGGROSSCOMMISSION,

             ISNULL(BILLPAYBILLING.VALORCOMISIONx8, 0) +
             ISNULL(BILLPAYBILLING.VALORCOMISIONx9, 0) +
             ISNULL(PREPAIDBILLING.VALORCOMISIONx6, 0) +
             ISNULL(PREPAIDBILLING.VALORCOMISIONx7, 0)            AS GCSTOTALGROSSCOMMISSION,

             ISNULL(BILLPAYBILLING.VATCOMISIONx8, 0) +
             ISNULL(BILLPAYBILLING.VATCOMISIONx9, 0) +
             ISNULL(PREPAIDBILLING.VATCOMISIONx6, 0) +
             ISNULL(PREPAIDBILLING.VATCOMISIONx7, 0)              AS GCSVATCOMMISSION,

             ISNULL(BILLPAYBILLING.RETVALORx1, 0) +
             ISNULL(PREPAIDBILLING.RETVALORx1, 0)                 AS GCSTAXRENTA,
             ISNULL(BILLPAYBILLING.RETVALORx2, 0) +
             ISNULL(PREPAIDBILLING.RETVALORx2, 0)                 AS GCSTAXICA,
             ISNULL(BILLPAYBILLING.RETVALORx3, 0) +
             ISNULL(PREPAIDBILLING.RETVALORx3, 0)                 AS GCSTAXIVA,

             ISNULL(BILLPAYBILLING.VALORCOMISIONNETAx8, 0) +
             ISNULL(BILLPAYBILLING.VALORCOMISIONNETAx9, 0) +
             ISNULL(PREPAIDBILLING.VALORCOMISIONNETAx6, 0) +
             ISNULL(PREPAIDBILLING.VALORCOMISIONNETAx7, 0)        AS GCSFINALCOMMISSION,

             ISNULL(BILLPAYBILLING.NUEVOSALDOGTECH -
                 BILLPAYBILLING.SALDOANTERIORGTECH, 0) +
             ISNULL(PREPAIDBILLING.NUEVOSALDOGTECH -
                 PREPAIDBILLING.SALDOANTERIORGTECH, 0)         AS GCSTOTALBILLING,

             ISNULL(BILLPAYBILLING.NUEVOSALDOGTECH, 0) +
             ISNULL(PREPAIDBILLING.NUEVOSALDOGTECH, 0)            AS GCSCURRENTBALANCE,

             /* Games */
             ISNULL(LOTTERYBILLING.CANTIDADVENTA, 0)              AS GGMLOTTERYPRODTOTALQUANTITY,
             ISNULL(LOTTERYBILLING.VALORVENTA, 0)                 AS GGMLOTTERYPRODTOTALAMOUNT,
             0                                                 AS GGMLOTTERYADJUSTMENTS,
             ISNULL(LOTTERYBILLING.IMPVALORx1, 0)                 AS GGMLOTTERYTAXIVA,
             ISNULL(LOTTERYBILLING.VALORPREMIOS, 0)               AS GGMLOTTERYAWARDPAIDAMOUNT,
             ISNULL(LOTTERYBILLING.VALORRETENCIONPREMIOS, 0)      AS GGMLOTTERYAWARDPAIDTAXDISCOUNT,
             ISNULL(LOTTERYBILLING.VALORCOMISION, 0)              AS GGMTOTALGROSSCOMMISSION,
             ISNULL(LOTTERYBILLING.VATCOMISION, 0)                AS GGMVATCOMMISSION,
             ISNULL(LOTTERYBILLING.RETVALORx1, 0)                 AS GGMTAXRENTA,
             ISNULL(LOTTERYBILLING.RETVALORx2, 0)                 AS GGMTAXICA,
             ISNULL(LOTTERYBILLING.RETVALORx3, 0)                 AS GGMTAXIVA,
             ISNULL(LOTTERYBILLING.VALORCOMISIONNETA, 0)          AS GGMFINALCOMMISSION,
             ISNULL(LOTTERYBILLING.NUEVOSALDOGTECH -
                 LOTTERYBILLING.SALDOANTERIORGTECH, 0)         AS GGMTOTALBILLING,
             ISNULL(LOTTERYBILLING.NUEVOSALDOGTECH, 0)            AS GGMCURRENTBALANCE,

             /* Games */
             ISNULL(LOTTERYBILLING.CANTIDADVENTA, 0)              AS FGMLOTTERYPRODTOTALQUANTITY,
             ISNULL(LOTTERYBILLING.VALORVENTA, 0)                 AS FGMLOTTERYPRODTOTALAMOUNT,
             0                                                 AS FGMLOTTERYADJUSTMENTS,
             ISNULL(LOTTERYBILLING.IMPVALORx1, 0)                 AS FGMLOTTERYTAXIVA,
             ISNULL(LOTTERYBILLING.VALORPREMIOS, 0)               AS FGMLOTTERYAWARDPAIDAMOUNT,
             ISNULL(LOTTERYBILLING.VALORRETENCIONPREMIOS, 0)      AS FGMLOTTERYAWARDPAIDTAXDISCOUNT,
             ISNULL(LOTTERYBILLING.VALORCOMISION, 0)              AS FGMTOTALGROSSCOMMISSION,
             ISNULL(LOTTERYBILLING.VATCOMISION, 0)                AS FGMVATCOMMISSION,
             ISNULL(LOTTERYBILLING.RETVALORx1, 0)                 AS FGMTAXRENTA,
             ISNULL(LOTTERYBILLING.RETVALORx2, 0)                 AS FGMTAXICA,
             ISNULL(LOTTERYBILLING.RETVALORx3, 0)                 AS FGMTAXIVA,
             ISNULL(LOTTERYBILLING.VALORCOMISIONNETA, 0)          AS FGMFINALCOMMISSION,
             ISNULL(LOTTERYBILLING.NUEVOSALDOFIDUCIA -
                 LOTTERYBILLING.SALDOANTERIORFIDUCIA, 0)       AS FGMTOTALBILLING,
             ISNULL(LOTTERYBILLING.NUEVOSALDOFIDUCIA, 0)          AS FGMCURRENTBALANCE

      FROM WSXML_SFG.AGRUPACIONPUNTODEVENTA AGR
      INNER JOIN WSXML_SFG.CICLOFACTURACIONPDV CFP ON (CFP.ID_CICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV)
      /* Facturacion de BillPayment */
      LEFT OUTER JOIN (SELECT /*+ index MAESTROFACTURACIONPDV GLOBALXML_MAESTROFACT_IX) */
                              MFCBILLPAY.CODCICLOFACTURACIONPDV            AS CODCICLOFACTURACIONPDV,
                              MFCBILLPAY.CODAGRUPACIONPUNTODEVENTA         AS CODAGRUPACIONPUNTODEVENTA,
                              MIN(MFCBILLPAY.ID_MAESTROFACTCOMPCONSIG)     AS ID_MAESTROFACTCOMPCONSIG,
                              MIN(MFCBILLPAY.CODPUNTODEVENTA)              AS CODPUNTODEVENTACABEZA,
                              MIN(MFCBILLPAY.CODTIPOPUNTODEVENTA)          AS CODTIPOPUNTODEVENTA,

                              SUM(ISNULL(MFPBILLPAY.SALDOANTERIORENCONTRAGTECH -
                                      MFPBILLPAY.SALDOANTERIORAFAVORGTECH, 0))  AS SALDOANTERIORGTECH,
                              SUM(ISNULL(MFPxBP.FACTURADOGTECH, 0))                AS FACTURACIONGTECH,
                              SUM(ISNULL(MFPBILLPAY.NUEVOSALDOENCONTRAGTECH -
                                      MFPBILLPAY.NUEVOSALDOAFAVORGTECH, 0))     AS NUEVOSALDOGTECH,

                              MIN(MFCBILLPAY.REFERENCIAGTECH)                   AS REFERENCIAGTECH,
                              MIN(CNTBILLPAY.NUMEROCUENTA)                      AS NUMEROCUENTA,

                              SUM(ISNULL(MFPxBP.CANTIDADVENTAxBP, 0))         AS CANTIDADVENTAx8,
                              SUM(ISNULL(MFPxBP.VALORVENTAxBP, 0))            AS VALORVENTAx8,
                              SUM(ISNULL(MFPxBP.VALORVENTANETAxBP, 0))        AS VALORVENTANETAx8,
                              SUM(ISNULL(MFPxBP.VALORCOMISIONxBP, 0))         AS VALORCOMISIONx8,
                              SUM(ISNULL(MFPxBP.VALORCOMISIONBRUTAxBP, 0))    AS VALORCOMISIONBRUTAx8,
                              SUM(ISNULL(MFPxBP.VALORCOMISIONNETAxBP, 0))     AS VALORCOMISIONNETAx8,
                              SUM(ISNULL(MFPxBP.IVACOMISIONxBP, 0))           AS VATCOMISIONx8,
                              SUM(ISNULL(MFPxBP.CANTIDADVENTAxDO, 0))         AS CANTIDADVENTAx9,
                              SUM(ISNULL(MFPxBP.VALORVENTAxDO, 0))            AS VALORVENTAx9,
                              SUM(ISNULL(MFPxBP.VALORVENTANETAxDO, 0))        AS VALORVENTANETAx9,
                              SUM(ISNULL(MFPxBP.VALORCOMISIONxDO, 0))         AS VALORCOMISIONx9,
                              SUM(ISNULL(MFPxBP.VALORCOMISIONBRUTAxDO, 0))    AS VALORCOMISIONBRUTAx9,
                              SUM(ISNULL(MFPxBP.VALORCOMISIONNETAxDO, 0))     AS VALORCOMISIONNETAx9,
                              SUM(ISNULL(MFPxBP.IVACOMISIONxDO, 0))           AS VATCOMISIONx9,
                              SUM(ISNULL(RETBILLPAY.VALORRETENCIONx1, 0))     AS RETVALORx1,
                              SUM(ISNULL(RETBILLPAY.VALORRETENCIONx2, 0))     AS RETVALORx2,
                              SUM(ISNULL(RETBILLPAY.VALORRETENCIONx3, 0))     AS RETVALORx3,
                              AVG(MFPBILLPAY.CODLINEADENEGOCIODESCUENTO)   AS DESCONTADA
                       FROM WSXML_SFG.MAESTROFACTURACIONPDV MFPBILLPAY
                       INNER JOIN WSXML_SFG.MAESTROFACTURACIONCOMPCONSIG MFCBILLPAY ON (MFCBILLPAY.ID_MAESTROFACTCOMPCONSIG = MFPBILLPAY.CODMAESTROFACTURACIONCOMPCONSI)
                       INNER JOIN WSXML_SFG.CUENTA CNTBILLPAY ON (CNTBILLPAY.ID_CUENTA = MFCBILLPAY.CODCUENTAPAGOGTECH)
                       -- Easily tradable for a redundant table
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONPDV GLOBALTIPO_DETALLEFACTPDV_IX) */
                                               DFPBILLPAY.CODMAESTROFACTURACIONPDV,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xBPAYMNT THEN DFPBILLPAY.CANTIDADVENTA ELSE 0 END)      AS CANTIDADVENTAxBP,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xBPAYMNT THEN DFPBILLPAY.VALORVENTA ELSE 0 END)         AS VALORVENTAxBP,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xBPAYMNT THEN DFPBILLPAY.VALORVENTANETA ELSE 0 END)     AS VALORVENTANETAxBP,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xBPAYMNT THEN DFPBILLPAY.VALORCOMISION ELSE 0 END)      AS VALORCOMISIONxBP,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xBPAYMNT THEN DFPBILLPAY.VALORCOMISIONBRUTA ELSE 0 END) AS VALORCOMISIONBRUTAxBP,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xBPAYMNT THEN DFPBILLPAY.VALORCOMISIONNETA ELSE 0 END)  AS VALORCOMISIONNETAxBP,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xBPAYMNT THEN DFPBILLPAY.IVACOMISION ELSE 0 END)        AS IVACOMISIONxBP,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xDEPONLN THEN DFPBILLPAY.CANTIDADVENTA ELSE 0 END)      AS CANTIDADVENTAxDO,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xDEPONLN THEN DFPBILLPAY.VALORVENTA ELSE 0 END)         AS VALORVENTAxDO,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xDEPONLN THEN DFPBILLPAY.VALORVENTANETA ELSE 0 END)     AS VALORVENTANETAxDO,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xDEPONLN THEN DFPBILLPAY.VALORCOMISION ELSE 0 END)      AS VALORCOMISIONxDO,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xDEPONLN THEN DFPBILLPAY.VALORCOMISIONBRUTA ELSE 0 END) AS VALORCOMISIONBRUTAxDO,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xDEPONLN THEN DFPBILLPAY.VALORCOMISIONNETA ELSE 0 END)  AS VALORCOMISIONNETAxDO,
                                               SUM(CASE WHEN DFPBILLPAY.CODTIPOPRODUCTO = @xDEPONLN THEN DFPBILLPAY.IVACOMISION ELSE 0 END)        AS IVACOMISIONxDO,
                                               SUM(DFPBILLPAY.NUEVOSALDOENCONTRAGTECH - DFPBILLPAY.NUEVOSALDOAFAVORGTECH)                         AS FACTURADOGTECH,
                                               SUM(DFPBILLPAY.NUEVOSALDOENCONTRAFIDUCIA - DFPBILLPAY.NUEVOSALDOAFAVORFIDUCIA)                     AS FACTURADOFIDUCIA
                                        FROM WSXML_SFG.DETALLEFACTURACIONPDV DFPBILLPAY
                                        GROUP BY DFPBILLPAY.CODMAESTROFACTURACIONPDV) MFPxBP ON (MFPxBP.CODMAESTROFACTURACIONPDV = MFPBILLPAY.ID_MAESTROFACTURACIONPDV)
                       -- End Easily tradable
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONRETENCION GLOBALBILL_DETALLEFACTRET_IX) */
                                               CODMAESTROFACTURACIONPDV,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXRENTA THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx1,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXICA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx2,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXIVA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx3
                                        FROM WSXML_SFG.DETALLEFACTURACIONRETENCION
                                        GROUP BY CODMAESTROFACTURACIONPDV) RETBILLPAY ON (RETBILLPAY.CODMAESTROFACTURACIONPDV = MFPBILLPAY.ID_MAESTROFACTURACIONPDV)
                       WHERE MFPBILLPAY.CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV
                         AND MFPBILLPAY.CODLINEADENEGOCIO = @xBILLPAY
                       GROUP BY MFCBILLPAY.CODCICLOFACTURACIONPDV,
                                MFCBILLPAY.CODAGRUPACIONPUNTODEVENTA
                       ) BILLPAYBILLING ON (BILLPAYBILLING.CODCICLOFACTURACIONPDV = CFP.ID_CICLOFACTURACIONPDV
                                        AND BILLPAYBILLING.CODAGRUPACIONPUNTODEVENTA = AGR.ID_AGRUPACIONPUNTODEVENTA)
      /* Facturacion de PrePaid */
      LEFT OUTER JOIN (SELECT /*+ index MAESTROFACTURACIONPDV GLOBALXML_MAESTROFACT_IX) */
                              MFCPREPAID.CODCICLOFACTURACIONPDV            AS CODCICLOFACTURACIONPDV,
                              MFCPREPAID.CODAGRUPACIONPUNTODEVENTA         AS CODAGRUPACIONPUNTODEVENTA,
                              MIN(MFCPREPAID.ID_MAESTROFACTCOMPCONSIG)     AS ID_MAESTROFACTCOMPCONSIG,
                              MIN(MFCPREPAID.CODPUNTODEVENTA)              AS CODPUNTODEVENTACABEZA,
                              MIN(MFCPREPAID.CODTIPOPUNTODEVENTA)          AS CODTIPOPUNTODEVENTA,

                              SUM(ISNULL(MFPPREPAID.SALDOANTERIORENCONTRAGTECH -
                                      MFPPREPAID.SALDOANTERIORAFAVORGTECH, 0))     AS SALDOANTERIORGTECH,
                              SUM(ISNULL(MFPxPN.FACTURADOGTECH, 0))                   AS FACTURACIONGTECH,
                              SUM(ISNULL(MFPPREPAID.NUEVOSALDOENCONTRAGTECH -
                                      MFPPREPAID.NUEVOSALDOAFAVORGTECH, 0))        AS NUEVOSALDOGTECH,

                              MIN(MFCPREPAID.REFERENCIAGTECH)                      AS REFERENCIAGTECH,
                              MIN(CNTPREPAID.NUMEROCUENTA)                         AS NUMEROCUENTA,

                              SUM(ISNULL(MFPxPN.CANTIDADVENTAxEV, 0))         AS CANTIDADVENTAx6,
                              SUM(ISNULL(MFPxPN.VALORVENTAxEV, 0))            AS VALORVENTAx6,
                              SUM(ISNULL(MFPxPN.VALORVENTANETAxEV, 0))        AS VALORVENTANETAx6,
                              SUM(ISNULL(MFPxPN.VALORCOMISIONxEV, 0))         AS VALORCOMISIONx6,
                              SUM(ISNULL(MFPxPN.VALORCOMISIONBRUTAxEV, 0))    AS VALORCOMISIONBRUTAx6,
                              SUM(ISNULL(MFPxPN.VALORCOMISIONNETAxEV, 0))     AS VALORCOMISIONNETAx6,
                              SUM(ISNULL(MFPxPN.IVACOMISIONxEV, 0))           AS VATCOMISIONx6,
                              SUM(ISNULL(MFPxPN.CANTIDADVENTAxER, 0))         AS CANTIDADVENTAx7,
                              SUM(ISNULL(MFPxPN.VALORVENTAxER, 0))            AS VALORVENTAx7,
                              SUM(ISNULL(MFPxPN.VALORVENTANETAxER, 0))        AS VALORVENTANETAx7,
                              SUM(ISNULL(MFPxPN.VALORCOMISIONxER, 0))         AS VALORCOMISIONx7,
                              SUM(ISNULL(MFPxPN.VALORCOMISIONBRUTAxER, 0))    AS VALORCOMISIONBRUTAx7,
                              SUM(ISNULL(MFPxPN.VALORCOMISIONNETAxER, 0))     AS VALORCOMISIONNETAx7,
                              SUM(ISNULL(MFPxPN.IVACOMISIONxER, 0))           AS VATCOMISIONx7,
                              SUM(ISNULL(RETPREPAID.VALORRETENCIONx1, 0))     AS RETVALORx1,
                              SUM(ISNULL(RETPREPAID.VALORRETENCIONx2, 0))     AS RETVALORx2,
                              SUM(ISNULL(RETPREPAID.VALORRETENCIONx3, 0))     AS RETVALORx3,
                              AVG(MFPPREPAID.CODLINEADENEGOCIODESCUENTO)   AS DESCONTADA
                       FROM MAESTROFACTURACIONPDV MFPPREPAID
                       INNER JOIN WSXML_SFG.MAESTROFACTURACIONCOMPCONSIG MFCPREPAID ON (MFCPREPAID.ID_MAESTROFACTCOMPCONSIG = MFPPREPAID.CODMAESTROFACTURACIONCOMPCONSI)
                       INNER JOIN WSXML_SFG.CUENTA CNTPREPAID ON (CNTPREPAID.ID_CUENTA = MFCPREPAID.CODCUENTAPAGOGTECH)
                       -- Easily tradable for a redundant table
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONPDV GLOBALTIPO_DETALLEFACTPDV_IX) */
                                               DFPPREPAID.CODMAESTROFACTURACIONPDV,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xEVOUCHR THEN DFPPREPAID.CANTIDADVENTA ELSE 0 END)      AS CANTIDADVENTAxEV,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xEVOUCHR THEN DFPPREPAID.VALORVENTA ELSE 0 END)         AS VALORVENTAxEV,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xEVOUCHR THEN DFPPREPAID.VALORVENTANETA ELSE 0 END)     AS VALORVENTANETAxEV,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xEVOUCHR THEN DFPPREPAID.VALORCOMISION ELSE 0 END)      AS VALORCOMISIONxEV,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xEVOUCHR THEN DFPPREPAID.VALORCOMISIONBRUTA ELSE 0 END) AS VALORCOMISIONBRUTAxEV,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xEVOUCHR THEN DFPPREPAID.VALORCOMISIONNETA ELSE 0 END)  AS VALORCOMISIONNETAxEV,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xEVOUCHR THEN DFPPREPAID.IVACOMISION ELSE 0 END)        AS IVACOMISIONxEV,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xERECHRG THEN DFPPREPAID.CANTIDADVENTA ELSE 0 END)      AS CANTIDADVENTAxER,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xERECHRG THEN DFPPREPAID.VALORVENTA ELSE 0 END)         AS VALORVENTAxER,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xERECHRG THEN DFPPREPAID.VALORVENTANETA ELSE 0 END)     AS VALORVENTANETAxER,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xERECHRG THEN DFPPREPAID.VALORCOMISION ELSE 0 END)      AS VALORCOMISIONxER,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xERECHRG THEN DFPPREPAID.VALORCOMISIONBRUTA ELSE 0 END) AS VALORCOMISIONBRUTAxER,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xERECHRG THEN DFPPREPAID.VALORCOMISIONNETA ELSE 0 END)  AS VALORCOMISIONNETAxER,
                                               SUM(CASE WHEN DFPPREPAID.CODTIPOPRODUCTO = @xERECHRG THEN DFPPREPAID.IVACOMISION ELSE 0 END)        AS IVACOMISIONxER,
                                               SUM(DFPPREPAID.NUEVOSALDOENCONTRAGTECH - DFPPREPAID.NUEVOSALDOAFAVORGTECH)                         AS FACTURADOGTECH,
                                               SUM(DFPPREPAID.NUEVOSALDOENCONTRAFIDUCIA - DFPPREPAID.NUEVOSALDOAFAVORFIDUCIA)                     AS FACTURADOFIDUCIA
                                        FROM DETALLEFACTURACIONPDV DFPPREPAID
                                        GROUP BY DFPPREPAID.CODMAESTROFACTURACIONPDV) MFPxPN ON (MFPxPN.CODMAESTROFACTURACIONPDV = MFPPREPAID.ID_MAESTROFACTURACIONPDV)
                       -- End Easily tradable
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONRETENCION GLOBALBILL_DETALLEFACTRET_IX) */
                                               CODMAESTROFACTURACIONPDV,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXRENTA THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx1,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXICA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx2,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXIVA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx3
                                        FROM WSXML_SFG.DETALLEFACTURACIONRETENCION
                                        GROUP BY CODMAESTROFACTURACIONPDV) RETPREPAID ON (RETPREPAID.CODMAESTROFACTURACIONPDV = MFPPREPAID.ID_MAESTROFACTURACIONPDV)
                       WHERE MFPPREPAID.CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV
                         AND MFPPREPAID.CODLINEADENEGOCIO = @xPREPAID
                       GROUP BY MFCPREPAID.CODCICLOFACTURACIONPDV,
                                MFCPREPAID.CODAGRUPACIONPUNTODEVENTA
                       ) PREPAIDBILLING ON (PREPAIDBILLING.CODCICLOFACTURACIONPDV = CFP.ID_CICLOFACTURACIONPDV
                                        AND PREPAIDBILLING.CODAGRUPACIONPUNTODEVENTA = AGR.ID_AGRUPACIONPUNTODEVENTA)
      /* Facturacion de Lottery */
      LEFT OUTER JOIN (SELECT /*+ index MAESTROFACTURACIONPDV GLOBALXML_MAESTROFACT_IX) */
                              MFCLOTTERY.CODCICLOFACTURACIONPDV            AS CODCICLOFACTURACIONPDV,
                              MFCLOTTERY.CODAGRUPACIONPUNTODEVENTA         AS CODAGRUPACIONPUNTODEVENTA,
                              MIN(MFCLOTTERY.ID_MAESTROFACTCOMPCONSIG)     AS ID_MAESTROFACTCOMPCONSIG,
                              MIN(MFCLOTTERY.CODPUNTODEVENTA)              AS CODPUNTODEVENTACABEZA,
                              MIN(MFCLOTTERY.CODTIPOPUNTODEVENTA)          AS CODTIPOPUNTODEVENTA,

                              SUM(ISNULL(MFPLOTTERY.SALDOANTERIORENCONTRAGTECH -
                                      MFPLOTTERY.SALDOANTERIORAFAVORGTECH, 0))     AS SALDOANTERIORGTECH,
                              SUM(ISNULL(MFPLOTTERY.SALDOANTERIORENCONTRAFIDUCIA -
                                      MFPLOTTERY.SALDOANTERIORAFAVORFIDUCIA, 0))   AS SALDOANTERIORFIDUCIA,
                              SUM(ISNULL(MFPLOTTERY.NUEVOSALDOENCONTRAGTECH -
                                      MFPLOTTERY.NUEVOSALDOAFAVORGTECH, 0))        AS NUEVOSALDOGTECH,
                              SUM(ISNULL(MFPLOTTERY.NUEVOSALDOENCONTRAFIDUCIA -
                                      MFPLOTTERY.NUEVOSALDOAFAVORFIDUCIA, 0))      AS NUEVOSALDOFIDUCIA,

                              MIN(MFCLOTTERY.REFERENCIAGTECH)                      AS REFERENCIAGTECH,
                              MIN(MFCLOTTERY.REFERENCIAFIDUCIA)                    AS REFERENCIAFIDUCIA,
                              MIN(CNTLOTTEGT.NUMEROCUENTA)                         AS NUMEROCUENTAGTECH,
                              MIN(CNTLOTTEFD.NUMEROCUENTA)                         AS NUMEROCUENTAFIDUCIA,

                              SUM(ISNULL(MFPxLT.CANTIDADVENTA, 0))            AS CANTIDADVENTA,
                              SUM(ISNULL(MFPxLT.VALORVENTA, 0))               AS VALORVENTA,
                              SUM(ISNULL(MFPxLT.VALORVENTANETA, 0))           AS VALORVENTANETA,
                              SUM(ISNULL(MFPxLT.VALORCOMISION, 0))            AS VALORCOMISION,
                              SUM(ISNULL(MFPxLT.VALORCOMISIONBRUTA, 0))       AS VALORCOMISIONBRUTA,
                              SUM(ISNULL(MFPxLT.VALORCOMISIONNETA, 0))        AS VALORCOMISIONNETA,
                              SUM(ISNULL(MFPxLT.IVACOMISION, 0))              AS VATCOMISION,
                              SUM(ISNULL(MFPxLT.VALORPREMIOS, 0))             AS VALORPREMIOS,
                              SUM(ISNULL(MFPxLT.VALORRETENCIONPREMIOS, 0))    AS VALORRETENCIONPREMIOS,
                              SUM(ISNULL(MFPxLT.FACTURACIONGTECH, 0))         AS FACTURACIONGTECH,
                              SUM(ISNULL(MFPxLT.FACTURACIONFIDUCIA, 0))       AS FACTURACIONFIDUCIA,
                              SUM(ISNULL(IMPLOTTERY.VALORIMPUESTOx1, 0))      AS IMPVALORx1,
                              SUM(ISNULL(RETLOTTERY.VALORRETENCIONx1, 0))     AS RETVALORx1,
                              SUM(ISNULL(RETLOTTERY.VALORRETENCIONx2, 0))     AS RETVALORx2,
                              SUM(ISNULL(RETLOTTERY.VALORRETENCIONx3, 0))     AS RETVALORx3,
                              SUM(ISNULL(UVTLOTTERY.VALORRETENCION, 0))       AS UVTVALOR,
                              AVG(MFPLOTTERY.CODLINEADENEGOCIODESCUENTO)   AS DESCONTADA
                       FROM WSXML_SFG.MAESTROFACTURACIONPDV MFPLOTTERY
                       INNER JOIN WSXML_SFG.MAESTROFACTURACIONCOMPCONSIG MFCLOTTERY ON (MFCLOTTERY.ID_MAESTROFACTCOMPCONSIG = MFPLOTTERY.CODMAESTROFACTURACIONCOMPCONSI)
                       INNER JOIN WSXML_SFG.CUENTA CNTLOTTEGT ON (CNTLOTTEGT.ID_CUENTA = MFCLOTTERY.CODCUENTAPAGOGTECH)
                       INNER JOIN WSXML_SFG.CUENTA CNTLOTTEFD ON (CNTLOTTEFD.ID_CUENTA = MFCLOTTERY.CODCUENTAPAGOFIDUCIA)
                       -- Easily tradable for a redundant table
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONPDV XMLGENERACION_DFP_IX) */
                                               DFPLOTTERY.CODMAESTROFACTURACIONPDV,
                                               SUM(DFPLOTTERY.CANTIDADVENTA)           AS CANTIDADVENTA,
                                               SUM(DFPLOTTERY.VALORVENTA)              AS VALORVENTA,
                                               SUM(DFPLOTTERY.VALORVENTANETA)          AS VALORVENTANETA,
                                               SUM(DFPLOTTERY.VALORCOMISION)           AS VALORCOMISION,
                                               SUM(DFPLOTTERY.VALORCOMISIONBRUTA)      AS VALORCOMISIONBRUTA,
                                               SUM(DFPLOTTERY.VALORCOMISIONNETA)       AS VALORCOMISIONNETA,
                                               SUM(DFPLOTTERY.IVACOMISION)             AS IVACOMISION,
                                               SUM(DFPLOTTERY.VALORPREMIOPAGO)         AS VALORPREMIOS,
                                               SUM(DFPLOTTERY.RETENCIONPREMIOSPAGADOS) AS VALORRETENCIONPREMIOS,
                                               SUM(DFPLOTTERY.NUEVOSALDOENCONTRAGTECH - DFPLOTTERY.NUEVOSALDOAFAVORGTECH)     AS FACTURACIONGTECH,
                                               SUM(DFPLOTTERY.NUEVOSALDOENCONTRAFIDUCIA - DFPLOTTERY.NUEVOSALDOAFAVORFIDUCIA) AS FACTURACIONFIDUCIA
                                        FROM WSXML_SFG.DETALLEFACTURACIONPDV DFPLOTTERY
                                        GROUP BY DFPLOTTERY.CODMAESTROFACTURACIONPDV) MFPxLT ON (MFPxLT.CODMAESTROFACTURACIONPDV = MFPLOTTERY.ID_MAESTROFACTURACIONPDV)
                       -- End Easily tradable
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONIMPUESTO GLOBALBILL_DETALLEFACTIMP_IX) */
                                               CODMAESTROFACTURACIONPDV,
                                               SUM(CASE WHEN CODIMPUESTO = @xPRODTX THEN VALORIMPUESTO ELSE 0 END) AS VALORIMPUESTOx1
                                        FROM WSXML_SFG.DETALLEFACTURACIONIMPUESTO
                                        GROUP BY CODMAESTROFACTURACIONPDV) IMPLOTTERY ON (IMPLOTTERY.CODMAESTROFACTURACIONPDV = MFPLOTTERY.ID_MAESTROFACTURACIONPDV)
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONRETENCION GLOBALBILL_DETALLEFACTRET_IX) */
                                               CODMAESTROFACTURACIONPDV,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXRENTA THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx1,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXICA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx2,
                                               SUM(CASE WHEN CODRETENCIONTRIBUTARIA = @xTAXIVA   THEN VALORRETENCION ELSE 0 END) AS VALORRETENCIONx3
                                        FROM WSXML_SFG.DETALLEFACTURACIONRETENCION
                                        GROUP BY CODMAESTROFACTURACIONPDV) RETLOTTERY ON (RETLOTTERY.CODMAESTROFACTURACIONPDV = MFPLOTTERY.ID_MAESTROFACTURACIONPDV)
                       LEFT OUTER JOIN (SELECT /*+ index(DETALLEFACTURACIONRETUVT GLOBALBILL_DETALLEFACTUVT_IX) */
                                               CODMAESTROFACTURACIONPDV,
                                               SUM(VALORRETENCION) AS VALORRETENCION
                                        FROM WSXML_SFG.DETALLEFACTURACIONRETUVT
                                        GROUP BY CODMAESTROFACTURACIONPDV) UVTLOTTERY ON (UVTLOTTERY.CODMAESTROFACTURACIONPDV = MFPLOTTERY.ID_MAESTROFACTURACIONPDV)
                       WHERE MFPLOTTERY.CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV
                         AND MFPLOTTERY.CODLINEADENEGOCIO = @xLOTTERY
                       GROUP BY MFCLOTTERY.CODCICLOFACTURACIONPDV,
                                MFCLOTTERY.CODAGRUPACIONPUNTODEVENTA
                       ) LOTTERYBILLING ON (LOTTERYBILLING.CODCICLOFACTURACIONPDV = CFP.ID_CICLOFACTURACIONPDV
                                        AND LOTTERYBILLING.CODAGRUPACIONPUNTODEVENTA = AGR.ID_AGRUPACIONPUNTODEVENTA)
    WHERE CAST(AGR.CODIGOAGRUPACIONGTECH AS NUMERIC(38,0)) = CAST(@p_CODIGOAGRUPACIONGTECH AS NUMERIC(38,0));

	END TRY
	BEGIN CATCH
	
		DECLARE @p_TIPOINFORMATIVO TINYINT, @p_TIPOERROR TINYINT,@p_TIPOADVERTENCIA TINYINT,@p_TIPOCUALQUIERA TINYINT,@p_PROCESONOTIFICACION TINYINT,@p_ESTADOABIERTA TINYINT,@p_ESTADOCERRADA TINYINT
	
		EXEC WSXML_SFG.SFGALERTA_CONSTANT 
			@p_TIPOINFORMATIVO OUT, @p_TIPOERROR OUT, @p_TIPOADVERTENCIA OUT, @p_TIPOCUALQUIERA OUT, @p_PROCESONOTIFICACION OUT, @p_ESTADOABIERTA OUT, @p_ESTADOCERRADA OUT
	
		SET @msg = 'No se pudo obtener la informacion de Deposit Slips: ' + isnull(ERROR_MESSAGE() , '')
		EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @p_TIPOADVERTENCIA, 'GENERACIONXML', @msg, 1
	END CATCH
  END
 GO
  
  
 
 IF OBJECT_ID('WSXML_SFG.SFGUNIFIEDXMLDEPOSITSLIP_GetDepositSlipDetails', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGUNIFIEDXMLDEPOSITSLIP_GetDepositSlipDetails;
GO

CREATE     PROCEDURE WSXML_SFG.SFGUNIFIEDXMLDEPOSITSLIP_GetDepositSlipDetails(@p_SECUENCIACICLO NUMERIC(22,0), @p_CODIGOGTECHPUNTODEVENTA NVARCHAR(2000)) AS
 BEGIN
    DECLARE @cMAXSECUENCIAFACTURACION NUMERIC(22,0);
    DECLARE @cCODCICLOFACTURACIONPDV NUMERIC(22,0);
    DECLARE @xPRODTX  NUMERIC(22,0) = 1; -- Impuesto IVA
    DECLARE @xBILLPAY NUMERIC(22,0) = 3; -- Linea de negocio Bill Payment
    DECLARE @xPREPAID NUMERIC(22,0) = 2; -- Linea de negocio Pines y Recargas
    DECLARE @xLOTTERY NUMERIC(22,0) = 1; -- Linea de negocio Juegos
    DECLARE @xBPAYMNT NUMERIC(22,0) = 8; -- Tipo de producto Bill Payment
    DECLARE @xDEPONLN NUMERIC(22,0) = 9; -- Tipo de producto Deposit Online
    DECLARE @xEVOUCHR NUMERIC(22,0) = 6; -- Tipo de producto EVoucher
    DECLARE @xERECHRG NUMERIC(22,0) = 7; -- Tipo de producto ERecharge
   
	DECLARE @msg VARCHAR(2000)
  SET NOCOUNT ON;
    BEGIN
      IF @p_SECUENCIACICLO = -1 BEGIN
        SELECT @cMAXSECUENCIAFACTURACION = MAX(SECUENCIA) FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ACTIVE = 1;
      END
      ELSE BEGIN
        SET @cMAXSECUENCIAFACTURACION = @p_SECUENCIACICLO;
      END 

      SELECT @cCODCICLOFACTURACIONPDV = ID_CICLOFACTURACIONPDV FROM WSXML_SFG.CICLOFACTURACIONPDV
      WHERE SECUENCIA = @cMAXSECUENCIAFACTURACION AND ACTIVE = 1;
	  
	  DECLARE @rowcount NUMERIC(22,0) = @@ROWCOUNT;
	  IF @rowcount = 0 BEGIN
			SET @msg = '-20054 No existe el ciclo de facturacion No. ' + ISNULL(CONVERT(VARCHAR,@p_SECUENCIACICLO), '')
			RAISERROR(@msg, 16, 1);
			RETURN 0
	  END
	  
	  IF @rowcount > 1 BEGIN
		RAISERROR('-20054 Hay mas de un ciclo de facturacion con el mismo codigo de secuencia. Este es un problema de consistencia de datos.', 16, 1);
		RETURN 0;
	  END
		
		  
    END;

	DECLARE @l_PUNTODEVENTA_F numeric(22,0);
		EXEC WSXML_SFG.PUNTODEVENTA_F @p_CODIGOGTECHPUNTODEVENTA, 0, @l_PUNTODEVENTA_F OUT
		
      SELECT CASE WHEN TPR.CODLINEADENEGOCIO = @xBILLPAY AND TPR.ID_TIPOPRODUCTO = @xBPAYMNT THEN 'BillPayment'
                  WHEN TPR.CODLINEADENEGOCIO = @xBILLPAY AND TPR.ID_TIPOPRODUCTO = @xDEPONLN THEN 'DepositOnLine'
                  WHEN TPR.CODLINEADENEGOCIO = @xPREPAID AND TPR.ID_TIPOPRODUCTO = @xEVOUCHR THEN 'EVoucher'
                  WHEN TPR.CODLINEADENEGOCIO = @xPREPAID AND TPR.ID_TIPOPRODUCTO = @xERECHRG THEN 'ERecharge'
                  WHEN TPR.CODLINEADENEGOCIO = @xLOTTERY THEN 'Games'
             END AS PARENTNODE,
             CASE WHEN SUM(DFP.NUEVOSALDOENCONTRAGTECH - DFP.NUEVOSALDOAFAVORGTECH) <> 0 THEN 1 ELSE 0 END AS PARTGTECH,
             CASE WHEN SUM(DFP.NUEVOSALDOENCONTRAFIDUCIA - DFP.NUEVOSALDOAFAVORFIDUCIA) <> 0 THEN 1 ELSE 0 END AS PARTFIDUCIA,
             AGR.ID_AGRUPACIONPRODUCTO, AGR.NOMAGRUPACIONPRODUCTO AS PRODUCTNAME,
             SUM(DFP.CANTIDADVENTA)                 AS QUANTITY,
             SUM(DFP.VALORVENTA)                    AS AMOUNT,  -- Venta total, sin descontar impuestos ni anulaciones
             SUM(DFP.CANTIDADANULACION)             AS QUANTITYCANCELED,
             SUM(DFP.VALORANULACION)                AS AMOUNTCANCELED,
             SUM(DFP.VALORVENTABRUTA)               AS GROSSSALES,
             SUM(ISNULL(DFPTAXIVA.VALORIMPUESTOx1, 0)) AS TAXIVA,
             SUM(DFP.CANTIDADPREMIOPAGO)            AS AWARDPAIDQUANTITY,
             SUM(DFP.VALORPREMIOPAGO)               AS AWARDPAIDAMOUNT,
             SUM(DFP.RETENCIONPREMIOSPAGADOS)       AS AWARDPAIDTAXDISCOUNTING
      FROM WSXML_SFG.MAESTROFACTURACIONPDV MFP
      INNER JOIN WSXML_SFG.DETALLEFACTURACIONPDV DFP ON (DFP.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV)
      INNER JOIN WSXML_SFG.PRODUCTO PRD ON (DFP.CODPRODUCTO = PRD.ID_PRODUCTO)
      INNER JOIN WSXML_SFG.AGRUPACIONPRODUCTO AGR ON (AGR.ID_AGRUPACIONPRODUCTO = PRD.CODAGRUPACIONPRODUCTO)
      INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ON (AGR.CODTIPOPRODUCTO = TPR.ID_TIPOPRODUCTO)
      LEFT OUTER JOIN (SELECT CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV, SUM(CASE WHEN CODIMPUESTO = @xPRODTX THEN VALORIMPUESTO ELSE 0 END) AS VALORIMPUESTOx1
                       FROM WSXML_SFG.DETALLEFACTURACIONIMPUESTO
                       GROUP BY CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV) DFPTAXIVA ON (DFPTAXIVA.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV AND DFPTAXIVA.CODDETALLEFACTURACIONPDV = DFP.ID_DETALLEFACTURACIONPDV)
      WHERE MFP.CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV
        AND MFP.CODPUNTODEVENTA = @l_PUNTODEVENTA_F
      GROUP BY TPR.CODLINEADENEGOCIO, TPR.ID_TIPOPRODUCTO, AGR.ID_AGRUPACIONPRODUCTO, AGR.NOMAGRUPACIONPRODUCTO
      ORDER BY TPR.CODLINEADENEGOCIO, SUM(DFP.CANTIDADVENTA) DESC;
  END
GO
  


IF OBJECT_ID('WSXML_SFG.SFGUNIFIEDXMLDEPOSITSLIP_GetDepositSlipChainDetails', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGUNIFIEDXMLDEPOSITSLIP_GetDepositSlipChainDetails;
GO

CREATE     PROCEDURE WSXML_SFG.SFGUNIFIEDXMLDEPOSITSLIP_GetDepositSlipChainDetails(@p_SECUENCIACICLO NUMERIC(22,0), @p_CODIGOAGRUPACIONGTECH NVARCHAR(2000)) AS
 BEGIN
    DECLARE @cMAXSECUENCIAFACTURACION NUMERIC(22,0);
    DECLARE @cCODCICLOFACTURACIONPDV NUMERIC(22,0);
    DECLARE @xPRODTX  NUMERIC(22,0) = 1; -- Impuesto IVA
    DECLARE @xBILLPAY NUMERIC(22,0) = 3; -- Linea de negocio Bill Payment
    DECLARE @xPREPAID NUMERIC(22,0) = 2; -- Linea de negocio Pines y Recargas
    DECLARE @xLOTTERY NUMERIC(22,0) = 1; -- Linea de negocio Juegos
    DECLARE @xBPAYMNT NUMERIC(22,0) = 8; -- Tipo de producto Bill Payment
    DECLARE @xDEPONLN NUMERIC(22,0) = 9; -- Tipo de producto Deposit Online
    DECLARE @xEVOUCHR NUMERIC(22,0) = 6; -- Tipo de producto EVoucher
    DECLARE @xERECHRG NUMERIC(22,0) = 7; -- Tipo de producto ERecharge
	
	declare @msgError VARCHAR(2000);
   
  SET NOCOUNT ON;
    BEGIN
      IF @p_SECUENCIACICLO = -1 BEGIN
        SELECT @cMAXSECUENCIAFACTURACION = MAX(SECUENCIA) FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ACTIVE = 1;
      END
      ELSE BEGIN
        SET @cMAXSECUENCIAFACTURACION = @p_SECUENCIACICLO;
      END 

      SELECT @cCODCICLOFACTURACIONPDV = ID_CICLOFACTURACIONPDV FROM WSXML_SFG.CICLOFACTURACIONPDV
      WHERE SECUENCIA = @cMAXSECUENCIAFACTURACION AND ACTIVE = 1;
	  
		DECLARE @rowcount NUMERIC(22,0) = @@ROWCOUNT;
		IF @rowcount = 0 BEGIN
			SET @msgError = '-20054 No existe el ciclo de facturacion No. ' + ISNULL(CONVERT(VARCHAR,@p_SECUENCIACICLO), '')
			RAISERROR(@msgError, 16, 1);
			RETURN 0;
		END
		
		IF @rowcount > 1 BEGIN
			RAISERROR('-20054 Hay mas de un ciclo de facturacion con el mismo codigo de secuencia. Este es un problema de consistencia de datos.', 16, 1);
			RETURN 0;
		END
		  
    END;

      SELECT CASE WHEN TPR.CODLINEADENEGOCIO = @xBILLPAY AND TPR.ID_TIPOPRODUCTO = @xBPAYMNT THEN 'BillPayment'
                  WHEN TPR.CODLINEADENEGOCIO = @xBILLPAY AND TPR.ID_TIPOPRODUCTO = @xDEPONLN THEN 'DepositOnLine'
                  WHEN TPR.CODLINEADENEGOCIO = @xPREPAID AND TPR.ID_TIPOPRODUCTO = @xEVOUCHR THEN 'EVoucher'
                  WHEN TPR.CODLINEADENEGOCIO = @xPREPAID AND TPR.ID_TIPOPRODUCTO = @xERECHRG THEN 'ERecharge'
                  WHEN TPR.CODLINEADENEGOCIO = @xLOTTERY THEN 'Games'
             END AS PARENTNODE,
             CASE WHEN SUM(DFP.NUEVOSALDOENCONTRAGTECH - DFP.NUEVOSALDOAFAVORGTECH) <> 0 THEN 1 ELSE 0 END AS PARTGTECH,
             CASE WHEN SUM(DFP.NUEVOSALDOENCONTRAFIDUCIA - DFP.NUEVOSALDOAFAVORFIDUCIA) <> 0 THEN 1 ELSE 0 END AS PARTFIDUCIA,
             AGR.ID_AGRUPACIONPRODUCTO, AGR.NOMAGRUPACIONPRODUCTO AS PRODUCTNAME,
             SUM(DFP.CANTIDADVENTA)                 AS QUANTITY,
             SUM(DFP.VALORVENTA)                    AS AMOUNT,  -- Venta total, sin descontar impuestos ni anulaciones
             SUM(DFP.CANTIDADANULACION)             AS QUANTITYCANCELED,
             SUM(DFP.VALORANULACION)                AS AMOUNTCANCELED,
             SUM(DFP.VALORVENTABRUTA)               AS GROSSSALES,
             SUM(ISNULL(DFPTAXIVA.VALORIMPUESTOx1, 0)) AS TAXIVA,
             SUM(DFP.CANTIDADPREMIOPAGO)            AS AWARDPAIDQUANTITY,
             SUM(DFP.VALORPREMIOPAGO)               AS AWARDPAIDAMOUNT,
             SUM(DFP.RETENCIONPREMIOSPAGADOS)       AS AWARDPAIDTAXDISCOUNTING
      FROM WSXML_SFG.MAESTROFACTURACIONCOMPCONSIG MFC
      INNER JOIN WSXML_SFG.MAESTROFACTURACIONPDV MFP ON (MFP.CODMAESTROFACTURACIONCOMPCONSI = MFC.ID_MAESTROFACTCOMPCONSIG)
      INNER JOIN DETALLEFACTURACIONPDV DFP ON (DFP.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV)
      INNER JOIN WSXML_SFG.PRODUCTO PRD ON (DFP.CODPRODUCTO = PRD.ID_PRODUCTO)
      INNER JOIN WSXML_SFG.AGRUPACIONPRODUCTO AGR ON (AGR.ID_AGRUPACIONPRODUCTO = PRD.CODAGRUPACIONPRODUCTO)
      INNER JOIN WSXML_SFG.TIPOPRODUCTO TPR ON (AGR.CODTIPOPRODUCTO = TPR.ID_TIPOPRODUCTO)
      LEFT OUTER JOIN (SELECT CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV, SUM(CASE WHEN CODIMPUESTO = @xPRODTX THEN VALORIMPUESTO ELSE 0 END) AS VALORIMPUESTOx1
                       FROM WSXML_SFG.DETALLEFACTURACIONIMPUESTO
                       GROUP BY CODMAESTROFACTURACIONPDV, CODDETALLEFACTURACIONPDV) DFPTAXIVA ON (DFPTAXIVA.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV AND DFPTAXIVA.CODDETALLEFACTURACIONPDV = DFP.ID_DETALLEFACTURACIONPDV)
      WHERE MFC.CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV
        AND MFC.CODAGRUPACIONPUNTODEVENTA = WSXML_SFG.AGRUPACION_F(@p_CODIGOAGRUPACIONGTECH)
      GROUP BY TPR.CODLINEADENEGOCIO, TPR.ID_TIPOPRODUCTO, AGR.ID_AGRUPACIONPRODUCTO, AGR.NOMAGRUPACIONPRODUCTO
      ORDER BY TPR.CODLINEADENEGOCIO, SUM(DFP.CANTIDADVENTA) DESC;
  END;
GO


