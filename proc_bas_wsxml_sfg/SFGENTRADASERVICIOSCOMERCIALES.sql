USE SFGPRODU;
--  DDL for Package Body SFGENTRADASERVICIOSCOMERCIALES
--------------------------------------------------------

  /* PACKAGE BODY WSXML_SFG.SFGENTRADASERVICIOSCOMERCIALES */ 

  -- Nuevo Registro
  IF OBJECT_ID('WSXML_SFG.SFGENTRADASERVICIOSCOMERCIALES_AddRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGENTRADASERVICIOSCOMERCIALES_AddRecord;
GO

CREATE     PROCEDURE WSXML_SFG.SFGENTRADASERVICIOSCOMERCIALES_AddRecord(@p_CODENTRADAARCHIVOCONTROL    NUMERIC(22,0),
                      @p_NUMERO_DE_TRANSACCION       NUMERIC(22,0),
                      @p_ESTADO                      NVARCHAR(2000),
                      @p_FECHA                       DATETIME,
                      @p_FECHA_Y_HORA                DATETIME,
                      @p_VALOR                       NUMERIC(22,0),
                      @p_CODIGO_PRODUCTO             NVARCHAR(2000),
                      @p_PUNTO_DE_VENTA              NVARCHAR(2000),
                      @p_NOMBRE_DEL_PRODUCTO         NVARCHAR(2000),
                      @p_COLOCADOR                   NVARCHAR(2000),
                      @p_RECEIPT_NUMBER              NVARCHAR(2000),
                      @p_SUSCRIBER_NUMBER            NVARCHAR(2000),
                      @p_ID_ENTRADASERVICIOSCOME_out NUMERIC(22,0) OUT) AS
  BEGIN
  SET NOCOUNT ON;
    INSERT INTO WSXML_SFG.ENTRADASERVICIOSCOMERCIALES (
                                             CODENTRADAARCHIVOCONTROL,
                                             NUMERO_DE_TRANSACCION,
                                             ESTADO,
                                             FECHA,
                                             FECHA_Y_HORA,
                                             VALOR,
                                             CODIGO_PRODUCTO,
                                             PUNTO_DE_VENTA,
                                             NOMBRE_DEL_PRODUCTO,
                                             COLOCADOR,
                                             RECEIPT_NUMBER,
                                             SUSCRIBER_NUMBER)
    VALUES (
            @p_CODENTRADAARCHIVOCONTROL,
            @p_NUMERO_DE_TRANSACCION,
            @p_ESTADO,
            @p_FECHA,
            @p_FECHA_Y_HORA,
            @p_VALOR,
            @p_CODIGO_PRODUCTO,
            @p_PUNTO_DE_VENTA,
            @p_NOMBRE_DEL_PRODUCTO,
            @p_COLOCADOR,
            @p_RECEIPT_NUMBER,
            @p_SUSCRIBER_NUMBER);
    SET @p_ID_ENTRADASERVICIOSCOME_out = SCOPE_IDENTITY();
  END;
GO

  -- Actualizacion de registro
  IF OBJECT_ID('WSXML_SFG.SFGENTRADASERVICIOSCOMERCIALES_UpdateRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGENTRADASERVICIOSCOMERCIALES_UpdateRecord;
GO

CREATE     PROCEDURE WSXML_SFG.SFGENTRADASERVICIOSCOMERCIALES_UpdateRecord(@pk_ID_ENTRADASERVICIOSCOME NUMERIC(22,0),
                         @p_NUMERO_DE_TRANSACCION    NUMERIC(22,0),
                         @p_ESTADO                   NVARCHAR(2000),
                         @p_FECHA                    DATETIME,
                         @p_FECHA_Y_HORA             DATETIME,
                         @p_VALOR                    NUMERIC(22,0),
                         @p_CODIGO_PRODUCTO          NVARCHAR(2000),
                         @p_PUNTO_DE_VENTA           NVARCHAR(2000),
                         @p_NOMBRE_DEL_PRODUCTO      NVARCHAR(2000),
                         @p_COLOCADOR                NVARCHAR(2000),
                         @p_RECEIPT_NUMBER           NVARCHAR(2000),
                         @p_SUSCRIBER_NUMBER         NVARCHAR(2000),
                         @p_ACTIVE                   NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
    UPDATE WSXML_SFG.ENTRADASERVICIOSCOMERCIALES
       SET NUMERO_DE_TRANSACCION = @p_NUMERO_DE_TRANSACCION,
           ESTADO                = @p_ESTADO,
           FECHA                 = @p_FECHA,
           FECHA_Y_HORA          = @p_FECHA_Y_HORA,
           VALOR                 = @p_VALOR,
           CODIGO_PRODUCTO       = @p_CODIGO_PRODUCTO,
           PUNTO_DE_VENTA        = @p_PUNTO_DE_VENTA,
           NOMBRE_DEL_PRODUCTO   = @p_NOMBRE_DEL_PRODUCTO,
           COLOCADOR             = @p_COLOCADOR,
           RECEIPT_NUMBER        = @p_RECEIPT_NUMBER,
           SUSCRIBER_NUMBER      = @p_SUSCRIBER_NUMBER,
           ACTIVE                = @p_ACTIVE
     WHERE ID_ENTRADASERVICIOSCOMERCIALES = @pk_ID_ENTRADASERVICIOSCOME;

    IF @@rowcount = 0 BEGIN
      RAISERROR('-20054 The record no longer exists.', 16, 1);
    END 
    IF @@rowcount > 1 BEGIN
      RAISERROR('-20053 Duplicate object instances.', 16, 1);
    END 
  END;
GO

  -- Obtiene un registro
  IF OBJECT_ID('WSXML_SFG.SFGENTRADASERVICIOSCOMERCIALES_GetRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGENTRADASERVICIOSCOMERCIALES_GetRecord;
GO
CREATE     PROCEDURE WSXML_SFG.SFGENTRADASERVICIOSCOMERCIALES_GetRecord(@pk_ID_ENTRADASERVICIOSCOME NUMERIC(22,0)) AS
 BEGIN
    DECLARE @l_count INTEGER;
   
  SET NOCOUNT ON;
    SELECT @l_count = COUNT(*) FROM WSXML_SFG.ENTRADASERVICIOSCOMERCIALES
     WHERE ID_ENTRADASERVICIOSCOMERCIALES = @pk_ID_ENTRADASERVICIOSCOME;

    IF @l_count = 0 BEGIN
      RAISERROR('-20054 The record no longer exists.', 16, 1);
    END 
    IF @l_count > 1 BEGIN
      RAISERROR('-20053 Duplicate object instances.', 16, 1);
    END 

      SELECT ID_ENTRADASERVICIOSCOMERCIALES,
             NUMERO_DE_TRANSACCION,
             ESTADO,
             FECHA,
             FECHA_Y_HORA,
             VALOR,
             CODIGO_PRODUCTO,
             PUNTO_DE_VENTA,
             NOMBRE_DEL_PRODUCTO,
             COLOCADOR,
             RECEIPT_NUMBER,
             SUSCRIBER_NUMBER,
             ACTIVE
        FROM WSXML_SFG.ENTRADASERVICIOSCOMERCIALES
       WHERE ID_ENTRADASERVICIOSCOMERCIALES = @pk_ID_ENTRADASERVICIOSCOME;
  END;
GO

  -- Lista de elementos
  IF OBJECT_ID('WSXML_SFG.SFGENTRADASERVICIOSCOMERCIALES_GetList', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGENTRADASERVICIOSCOMERCIALES_GetList;
GO
CREATE     PROCEDURE WSXML_SFG.SFGENTRADASERVICIOSCOMERCIALES_GetList(@p_active NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
      SELECT ID_ENTRADASERVICIOSCOMERCIALES,
             NUMERO_DE_TRANSACCION,
             ESTADO,
             FECHA,
             FECHA_Y_HORA,
             VALOR,
             CODIGO_PRODUCTO,
             PUNTO_DE_VENTA,
             NOMBRE_DEL_PRODUCTO,
             COLOCADOR,
             RECEIPT_NUMBER,
             SUSCRIBER_NUMBER,
             ACTIVE
        FROM WSXML_SFG.ENTRADASERVICIOSCOMERCIALES
       WHERE ACTIVE = CASE WHEN @p_active = -1 THEN ACTIVE ELSE @p_active END;

  END;
GO


  IF OBJECT_ID('WSXML_SFG.SFGENTRADASERVICIOSCOMERCIALES_UpdateRecordsTask', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGENTRADASERVICIOSCOMERCIALES_UpdateRecordsTask;
GO

CREATE     PROCEDURE WSXML_SFG.SFGENTRADASERVICIOSCOMERCIALES_UpdateRecordsTask(@p_CODDETALLETAREAEJECUTADA NUMERIC(22,0), @p_CODENTRADAARCHIVOCONTROL NUMERIC(22,0), @p_ROWCOUNT_out NUMERIC(22,0) OUT) AS
 BEGIN
    DECLARE @cNUMROWS NUMERIC(22,0);
   
  SET NOCOUNT ON;
    SELECT @cNUMROWS = COUNT(1) FROM WSXML_SFG.ENTRADASERVICIOSCOMERCIALES
    WHERE CODENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;

    UPDATE WSXML_SFG.DETALLETAREAEJECUTADA SET COUNTREGISTROS = @cNUMROWS
    WHERE ID_DETALLETAREAEJECUTADA = @p_CODDETALLETAREAEJECUTADA;

    SET @p_ROWCOUNT_out = @@ROWCOUNT;
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGENTRADASERVICIOSCOMERCIALES_AnullmentUpdateRecordsTask', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGENTRADASERVICIOSCOMERCIALES_AnullmentUpdateRecordsTask;
GO

CREATE     PROCEDURE WSXML_SFG.SFGENTRADASERVICIOSCOMERCIALES_AnullmentUpdateRecordsTask(@p_CODDETALLETAREAEJECUTADA NUMERIC(22,0), @p_CODENTRADAARCHIVOCONTROL NUMERIC(22,0), @p_ROWCOUNT_out NUMERIC(22,0) OUT) AS
 BEGIN
    DECLARE @cNUMROWS NUMERIC(22,0);
   
  SET NOCOUNT ON;
    SELECT @cNUMROWS = COUNT(1) FROM WSXML_SFG.ANULACIONSERVICIOSCOMERCIALES
    WHERE CODENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;

    UPDATE WSXML_SFG.DETALLETAREAEJECUTADA SET COUNTREGISTROS = @cNUMROWS
    WHERE ID_DETALLETAREAEJECUTADA = @p_CODDETALLETAREAEJECUTADA;

    SET @p_ROWCOUNT_out = @@ROWCOUNT;
  END;
GO




  IF OBJECT_ID('WSXML_SFG.SFGENTRADASERVICIOSCOMERCIALES_ReverseFileLoad', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGENTRADASERVICIOSCOMERCIALES_ReverseFileLoad;
GO

CREATE     PROCEDURE WSXML_SFG.SFGENTRADASERVICIOSCOMERCIALES_ReverseFileLoad(@p_FECHAREPROCESAMIENTO DATETIME, @p_CODDETALLETAREAEJECUTADA NUMERIC(22,0), @p_RETVALUE_out NUMERIC(22,0) OUT) AS
 BEGIN
    DECLARE @msg NVARCHAR(2000);
    DECLARE @filelist WSXML_SFG.NUMBERARRAY;
   
  SET NOCOUNT ON;

  BEGIN TRY
    BEGIN
		insert INTO @filelist
      SELECT ID_ENTRADAARCHIVOCONTROL 
	  FROM wsxml_sfg.ENTRADAARCHIVOCONTROL
      WHERE CONVERT(DATETIME, CONVERT(DATE,FECHAARCHIVO)) = CONVERT(DATETIME, CONVERT(DATE,@p_FECHAREPROCESAMIENTO)) AND TIPOARCHIVO = 1;
      IF @@ROWCOUNT > 0 BEGIN
        DECLARE ifx CURSOR FOR SELECT  IDVALUE FROM @filelist
		OPEN ifx

		DECLARE @ifx__ID_ENTRADAARCHIVOCONTROL numeric(38,0)

		FETCH NEXT FROM ifx INTO @ifx__ID_ENTRADAARCHIVOCONTROL;
		WHILE (@@FETCH_STATUS = 0) BEGIN
          EXEC WSXML_SFG.SFGREGISTROFACTURACION_ReversarCargue4 @ifx__ID_ENTRADAARCHIVOCONTROL, @p_CODDETALLETAREAEJECUTADA, @p_RETVALUE_out OUT
			FETCH NEXT FROM ifx INTO @ifx__ID_ENTRADAARCHIVOCONTROL;
        END;

        CLOSE ifx;
        DEALLOCATE ifx;
      END 

	  IF @@ROWCOUNT = 0 
		RAISERROR('-20054 No existe ningun archivo para reversar', 16, 1);
    END
	END TRY
	BEGIN CATCH

	DECLARE @p_TIPOINFORMATIVO TINYINT,
			@p_TIPOERROR TINYINT,
			@p_TIPOADVERTENCIA TINYINT,
			@p_TIPOCUALQUIERA TINYINT,
			@p_PROCESONOTIFICACION TINYINT,
			@p_ESTADOABIERTA TINYINT,
			@p_ESTADOCERRADA TINYINT
		EXEC WSXML_SFG.SFGALERTA_CONSTANT
			@p_TIPOINFORMATIVO OUT,
			@p_TIPOERROR OUT,
			@p_TIPOADVERTENCIA OUT,
			@p_TIPOCUALQUIERA OUT,
			@p_PROCESONOTIFICACION OUT,
			@p_ESTADOABIERTA  OUT,
			@p_ESTADOCERRADA OUT

	DECLARE 					@p_REGISTRADA      			TINYINT,
                    @p_INICIADA         		TINYINT,
                    @p_FINALIZADAOK 			TINYINT ,
                    @p_FINALIZADAFALLO  		TINYINT ,
					@p_ABORTADA  				TINYINT ,
					@p_NOINICIADA  				TINYINT ,
					@p_FINALIZADAADVERTENCIA  	TINYINT 
	EXEC WSXML_SFG.SFGESTADOTAREAEJECUTADA_CONSTANT
					@p_REGISTRADA      			OUT,
                    @p_INICIADA         		OUT,
                    @p_FINALIZADAOK 			OUT,
                    @p_FINALIZADAFALLO  		OUT,
					@p_ABORTADA  				OUT,
					@p_NOINICIADA  				OUT,
					@p_FINALIZADAADVERTENCIA  	OUT

    SET @msg = ERROR_MESSAGE ( ) ;
    EXEC WSXML_SFG.SFGALERTA_GenerarAlerta  @p_TIPOERROR, 'DESCARGUESERVICIOSCOMERCIALES', @msg, 1
    EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_FinalizeExecution @p_CODDETALLETAREAEJECUTADA, @msg
    SET @p_RETVALUE_out = @p_FINALIZADAFALLO
	END CATCH
  END;
GO





  IF OBJECT_ID('WSXML_SFG.SFGENTRADASERVICIOSCOMERCIALES_ReprocessOrphans', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGENTRADASERVICIOSCOMERCIALES_ReprocessOrphans;
GO


CREATE     PROCEDURE WSXML_SFG.SFGENTRADASERVICIOSCOMERCIALES_ReprocessOrphans(@p_CODENTRADAARCHIVOCONTROL NUMERIC(22,0), @p_CODDETALLETAREAEJECUTADA NUMERIC(22,0), @p_RETVALUE_out NUMERIC(22,0) OUT) AS
 BEGIN
    SET NOCOUNT ON;

    DECLARE @cCOUNTWARNINGS NUMERIC(22,0) = 0;
    DECLARE @cTOTALREGISTROS NUMERIC(22,0) = 0;
    DECLARE @cCOUNTREGISTROS NUMERIC(22,0) = 0;
    DECLARE @cMODLREGISTROS NUMERIC(22,0) = 0;
    DECLARE @cWAITREGISTROS NUMERIC(22,0) = 5;
    DECLARE @orphanENTRIES WSXML_SFG.LONGNUMBERARRAY;
   
    		DECLARE
			@p_REGISTRADA      			TINYINT,
			@p_INICIADA         		TINYINT,
			@p_FINALIZADAOK 			TINYINT,
			@p_FINALIZADAFALLO  		TINYINT,
			@p_ABORTADA  				TINYINT,
			@p_NOINICIADA  				TINYINT,
			@p_FINALIZADAADVERTENCIA  	TINYINT 

	EXEC WSXML_SFG.SFGESTADOTAREAEJECUTADA_CONSTANT
			@p_REGISTRADA      			 OUT,
			@p_INICIADA         		 OUT,
			@p_FINALIZADAOK 			 OUT,
			@p_FINALIZADAFALLO  		 OUT,
			@p_ABORTADA  				 OUT,
			@p_NOINICIADA  				 OUT,
			@p_FINALIZADAADVERTENCIA  	 OUT


    -- Establecer totalrecords de la tarea
    SELECT @cTOTALREGISTROS = COUNT(1) FROM WSXML_SFG.HUERFANOSERVICIOSCOMERCIALES
    WHERE CODENTRADAARCHIVOCONTROL = CASE WHEN @p_CODENTRADAARCHIVOCONTROL = -1 THEN CODENTRADAARCHIVOCONTROL ELSE @p_CODENTRADAARCHIVOCONTROL END;


    EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_SetTotalRecords @p_CODDETALLETAREAEJECUTADA, @cTOTALREGISTROS
    INSERT INTO @orphanENTRIES 
	SELECT ID_HUERFANOSERVICIOSCOMERCIALS FROM WSXML_SFG.HUERFANOSERVICIOSCOMERCIALES
    WHERE CODENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;
    IF @@ROWCOUNT > 0 BEGIN
      DECLARE orphan CURSOR FOR SELECT IDVALUE FROM @orphanENTRIES--.First..orphanENTRIES.Last LOOP
	  OPEN orphan
	  DECLARE @orphan__IDVALUE NUMERIC(38,0)
	  FETCH NEXT FROM orphan INTO @orphan__IDVALUE;
	  WHILE (@@FETCH_STATUS = 0) BEGIN

          DECLARE @orphID NUMERIC(22,0) = @orphan__IDVALUE;
          DECLARE @orphNUMERO_DE_TRANSACCION NUMERIC(22,0);
          DECLARE @orphESTADO                NVARCHAR(1);
          DECLARE @orphFECHA                 DATETIME;
          DECLARE @orphFECHA_Y_HORA          DATETIME;
          DECLARE @orphCOUNTRANSACCIONES     NUMERIC(22,0);
          DECLARE @orphVALOR                 FLOAT;
          DECLARE @orphCODIGO_PRODUCTO       NVARCHAR(6);
          DECLARE @orphPUNTO_DE_VENTA        NVARCHAR(6);
          DECLARE @orphNOMBRE_DEL_PRODUCTO   NVARCHAR(50);
          DECLARE @orphCOLOCADOR             NVARCHAR(16);
          DECLARE @orphRECEIPT_NUMBER        NVARCHAR(20);
          DECLARE @orphSUSCRIBER_NUMBER      NVARCHAR(200);
          DECLARE @orphCODPUNTODEVENTA       NUMERIC(22,0);
          DECLARE @orphCODPRODUCTO           NUMERIC(22,0);
          DECLARE @orphADVTYPEINQUIRY        NUMERIC(22,0);
          DECLARE @orphADVTYPETRANSCC        NUMERIC(22,0);
          DECLARE @orphADVTYPEJOINTTX        NUMERIC(22,0);

          DECLARE @entryREFERENCES WSXML_SFG.ORPHANREFERENCE;

        BEGIN
          -- Obtener datos
          SELECT @orphNUMERO_DE_TRANSACCION = NUMERO_DE_TRANSACCION, @orphESTADO = ESTADO, @orphFECHA = FECHA, @orphFECHA_Y_HORA = FECHA_Y_HORA, @orphCOUNTRANSACCIONES = COUNTRANSACCIONES, @orphVALOR = VALOR, @orphCODIGO_PRODUCTO = CODIGO_PRODUCTO, @orphPUNTO_DE_VENTA = PUNTO_DE_VENTA,
                 @orphNOMBRE_DEL_PRODUCTO = NOMBRE_DEL_PRODUCTO, @orphCOLOCADOR = COLOCADOR, @orphRECEIPT_NUMBER = RECEIPT_NUMBER, @orphSUSCRIBER_NUMBER = SUSCRIBER_NUMBER, @orphCODPUNTODEVENTA = CODPUNTODEVENTA, @orphCODPRODUCTO = CODPRODUCTO, @orphADVTYPEINQUIRY = ADVTYPEINQUIRY, @orphADVTYPETRANSCC = ADVTYPETRANSCC, @orphADVTYPEJOINTTX = ADVTYPEJOINTTX
                       FROM WSXML_SFG.HUERFANOSERVICIOSCOMERCIALES
           WHERE ID_HUERFANOSERVICIOSCOMERCIALS = @orphID;

          -- Guardar Referencias
          INSERT INTO @entryREFERENCES
		  SELECT NUMEROREFERENCIA, FECHAHORATRANSACCION, VALORTRANSACCION, ESTADO, SUBAGENTE, RECIBO, SUSCRIPTOR, BINTARJETA, TIPOTRANSACCION, FEECROSSREF, FECHATRANSBANCO, RESPUESTABANCO, ARRN, VRCOMISION, IVACOMISION, TRANS_CODE, ARRN_GIRO_DEPOSITO,FECHAHORAALIADO
          FROM WSXML_SFG.HUERFANOSCREFERENCIA
          WHERE CODHUERFANOSERVICIOSCOMERCIALS = @orphID;
          -- Insertar registro de nuevo para emular uso de trigger

		  DECLARE @p_result NUMERIC(22,0)
		  EXEC WSXML_SFG.PUNTODEVENTA_F   @orphPUNTO_DE_VENTA, 0, @p_result OUT

          INSERT INTO WSXML_SFG.ENTRADASERVICIOSCOMERCIALES (
                                                   NUMERO_DE_TRANSACCION,
                                                   ESTADO,
                                                   FECHA,
                                                   FECHA_Y_HORA,
                                                   COUNTRANSACCIONES,
                                                   VALOR,
                                                   CODIGO_PRODUCTO,
                                                   PUNTO_DE_VENTA,
                                                   NOMBRE_DEL_PRODUCTO,
                                                   COLOCADOR,
                                                   RECEIPT_NUMBER,
                                                   SUSCRIBER_NUMBER,
                                                   CODENTRADAARCHIVOCONTROL,
                                                   CODPUNTODEVENTA,
                                                   CODPRODUCTO,
                                                   ADVTYPEINQUIRY,
                                                   ADVTYPETRANSCC,
                                                   ADVTYPEJOINTTX)
          VALUES (
                  @orphNUMERO_DE_TRANSACCION,
                  @orphESTADO,
                  @orphFECHA,
                  @orphFECHA_Y_HORA,
                  @orphCOUNTRANSACCIONES,
                  @orphVALOR,
                  @orphCODIGO_PRODUCTO,
                  @orphPUNTO_DE_VENTA,
                  @orphNOMBRE_DEL_PRODUCTO,
                  @orphCOLOCADOR,
                  @orphRECEIPT_NUMBER,
                  @orphSUSCRIBER_NUMBER,
                  @p_CODENTRADAARCHIVOCONTROL,
                  ISNULL(@orphCODPUNTODEVENTA, @p_result),
                  ISNULL(@orphCODPRODUCTO, WSXML_SFG.PRODUCTO_F(@orphCODIGO_PRODUCTO)),
                  @orphADVTYPEINQUIRY,
                  @orphADVTYPETRANSCC,
                  @orphADVTYPEJOINTTX);
          -- Eliminar huerfano
          DELETE FROM HUERFANOSERVICIOSCOMERCIALES WHERE ID_HUERFANOSERVICIOSCOMERCIALS = @orphID;

          --COMMIT;

          -- Concatenar huerfanos dependiendo de donde quedo la entrada huerfana
          IF (SELECT COUNT(*) FROM @entryREFERENCES) > 0 BEGIN
              DECLARE @itemREGISTRY NUMERIC(22,0);
              DECLARE @isregsORPHAN NUMERIC(22,0);
              DECLARE @transfERRMSG NVARCHAR(2000);
              DECLARE @outputREFVAL NUMERIC(22,0);
            BEGIN
				BEGIN TRY
					  EXEC WSXML_SFG.SFGREGFACTURACIONREFERENCIA_FindRegistryForReference @p_CODENTRADAARCHIVOCONTROL,
																		   @orphPUNTO_DE_VENTA,
																		   @orphCODIGO_PRODUCTO,
																		   @orphESTADO,
																		   @isregsORPHAN OUT,
																		   @itemREGISTRY OUT

					  DECLARE ix CURSOR FOR SELECT * FROM @entryREFERENCES--.First..entryREFERENCES.Last LOOP
					  OPEN ix
					  DECLARE @ix__NUMEROREFERENCIA NUMERIC(38,0), @ix__FECHAHORATRANSACCION DATETIME, @ix__VALORTRANSACCION  NVARCHAR(10), @ix__ESTADO  NVARCHAR(1), 
						@ix__SUBAGENTE  NVARCHAR(50), @ix__RECIBO  NVARCHAR(50), @ix__SUSCRIPTOR  NVARCHAR(50), @ix__BINTARJETA  NVARCHAR(10), @ix__TIPOTRANSACCION  NVARCHAR(1), @ix__FEECROSSREF  NVARCHAR(20), @ix__FECHATRANSBANCO  NVARCHAR(10), 
						@ix__RESPUESTABANCO NVARCHAR(10), @ix__ARRN  NVARCHAR(20), @ix__VRCOMISION FLOAT, @ix__IVACOMISION FLOAT, @ix__TRANS_CODE  NVARCHAR(50), @ix__ARRN_GIRO_DEPOSITO  NVARCHAR(20),@ix__FECHAHORAALIADO DATETIME
              
					  FETCH NEXT FROM ix INTO @ix__NUMEROREFERENCIA, @ix__FECHAHORATRANSACCION, @ix__VALORTRANSACCION, @ix__ESTADO, 
						@ix__SUBAGENTE, @ix__RECIBO, @ix__SUSCRIPTOR, @ix__BINTARJETA, @ix__TIPOTRANSACCION, @ix__FEECROSSREF, @ix__FECHATRANSBANCO, 
						@ix__RESPUESTABANCO, @ix__ARRN, @ix__VRCOMISION, @ix__IVACOMISION, @ix__TRANS_CODE, @ix__ARRN_GIRO_DEPOSITO,@ix__FECHAHORAALIADO
			    
						WHILE (@@FETCH_STATUS = 0) BEGIN

							IF @isregsORPHAN = 0 BEGIN

						  EXEC WSXML_SFG.SFGREGFACTURACIONREFERENCIA_AppendReference 
																		@itemREGISTRY,
																	  @ix__NUMEROREFERENCIA,
																	  @ix__FECHAHORATRANSACCION,
																	  @ix__VALORTRANSACCION,
																	  @ix__ESTADO,
																	  @ix__SUBAGENTE,
																	  @ix__RECIBO,
																	  @ix__SUSCRIPTOR,
																	  @ix__BINTARJETA,
																	  @ix__TIPOTRANSACCION,
																	  @ix__FEECROSSREF,
																	  @ix__FECHATRANSBANCO,
																	  @ix__RESPUESTABANCO,
																	  @ix__ARRN,
																	  @ix__VRCOMISION,
																	  @ix__IVACOMISION,
																	  @ix__TRANS_CODE,
																	  @ix__ARRN_GIRO_DEPOSITO,
																	  @ix__FECHAHORAALIADO,
																	  @outputREFVAL OUT
						END
						ELSE BEGIN
						  EXEC WSXML_SFG.SFGREGFACTURACIONREFERENCIA_AppendOrphanReference  
																			@itemREGISTRY,
																			@ix__NUMEROREFERENCIA,
																			@ix__FECHAHORATRANSACCION,
																			@ix__VALORTRANSACCION,
																			@ix__ESTADO,
																			@ix__SUBAGENTE,
																			@ix__RECIBO,
																			@ix__SUSCRIPTOR,
																			@ix__BINTARJETA,
																			@ix__TIPOTRANSACCION,
																			@ix__FEECROSSREF,
																			@ix__FECHATRANSBANCO,
																			@ix__RESPUESTABANCO,
																			@ix__ARRN,
																			@ix__VRCOMISION,
																			@ix__IVACOMISION,
																			@ix__TRANS_CODE,
																			@ix__ARRN_GIRO_DEPOSITO,
																			@ix__FECHAHORAALIADO,                                                                    
																			@outputREFVAL OUT
						END
				 
						  FETCH NEXT FROM ix INTO @ix__NUMEROREFERENCIA, @ix__FECHAHORATRANSACCION, @ix__VALORTRANSACCION, @ix__ESTADO, 
							@ix__SUBAGENTE, @ix__RECIBO, @ix__SUSCRIPTOR, @ix__BINTARJETA, @ix__TIPOTRANSACCION, @ix__FEECROSSREF, @ix__FECHATRANSBANCO, 
							@ix__RESPUESTABANCO, @ix__ARRN, @ix__VRCOMISION, @ix__IVACOMISION, @ix__TRANS_CODE, @ix__ARRN_GIRO_DEPOSITO,@ix__FECHAHORAALIADO

						END;

					  CLOSE ix;
					  DEALLOCATE ix;

				END TRY
				BEGIN CATCH
					SET @transfERRMSG = '-20055 Error de integridad. Las referencias de entradas no pudieron ser transladadas durante el reproceso: ' + ISNULL(ERROR_MESSAGE ( ) , '');
					RAISERROR(@transfERRMSG, 16, 1);
				END CATCH
            END;

          END 
          -- Actualizar la tarea
          SET @cMODLREGISTROS = @cMODLREGISTROS + 1;
          IF @cMODLREGISTROS = @cWAITREGISTROS BEGIN
            SET @cCOUNTREGISTROS = @cCOUNTREGISTROS + @cMODLREGISTROS;
            EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_CODDETALLETAREAEJECUTADA, @cCOUNTREGISTROS
            SET @cMODLREGISTROS = 0;
            --COMMIT;
          END 
        END;

      FETCH NEXT FROM orphan INTO @orphan__IDVALUE;
      END;

      CLOSE orphan;
      DEALLOCATE orphan;
    END 
    -- Contar los que siguen huerfanos
    SELECT @cCOUNTWARNINGS = COUNT(1) FROM WSXML_SFG.HUERFANOSERVICIOSCOMERCIALES
    WHERE CODENTRADAARCHIVOCONTROL = CASE WHEN @p_CODENTRADAARCHIVOCONTROL = -1 THEN CODENTRADAARCHIVOCONTROL ELSE @p_CODENTRADAARCHIVOCONTROL END;


    -- Contar el numero de warnings
    IF @cCOUNTWARNINGS > 0 BEGIN
      SET @p_RETVALUE_out = @p_FINALIZADAADVERTENCIA;
    END
    ELSE BEGIN
      SET @p_RETVALUE_out = @p_FINALIZADAOK;
    END 
  END;
GO


  IF OBJECT_ID('WSXML_SFG.SFGENTRADASERVICIOSCOMERCIALES_ReprocessOrphansByDate', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGENTRADASERVICIOSCOMERCIALES_ReprocessOrphansByDate;
GO

CREATE     PROCEDURE WSXML_SFG.SFGENTRADASERVICIOSCOMERCIALES_ReprocessOrphansByDate(@p_FECHAREPROCESAMIENTO DATETIME, @p_CODDETALLETAREAEJECUTADA NUMERIC(22,0), @p_RETVALUE_out NUMERIC(22,0) OUT) AS
 BEGIN
    DECLARE @p_CODENTRADAARCHIVOCONTROL NUMERIC(22,0);
    DECLARE @v_CANTIDADHUERFANASCOMERCIALES NUMERIC(22,0);
    DECLARE @v_CANTIDADHUERFANASDIFERIDOS NUMERIC(22,0);
    DECLARE @msg NVARCHAR(2000);
   
  SET NOCOUNT ON;

  	DECLARE @p_TIPOINFORMATIVO TINYINT,
		@p_TIPOERROR TINYINT,
		@p_TIPOADVERTENCIA TINYINT,
		@p_TIPOCUALQUIERA TINYINT,
		@p_PROCESONOTIFICACION TINYINT,
		@p_ESTADOABIERTA TINYINT,
		@p_ESTADOCERRADA TINYINT
	EXEC WSXML_SFG.SFGALERTA_CONSTANT
		@p_TIPOINFORMATIVO OUT,
		@p_TIPOERROR OUT,
		@p_TIPOADVERTENCIA OUT,
		@p_TIPOCUALQUIERA OUT,
		@p_PROCESONOTIFICACION OUT,
		@p_ESTADOABIERTA  OUT,
		@p_ESTADOCERRADA OUT

		DECLARE @p_SERVICIOSCOMERCIALES TINYINT,@p_JUEGOS TINYINT
		 EXEC WSXML_SFG.SFGENTRADAARCHIVOCONTROL_CONSTANT @p_SERVICIOSCOMERCIALES OUT, @p_JUEGOS OUT

BEGIN TRY
    SELECT @p_CODENTRADAARCHIVOCONTROL = ID_ENTRADAARCHIVOCONTROL
    FROM WSXML_SFG.ENTRADAARCHIVOCONTROL
    WHERE TIPOARCHIVO = @p_SERVICIOSCOMERCIALES
      AND REVERSADO = 0
      AND CONVERT(DATETIME, CONVERT(DATE,FECHAARCHIVO)) = CONVERT(DATETIME, CONVERT(DATE,@p_FECHAREPROCESAMIENTO));


    IF @p_CODENTRADAARCHIVOCONTROL > 0 BEGIN

    --Evalua si debe ingresar a la tabla HUERFANOSERVICIOSCOMERCIALES a reprocesar registros
    SELECT @V_CANTIDADHUERFANASCOMERCIALES = COUNT(*)
      FROM WSXML_SFG.HUERFANOSERVICIOSCOMERCIALES HSC
     WHERE HSC.CODENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;

    IF @v_CANTIDADHUERFANASCOMERCIALES > 0 BEGIN

      EXEC WSXML_SFG.SFGENTRADASERVICIOSCOMERCIALES_ReprocessOrphans @p_CODENTRADAARCHIVOCONTROL, @p_CODDETALLETAREAEJECUTADA, @p_RETVALUE_out OUT
    END 

    --Evalua si debe ingresar a la tabla CODENTRADAARCHIVOCONTROL a reprocesar registros
    SELECT @V_CANTIDADHUERFANASDIFERIDOS = COUNT(*)
      FROM WSXML_SFG.HUERFANOSDIFERIDOS HDF
     WHERE HDF.CODENTRADAARCHIVOCONTROL = @p_CODENTRADAARCHIVOCONTROL;

    IF @v_CANTIDADHUERFANASDIFERIDOS > 0 BEGIN

      EXEC WSXML_SFG.SFGMAESTROFACTURACIONDIFERIDOS_ReprocessOrphansDefered @p_CODENTRADAARCHIVOCONTROL,
                                                             @p_CODDETALLETAREAEJECUTADA,
                                                             @p_RETVALUE_out OUT
    END 

    END 

	  IF @@ROWCOUNT = 0 BEGIN
		  SET @msg = 'No se puede reprocesar el archivo. Su registro ya no existe';
		  EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @p_TIPOERROR, 'REPROCESOSERVICIOSCOMERCIALES', @msg, 1
		  EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_FinalizeExecution @p_CODDETALLETAREAEJECUTADA, @msg
	  END
		IF @@ROWCOUNT > 1 BEGIN
		  SET @msg = 'Hay un problema grave de consistencia de datos en el sistema. Hay mas de un archivo de servicios comerciales cargado para el dia ' + ISNULL(@p_FECHAREPROCESAMIENTO, '');
		  EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @p_TIPOERROR, 'REPROCESOSERVICIOSCOMERCIALES', @msg, 1
		  EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_FinalizeExecution @p_CODDETALLETAREAEJECUTADA, @msg
		END
END TRY
BEGIN CATCH
   
      SET @msg = ERROR_MESSAGE ( ) ;
      EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @p_TIPOERROR, 'REPROCESOSERVICIOSCOMERCIALES', @msg, 1
      EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_FinalizeExecution @p_CODDETALLETAREAEJECUTADA, @msg
END CATCH
  END;
GO