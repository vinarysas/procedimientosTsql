USE SFGPRODU;
--  DDL for Package Body SFGDETALLEPAGO
--------------------------------------------------------

  /* PACKAGE BODY WSXML_SFG.SFGDETALLEPAGO */ 

IF OBJECT_ID('WSXML_SFG.SFGDETALLEPAGO_AddRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGDETALLEPAGO_AddRecord;
GO

CREATE     PROCEDURE WSXML_SFG.SFGDETALLEPAGO_AddRecord(@p_CODCTRLPAGO            NUMERIC(22,0),
                      @p_NUMEROREGISTRO         NUMERIC(22,0),
                      @p_FECHAPAGO              DATETIME,
                      @p_VALORPAGO              FLOAT,
                      @p_FIDUCIA                NUMERIC(22,0),
                      @p_CODUSUARIOMODIFICACION NUMERIC(22,0),
                      @p_ID_DETALLEPAGO_out     NUMERIC(22,0) OUT) AS
  BEGIN
  SET NOCOUNT ON;
    INSERT INTO WSXML_SFG.DETALLEPAGO (
                             CODCTRLPAGO,
                             NUMEROREGISTRO,
                             FECHAPAGO,
                             VALORPAGO,
                             FIDUCIA,
                             CODUSUARIOMODIFICACION)
    VALUES (
            @p_CODCTRLPAGO,
            @p_NUMEROREGISTRO,
            @p_FECHAPAGO,
            @p_VALORPAGO,
            @p_FIDUCIA,
            @p_CODUSUARIOMODIFICACION);
			
    SET @p_ID_DETALLEPAGO_out = SCOPE_IDENTITY();
 END;
GO



IF OBJECT_ID('WSXML_SFG.SFGDETALLEPAGO_SwitchControl', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGDETALLEPAGO_SwitchControl;
GO

  CREATE PROCEDURE WSXML_SFG.SFGDETALLEPAGO_SwitchControl(@pk_ID_DETALLEPAGO   NUMERIC(22,0),
                          @p_CODCTRLPAGOORIGIN NUMERIC(22,0),
                          @p_CODCTRLPAGODESTIN NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
    IF @p_CODCTRLPAGOORIGIN <> @p_CODCTRLPAGODESTIN BEGIN
        DECLARE @thisVALORPAGO FLOAT = 0;
      BEGIN
        SELECT @thisVALORPAGO = VALORPAGO FROM WSXML_SFG.DETALLEPAGO WHERE ID_DETALLEPAGO = @pk_ID_DETALLEPAGO;
		
        UPDATE WSXML_SFG.DETALLEPAGO SET CODCTRLPAGO = @p_CODCTRLPAGODESTIN WHERE ID_DETALLEPAGO = @pk_ID_DETALLEPAGO;
		
        UPDATE WSXML_SFG.CTRLPAGO SET TOTALTRANSACCION = TOTALTRANSACCION - @thisVALORPAGO WHERE ID_CTRLPAGO = @p_CODCTRLPAGOORIGIN;
		
        UPDATE WSXML_SFG.CTRLPAGO SET TOTALTRANSACCION = TOTALTRANSACCION + @thisVALORPAGO WHERE ID_CTRLPAGO = @p_CODCTRLPAGODESTIN;
      END;

    END 
  END;
GO


IF OBJECT_ID('WSXML_SFG.SFGDETALLEPAGO_UpdateRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGDETALLEPAGO_UpdateRecord;
GO

  CREATE PROCEDURE WSXML_SFG.SFGDETALLEPAGO_UpdateRecord(@pk_ID_DETALLEPAGO        NUMERIC(22,0),
                         @p_CODCTRLPAGO            NUMERIC(22,0),
                         @p_NUMEROREGISTRO         NUMERIC(22,0),
                         @p_FECHAPAGO              DATETIME,
                         @p_VALORPAGO              FLOAT,
                         @p_CODUSUARIOMODIFICACION NUMERIC(22,0),
                         @p_ACTIVE                 NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
    UPDATE WSXML_SFG.DETALLEPAGO
       SET CODCTRLPAGO            = @p_CODCTRLPAGO,
           NUMEROREGISTRO         = @p_NUMEROREGISTRO,
           FECHAPAGO              = @p_FECHAPAGO,
           VALORPAGO              = @p_VALORPAGO,
           CODUSUARIOMODIFICACION = @p_CODUSUARIOMODIFICACION,
           FECHAHORAMODIFICACION  = GETDATE(),
           ACTIVE                 = @p_ACTIVE
    WHERE ID_DETALLEPAGO = @pk_ID_DETALLEPAGO;
  END;
GO



IF OBJECT_ID('WSXML_SFG.SFGDETALLEPAGO_VincularPuntoDeVenta', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGDETALLEPAGO_VincularPuntoDeVenta;
GO

  CREATE PROCEDURE WSXML_SFG.SFGDETALLEPAGO_VincularPuntoDeVenta(@pk_ID_DETALLEPAGO NUMERIC(22,0), @p_CODPUNTODEVENTA NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;

    UPDATE WSXML_SFG.DETALLEPAGO
       SET CODPUNTODEVENTA = @p_CODPUNTODEVENTA
    WHERE ID_DETALLEPAGO = @pk_ID_DETALLEPAGO;

  END;
GO

IF OBJECT_ID('WSXML_SFG.SFGDETALLEPAGO_VincularPagoPorAsociar', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGDETALLEPAGO_VincularPagoPorAsociar;
GO

  CREATE PROCEDURE WSXML_SFG.SFGDETALLEPAGO_VincularPagoPorAsociar(@pk_ID_DETALLEPAGO NUMERIC(22,0), @p_CODPAGOPORASOCIAR NUMERIC(22,0)) AS
 BEGIN
    DECLARE @l_codPuntoDeVenta NUMERIC(22,0);
   
  SET NOCOUNT ON;

    SELECT @l_codPuntoDeVenta = CODPUNTODEVENTA FROM WSXML_SFG.PAGOPORASOCIAR
     WHERE ID_PAGOPORASOCIAR = @p_CODPAGOPORASOCIAR;

    UPDATE WSXML_SFG.PAGOPORASOCIAR SET ACTIVE = 0
     WHERE ID_PAGOPORASOCIAR = @p_CODPAGOPORASOCIAR;

    UPDATE WSXML_SFG.DETALLEPAGO
       SET CODPUNTODEVENTA = @l_codPuntoDeVenta
     WHERE ID_DETALLEPAGO = @pk_ID_DETALLEPAGO;

    IF @@rowcount = 0 BEGIN
      RAISERROR('-20054 The record no longer exists.', 16, 1);
    END 

    IF @@rowcount > 1 BEGIN
      RAISERROR('-20053 Duplicate object instances.', 16, 1);
    END 

  END;
GO


IF OBJECT_ID('WSXML_SFG.SFGDETALLEPAGO_GetRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGDETALLEPAGO_GetRecord;
GO

  CREATE PROCEDURE WSXML_SFG.SFGDETALLEPAGO_GetRecord(@pk_ID_DETALLEPAGO NUMERIC(22,0)) AS
 BEGIN
    DECLARE @l_count INTEGER;
   
  SET NOCOUNT ON;

      SELECT @l_count = count(*)
      FROM WSXML_SFG.DETALLEPAGO
      WHERE ID_DETALLEPAGO = @pk_ID_DETALLEPAGO;

    IF @l_count = 0 BEGIN
      RAISERROR('-20054 The record no longer exists.', 16, 1);
    END 
    IF @l_count > 1 BEGIN
      RAISERROR('-20053 Duplicate object instances.', 16, 1);
    END 

    -- Get the row from the query.  Checksum value will be returned along the row data to support concurrency.
      SELECT ID_DETALLEPAGO,
             NUMEROREGISTRO,
             FECHAPAGO,
             VALORPAGO,
             CODCTRLPAGO,
             CODPUNTODEVENTA,
             CODUSUARIOMODIFICACION,
             FECHAHORAMODIFICACION,
             ACTIVE
      FROM WSXML_SFG.DETALLEPAGO
      WHERE ID_DETALLEPAGO = @pk_ID_DETALLEPAGO;

  END;
GO


IF OBJECT_ID('WSXML_SFG.SFGDETALLEPAGO_GetList', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGDETALLEPAGO_GetList;
GO

  CREATE PROCEDURE WSXML_SFG.SFGDETALLEPAGO_GetList(@p_ACTIVE NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;

    -- Get the row from the query.  Checksum value will be returned along the row data to support concurrency.
      SELECT ID_DETALLEPAGO,
             NUMEROREGISTRO,
             FECHAPAGO,
             VALORPAGO,
             CODCTRLPAGO,
             CODPUNTODEVENTA,
             CODUSUARIOMODIFICACION,
             FECHAHORAMODIFICACION,
             ACTIVE
      FROM WSXML_SFG.DETALLEPAGO
      WHERE ACTIVE = CASE WHEN @p_ACTIVE = -1 THEN ACTIVE ELSE @p_ACTIVE END;
  END;
GO 


IF OBJECT_ID('WSXML_SFG.SFGDETALLEPAGO_GetUnboundList', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGDETALLEPAGO_GetUnboundList;
GO

  CREATE PROCEDURE WSXML_SFG.SFGDETALLEPAGO_GetUnboundList(@p_active NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;

      SELECT D.ID_DETALLEPAGO,
             D.NUMEROREGISTRO,
             D.FECHAPAGO,
             D.VALORPAGO,
             D.CODCTRLPAGO,
             C.CODORIGENPAGO,
             O.CODTIPOPAGO,
             D.CODPUNTODEVENTA,
             D.FECHAHORAMODIFICACION,
             D.CODUSUARIOMODIFICACION,
             D.ACTIVE,
             R.NUMEROREFERENCIA
      FROM WSXML_SFG.DETALLEPAGO D
      LEFT OUTER JOIN WSXML_SFG.CTRLPAGO C
        ON (C.ID_CTRLPAGO = D.CODCTRLPAGO)
      LEFT OUTER JOIN WSXML_SFG.ORIGENPAGO O
        ON (O.ID_ORIGENPAGO = C.CODORIGENPAGO)
      LEFT OUTER JOIN WSXML_SFG.PAGOFACTURACIONPDV P
        ON (P.CODDETALLEPAGO = D.ID_DETALLEPAGO)
      LEFT OUTER JOIN WSXML_SFG.MEDIOPAGOREF R
        ON (R.CODDETALLEPAGO = D.ID_DETALLEPAGO)
      WHERE P.ID_PAGOFACTURACIONPDV IS NULL
        AND D.ACTIVE = CASE WHEN @p_active = -1 THEN D.ACTIVE ELSE @p_active END;
  END;
GO


IF OBJECT_ID('WSXML_SFG.SFGDETALLEPAGO_GetUnreferencedList', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGDETALLEPAGO_GetUnreferencedList;
GO

  CREATE PROCEDURE WSXML_SFG.SFGDETALLEPAGO_GetUnreferencedList(@p_ACTIVE NUMERIC(22,0), @p_CODTIPOPAGO NUMERIC(22,0), @p_FECHAPAGO DATETIME, @p_VALORPAGO FLOAT) AS
 BEGIN
	SET NOCOUNT ON;

    DECLARE @dFECHAPAGOINI DATETIME;
    DECLARE @dFECHAPAGOFIN DATETIME;
    DECLARE @dVALORPAGOINI FLOAT;
    DECLARE @dVALORPAGOFIN FLOAT;
    DECLARE @tolerancia FLOAT;
   
  

    -- Desde las 00:00 hasta las 23:59
    SELECT @dFECHAPAGOINI = CONVERT(DATETIME, CONVERT(DATE,@p_FECHAPAGO));
    SELECT @dFECHAPAGOFIN = (CONVERT(DATETIME, CONVERT(DATE,@p_FECHAPAGO)) + 1) - (1/86400);

    -- Tolerancia parametrizada
    BEGIN
		BEGIN TRY
			EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'ToleranciaValorPagoAsociacion', @tolerancia OUT
		END TRY
		BEGIN CATCH
		      SELECT @tolerancia = 100;
		END CATCH
    END;


    SELECT @dVALORPAGOINI = @p_VALORPAGO - @tolerancia;
    SELECT @dVALORPAGOFIN = @p_VALORPAGO + @tolerancia;

      SELECT D.ID_DETALLEPAGO,
             D.NUMEROREGISTRO,
             D.FECHAPAGO,
             D.VALORPAGO,
             D.CODCTRLPAGO,
             C.CODORIGENPAGO,
             O.DESCRIPCION NOMORIGENPAGO,
             O.CODTIPOPAGO,
             D.CODPUNTODEVENTA,
             D.FECHAHORAMODIFICACION,
             D.CODUSUARIOMODIFICACION,
             D.ACTIVE,
             R.NUMEROREFERENCIA
      FROM WSXML_SFG.DETALLEPAGO D
      LEFT OUTER JOIN WSXML_SFG.CTRLPAGO C
        ON (C.ID_CTRLPAGO = D.CODCTRLPAGO)
      LEFT OUTER JOIN WSXML_SFG.ORIGENPAGO O
        ON (O.ID_ORIGENPAGO = C.CODORIGENPAGO)
      LEFT OUTER JOIN WSXML_SFG.PAGOFACTURACIONPDV P
        ON (P.CODDETALLEPAGO = D.ID_DETALLEPAGO)
      LEFT OUTER JOIN WSXML_SFG.MEDIOPAGOREF R
        ON (R.CODDETALLEPAGO = D.ID_DETALLEPAGO)
      WHERE P.ID_PAGOFACTURACIONPDV IS NULL
        AND D.CODPUNTODEVENTA IS NULL
        AND O.CODTIPOPAGO = @p_CODTIPOPAGO
        AND D.FECHAPAGO BETWEEN @dFECHAPAGOINI AND @dFECHAPAGOFIN
        AND D.VALORPAGO BETWEEN @dVALORPAGOINI AND @dVALORPAGOFIN
        AND D.ACTIVE = CASE WHEN @p_ACTIVE = -1 THEN D.ACTIVE ELSE @p_ACTIVE END;

  END;
GO


IF OBJECT_ID('WSXML_SFG.SFGDETALLEPAGO_ReverseRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGDETALLEPAGO_ReverseRecord;
GO

CREATE PROCEDURE WSXML_SFG.SFGDETALLEPAGO_ReverseRecord(
	@pk_ID_DETALLEPAGO NUMERIC(22,0), 
	@p_CODUSUARIOMODIFICACION NUMERIC(22,0), 
	@p_VALUEREVERSED_out FLOAT OUT
) AS
 BEGIN
    DECLARE @lstVINCULOS CURSOR;
    DECLARE @paymentFIDUCIA     NUMERIC(22,0);
    DECLARE @paymentCODCTRLPAGO NUMERIC(22,0);
    DECLARE @paymentREVERSEDVAL FLOAT = 0;
	DECLARE @ID_PAGOFACTURACIONPDV INT;
   
	SET NOCOUNT ON;
    SET @paymentREVERSEDVAL = 0;
    -- El objetivo es que solo se use para referenciados y vinculados (ya aplicados)
    SELECT @paymentCODCTRLPAGO = CODCTRLPAGO, @paymentFIDUCIA = FIDUCIA 
	FROM WSXML_SFG.DETALLEPAGO
    WHERE ID_DETALLEPAGO = @pk_ID_DETALLEPAGO;

    SET  @lstVINCULOS = CURSOR FORWARD_ONLY STATIC FOR
	SELECT ID_PAGOFACTURACIONPDV 
	FROM WSXML_SFG.PAGOFACTURACIONPDV
    WHERE CODDETALLEPAGO = @pk_ID_DETALLEPAGO;
	OPEN @lstVINCULOS;
	
	IF @@CURSOR_ROWS > 0 BEGIN
	    DECLARE @thisVALORAPLICADO         FLOAT;
        DECLARE @thisCODMAESTROFACTURACION NUMERIC(22,0);
        DECLARE @thisSALDOGTECH            FLOAT = 0;
        DECLARE @thisSALDOFIDUCIA          FLOAT = 0;
		
		FETCH NEXT FROM @lstVINCULOS INTO @ID_PAGOFACTURACIONPDV
        
        WHILE (@@FETCH_STATUS = 0)
        BEGIN
			SELECT @thisVALORAPLICADO = VALORAPLICADO, @thisCODMAESTROFACTURACION = CODMAESTROFACTURACIONPDV
			FROM WSXML_SFG.PAGOFACTURACIONPDV PFP
			WHERE ID_PAGOFACTURACIONPDV = @ID_PAGOFACTURACIONPDV;
			
			
			IF @thisVALORAPLICADO <> 0 BEGIN
				SELECT @thisSALDOGTECH = (SALDOAFAVORGTECH - SALDOCONTRAGTECH), @thisSALDOFIDUCIA = (SALDOAFAVORFIDUCIA - SALDOCONTRAFIDUCIA)
				FROM WSXML_SFG.DETALLESALDOPDV
				WHERE CODMAESTROFACTURACIONPDV = @thisCODMAESTROFACTURACION;
				-- Si pertenece a una facturaci?n anterior, esto no afectar  los saldos.
				IF @paymentFIDUCIA = 0 BEGIN
				  SET @thisSALDOGTECH = @thisSALDOGTECH - @thisVALORAPLICADO;
				  UPDATE WSXML_SFG.DETALLESALDOPDV 
					SET SALDOAFAVORGTECH = CASE WHEN @thisSALDOGTECH >= 0 THEN @thisSALDOGTECH ELSE 0 END,
						SALDOCONTRAGTECH = CASE WHEN @thisSALDOGTECH < 0 THEN ABS(@thisSALDOGTECH) ELSE 0 END,
						CODUSUARIOMODIFICACION = @p_CODUSUARIOMODIFICACION
				  WHERE CODMAESTROFACTURACIONPDV = @thisCODMAESTROFACTURACION;
				END
				ELSE BEGIN
				  SET @thisSALDOFIDUCIA = @thisSALDOFIDUCIA - @thisVALORAPLICADO;
				  UPDATE WSXML_SFG.DETALLESALDOPDV 
					SET SALDOAFAVORFIDUCIA = CASE WHEN @thisSALDOFIDUCIA >= 0 THEN @thisSALDOFIDUCIA ELSE 0 END,
					SALDOCONTRAFIDUCIA = CASE WHEN @thisSALDOFIDUCIA < 0 THEN ABS(@thisSALDOFIDUCIA) ELSE 0 END,
					CODUSUARIOMODIFICACION = @p_CODUSUARIOMODIFICACION
				  WHERE CODMAESTROFACTURACIONPDV = @thisCODMAESTROFACTURACION;
				END 
				SET @paymentREVERSEDVAL = @paymentREVERSEDVAL + @thisVALORAPLICADO;
			END 
			
			FETCH NEXT FROM @lstVINCULOS INTO @ID_PAGOFACTURACIONPDV
		END
        
		CLOSE @lstVINCULOS
		DEALLOCATE @lstVINCULOS 	
	END
	
	UPDATE WSXML_SFG.CTRLPAGO 
		SET REVERSAPARCIAL = REVERSAPARCIAL + @paymentREVERSEDVAL,
		CODUSUARIOMODIFICACION = @p_CODUSUARIOMODIFICACION
	WHERE ID_CTRLPAGO = @paymentCODCTRLPAGO;
	SET @p_VALUEREVERSED_out = @paymentREVERSEDVAL;
	-- Marcar el pago como eliminado
	DELETE FROM WSXML_SFG.PAGOFACTURACIONPDV WHERE CODDETALLEPAGO = @pk_ID_DETALLEPAGO;
	DELETE FROM WSXML_SFG.DETALLEPAGO WHERE ID_DETALLEPAGO = @pk_ID_DETALLEPAGO;
END;
GO




IF OBJECT_ID('WSXML_SFG.SFGDETALLEPAGO_AddAdjustment', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGDETALLEPAGO_AddAdjustment;
GO

CREATE     PROCEDURE WSXML_SFG.SFGDETALLEPAGO_AddAdjustment(@p_CODPUNTODEVENTA        NUMERIC(22,0),
                          @p_CODLINEADENEGOCIO      NUMERIC(22,0),
                          @p_FIDUCIA                NUMERIC(22,0),
                          @p_VALORAJUSTE            FLOAT,
                          @p_CODORIGENPAGO          NUMERIC(22,0),
                          @p_COMENTARIO             NVARCHAR(2000),
                          @p_FECHAHORAMODIFICACION  DATETIME,
                          @p_CODUSUARIOMODIFICACION NUMERIC(22,0),
                          @p_ID_DETALLEPAGO_out     NUMERIC(22,0) OUT) AS
 BEGIN
    DECLARE @codCTRLPAGO NUMERIC(22,0);
    DECLARE @codDETALLEPAGO NUMERIC(22,0);
   
  SET NOCOUNT ON;

  DECLARE @REFERENCIADO    TINYINT, @NOREFRNCIADO  TINYINT,@MVMNTMAJUSTE TINYINT 
  EXEC WSXML_SFG.SFGTIPOPAGO_CONSTANT @REFERENCIADO    OUT, @NOREFRNCIADO    OUT,@MVMNTMAJUSTE OUT
   -- Create Ctrl
    INSERT INTO WSXML_SFG.CTRLPAGO (
                          CODTIPOPAGO,
                          CODORIGENPAGO,
                          TOTALREGISTROS,
                          TOTALTRANSACCION,
                          FECHACARGUE,
                          CODUSUARIOMODIFICACION)
    VALUES (
           @MVMNTMAJUSTE,
            @p_CODORIGENPAGO,
            1, @p_VALORAJUSTE,
            @p_FECHAHORAMODIFICACION,
            @p_CODUSUARIOMODIFICACION);
    SET @codCTRLPAGO = SCOPE_IDENTITY();
    -- Create DetallePago
    INSERT INTO WSXML_SFG.DETALLEPAGO (
                             CODCTRLPAGO,
                             FECHAPAGO,
                             VALORPAGO,
                             CODPUNTODEVENTA,
                             FIDUCIA,
                             VINCULADO,
                             CODUSUARIOMODIFICACION)
    VALUES (
            @codCTRLPAGO,
            @p_FECHAHORAMODIFICACION,
            @p_VALORAJUSTE,
            @p_CODPUNTODEVENTA,
            @p_FIDUCIA, 1,
            @p_CODUSUARIOMODIFICACION);
    SET @codDETALLEPAGO = SCOPE_IDENTITY();
    -- Create MedioPagoAjuste
    INSERT INTO WSXML_SFG.MEDIOPAGOAJUSTE (
                                 CODDETALLEPAGO,
                                 COMENTARIOAJUSTE,
                                 CODLINEADENEGOCIO,
                                 CODUSUARIOMODIFICACION)
    VALUES (
            @codDETALLEPAGO,
            @p_COMENTARIO,
            @p_CODLINEADENEGOCIO,
            @p_CODUSUARIOMODIFICACION);
    -- Vincular y acualizar saldos
      DECLARE @thisMAESTROFACTURACIONPDV NUMERIC(22,0);
      DECLARE @codPAGOFACTURACION       NUMERIC(22,0);
      DECLARE @crntCODDETALLESALDOPDV   NUMERIC(22,0);
      DECLARE @crntSALDOAFAVORGTECH     FLOAT;
      DECLARE @crntSALDOAFAVORFIDUCIA   FLOAT;
      DECLARE @crntSALDOENCONTRAGTECH   FLOAT;
      DECLARE @crntSALDOENCONTRAFIDUCIA FLOAT;
      DECLARE @currentSALDOGTECH        FLOAT;
      DECLARE @currentSALDOFIDUCIA      FLOAT;
    BEGIN
      EXEC WSXML_SFG.SFGFACTURACIONPDV_GetCodFacturacionActualPDV  @p_CODPUNTODEVENTA, @p_CODLINEADENEGOCIO, @thisMAESTROFACTURACIONPDV OUT
      IF @thisMAESTROFACTURACIONPDV = 0 BEGIN
          DECLARE @crntFACTURACIONPDV NUMERIC(22,0);
        BEGIN
          SELECT @thisMAESTROFACTURACIONPDV = MAESTROFACTURACIONPDV.ID_MAESTROFACTURACIONPDV
                   FROM WSXML_SFG.MAESTROFACTURACIONPDV
          WHERE CODPUNTODEVENTA = @p_CODPUNTODEVENTA AND CODLINEADENEGOCIO =@p_CODLINEADENEGOCIO
          AND CODCICLOFACTURACIONPDV = WSXML_SFG.ultimo_ciclofacturacion(GETDATE());

           EXEC WSXML_SFG.SFGFACTURACIONPDV_AddRecord @p_CODPUNTODEVENTA,@p_CODLINEADENEGOCIO,@thisMAESTROFACTURACIONPDV,@p_CODUSUARIOMODIFICACION,@crntFACTURACIONPDV OUT

        END;

      END 

      IF @thisMAESTROFACTURACIONPDV > 0 BEGIN
        EXEC WSXML_SFG.SFGPAGOFACTURACIONPDV_AddRecord @codDETALLEPAGO, @thisMAESTROFACTURACIONPDV, @p_VALORAJUSTE, @p_CODUSUARIOMODIFICACION, @codPAGOFACTURACION OUT
        -- Obtener saldo actual. Positivo = Saldo a Favor
        EXEC WSXML_SFG.SFGDETALLESALDOPDV_GetValuesSaldoActualPDV @p_CODPUNTODEVENTA, @p_CODLINEADENEGOCIO, @crntCODDETALLESALDOPDV OUT, @crntSALDOAFAVORGTECH  OUT, @crntSALDOAFAVORFIDUCIA  OUT, @crntSALDOENCONTRAGTECH  OUT, @crntSALDOENCONTRAFIDUCIA  OUT
        SET @currentSALDOGTECH   = (@crntSALDOAFAVORGTECH - @crntSALDOENCONTRAGTECH);
        SET @currentSALDOFIDUCIA = (@crntSALDOAFAVORFIDUCIA - @crntSALDOENCONTRAFIDUCIA);
        IF @p_FIDUCIA = 0 BEGIN
          IF (@currentSALDOGTECH + @p_VALORAJUSTE) >= 0 BEGIN
            UPDATE WSXML_SFG.DETALLESALDOPDV SET SALDOAFAVORGTECH = ABS(@currentSALDOGTECH + @p_VALORAJUSTE),
                                       SALDOCONTRAGTECH = 0
            WHERE CODMAESTROFACTURACIONPDV = @thisMAESTROFACTURACIONPDV;
            UPDATE WSXML_SFG.MAESTROFACTURACIONPDV SET PAGOPARCIALGTECH = 0,
                                             PAGOCOMPLETOGTECH = 1,
                                             PAGOCOMPLETO = PAGOCOMPLETOFIDUCIA
            WHERE ID_MAESTROFACTURACIONPDV = @thisMAESTROFACTURACIONPDV;
          END
          ELSE BEGIN -- (currentSALDOGTECH + p_VALORAJUSTE) < 0
            UPDATE WSXML_SFG.DETALLESALDOPDV SET SALDOAFAVORGTECH = 0,
                                       SALDOCONTRAGTECH = ABS(@currentSALDOGTECH + @p_VALORAJUSTE)
            WHERE CODMAESTROFACTURACIONPDV = @thisMAESTROFACTURACIONPDV;
            UPDATE WSXML_SFG.MAESTROFACTURACIONPDV SET PAGOPARCIALGTECH = 1,
                                             PAGOCOMPLETOGTECH = 0,
                                             PAGOCOMPLETO = 0 WHERE ID_MAESTROFACTURACIONPDV = @thisMAESTROFACTURACIONPDV;
          END 
        END
        ELSE BEGIN
          IF (@currentSALDOFIDUCIA + @p_VALORAJUSTE) >= 0 BEGIN
            -- Saldos nuevos
            UPDATE WSXML_SFG.DETALLESALDOPDV SET SALDOAFAVORFIDUCIA = ABS(@currentSALDOFIDUCIA + @p_VALORAJUSTE), SALDOCONTRAFIDUCIA = 0
            WHERE CODMAESTROFACTURACIONPDV = @thisMAESTROFACTURACIONPDV;
            -- Parcialidad de pagos
            UPDATE WSXML_SFG.MAESTROFACTURACIONPDV SET PAGOPARCIALFIDUCIA = 0, PAGOCOMPLETOFIDUCIA = 1, PAGOCOMPLETO = PAGOCOMPLETOGTECH
            WHERE ID_MAESTROFACTURACIONPDV = @thisMAESTROFACTURACIONPDV;
          END
          ELSE BEGIN -- (currentSALDOFIDUCIA + p_VALORAJUSTE) < 0
            -- Saldos nuevos
            UPDATE WSXML_SFG.DETALLESALDOPDV SET SALDOAFAVORFIDUCIA = 0, SALDOCONTRAFIDUCIA = ABS(@currentSALDOFIDUCIA + @p_VALORAJUSTE)
            WHERE CODMAESTROFACTURACIONPDV = @thisMAESTROFACTURACIONPDV;
            -- Parcialidad de pagos
            UPDATE WSXML_SFG.MAESTROFACTURACIONPDV SET PAGOPARCIALFIDUCIA = 1, PAGOCOMPLETOFIDUCIA = 0, PAGOCOMPLETO = 0
            WHERE ID_MAESTROFACTURACIONPDV = @thisMAESTROFACTURACIONPDV;
          END 
        END 
        SET @p_ID_DETALLEPAGO_out = @codDETALLEPAGO;
      END
      ELSE BEGIN
        RAISERROR('-20054 No existe facturación para el punto de venta. No se puede crear registro de ajuste', 16, 1);
      END 

	  IF @@ROWCOUNT = 0 
		RAISERROR('-20054 No existe facturación para el punto de venta. No se puede crear registro de ajuste', 16, 1);
    END;
  END;
GO



IF OBJECT_ID('WSXML_SFG.SFGDETALLEPAGO_VincularPagos', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGDETALLEPAGO_VincularPagos;
GO


  CREATE PROCEDURE WSXML_SFG.SFGDETALLEPAGO_VincularPagos(@p_DETALLETAREAEJECUTADA NUMERIC(22,0), @p_RETVALUE_out NUMERIC(22,0) OUT) AS
 BEGIN
    DECLARE @xCODORIGENFIDUCIA        NUMERIC(22,0) = 15;
    DECLARE @xCODTIPOPAGOREFERENCIADO NUMERIC(22,0) = 1;
    DECLARE @xCODTIPOPAGONOREFRNCIADO NUMERIC(22,0) = 2;

    DECLARE @lstPAYMENTS LONGNUMBERARRAY;
    DECLARE @countUNLINKEDPAYMENTS NUMERIC(22,0) = 0;

    DECLARE @totalrecords NUMERIC(22,0) = 0;
    DECLARE @countrecords NUMERIC(22,0) = 0;
    DECLARE @waitnrecords NUMERIC(22,0) = 50;
    DECLARE @cCODUSUARIOMODIFICACION NUMERIC(22,0) = 1;
    DECLARE @msg NVARCHAR(2000);
   
  SET NOCOUNT ON;
    -- 1. Par metros de la busqueda
    BEGIN
		BEGIN TRY
		  EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'CodOrigenFiducia', @xCODORIGENFIDUCIA OUT
		  EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'CodTipoPagoReferenciado', @xCODTIPOPAGOREFERENCIADO OUT
		  EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'CodTipoPagoNoRefrnciado', @xCODTIPOPAGONOREFRNCIADO OUT
		END TRY
		BEGIN CATCH

		
			SELECT NULL; -- Do Nothing
		END CATCH
    END;
END
GO


IF OBJECT_ID('WSXML_SFG.SFGDETALLEPAGO_SuggestGlobalDistribution', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGDETALLEPAGO_SuggestGlobalDistribution;
GO


CREATE PROCEDURE WSXML_SFG.SFGDETALLEPAGO_SuggestGlobalDistribution(@p_CODPUNTODEVENTA        NUMERIC(22,0),
                                      @p_CODTIPOVINCULACIONPAGO NUMERIC(22,0),
                                      @p_VALORPAGO              FLOAT) AS
 BEGIN
    DECLARE @availableBALANCE WSXML_SFG.SETTLEFACTURACION;
    DECLARE @suggestedBALANCE WSXML_SFG.BALANCEPAYMENT;
   
  SET NOCOUNT ON;
 END
GO


IF OBJECT_ID('WSXML_SFG.SFGDETALLEPAGO_LinkSettleControlledBilling', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGDETALLEPAGO_LinkSettleControlledBilling;
GO


 CREATE PROCEDURE WSXML_SFG.SFGDETALLEPAGO_LinkSettleControlledBilling(@p_CODMAESTROFACTURACIONPDV NUMERIC(22,0),
                                        @p_FIDUCIA                  NUMERIC(22,0),
                                        @p_CODDETALLEPAGO           NUMERIC(22,0),
                                        @p_VALORPAGO                FLOAT,
                                        @p_CODUSUARIOMODIFICACION   NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
    IF @p_VALORPAGO > 0 BEGIN
        DECLARE @thisSALDOGTECH   FLOAT;
        DECLARE @thisSALDOFIDUCIA FLOAT;
        DECLARE @coutPAGOFACTURAC NUMERIC(22,0);
      BEGIN
        -- Obtener informacion y actualizar saldos
        SELECT @thisSALDOGTECH = (SALDOAFAVORGTECH - SALDOCONTRAGTECH), @thisSALDOFIDUCIA = (SALDOAFAVORFIDUCIA - SALDOCONTRAFIDUCIA)
        FROM WSXML_SFG.DETALLESALDOPDV
        WHERE CODMAESTROFACTURACIONPDV = @p_CODMAESTROFACTURACIONPDV;

        IF @p_FIDUCIA = 0 BEGIN -- Caso GTECH
          SET @thisSALDOGTECH = @thisSALDOGTECH + @p_VALORPAGO;
          UPDATE WSXML_SFG.DETALLESALDOPDV SET SALDOCONTRAGTECH = CASE WHEN @thisSALDOGTECH < 0 THEN ABS(@thisSALDOGTECH) ELSE 0 END,
                                     SALDOAFAVORGTECH = CASE WHEN @thisSALDOGTECH >= 0 THEN ABS(@thisSALDOGTECH) ELSE 0 END
          WHERE CODMAESTROFACTURACIONPDV = @p_CODMAESTROFACTURACIONPDV;
          -- Vinculo
          IF @p_CODDETALLEPAGO > 0 BEGIN
            EXEC WSXML_SFG.SFGPAGOFACTURACIONPDV_AddRecord @p_CODDETALLEPAGO,
                                            @p_CODMAESTROFACTURACIONPDV,
                                            @p_VALORPAGO,
                                            @p_CODUSUARIOMODIFICACION,
                                            @coutPAGOFACTURAC OUT
          END 
        END
        ELSE BEGIN  -- Caso FIDUCIA
          /*thisSALDOFIDUCIA := thisSALDOFIDUCIA + p_VALORPAGO;
          UPDATE DETALLESALDOPDV SET SALDOCONTRAFIDUCIA = CASE WHEN thisSALDOFIDUCIA < 0 THEN ABS(thisSALDOFIDUCIA) ELSE 0 END,
                                     SALDOAFAVORFIDUCIA = CASE WHEN thisSALDOFIDUCIA >= 0 THEN ABS(thisSALDOFIDUCIA) ELSE 0 END
          WHERE CODMAESTROFACTURACIONPDV = p_CODMAESTROFACTURACIONPDV;*/
          -- Vinculo
          IF @p_CODDETALLEPAGO > 0 BEGIN
              DECLARE @cCODREPORTEFIDUCIA NUMERIC(22,0);
            BEGIN
              EXEC WSXML_SFG.SFGREPORTEMOVIMIENTOLINEAS_AddRecord @p_CODDETALLEPAGO,
                                                   @p_CODUSUARIOMODIFICACION,
                                                   @cCODREPORTEFIDUCIA OUT
              EXEC WSXML_SFG.SFGPAGOFACTURACIONPDV_AddRecord @p_CODDETALLEPAGO,
                                              @p_CODMAESTROFACTURACIONPDV,
                                              @p_VALORPAGO,
                                              @p_CODUSUARIOMODIFICACION,
                                              @coutPAGOFACTURAC OUT
            END;

          END 
        END 
      END;

    END 
  END;
GO



  -- De acuerdo a un identificador de referencia y un pago, salda facturacion
  IF OBJECT_ID('WSXML_SFG.SFGDETALLEPAGO_LinkSettleBilling', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGDETALLEPAGO_LinkSettleBilling;
GO


 CREATE PROCEDURE WSXML_SFG.SFGDETALLEPAGO_LinkSettleBilling(@p_CODCICLOFACTURACIONPDV   NUMERIC(22,0),
                              @p_CODMAESTROFACTCOMPCONSIG NUMERIC(22,0),
                              @p_CODLINEADENEGOCIO        NUMERIC(22,0),
                              @p_FIDUCIA                  NUMERIC(22,0),
                              @p_CODDETALLEPAGO           NUMERIC(22,0),
                              @p_VALORPAGO                FLOAT,
                              @p_CODUSUARIOMODIFICACION   NUMERIC(22,0),
                              @p_VALORRESTANTE_out        FLOAT OUT) AS
 BEGIN
    DECLARE @newCODCICLOFACTURACIONPDV NUMERIC(22,0) = @p_CODCICLOFACTURACIONPDV;
    DECLARE @lstMAESTROFACTPDV         WSXML_SFG.LONGNUMBERARRAY;
    
   
  SET NOCOUNT ON;
    -- En caso de no tener informacion del ciclo
    IF @p_CODCICLOFACTURACIONPDV IS NULL BEGIN
      SELECT @newCODCICLOFACTURACIONPDV = CODCICLOFACTURACIONPDV FROM WSXML_SFG.MAESTROFACTURACIONCOMPCONSIG WHERE ID_MAESTROFACTCOMPCONSIG = @p_CODMAESTROFACTCOMPCONSIG;
    END 

	INSERT INTO @lstMAESTROFACTPDV 
    SELECT ID_MAESTROFACTURACIONPDV 
	FROM WSXML_SFG.MAESTROFACTURACIONPDV
    WHERE CODCICLOFACTURACIONPDV         = @newCODCICLOFACTURACIONPDV
      AND CODMAESTROFACTURACIONCOMPCONSI = @p_CODMAESTROFACTCOMPCONSIG
      AND CODLINEADENEGOCIO              = @p_CODLINEADENEGOCIO;

END
GO



IF EXISTS (
    SELECT * FROM sys.objects WHERE OBJECT_NAME(object_id) = N'SFGDETALLEPAGO_CheckCombinationBillingValue'
    AND type IN (N'FN', N'IF', N'TF')
)
    DROP FUNCTION WSXML_SFG.SFGDETALLEPAGO_CheckCombinationBillingValue
GO



 
  CREATE FUNCTION WSXML_SFG.SFGDETALLEPAGO_CheckCombinationBillingValue(@p_VALUETOMATCH       FLOAT,
                                        @p_THISBILLING        WSXML_SFG.SETTLEFACTURACION  READONLY,
                                        @p_CONSIDEREDBILLINGS WSXML_SFG.SETTLEFACTURACION  READONLY,
                                        @p_POSSIBLEBILLINGS   WSXML_SFG.SETTLEFACTURACION READONLY) 
										
RETURNS @resultBILLINGS TABLE ([CODLINEADENEGOCIO] NUMERIC(38,0), [FIDUCIA] NUMERIC(38,0), [SALDOACTUAL] FLOAT) AS
 BEGIN
   
    DECLARE @sumCONSIDERED FLOAT = 0;
   
		RETURN 

  END;
GO



IF OBJECT_ID('WSXML_SFG.SFGDETALLEPAGO_AplicarPago', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGDETALLEPAGO_AplicarPago;
GO

CREATE PROCEDURE WSXML_SFG.SFGDETALLEPAGO_AplicarPago(@p_CODDETALLEPAGO NUMERIC(22,0), @p_CODUSUARIOMODIFICACION NUMERIC(22,0)) AS
 BEGIN
  DECLARE @cCodMaestroFacturacion   NUMERIC(22,0);
  -- Declarar variables
   
  SET NOCOUNT ON;

          select
          dp.id_detallepago
          , nrs.codlineadenegocio
          , nrs.fiducia
          , dp.codpuntodeventa
          , mpnr.valoraplicado AS ValorPago
          , nrs.codcriteriodistribucion
          , mpnr.codtipovinculacionpago
          from
          WSXML_SFG.ctrlpago cp
          inner join WSXML_SFG.detallepago dp on cp.id_ctrlpago = dp.codctrlpago
          left join WSXML_SFG.mediopagonoref mpnr on dp.id_detallepago = mpnr.coddetallepago
          left join WSXML_SFG.noreferenciadosugerencia nrs on nrs.codmediopagonoref = mpnr.id_mediopagonoref
          where --sugerido = 1
          --and
          dp.id_detallepago = @p_CODDETALLEPAGO;
END

GO


IF OBJECT_ID('WSXML_SFG.SFGDETALLEPAGO_AddReferencedRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGDETALLEPAGO_AddReferencedRecord;
GO


  CREATE PROCEDURE WSXML_SFG.SFGDETALLEPAGO_AddReferencedRecord(@p_CODCTRLPAGO            NUMERIC(22,0),
                                @p_CODCTRLPAGONOREFERENC  NUMERIC(22,0),
                                @p_CODLINEADENEGOCIO      NUMERIC(22,0),
                                @p_FIDUCIA                NUMERIC(22,0),
                                @p_NUMEROREGISTRO         NUMERIC(22,0),
                                @p_FECHAPAGO              DATETIME,
                                @p_VALORPAGO              FLOAT,
                                @p_NUMEROREFERENCIA       NVARCHAR(2000),
                                @p_CODUSUARIOMODIFICACION NUMERIC(22,0),
                                @p_ID_DETALLEPAGO_out     NUMERIC(22,0) OUT) AS
 BEGIN
    DECLARE @codDETALLEPAGO NUMERIC(22,0);
    DECLARE @codREFERENCIAN NUMERIC(22,0);
    --DECLARE @UNMATCHEDSERVICE   EXCEPTION;
    --DECLARE @UNMATCHEDREFERENCE EXCEPTION;
    --DECLARE @MULTIPLEREFERENCE  EXCEPTION;
    DECLARE @lstLINEASDENEGOCIOTENTATIVO WSXML_SFG.SETTLEFACTURACION;
    DECLARE @errormessage                NVARCHAR(2000);

	DECLARE @ix__CODLINEADENEGOCIO NUMERIC(38,0), @ix__FIDUCIA NUMERIC(38,0), @ix__SALDOACTUAL FLOAT



   
  SET NOCOUNT ON;
    --SET @lstLINEASDENEGOCIOTENTATIVO = SETTLEFACTURACIONLIST();
    -- Inserci?n de registro
    INSERT INTO WSXML_SFG.DETALLEPAGO (
                             CODCTRLPAGO,
                             NUMEROREGISTRO,
                             FECHAPAGO,
                             VALORPAGO,
                             FIDUCIA,
                             CODUSUARIOMODIFICACION)
    VALUES (
            @p_CODCTRLPAGO,
            @p_NUMEROREGISTRO,
            @p_FECHAPAGO,
            @p_VALORPAGO,
            @p_FIDUCIA,
            @p_CODUSUARIOMODIFICACION);
    SET @codDETALLEPAGO = SCOPE_IDENTITY();

		DECLARE @p_TIPOINFORMATIVO TINYINT,
		@p_TIPOERROR TINYINT,
		@p_TIPOADVERTENCIA TINYINT,
		@p_TIPOCUALQUIERA TINYINT,
		@p_PROCESONOTIFICACION TINYINT,
		@p_ESTADOABIERTA TINYINT,
		@p_ESTADOCERRADA TINYINT	
			  
	EXEC WSXML_SFG.SFGALERTA_CONSTANT
		@p_TIPOINFORMATIVO OUT,
		@p_TIPOERROR OUT,
		@p_TIPOADVERTENCIA OUT,
		@p_TIPOCUALQUIERA OUT,
		@p_PROCESONOTIFICACION OUT,
		@p_ESTADOABIERTA OUT,
		@p_ESTADOCERRADA OUT	

	DECLARE 
	  @p_HUERFANOREFERENCIA TINYINT,
	  @p_PAGOGLOBAL         TINYINT,
	  @p_REPORTADOASISTENCI TINYINT,
	  @p_PARTIDENTIFIMANUAL TINYINT,
	  @p_PARTSINREFAUTOMATC TINYINT,
	  @p_HUERFANOVALORNOCOR TINYINT

	EXEC WSXML_SFG.SFGTIPONOREFERENCIADO_CONSTANT
	  @p_HUERFANOREFERENCIA OUTPUT,
	  @p_PAGOGLOBAL         OUTPUT,
	  @p_REPORTADOASISTENCI OUTPUT,
	  @p_PARTIDENTIFIMANUAL OUTPUT,
	  @p_PARTSINREFAUTOMATC OUTPUT,
	  @p_HUERFANOVALORNOCOR OUTPUT

    -- Validar datos de vinculo y saldos. Distribucion se realiza aqui
      DECLARE @debugmsg NVARCHAR(2000);
	  DECLARE @coutPAGOFACTURAC NUMERIC(22,0);
    BEGIN
        DECLARE @cCODCICLOFACTURACIONPDV    NUMERIC(22,0);
        DECLARE @cCODCOMPROBANTEFACTURACION NUMERIC(22,0);
        DECLARE @cCODTIPOPUNTODEVENTA       NUMERIC(22,0); -- Determina si la tirila fue generada agrupada o abierta
        DECLARE @cCODAGRUPACIONPUNTODEVENTA NUMERIC(22,0); -- Si es agrupado, obtiene directamente la cadena
        DECLARE @cCODPUNTODEVENTA           NUMERIC(22,0); -- Si es independiente, obtener el punto de venta. Si es agrupado, la cabeza
        --coutVALORPAGORESTANTE      FLOAT := 0; -- Valor Restante de la consolidacion
        --notLINKEDYET               NUMBER := 0;
      BEGIN
        -- Determinar identificador de referencia, agrupamiento de tirilla y valor
        BEGIN
			  -- No se buscar  la referencia de acuerdo a la generada, sino busqueda de terminal
			  EXEC WSXML_SFG.SFGMAESTROFACTURACIONCOMPCONSI_DecodeReferenceNumber @p_NUMEROREFERENCIA, @cCODPUNTODEVENTA, @cCODAGRUPACIONPUNTODEVENTA, @cCODTIPOPUNTODEVENTA OUT
			  SET @cCODCICLOFACTURACIONPDV = WSXML_SFG.ULTIMO_CICLOFACTURACION(GETDATE());
			  IF @cCODPUNTODEVENTA IS NULL BEGIN
				RAISERROR('-20054 No existe facturacion o la cadena no tiene cabeza', 16, 1);
			  END 
			  -- Busqueda de la facturacion a modificar
			  SELECT @cCODCICLOFACTURACIONPDV = MFP.CODCICLOFACTURACIONPDV, @cCODCOMPROBANTEFACTURACION = MFP.CODMAESTROFACTURACIONCOMPCONSI
			  FROM WSXML_SFG.FACTURACIONPDV FPV
			  INNER JOIN WSXML_SFG.MAESTROFACTURACIONPDV MFP ON (MFP.ID_MAESTROFACTURACIONPDV = FPV.CODMAESTROFACTURACIONPDV)
			  WHERE FPV.CODPUNTODEVENTA = @cCODPUNTODEVENTA
				AND FPV.CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO
			  GROUP BY MFP.CODCICLOFACTURACIONPDV, MFP.CODMAESTROFACTURACIONCOMPCONSI;
			  -- END Busqueda de la facturacion a modificar

			  IF @@ROWCOUNT = 0
			  -- Verificar sin linea de negocio para encontrar a quien pertenece
				BEGIN
            IF @cCODTIPOPUNTODEVENTA > 0 BEGIN
              SET @cCODCICLOFACTURACIONPDV = WSXML_SFG.ULTIMO_CICLOFACTURACION(GETDATE());
            END 
            -- Si se encuentra la referencia, buscar si coinciden los valores (saldos). Cualquier combinacion incluyendo fiducia
            IF @cCODCICLOFACTURACIONPDV > 0 BEGIN
              -- Todas las lineas de negocio posibles
					DECLARE @tmpPOSSIBLESRVGTECH WSXML_SFG.SETTLEFACTURACION;
					DECLARE @tmpPOSSIBLESRVFDCIA WSXML_SFG.SETTLEFACTURACION;
					DECLARE @tmpSERVICELOOKUP WSXML_SFG.SETTLEFACTURACION;
					DECLARE @emptyCONSIDERED  WSXML_SFG.SETTLEFACTURACION;
					DECLARE @p_THISBILLING        WSXML_SFG.SETTLEFACTURACION

				  BEGIN
					-- Posibles facturaciones GTECH
					INSERT INTO @tmpPOSSIBLESRVGTECH
					SELECT MFP.CODLINEADENEGOCIO, 0, SALDOCONTRAGTECH
					FROM WSXML_SFG.FACTURACIONPDV FPV
					INNER JOIN WSXML_SFG.MAESTROFACTURACIONPDV MFP ON (MFP.ID_MAESTROFACTURACIONPDV = FPV.CODMAESTROFACTURACIONPDV)
					INNER JOIN WSXML_SFG.MAESTROFACTURACIONCOMPCONSIG MFC ON (MFC.ID_MAESTROFACTCOMPCONSIG = MFP.CODMAESTROFACTURACIONCOMPCONSI)
					INNER JOIN WSXML_SFG.LINEADENEGOCIO LDN ON (MFP.CODLINEADENEGOCIO = LDN.ID_LINEADENEGOCIO)
					INNER JOIN WSXML_SFG.DETALLESALDOPDV DSP ON (DSP.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV)
					WHERE CAST(MFC.REFERENCIAGTECH AS NUMERIC(38,0)) = CAST(@p_NUMEROREFERENCIA  AS NUMERIC(38,0))
					  AND LDN.PRIORIDADPAGO >= 0
					  AND SALDOCONTRAGTECH > 0; -- No verifica valores a favor ni ceros
					-- Posibles facturaciones Fiducia
					INSERT INTO @tmpPOSSIBLESRVFDCIA
					SELECT MFP.CODLINEADENEGOCIO AS CODLINEADENEGOCIO, 1 AS FIDUCIA, (SALDOCONTRAFIDUCIA - SALDOAFAVORFIDUCIA) AS SALDOACTUAL
					FROM WSXML_SFG.FACTURACIONPDV FPV
					INNER JOIN WSXML_SFG.MAESTROFACTURACIONPDV MFP ON (MFP.ID_MAESTROFACTURACIONPDV = FPV.CODMAESTROFACTURACIONPDV)
					INNER JOIN WSXML_SFG.MAESTROFACTURACIONCOMPCONSIG MFC ON (MFC.ID_MAESTROFACTCOMPCONSIG = MFP.CODMAESTROFACTURACIONCOMPCONSI)
					INNER JOIN WSXML_SFG.LINEADENEGOCIO LDN ON (MFP.CODLINEADENEGOCIO = LDN.ID_LINEADENEGOCIO)
					INNER JOIN WSXML_SFG.DETALLESALDOPDV DSP ON (DSP.CODMAESTROFACTURACIONPDV = MFP.ID_MAESTROFACTURACIONPDV)
					WHERE CAST(MFC.REFERENCIAGTECH AS NUMERIC(38,0)) = CAST(@p_NUMEROREFERENCIA AS NUMERIC(38,0))
					  AND LDN.PRIORIDADPAGOFIDUCIA >= 0
					  AND SALDOCONTRAFIDUCIA > 0;
					-- Concatenar para verificacion
					IF (SELECT COUNT(*) FROM @tmpPOSSIBLESRVFDCIA) > 0 BEGIN
					  DECLARE ix CURSOR FOR SELECT CODLINEADENEGOCIO, FIDUCIA, SALDOACTUAL FROM  @tmpPOSSIBLESRVFDCIA--.First..tmpPOSSIBLESRVFDCIA.Last LOOP
					  OPEN ix
					  --DECLARE @ix__CODLINEADENEGOCIO NUMERIC(38,0), @ix__FIDUCIA NUMERIC(38,0), @ix__SALDOACTUAL FLOAT

					  FETCH NEXT FROM ix INTO @ix__CODLINEADENEGOCIO, @ix__FIDUCIA, @ix__SALDOACTUAL
					  WHILE @@FETCH_STATUS=0 BEGIN 
						--tmpPOSSIBLESRVGTECH(tmpPOSSIBLESRVGTECH.Count) := tmpPOSSIBLESRVFDCIA(ix);
						INSERT INTO @tmpPOSSIBLESRVGTECH VALUES (@ix__CODLINEADENEGOCIO,@ix__FIDUCIA,@ix__SALDOACTUAL)

						FETCH NEXT FROM ix INTO @ix__CODLINEADENEGOCIO, @ix__FIDUCIA, @ix__SALDOACTUAL
					  END;
					  CLOSE ix;
					  DEALLOCATE ix;
					END 
					BEGIN
						BEGIN TRY
						  --SET @tmpSERVICELOOKUP = SFGDETALLEPAGO_CheckCombinationBillingValue(@p_VALORPAGO, NULL, @emptyCONSIDERED, @tmpPOSSIBLESRVGTECH);
						  --IF @tmpSERVICELOOKUP IS NOT NULL BEGIN
						  --  SET @lstLINEASDENEGOCIOTENTATIVO = @tmpSERVICELOOKUP;
						  --END 
						  
							INSERT INTO @lstLINEASDENEGOCIOTENTATIVO
							SELECT CODLINEADENEGOCIO, FIDUCIA, SALDOACTUAL
							FROM SFGDETALLEPAGO_CheckCombinationBillingValue(@p_VALORPAGO, @p_THISBILLING, @emptyCONSIDERED, @tmpPOSSIBLESRVGTECH) T
							-- Revisar SFGDETALLEPAGO_CheckCombinationBillingValue
						END TRY
						BEGIN CATCH
							EXEC WSXML_SFG.SFGTMPTRACE_TraceLog_1 'OCURRIO UN ERROR DURANTE LA BUSQUEDA DE LINEAS DE NEGOCIO POSIBLES', 'ADIVINAPAGOS'
							--RAISE @UNMATCHEDSERVICE;
						END CATCH
					END;

					IF @@ROWCOUNT =0 BEGIN
					EXEC WSXML_SFG.SFGTMPTRACE_TraceLog 'No idea what happened. Found reference then not?'
					--RAISE @UNMATCHEDREFERENCE;
					 -- Registro de pago no referenciado y actualizacion de estado
					  INSERT INTO WSXML_SFG.MEDIOPAGONOREF (
												  CODDETALLEPAGO,
												  CODTIPONOREFERENCIADO,
												  NUMEROREFERENCIA,
												  CODUSUARIOMODIFICACION)
					  VALUES (
							  @codDETALLEPAGO,
							  @p_HUERFANOREFERENCIA,
							  @p_NUMEROREFERENCIA,
							  @p_CODUSUARIOMODIFICACION);
					  SET @codREFERENCIAN = SCOPE_IDENTITY();
					  EXEC WSXML_SFG.SFGDETALLEPAGO_SwitchControl @codDETALLEPAGO, @p_CODCTRLPAGO, @p_CODCTRLPAGONOREFERENC

					END
				  END;


				  --RAISE @UNMATCHEDSERVICE;

				  BEGIN


									  -- Si se encontro vinculo, ya esta bajo CODLINEADENEGOCIOTENTATIVO
						  INSERT INTO WSXML_SFG.MEDIOPAGONOREF (
													  CODDETALLEPAGO,
													  CODTIPONOREFERENCIADO,
													  NUMEROREFERENCIA,
													  CODUSUARIOMODIFICACION)
						  VALUES (
								  @codDETALLEPAGO,
								  @p_HUERFANOVALORNOCOR,
								  @p_NUMEROREFERENCIA,
								  @p_CODUSUARIOMODIFICACION);

						  SET @codREFERENCIAN = SCOPE_IDENTITY();

						  EXEC WSXML_SFG.SFGDETALLEPAGO_SwitchControl @codDETALLEPAGO, @p_CODCTRLPAGO, @p_CODCTRLPAGONOREFERENC

						  IF (SELECT COUNT(*) FROM @lstLINEASDENEGOCIOTENTATIVO) > 0 BEGIN
							DECLARE ix3 CURSOR FOR SELECT CODLINEADENEGOCIO, FIDUCIA, SALDOACTUAL FROM @lstLINEASDENEGOCIOTENTATIVO--.First..lstLINEASDENEGOCIOTENTATIVO.Last LOOP
							OPEN ix3
							--DECLARE @ix__CODLINEADENEGOCIO NUMERIC(38,0), @ix__FIDUCIA  NUMERIC(38,0), @ix__SALDOACTUAL FLOAT

							FETCH NEXT FROM ix3 INTO @ix__CODLINEADENEGOCIO, @ix__FIDUCIA, @ix__SALDOACTUAL 
							WHILE (@@FETCH_STATUS = 0) BEGIN
								  INSERT INTO WSXML_SFG.NOREFERENCIADOSUGERENCIA (
																		CODLINEADENEGOCIO,
																		FIDUCIA,
																		CODMEDIOPAGONOREF,
																		CODUSUARIOMODIFICACION)
								  VALUES (
										  @ix__CODLINEADENEGOCIO,
										  @ix__FIDUCIA,
										  @codREFERENCIAN,
										  @p_CODUSUARIOMODIFICACION);
								FETCH NEXT FROM ix3 INTO @ix__CODLINEADENEGOCIO, @ix__FIDUCIA, @ix__SALDOACTUAL 
							END;

							CLOSE ix3;
							DEALLOCATE ix3;
						  END 

						  SET @errormessage = 'El valor del pago por ' + ISNULL(@p_VALORPAGO, '') + ' de referencia ' + ISNULL(@p_NUMEROREFERENCIA, '') + ' cargado en el archivo ' + ISNULL(WSXML_SFG.ARCHIVONOMBRE_CTRLPAGO_F(@p_CODCTRLPAGO), '') + ' no corresponde con la facturacion. ';
						  IF (SELECT COUNT(*) FROM @lstLINEASDENEGOCIOTENTATIVO) > 0 BEGIN
							SET @errormessage = isnull(@errormessage, '') + 'Sin embargo, el valor coincide con la facturacion de ';
							DECLARE ix2 CURSOR FOR SELECT CODLINEADENEGOCIO, FIDUCIA, SALDOACTUAL FROM @lstLINEASDENEGOCIOTENTATIVO--.First..lstLINEASDENEGOCIOTENTATIVO.Last LOOP

							DECLARE ix2 CURSOR FOR SELECT CODLINEADENEGOCIO, FIDUCIA, SALDOACTUAL FROM @lstLINEASDENEGOCIOTENTATIVO--.First..lstLINEASDENEGOCIOTENTATIVO.Last LOOP
							OPEN ix2
							DECLARE @ix2__CODLINEADENEGOCIO NUMERIC(38,0), @ix2__FIDUCIA  NUMERIC(38,0), @ix2__SALDOACTUAL FLOAT

							FETCH NEXT FROM ix2 INTO @ix2__CODLINEADENEGOCIO, @ix2__FIDUCIA, @ix2__SALDOACTUAL 
							WHILE (@@FETCH_STATUS = 0) BEGIN

							  SET @errormessage = isnull(@errormessage, '') + WSXML_SFG.LINEADENEGOCIO_NOMBRE_F(@ix2__CODLINEADENEGOCIO) + ' ' + (CASE WHEN @ix2__FIDUCIA = 1 THEN '(Fiducia)' ELSE '(GTECH)' END)
							  FETCH NEXT FROM ix2 INTO @ix2__CODLINEADENEGOCIO, @ix2__FIDUCIA, @ix2__SALDOACTUAL 
							END

							CLOSE ix2;
							DEALLOCATE ix2;
        
							SET @errormessage = isnull(@errormessage, '') + '. Se espera aprobación.';
						  END
						  EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @p_TIPOINFORMATIVO, 'VINCULAPAGOS', @errormessage, @p_CODUSUARIOMODIFICACION

				  END

              
            END

            ELSE BEGIN
              --RAISE @UNMATCHEDREFERENCE;


				-- Registro de pago no referenciado y actualizacion de estado
				  INSERT INTO WSXML_SFG.MEDIOPAGONOREF (
											  CODDETALLEPAGO,
											  CODTIPONOREFERENCIADO,
											  NUMEROREFERENCIA,
											  CODUSUARIOMODIFICACION)
				  VALUES (
						  @codDETALLEPAGO,
						  @p_HUERFANOREFERENCIA,
						  @p_NUMEROREFERENCIA,
						  @p_CODUSUARIOMODIFICACION);
				  SET @codREFERENCIAN = SCOPE_IDENTITY();
				  EXEC WSXML_SFG.SFGDETALLEPAGO_SwitchControl @codDETALLEPAGO, @p_CODCTRLPAGO, @p_CODCTRLPAGONOREFERENC




            END 
          	IF @@ROWCOUNT = 0 BEGIN


				--RAISE @UNMATCHEDREFERENCE; -- No se encontro la referencia

				-- Registro de pago no referenciado y actualizacion de estado
				  INSERT INTO WSXML_SFG.MEDIOPAGONOREF (
											  CODDETALLEPAGO,
											  CODTIPONOREFERENCIADO,
											  NUMEROREFERENCIA,
											  CODUSUARIOMODIFICACION)
				  VALUES (
						  @codDETALLEPAGO,
						  @p_HUERFANOREFERENCIA,
						  @p_NUMEROREFERENCIA,
						  @p_CODUSUARIOMODIFICACION);
				  SET @codREFERENCIAN = SCOPE_IDENTITY();
				  EXEC WSXML_SFG.SFGDETALLEPAGO_SwitchControl @codDETALLEPAGO, @p_CODCTRLPAGO, @p_CODCTRLPAGONOREFERENC


			END
			IF @@ROWCOUNT > 1 
			BEGIN
				--RAISE @MULTIPLEREFERENCE;  -- Multiples referencias

				INSERT INTO WSXML_SFG.MEDIOPAGONOREF (
                                  CODDETALLEPAGO,
                                  CODTIPONOREFERENCIADO,
                                  NUMEROREFERENCIA,
                                  CODUSUARIOMODIFICACION)
				  VALUES (
						  @codDETALLEPAGO,
						  @p_HUERFANOVALORNOCOR,
						  @p_NUMEROREFERENCIA,
						  @p_CODUSUARIOMODIFICACION);
				  SET @codREFERENCIAN = SCOPE_IDENTITY();
				  EXEC WSXML_SFG.SFGDETALLEPAGO_SwitchControl @codDETALLEPAGO, @p_CODCTRLPAGO, @p_CODCTRLPAGONOREFERENC

				  SET @errormessage = 'Se encontraron multiples vinculos para la referencia ' + ISNULL(@p_NUMEROREFERENCIA, '') + ' durante el cargue del archivo ' + ISNULL(WSXML_SFG.ARCHIVONOMBRE_CTRLPAGO_F(@p_CODCTRLPAGO), '') + '. Se convertir  en no referenciado';
				  EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @p_TIPOERROR, 'VINCULAPAGOS', @errormessage, @p_CODUSUARIOMODIFICACION


			END
          END;

				IF @@ROWCOUNT > 1 
			  -- Muchos datos. Puede significar multiples referencias vigentes debido a la facturacion variable
			  --RAISE @MULTIPLEREFERENCE;
				BEGIN

				  INSERT INTO WSXML_SFG.MEDIOPAGONOREF (
											  CODDETALLEPAGO,
											  CODTIPONOREFERENCIADO,
											  NUMEROREFERENCIA,
											  CODUSUARIOMODIFICACION)
				  VALUES (
						  @codDETALLEPAGO,
						  @p_HUERFANOVALORNOCOR,
						  @p_NUMEROREFERENCIA,
						  @p_CODUSUARIOMODIFICACION);
				  SET @codREFERENCIAN = SCOPE_IDENTITY();
				  EXEC WSXML_SFG.SFGDETALLEPAGO_SwitchControl @codDETALLEPAGO, @p_CODCTRLPAGO, @p_CODCTRLPAGONOREFERENC

				  SET @errormessage = 'Se encontraron multiples vinculos para la referencia ' + ISNULL(@p_NUMEROREFERENCIA, '') + ' durante el cargue del archivo ' + ISNULL(WSXML_SFG.ARCHIVONOMBRE_CTRLPAGO_F(@p_CODCTRLPAGO), '') + '. Se convertir  en no referenciado';
				  EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @p_TIPOERROR, 'VINCULAPAGOS', @errormessage, @p_CODUSUARIOMODIFICACION
			  END

        END;


        -- FIX **** Saldar completamente sin verificacion
			DECLARE @thisCODMAESTROFACTURACION NUMERIC(22,0);
			DECLARE @thisSALDOGTECH FLOAT = 0;
			DECLARE @thisSALDOFIDUCIA FLOAT = 0;
			BEGIN
          SELECT @thisCODMAESTROFACTURACION = ID_MAESTROFACTURACIONPDV FROM WSXML_SFG.MAESTROFACTURACIONPDV
          WHERE CODCICLOFACTURACIONPDV = WSXML_SFG.ULTIMO_CICLOFACTURACION(GETDATE())
            AND CODPUNTODEVENTA = @cCODPUNTODEVENTA -- Si es agrupado, DecodeReferenceNumber devuelve la cabeza
            AND CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO;

          SELECT @thisSALDOGTECH = (SALDOAFAVORGTECH - SALDOCONTRAGTECH), @thisSALDOFIDUCIA = (SALDOAFAVORFIDUCIA - SALDOCONTRAFIDUCIA)
          FROM WSXML_SFG.DETALLESALDOPDV
          WHERE CODMAESTROFACTURACIONPDV = @thisCODMAESTROFACTURACION;

          IF @p_FIDUCIA = 0 BEGIN -- Caso GTECH
              DECLARE @newSALDOGTECH FLOAT = 0;
              --DECLARE @coutPAGOFACTURAC NUMERIC(22,0);
            BEGIN
              SET @newSALDOGTECH = @thisSALDOGTECH + @p_VALORPAGO;
              UPDATE WSXML_SFG.DETALLESALDOPDV 
				SET SALDOCONTRAGTECH = CASE WHEN @newSALDOGTECH < 0 THEN ABS(@newSALDOGTECH) ELSE 0 END,
                SALDOAFAVORGTECH = CASE WHEN @newSALDOGTECH >= 0 THEN ABS(@newSALDOGTECH) ELSE 0 END
              WHERE CODMAESTROFACTURACIONPDV = @thisCODMAESTROFACTURACION;

              EXEC WSXML_SFG.SFGPAGOFACTURACIONPDV_AddRecord @codDETALLEPAGO,
                                              @thisCODMAESTROFACTURACION,
                                              @p_VALORPAGO,
                                              @p_CODUSUARIOMODIFICACION,
                                              @coutPAGOFACTURAC OUT
            END;

          END
          ELSE BEGIN  -- Caso FIDUCIA
              DECLARE @newSALDOFIDUCIA FLOAT = 0;
              --DECLARE @coutPAGOFACTURAC NUMERIC(22,0);
				
				BEGIN
              
					  SET @newSALDOFIDUCIA = @thisSALDOFIDUCIA + @p_VALORPAGO;
					  UPDATE WSXML_SFG.DETALLESALDOPDV SET SALDOCONTRAFIDUCIA = CASE WHEN @newSALDOFIDUCIA < 0 THEN ABS(@newSALDOFIDUCIA) ELSE 0 END,
												 SALDOAFAVORFIDUCIA = CASE WHEN @newSALDOFIDUCIA >= 0 THEN ABS(@newSALDOFIDUCIA) ELSE 0 END
											 WHERE CODMAESTROFACTURACIONPDV = @thisCODMAESTROFACTURACION;
					  EXEC WSXML_SFG.SFGPAGOFACTURACIONPDV_AddRecord
														@codDETALLEPAGO,
													  @thisCODMAESTROFACTURACION,
													  @p_VALORPAGO,
													  @p_CODUSUARIOMODIFICACION,
													  @coutPAGOFACTURAC
				END;

          END 
        END;

      

        -- Si queda plago por asignar. Distribuci?n con l?gica
      END;


      -- Registro de pago referenciado, si se encuentra la referencia
      INSERT INTO WSXML_SFG.MEDIOPAGOREF (
                                CODDETALLEPAGO,
                                NUMEROREFERENCIA,
                                CODUSUARIOMODIFICACION)
      VALUES (
              @codDETALLEPAGO,
              @p_NUMEROREFERENCIA,
              @p_CODUSUARIOMODIFICACION);
      SET @codREFERENCIAN = SCOPE_IDENTITY();
	
    END;


    -- Devolver identificador de pago creado
    SET @p_ID_DETALLEPAGO_out = @codDETALLEPAGO;
  END;
GO


IF OBJECT_ID('WSXML_SFG.SFGDETALLEPAGO_AddGlobalPayment', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGDETALLEPAGO_AddGlobalPayment;
GO


  CREATE PROCEDURE WSXML_SFG.SFGDETALLEPAGO_AddGlobalPayment(@p_CODPUNTODEVENTA        NUMERIC(22,0),
                             @p_CODDETALLEPAGO         NUMERIC(22,0),
                             @p_CODTIPOVINCULACIONPAGO NUMERIC(22,0),
                             @p_CODORIGENPAGO          NUMERIC(22,0),
                             @p_DISTRIBUCION           NVARCHAR(2000),
                             @p_VALORPAGO              FLOAT,
                             @p_COMENTARIO             NVARCHAR(2000),
                             @p_FECHAHORAMODIFICACION  DATETIME,
                             @p_CODUSUARIOMODIFICACION NUMERIC(22,0),
                             @p_ID_DETALLEPAGO_out     NUMERIC(22,0) OUT) AS
 BEGIN
	SET NOCOUNT ON;

    DECLARE @serialFACTURACION  WSXML_SFG.SETTLEFACTURACION; -- Saldos actuales
    DECLARE @serialPAGOS        WSXML_SFG.BALANCEPAYMENT;    -- Distribucion del pago
    DECLARE @serialCRITERIOS    WSXML_SFG.IDVALUENUMERIC--WSXML_SFG.NUMBERARRAY;
    DECLARE @serializedSERVICES SPLIT_TBL;
    DECLARE @cCODCTRLPAGO       NUMERIC(22,0);
    DECLARE @cCODDETALLEPAGO    NUMERIC(22,0) = @p_CODDETALLEPAGO;
    DECLARE @coutMEDIOPAGONOREF NUMERIC(22,0);

	DECLARE @globalIDENTIFICACION NUMERIC(22,0);
	DECLARE @TotalPuntos NUMERIC(22,0);
	DECLARE @globalCODIGOAGRUPACION NUMERIC(22,0);

	DECLARE @GLOBALPARAMETER NUMERIC(22,0);
	DECLARE @msg VARCHAR(2000)



    --DECLARE @UNMATCHEDCTRLVALUE EXCEPTION;
   
      -- Obtener de nuevo saldos actuales para evitar utilizar datos obsoletos
      --SET @serialFACTURACION = WSXML_SFG.SFGSALDOPDV_GetCarteraSaldosActuales(@p_CODPUNTODEVENTA, @p_CODTIPOVINCULACIONPAGO);
      --SET @serialPAGOS     = BALANCEPAYMENTLIST();
      --SET @serialCRITERIOS = NUMBERARRAY();
      DECLARE ic CURSOR FOR SELECT CODLINEADENEGOCIO, FIDUCIA, SALDOACTUAL FROM WSXML_SFG.SFGSALDOPDV_GetCarteraSaldosActuales(@p_CODPUNTODEVENTA, @p_CODTIPOVINCULACIONPAGO)--.First..serialFACTURACION.Last LOOP
	  OPEN ic

	  DECLARE @ic__CODLINEADENEGOCIO NUMERIC(38,0), @ic__FIDUCIA  NUMERIC(38,0), @ic__SALDOACTUAL FLOAT


	  DECLARE @p_PUNTODEVENTA TINYINT, @p_AGRUPACNXNIT INT, @p_AGRUPACNXCAD INT
	  EXEC WSXML_SFG.SFGTIPOVINCULACIONPAGO_CONSTANT @p_PUNTODEVENTA OUTPUT, @p_AGRUPACNXNIT OUTPUT, @p_AGRUPACNXCAD OUTPUT

	  DECLARE @MENORAMAYOR SMALLINT,
		@MAYORAMENOR SMALLINT,
		@PORCENTAJEVENTAS SMALLINT,
		@PORCENTAJECARTER SMALLINT,
		@DISTRIBUCINIGUAL SMALLINT,
		@PUNTOCENTRALIZAD SMALLINT

	  EXEC WSXML_SFG.SFGCRITERIODISTRIBUCION_CONSTANT
	    @MENORAMAYOR OUT,
		@MAYORAMENOR OUT,
		@PORCENTAJEVENTAS OUT,
		@PORCENTAJECARTER OUT,
		@DISTRIBUCINIGUAL OUT,
		@PUNTOCENTRALIZAD OUT

		FETCH NEXT FROM ic INTO @ic__CODLINEADENEGOCIO, @ic__FIDUCIA, @ic__SALDOACTUAL 
		WHILE (@@FETCH_STATUS = 0) BEGIN

			--serialPAGOS.Extend(1);
			--serialCRITERIOS.Extend(1);
			INSERT INTO @serialPAGOS VALUES(
										@ic__CODLINEADENEGOCIO,
										@ic__FIDUCIA,
										@ic__SALDOACTUAL, 0, @ic__SALDOACTUAL)
			FETCH NEXT FROM ic INTO @ic__CODLINEADENEGOCIO, @ic__FIDUCIA, @ic__SALDOACTUAL 
		END;

      CLOSE ic;
      DEALLOCATE ic;
      -- Obtener distribuci?n asignada para serialPAGOS
      --SELECT @serializedSERVICES = WSXML_SFG.SFG_PACKAGE_SPLIT(@p_DISTRIBUCION, ' - ');
      DECLARE @checkVALORPAGO FLOAT = 0;
      BEGIN
        DECLARE tSALDOS CURSOR FOR SELECT VALUE FROM WSXML_SFG.SFG_PACKAGE_SPLIT(@p_DISTRIBUCION, ' - '); 
		OPEN tSALDOS;
		DECLARE @tSALDOS__VALUE VARCHAR(MAX)

		 FETCH NEXT FROM tSALDOS INTO @tSALDOS__VALUE;
		 WHILE @@FETCH_STATUS=0
		 BEGIN
            DECLARE @vPAGOSERIALIZADO   NVARCHAR(2000) = @tSALDOS__VALUE;
            DECLARE @vSPLITINDEX        NUMERIC(22,0) = 0;
            DECLARE @vCODLINEADENEGOCIO NUMERIC(22,0);
            DECLARE @vFIDUCIA           NUMERIC(22,0);
            DECLARE @vVALORPAGO         FLOAT;

			BEGIN
            SET @vSPLITINDEX = CHARINDEX('|', @vPAGOSERIALIZADO);
            SET @vCODLINEADENEGOCIO = CAST(SUBSTRING(@vPAGOSERIALIZADO, 1, @vSPLITINDEX - 1) AS NUMERIC(38,0));

            SET @vPAGOSERIALIZADO = SUBSTRING(@vPAGOSERIALIZADO, @vSPLITINDEX + 1, LEN(@vPAGOSERIALIZADO));
            SET @vSPLITINDEX = CHARINDEX('|', @vPAGOSERIALIZADO);

            SET @vFIDUCIA    = CAST(SUBSTRING(@vPAGOSERIALIZADO, 1, @vSPLITINDEX - 1) AS NUMERIC(38,0));
            SET @vVALORPAGO  = CAST(SUBSTRING(@vPAGOSERIALIZADO, @vSPLITINDEX + 1, LEN(@vPAGOSERIALIZADO)) AS NUMERIC(38,0));

            DECLARE ixln CURSOR FOR SELECT CODLINEADENEGOCIO,FIDUCIA, SALDOACTUAL, VALORPAGO,NUEVOSALDO FROM @serialPAGOS--.First..serialPAGOS.Last LOOP
            OPEN ixln;
			DECLARE @ixln__CODLINEADENEGOCIO NUMERIC(38,0), @ixln__FIDUCIA NUMERIC(38,0), @ixln__SALDOACTUAL FLOAT, @ixln__VALORPAGO FLOAT, @ixln__NUEVOSALDO FLOAT
			FETCH NEXT FROM ixln INTO @ixln__CODLINEADENEGOCIO, @ixln__FIDUCIA, @ixln__SALDOACTUAL, @ixln__VALORPAGO, @ixln__NUEVOSALDO
			WHILE @@FETCH_STATUS=0 BEGIN
				IF @ixln__CODLINEADENEGOCIO = @vCODLINEADENEGOCIO AND @ixln__FIDUCIA = @vFIDUCIA BEGIN
					 -- Asignacion de valores a distribuir
					 SET @ixln__VALORPAGO  = @vVALORPAGO;
					 SET @ixln__NUEVOSALDO = @ixln__SALDOACTUAL + @vVALORPAGO;
					 SET @checkVALORPAGO = @checkVALORPAGO + @vVALORPAGO;
					 --DBMS_OUTPUT.put_line(serialPAGOS(ixln).CODLINEADENEGOCIO || ' ' ||serialPAGOS(ixln).FIDUCIA || ' ' || serialPAGOS(ixln).SALDOACTUAL || ' ' || serialPAGOS(ixln).VALORPAGO || ' ' || serialPAGOS(ixln).NUEVOSALDO);
					 BREAK;
				END 
              FETCH NEXT FROM ixln INTO @ixln__CODLINEADENEGOCIO, @ixln__FIDUCIA, @ixln__SALDOACTUAL, @ixln__VALORPAGO, @ixln__NUEVOSALDO
              END
              CLOSE ixln;
              DEALLOCATE ixln; 
            
          END;

		 END-- WHILE 1=1 BEGIN;

         IF ABS(@checkVALORPAGO - @p_VALORPAGO) > 1 BEGIN
           --RAISE @UNMATCHEDCTRLVALUE;
		   RAISERROR('-20054 El valor de control no coincide con la suma de las distribuciones. No se puede asignar', 16, 1);
         END 
       END


      -- Obtener datos del pago
      DECLARE ixsal CURSOR for SELECT CODLINEADENEGOCIO, FIDUCIA, SALDOACTUAL, VALORPAGO, NUEVOSALDO FROM @serialPAGOS--.First..serialPAGOS.Last LOOP
	  OPEN ixsal

	  DECLARE @ixsal__CODLINEADENEGOCIO NUMERIC(38,0), @ixsal__FIDUCIA NUMERIC(38,0), @ixsal__SALDOACTUAL FLOAT, @ixsal__VALORPAGO FLOAT, @ixsal__NUEVOSALDO FLOAT;
	  FETCH NEXT FROM ixsal INTO @ixsal__CODLINEADENEGOCIO, @ixsal__FIDUCIA, @ixsal__SALDOACTUAL, @ixsal__VALORPAGO, @ixsal__NUEVOSALDO
	  
	  WHILE @@FETCH_STATUS=0 BEGIN

            DECLARE @cCodCriterioDistribucion NUMERIC(22,0);
            DECLARE @cCodMaestroFacturacion   NUMERIC(22,0);
            DECLARE @cValorRestante           FLOAT;  -- Variable de control para saber cuando se acaba el pago a distribuir
            DECLARE @cValorExtra              FLOAT;  -- Devoluci?n de Saldos cuando hay sobrante del pago
            DECLARE @cValorAplicar            FLOAT;
            DECLARE @nSalesWeeks              NUMERIC(22,0) = 1;
            --DECLARE @thisGlobal               @DistribucionRec;
			--DECLARE @thisGlobal					WSXML_SFG.DISTRIBUCIONREC
			-- TYPE DistribucionRec IS RECORD(ID_PUNTODEVENTA NUMBER, CODMAESTROFACTURACIONPDV NUMBER, SALDOACTUAL FLOAT);
			--DECLARE @DistribucionRec          WSXML_SFG.DISTRIBUCIONREC--     @DistribucionRec;
            DECLARE @CursorGlobal             CURSOR --@CURSORGENERICO;--Variable que se utiliza para traer el sql que nesesito segun el tipo de distribucion
			DECLARE @CursorCountGlobal			NUMERIC(22,0)

			DECLARE @CursorGlobal_ID_PUNTODEVENTA NUMERIC(38,0)
			DECLARE @CursorGlobal_ID_CODMAESTROFACTURACIONPDV NUMERIC(38,0)
			DECLARE @CursorGlobal_SALDOACTUAL FLOAT;	
			
			


			DECLARE @CursorGlobal__ID_PUNTODEVENTA NUMERIC(38,0), @CursorGlobal__CODMAESTROFACTURACIONPDV NUMERIC(38,0), @CursorGlobal__SALDOACTUAL FLOAT
          BEGIN
            IF @ixsal__NUEVOSALDO <= 0 BEGIN -- Si el nuevo saldo es menor que cero (sigue debiendo) o es igual (el pago fue exacto al saldo)
               --DECLARE @GLOBALPARAMETER NUMERIC(38,0);
               BEGIN
                  SET @cCodCriterioDistribucion = WSXML_SFG.SFGCRITERIODISTRIBUCION_GetCriterioFaltante(@p_CODPUNTODEVENTA, @p_CODTIPOVINCULACIONPAGO);
                  
				  --SET serialCRITERIOS(ixsal) = @cCodCriterioDistribucion;
				  INSERT INTO @serialCRITERIOS VALUES (@ixsal__CODLINEADENEGOCIO, @cCodCriterioDistribucion)

                  /* CRITERIO: MENOR A MAYOR */
                  IF @cCodCriterioDistribucion = @MENORAMAYOR OR @cCodCriterioDistribucion = @MAYORAMENOR BEGIN
                      --UN SOLO PUNTO DE VENTA
                      IF @p_CODTIPOVINCULACIONPAGO = @p_PUNTODEVENTA BEGIN
                          EXEC WSXML_SFG.SFGFACTURACIONPDV_GetCodFacturacionActualPDV @p_CODPUNTODEVENTA, @ixsal__CODLINEADENEGOCIO, @cCodMaestroFacturacion OUT
                          EXEC WSXML_SFG.SFGDETALLEPAGO_LinkSettleControlledBilling @cCodMaestroFacturacion, @ixsal__FIDUCIA, @cCODDETALLEPAGO, @ixsal__VALORPAGO, @p_CODUSUARIOMODIFICACION
                      END
                      ELSE IF @p_CODTIPOVINCULACIONPAGO = @p_AGRUPACNXNIT BEGIN --  por NIT
                              --DECLARE @globalIDENTIFICACION NUMERIC(22,0);
                          BEGIN
                              -- Obtener NIT
                              SELECT @globalIDENTIFICACION = IDENTIFICACION FROM WSXML_SFG.PUNTODEVENTA WHERE ID_PUNTODEVENTA = @p_CODPUNTODEVENTA;
                              SET @cValorRestante = @ixsal__VALORPAGO;
                              --Traemos el cursor
                              SET @GLOBALPARAMETER=@globalIDENTIFICACION;
                          END;

                      END
                      ELSE IF @p_CODTIPOVINCULACIONPAGO = @p_AGRUPACNXCAD BEGIN --  por CADENA
                          
						  --DECLARE @globalCODIGOAGRUPACION NUMERIC(22,0);
                          
						  BEGIN
                              -- Obtener Codigo Agrupacion
                              SELECT @globalCODIGOAGRUPACION = CODAGRUPACIONPUNTODEVENTA FROM WSXML_SFG.PUNTODEVENTA WHERE ID_PUNTODEVENTA = @p_CODPUNTODEVENTA;
                              SET @cValorRestante = @ixsal__VALORPAGO;
                              --Traemos el cursor
                              SET @GLOBALPARAMETER=@globalCODIGOAGRUPACION;
                          END;

                      END 
                          --Si es un solo punto de venta ya ingrese el pago por lo cual no debo hacerle nada mas
					  IF NOT(@p_CODTIPOVINCULACIONPAGO = @p_PUNTODEVENTA) BEGIN
                              --Primero quitamos los saldos de los puntos de venta que tienen saldo a favor y se lo sumamos a el total del pago
                              EXEC WSXML_SFG.SFGCRITERIODISTRIBUCION_CreateCursor @GLOBALPARAMETER, @ixsal__CODLINEADENEGOCIO,@cCodCriterioDistribucion, @p_CODTIPOVINCULACIONPAGO, @ixsal__FIDUCIA, @CursorGlobal OUT, @CursorCountGlobal OUT

							  IF @CursorCountGlobal > 0 BEGIN
									--DECLARE @CursorGlobal__ID_PUNTODEVENTA NUMERIC(38,0), @CursorGlobal__CODMAESTROFACTURACIONPDV NUMERIC(38,0), @CursorGlobal__SALDOACTUAL FLOAT
									FETCH NEXT FROM @CursorGlobal INTO @CursorGlobal__ID_PUNTODEVENTA, @CursorGlobal__CODMAESTROFACTURACIONPDV, @CursorGlobal__SALDOACTUAL
									WHILE @@FETCH_STATUS=0 BEGIN
										IF @CursorGlobal__SALDOACTUAL > 0 BEGIN
											SET @cValorRestante = @cValorRestante + ABS(@CursorGlobal__SALDOACTUAL);
											SET @cValorAplicar = @CursorGlobal__SALDOACTUAL * -1;
											EXEC WSXML_SFG.SFGDETALLEPAGO_LinkSettleControlledBilling @cCodMaestroFacturacion, @ixsal__FIDUCIA, @cCODDETALLEPAGO, @cValorAplicar, @p_CODUSUARIOMODIFICACION
										END
										FETCH NEXT FROM @CursorGlobal INTO @CursorGlobal__ID_PUNTODEVENTA, @CursorGlobal__CODMAESTROFACTURACIONPDV, @CursorGlobal__SALDOACTUAL
									END
									CLOSE @CursorGlobal;
									DEALLOCATE @CursorGlobal;
							  END

                              --Luego distribuimos
                              EXEC WSXML_SFG.SFGCRITERIODISTRIBUCION_CreateCursor GLOBALPARAMETER, @ixsal__CODLINEADENEGOCIO,@cCodCriterioDistribucion, @p_CODTIPOVINCULACIONPAGO, @ixsal__FIDUCIA, @CursorGlobal OUT, @CursorCountGlobal OUT

								IF @CursorCountGlobal > 0 BEGIN
									--DECLARE @CursorGlobal__ID_PUNTODEVENTA NUMERIC(38,0), @CursorGlobal__CODMAESTROFACTURACIONPDV NUMERIC(38,0), @CursorGlobal__SALDOACTUAL FLOAT
									FETCH NEXT FROM @CursorGlobal INTO @CursorGlobal__ID_PUNTODEVENTA, @CursorGlobal__CODMAESTROFACTURACIONPDV, @CursorGlobal__SALDOACTUAL
									WHILE @@FETCH_STATUS=0 BEGIN
										IF @cValorRestante > 0 BEGIN
                                          IF ABS(@CursorGlobal__SALDOACTUAL) >= @cValorRestante BEGIN
                                              SET @cValorAplicar = @cValorRestante;
                                          END
                                          ELSE BEGIN
                                              SET @cValorAplicar = ABS(@CursorGlobal__SALDOACTUAL);
                                          END 
                                          -- Saldar controladamente
                                          EXEC WSXML_SFG.SFGDETALLEPAGO_LinkSettleControlledBilling  @cCodMaestroFacturacion, @ixsal__FIDUCIA, @cCODDETALLEPAGO, @cValorAplicar, @p_CODUSUARIOMODIFICACION
                                          SET @cValorRestante = @cValorRestante - @cValorAplicar;
										END 
										FETCH NEXT FROM @CursorGlobal INTO @CursorGlobal__ID_PUNTODEVENTA, @CursorGlobal__CODMAESTROFACTURACIONPDV, @CursorGlobal__SALDOACTUAL
									END
									CLOSE @CursorGlobal;
									DEALLOCATE @CursorGlobal;
								END

								IF @cValorRestante > 0 BEGIN
								SET @msg  = 'Se obtuvo un valor restante despues de distribuir (DistrxCadena) ' + ISNULL(@cCODDETALLEPAGO, '')
                                EXEC WSXML_SFG.SFGTMPTRACE_TraceLog_1 @msg, 'PAGOSGLOBALES'
                              END 
                          END 
                    -- Final de Menor A Mayor
                  /* CRITERIO: MAYOR A MENOR */
                  END
               END

              -- DE AQUI EN ADELANTE ??
            END ELSE IF @ixsal__NUEVOSALDO > 0 BEGIN -- Si despues del pago el saldo sera a favor
                   --DECLARE @GLOBALPARAMETER NUMERIC(22,0);
                   DECLARE @ListaPorcenVtas PORCENTAJEVENTASLIST;
                   --DECLARE @TotalPuntos NUMERIC(22,0);

               BEGIN
                   SET @cCodCriterioDistribucion = WSXML_SFG.SFGCRITERIODISTRIBUCION_GetCriterioExcedente(@p_CODPUNTODEVENTA , @p_CODTIPOVINCULACIONPAGO);
                   --serialCRITERIOS(ixsal) := @cCodCriterioDistribucion;
				   INSERT INTO @serialCRITERIOS VALUES (@ixsal__CODLINEADENEGOCIO, @cCodCriterioDistribucion)
                   IF @p_CODTIPOVINCULACIONPAGO = @p_PUNTODEVENTA BEGIN -- Pago excedente por un solo punto de venta
                      EXEC WSXML_SFG.SFGFACTURACIONPDV_GetCodFacturacionActualPDV @p_CODPUNTODEVENTA, @ixsal__CODLINEADENEGOCIO, @cCodMaestroFacturacion OUT
                      EXEC WSXML_SFG.SFGDETALLEPAGO_LinkSettleBilling NULL, @cCodMaestroFacturacion, @ixsal__CODLINEADENEGOCIO, @ixsal__FIDUCIA, @cCODDETALLEPAGO, @ixsal__VALORPAGO, @p_CODUSUARIOMODIFICACION, @cValorExtra OUT
                      IF @cValorExtra > 0 BEGIN--Queda con deuda despues del pago
							SET @msg = 'Se obtuvo un valor restante despues de saldar para el pago (SinglePDV) ' + ISNULL(@cCODDETALLEPAGO, '')
							EXEC WSXML_SFG.SFGTMPTRACE_TraceLog_1 @msg, 'PAGOSGLOBALES'
                      END 
                   END
                   ELSE IF @p_CODTIPOVINCULACIONPAGO = @p_AGRUPACNXNIT BEGIN
                           --DECLARE @globalIDENTIFICACION NUMERIC(22,0);
                           --DECLARE @TotalPuntos NUMERIC(22,0);
                      BEGIN
                            -- Obtener NIT
                           SELECT @globalIDENTIFICACION = IDENTIFICACION
                           FROM WSXML_SFG.PUNTODEVENTA WHERE ID_PUNTODEVENTA = @p_CODPUNTODEVENTA;
                           SET @GLOBALPARAMETER=@globalIDENTIFICACION;
                            -- Obtener total de puntos de venta
                           SELECT @TotalPuntos = count(ID_PUNTODEVENTA) FROM WSXML_SFG.PUNTODEVENTA P
                           WHERE P.IDENTIFICACION=@globalIDENTIFICACION;
                      END;

                   END
                   ELSE IF @p_CODTIPOVINCULACIONPAGO=@p_AGRUPACNXCAD BEGIN
                           --DECLARE @globalCODIGOAGRUPACION NUMERIC(22,0);
                      BEGIN
                           -- Obtener codigo agrupacion (cadena)
                           SELECT @globalCODIGOAGRUPACION = CODAGRUPACIONPUNTODEVENTA 
                           FROM WSXML_SFG.PUNTODEVENTA WHERE ID_PUNTODEVENTA = @p_CODPUNTODEVENTA;
                           SET @GLOBALPARAMETER=@globalCODIGOAGRUPACION;
                           -- Obtener total de puntos de venta
                           SELECT @TotalPuntos = count(ID_PUNTODEVENTA) FROM WSXML_SFG.PUNTODEVENTA P
                           WHERE P.CODAGRUPACIONPUNTODEVENTA=@globalCODIGOAGRUPACION;
                      END;

                   END 
                   --Si es un punto  de venta, ya tubo que ser ingresado el pago
                   IF NOT(@p_CODTIPOVINCULACIONPAGO = @p_PUNTODEVENTA) BEGIN
                      DECLARE @tmpPagoExtraxPunto NUMERIC(38,0);
                      DECLARE @Porcenxpunto NUMERIC(38,0);
                      DECLARE @valorpagoextra NUMERIC(38,0);
                      BEGIN
                           --SET @ListaPorcenVtas=WSXML_SFG.SFGFACTURACIONPDV_GetPorcentajeVentasAgrupamient(@p_CODPUNTODEVENTA,@ixsal__CODLINEADENEGOCIO,@nSalesWeeks,@p_CODTIPOVINCULACIONPAGO);
                           SET @cValorRestante=@ixsal__VALORPAGO;
                           SET @valorpagoextra=@ixsal__NUEVOSALDO;
                           EXEC WSXML_SFG.SFGCRITERIODISTRIBUCION_CreateCursor @GLOBALPARAMETER,@ixsal__CODLINEADENEGOCIO,@cCodCriterioDistribucion, @p_CODTIPOVINCULACIONPAGO,@ixsal__fiducia , @CursorGlobal OUT, @CursorCountGlobal OUT
                           --Primero quitamos el saldo de los que tiene saldo a favor y lo sumamos al total a pagar
						   IF @CursorCountGlobal > 0 BEGIN
						    
								FETCH NEXT FROM @CursorGlobal INTO @CursorGlobal_ID_PUNTODEVENTA, @CursorGlobal_ID_CODMAESTROFACTURACIONPDV, @CursorGlobal_SALDOACTUAL
								WHILE @@FETCH_STATUS = 0 BEGIN
								
									IF @CursorGlobal_SALDOACTUAL > 0 BEGIN
										SET @cValorRestante = @cValorRestante + ABS(@CursorGlobal_SALDOACTUAL);
										SET @cValorAplicar=@CursorGlobal_SALDOACTUAL * -1;
										EXEC WSXML_SFG.SFGDETALLEPAGO_LinkSettleControlledBilling @cCodMaestroFacturacion, @ixsal__FIDUCIA, @cCODDETALLEPAGO, @cValorAplicar, @p_CODUSUARIOMODIFICACION
									END 

									FETCH NEXT FROM @CursorGlobal INTO @CursorGlobal_ID_PUNTODEVENTA, @CursorGlobal_ID_CODMAESTROFACTURACIONPDV, @CursorGlobal_SALDOACTUAL
								END

								CLOSE @CursorGlobal;
								DEALLOCATE @CursorGlobal;								
						   END 

                           --
                           EXEC WSXML_SFG.SFGCRITERIODISTRIBUCION_CreateCursor  @GLOBALPARAMETER, @ixsal__CODLINEADENEGOCIO,@cCodCriterioDistribucion, @p_CODTIPOVINCULACIONPAGO,@ixsal__fiducia , @CursorGlobal OUT, @CursorCountGlobal OUT

						   IF @CursorCountGlobal > 0 BEGIN
								FETCH NEXT FROM @CursorGlobal INTO @CursorGlobal_ID_PUNTODEVENTA, @CursorGlobal_ID_CODMAESTROFACTURACIONPDV, @CursorGlobal_SALDOACTUAL
								WHILE @@FETCH_STATUS = 0 BEGIN
									




									IF @cValorRestante>0 BEGIN
										 IF @CursorGlobal_SALDOACTUAL >= @cValorRestante  BEGIN
										   SET @cValorAplicar=@cValorRestante;
										 END
                                     ELSE BEGIN
                                       SET @cValorAplicar=@CursorGlobal_SALDOACTUAL;
                                     END 
                                     SET @tmpPagoExtraxPunto=0;
                                     SET @cCodMaestroFacturacion=@CursorGlobal_ID_CODMAESTROFACTURACIONPDV;
                                     IF @valorpagoextra>0 BEGIN
                                       IF @ixsal__NUEVOSALDO>=@TotalPuntos BEGIN --para impedir el acceso de decimales
                                            IF @cCodCriterioDistribucion=@PORCENTAJEVENTAS BEGIN

                                              DECLARE IX CURSOR FOR SELECT CODPUNTODEVENTA, PORCENTAJE FROM WSXML_SFG.SFGFACTURACIONPDV_GetPorcentajeVentasAgrupamient(@p_CODPUNTODEVENTA,@ixsal__CODLINEADENEGOCIO,@nSalesWeeks,@p_CODTIPOVINCULACIONPAGO)
													-- in ListaPorcenVtas.First..ListaPorcenVtas.last 
												OPEN IX
												DECLARE @IX__CODPUNTODEVENTA NUMERIC(38,0), @IX__PORCENTAJE FLOAT

												FETCH NEXT FROM IX INTO @IX__CODPUNTODEVENTA, @IX__PORCENTAJE
												WHILE @@FETCH_STATUS = 0 BEGIN

													 IF @IX__CODPUNTODEVENTA = @CursorGlobal_ID_PUNTODEVENTA BEGIN
														SET @Porcenxpunto = @IX__PORCENTAJE
														BREAK;
													 END
													FETCH NEXT FROM IX INTO @IX__CODPUNTODEVENTA, @IX__PORCENTAJE
												END
												CLOSE IX;
												DEALLOCATE IX

                                              SET @tmpPagoExtraxPunto=@valorpagoextra*(@Porcenxpunto/100);
                                            END ELSE IF @cCodCriterioDistribucion=@PORCENTAJECARTER BEGIN
                                              SET @Porcenxpunto=(@CursorGlobal_SALDOACTUAL * 100)/@ixsal__SALDOACTUAL;
                                              SET @tmpPagoExtraxPunto=@valorpagoextra*(@Porcenxpunto/100);
                                            END ELSE IF @cCodCriterioDistribucion=@DISTRIBUCINIGUAL
                                              SET @tmpPagoExtraxPunto=@valorpagoextra/@TotalPuntos;
                                            ELSE IF @cCodCriterioDistribucion=@PUNTOCENTRALIZAD BEGIN
                                              SET @tmpPagoExtraxPunto=@valorpagoextra;
                                              EXEC WSXML_SFG.SFGFACTURACIONPDV_GetCodFacturacionActualPDV @p_CODPUNTODEVENTA, @ixsal__CODLINEADENEGOCIO,@cCodMaestroFacturacion OUT
                                            END
                                       ELSE
                                            SET @tmpPagoExtraxPunto=@valorpagoextra;
                                            EXEC WSXML_SFG.SFGFACTURACIONPDV_GetCodFacturacionActualPDV @p_CODPUNTODEVENTA, @ixsal__CODLINEADENEGOCIO,@cCodMaestroFacturacion OUT
                                       END 
                                       SET @valorpagoextra=@valorpagoextra-@tmpPagoExtraxPunto;
                                     END 
                                     SET @cValorAplicar=@cValorAplicar + @tmpPagoExtraxPunto;
                                     ---SFGDETALLEPAGO.LinkSettleBilling(NULL,cCodMaestroFacturacion,serialPAGOS(ixsal).CODLINEADENEGOCIO,serialPAGOS(ixsal).FIDUCIA,cCODDETALLEPAGO,cValorAplicar,p_CODUSUARIOMODIFICACION,cValorExtra);
                                     EXEC WSXML_SFG.SFGDETALLEPAGO_LinkSettleControlledBilling @cCodMaestroFacturacion,@ixsal__FIDUCIA,@cCODDETALLEPAGO,@cValorAplicar,@p_CODUSUARIOMODIFICACION
                                     SET @cValorRestante=@cValorRestante-@cValorAplicar;
                                     IF @cValorExtra>0 BEGIN
                                      --nothing
                                         SELECT NULL;
                                     END 
                                END




									FETCH NEXT FROM @CursorGlobal INTO @CursorGlobal_ID_PUNTODEVENTA, @CursorGlobal_ID_CODMAESTROFACTURACIONPDV, @CursorGlobal_SALDOACTUAL
								END
								CLOSE @CursorGlobal;
								DEALLOCATE @CursorGlobal;	
						   END
                      END;

                   END---FINAL DE DISTRIBUCIONES EN CASO DE QUEDAR CON SALDO A FAVOR ---


               END;

            END
          END;

		  FETCH NEXT FROM ixsal INTO @ixsal__CODLINEADENEGOCIO, @ixsal__FIDUCIA, @ixsal__SALDOACTUAL, @ixsal__VALORPAGO, @ixsal__NUEVOSALDO
      END
	  CLOSE ixsal
	  DEALLOCATE ixsal


      -- Actualizar informaci?n del pago recien distribuido
      SELECT @cCODCTRLPAGO = CODCTRLPAGO FROM WSXML_SFG.DETALLEPAGO WHERE ID_DETALLEPAGO = @cCODDETALLEPAGO;
      UPDATE WSXML_SFG.CTRLPAGO SET CODORIGENPAGO = @p_CODORIGENPAGO
      WHERE ID_CTRLPAGO = @cCODCTRLPAGO;
      UPDATE WSXML_SFG.DETALLEPAGO SET VINCULADO = 1,
                             CODPUNTODEVENTA = @p_CODPUNTODEVENTA
      WHERE ID_DETALLEPAGO = @p_CODDETALLEPAGO;

      IF @p_CODDETALLEPAGO=-1 BEGIN--No es por un pago si no por una redistribucion
         EXEC WSXML_SFG.SFGMEDIOPAGONOREF_AddRecordFromGlobalPay 
											   @cCODDETALLEPAGO,
                                               @p_CODTIPOVINCULACIONPAGO,
                                               @serialPAGOS,
                                               @serialCRITERIOS,
                                               @p_COMENTARIO,
                                               @p_FECHAHORAMODIFICACION,
                                               @p_CODUSUARIOMODIFICACION,
                                               @coutMEDIOPAGONOREF OUT
      END 
      SET @p_ID_DETALLEPAGO_out = @cCODDETALLEPAGO;


  --EXCEPTION
  --WHEN UNMATCHEDCTRLVALUE THEN
  --  RAISERROR('-20054 El valor de control no coincide con la suma de las distribuciones. No se puede asignar', 16, 1);
END
GO

 
 
 
IF OBJECT_ID('WSXML_SFG.SFGDETALLEPAGO_AddDistributedReferencedRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGDETALLEPAGO_AddDistributedReferencedRecord;
GO

  CREATE PROCEDURE WSXML_SFG.SFGDETALLEPAGO_AddDistributedReferencedRecord(@p_CODCTRLPAGO            NUMERIC(22,0),
                                           @p_CODCTRLPAGONOREFERENC  NUMERIC(22,0),
                                           @p_CODLINEADENEGOCIO      NUMERIC(22,0),
                                           @p_FIDUCIA                NUMERIC(22,0),
                                           @p_NUMEROREGISTRO         NUMERIC(22,0),
                                           @p_FECHAPAGO              DATETIME,
                                           @p_VALORPAGO              FLOAT,
                                           @p_NUMEROREFERENCIA       NVARCHAR(2000),
                                           @p_CODUSUARIOMODIFICACION NUMERIC(22,0),
                                           @p_ID_DETALLEPAGO_out     NUMERIC(22,0) OUT) AS
 BEGIN
	SET NOCOUNT ON;

    DECLARE @codDETALLEPAGO NUMERIC(22,0);
    DECLARE @codREFERENCIAN NUMERIC(22,0);
    --DECLARE @UNMATCHEDSERVICE   EXCEPTION;
    --DECLARE @UNMATCHEDREFERENCE EXCEPTION;
    --DECLARE @MULTIPLEREFERENCE  EXCEPTION;
    DECLARE @lstLINEASDENEGOCIOTENTATIVO WSXML_SFG.SETTLEFACTURACION;
    DECLARE @errormessage                NVARCHAR(2000);

	DECLARE @newSALDOGTECH FLOAT = 0;
	DECLARE @newSALDOFIDUCIA FLOAT = 0;
 
  
    --SET @lstLINEASDENEGOCIOTENTATIVO = SETTLEFACTURACIONLIST();
    -- Inserci?n de registro
    INSERT INTO WSXML_SFG.DETALLEPAGO (
                             CODCTRLPAGO,
                             NUMEROREGISTRO,
                             FECHAPAGO,
                             VALORPAGO,
                             FIDUCIA,
                             CODUSUARIOMODIFICACION)
    VALUES (
            @p_CODCTRLPAGO,
            @p_NUMEROREGISTRO,
            @p_FECHAPAGO,
            @p_VALORPAGO,
            @p_FIDUCIA,
            @p_CODUSUARIOMODIFICACION);
    SET @codDETALLEPAGO = SCOPE_IDENTITY();

	DECLARE 
	  @p_HUERFANOREFERENCIA TINYINT,
	  @p_PAGOGLOBAL         TINYINT,
	  @p_REPORTADOASISTENCI TINYINT,
	  @p_PARTIDENTIFIMANUAL TINYINT,
	  @p_PARTSINREFAUTOMATC TINYINT,
	  @p_HUERFANOVALORNOCOR TINYINT

	EXEC WSXML_SFG.SFGTIPONOREFERENCIADO_CONSTANT
	  @p_HUERFANOREFERENCIA OUTPUT,
	  @p_PAGOGLOBAL         OUTPUT,
	  @p_REPORTADOASISTENCI OUTPUT,
	  @p_PARTIDENTIFIMANUAL OUTPUT,
	  @p_PARTSINREFAUTOMATC OUTPUT,
	  @p_HUERFANOVALORNOCOR OUTPUT

	DECLARE @p_TIPOINFORMATIVO TINYINT,
		@p_TIPOERROR TINYINT,
		@p_TIPOADVERTENCIA TINYINT,
		@p_TIPOCUALQUIERA TINYINT,
		@p_PROCESONOTIFICACION TINYINT,
		@p_ESTADOABIERTA TINYINT,
		@p_ESTADOCERRADA TINYINT	
			  
	EXEC WSXML_SFG.SFGALERTA_CONSTANT
		@p_TIPOINFORMATIVO OUT,
		@p_TIPOERROR OUT,
		@p_TIPOADVERTENCIA OUT,
		@p_TIPOCUALQUIERA OUT,
		@p_PROCESONOTIFICACION OUT,
		@p_ESTADOABIERTA OUT,
		@p_ESTADOCERRADA OUT	

    -- Validar datos de vinculo y saldos. Distribucion se realiza aqui
      DECLARE @debugmsg NVARCHAR(2000);
    BEGIN
	  
	  BEGIN TRY
        DECLARE @cCODCICLOFACTURACIONPDV    NUMERIC(22,0);
        DECLARE @cCODTIPOPUNTODEVENTA       NUMERIC(22,0); -- Determina si la tirila fue generada agrupada o abierta
        DECLARE @cCODAGRUPACIONPUNTODEVENTA NUMERIC(22,0); -- Si es agrupado, obtiene directamente la cadena
        DECLARE @cCODPUNTODEVENTA           NUMERIC(22,0);
        DECLARE @lstBILLINGREFERENCES_cur       CURSOR; --WSXML_SFG.REFERENCEBILLING;
		DECLARE @countBILLINGREFERENCES     NUMERIC(22,0); --WSXML_SFG.REFERENCEBILLING;
        DECLARE @cREMAINDERPAGO             FLOAT = @p_VALORPAGO;
        DECLARE @coutPAGOFACTURACIONDISTRBD NUMERIC(22,0);

		DECLARE  @lstBILLINGREFERENCES  WSXML_SFG.REFERENCEBILLING
		BEGIN
        -- Determinar identificador de referencia, agrupamiento de tirilla y facturaciones de pdv
        BEGIN
          -- No se buscar  la referencia de acuerdo a la generada, sino busqueda de terminal
          EXEC WSXML_SFG.SFGMAESTROFACTURACIONCOMPCONSI_DecodeBilledReferenceNumber @p_NUMEROREFERENCIA,
                                                                     @p_CODLINEADENEGOCIO,
                                                                     @cCODCICLOFACTURACIONPDV,
                                                                     @cCODPUNTODEVENTA,
                                                                     @cCODAGRUPACIONPUNTODEVENTA,
                                                                     @cCODTIPOPUNTODEVENTA,
                                                                     @lstBILLINGREFERENCES_cur OUT,
																	 @countBILLINGREFERENCES OUT

				IF @countBILLINGREFERENCES > 0 BEGIN

					DECLARE @l_CODLINEADENEGOCIO NUMERIC(38,0), @l_CODMAESTROFACTURACIONPDV NUMERIC(38,0)
					FETCH NEXT FROM @lstBILLINGREFERENCES_cur INTO @l_CODLINEADENEGOCIO, @l_CODMAESTROFACTURACIONPDV

					WHILE @@FETCH_STATUS=0 BEGIN
						INSERT INTO @lstBILLINGREFERENCES VALUES (@l_CODLINEADENEGOCIO, @l_CODMAESTROFACTURACIONPDV)
						FETCH NEXT FROM @lstBILLINGREFERENCES_cur INTO @l_CODLINEADENEGOCIO, @l_CODMAESTROFACTURACIONPDV
					END

					CLOSE @lstBILLINGREFERENCES_cur
					DEALLOCATE @lstBILLINGREFERENCES_cur


				END



			  IF @cCODPUNTODEVENTA IS NULL OR @countBILLINGREFERENCES = 0 BEGIN
				--RAISE NO_DATA_FOUND;
				--RAISE_APPLICATION_ERROR(-20054, 'No existe facturacion o la cadena no tiene cabeza');
					  -- Registro de pago no referenciado y actualizacion de estado
				  INSERT INTO WSXML_SFG.MEDIOPAGONOREF (
											  CODDETALLEPAGO,
											  CODTIPONOREFERENCIADO,
											  NUMEROREFERENCIA,
											  CODUSUARIOMODIFICACION)
				  VALUES (
						  @codDETALLEPAGO,
						  @p_HUERFANOREFERENCIA,
						  @p_NUMEROREFERENCIA,
						  @p_CODUSUARIOMODIFICACION);
				  SET @codREFERENCIAN = SCOPE_IDENTITY();
				  EXEC WSXML_SFG.SFGDETALLEPAGO_SwitchControl @codDETALLEPAGO, @p_CODCTRLPAGO, @p_CODCTRLPAGONOREFERENC
			  END 

			IF @@ROWCOUNT = 0 BEGIN
				INSERT INTO WSXML_SFG.MEDIOPAGONOREF (
											  CODDETALLEPAGO,
											  CODTIPONOREFERENCIADO,
											  NUMEROREFERENCIA,
											  CODUSUARIOMODIFICACION)
				  VALUES (
						  @codDETALLEPAGO,
						  @p_HUERFANOREFERENCIA,
						  @p_NUMEROREFERENCIA,
						  @p_CODUSUARIOMODIFICACION);
				  SET @codREFERENCIAN = SCOPE_IDENTITY();
				  EXEC WSXML_SFG.SFGDETALLEPAGO_SwitchControl @codDETALLEPAGO, @p_CODCTRLPAGO, @p_CODCTRLPAGONOREFERENC
			END

			IF @@ROWCOUNT > 1 BEGIN
       

				--RAISE @MULTIPLEREFERENCE;  -- Multiples referencias

				  INSERT INTO WSXML_SFG.MEDIOPAGONOREF (
										  CODDETALLEPAGO,
										  CODTIPONOREFERENCIADO,
										  NUMEROREFERENCIA,
										  CODUSUARIOMODIFICACION)
				  VALUES (
						  @codDETALLEPAGO,
						  @p_HUERFANOVALORNOCOR,
						  @p_NUMEROREFERENCIA,
						  @p_CODUSUARIOMODIFICACION);
				  SET @codREFERENCIAN = SCOPE_IDENTITY();
				  EXEC WSXML_SFG.SFGDETALLEPAGO_SwitchControl @codDETALLEPAGO, @p_CODCTRLPAGO, @p_CODCTRLPAGONOREFERENC

				  SET @errormessage = 'Se encontraron multiples vinculos para la referencia ' + ISNULL(@p_NUMEROREFERENCIA, '') + ' durante el cargue del archivo ' + ISNULL(WSXML_SFG.ARCHIVONOMBRE_CTRLPAGO_F(@p_CODCTRLPAGO), '') + '. Se convertir  en no referenciado';
				  EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @p_TIPOERROR, 'VINCULAPAGOS', @errormessage, @p_CODUSUARIOMODIFICACION
			END
        END;


        -- Saldar completamente sin verificacion, ordenado por saldo
        DECLARE billing CURSOR FOR SELECT DSP.CODMAESTROFACTURACIONPDV,
                               (DSP.SALDOCONTRAGTECH - DSP.SALDOAFAVORGTECH) AS SALDOGTECH,
                               (DSP.SALDOCONTRAFIDUCIA - DSP.SALDOAFAVORFIDUCIA) AS SALDOFIDUCIA
                        FROM (SELECT CODMAESTROFACTURACIONPDV FROM @lstBILLINGREFERENCES) MFP
                        INNER JOIN WSXML_SFG.DETALLESALDOPDV DSP ON (DSP.CODMAESTROFACTURACIONPDV = MFP.CODMAESTROFACTURACIONPDV)
                        ORDER BY CASE WHEN @p_FIDUCIA = 0 THEN (DSP.SALDOCONTRAGTECH - DSP.SALDOAFAVORGTECH)
                                      WHEN @p_FIDUCIA = 1 THEN (DSP.SALDOCONTRAFIDUCIA - DSP.SALDOAFAVORFIDUCIA) END DESC;
		 OPEN billing;

		 DECLARE  @billing__CODMAESTROFACTURACIONPDV NUMERIC(38,0), @billing__SALDOGTECH FLOAT, @billing__SALDOFIDUCIA FLOAT

		 FETCH NEXT FROM billing INTO @billing__CODMAESTROFACTURACIONPDV, @billing__SALDOGTECH, @billing__SALDOFIDUCIA;
		 WHILE @@FETCH_STATUS=0
		 BEGIN
          IF @cREMAINDERPAGO > 0 BEGIN
            IF @p_FIDUCIA = 0 AND @billing__SALDOGTECH > 0 BEGIN -- Caso SALDO GTECH
                SET @newSALDOGTECH = 0;
                DECLARE @stlBLNCEGTECH FLOAT = 0;
              BEGIN
                IF @cREMAINDERPAGO >= @billing__SALDOGTECH BEGIN
                  SET @newSALDOGTECH = 0;
                  SET @stlBLNCEGTECH = @billing__SALDOGTECH;
                  SET @cREMAINDERPAGO = @cREMAINDERPAGO - @billing__SALDOGTECH;
                END
                ELSE BEGIN
                  SET @newSALDOGTECH = @billing__SALDOGTECH - @cREMAINDERPAGO;
                  SET @stlBLNCEGTECH = @cREMAINDERPAGO;
                  SET @cREMAINDERPAGO = 0;
                END 
                UPDATE WSXML_SFG.DETALLESALDOPDV SET SALDOCONTRAGTECH = CASE WHEN @newSALDOGTECH >= 0 THEN ABS(@newSALDOGTECH) ELSE 0 END,
                                           SALDOAFAVORGTECH = CASE WHEN @newSALDOGTECH < 0 THEN ABS(@newSALDOGTECH) ELSE 0 END
                                       WHERE CODMAESTROFACTURACIONPDV = @billing__CODMAESTROFACTURACIONPDV;
                EXEC WSXML_SFG.SFGPAGOFACTURACIONPDV_AddRecord 
												@codDETALLEPAGO,
                                                @billing__CODMAESTROFACTURACIONPDV,
                                                @stlBLNCEGTECH,
                                                @p_CODUSUARIOMODIFICACION,
                                                @coutPAGOFACTURACIONDISTRBD OUT
              END;

            END
            ELSE IF @p_FIDUCIA = 1 AND @billing__SALDOFIDUCIA > 0 BEGIN -- Caso FIDUCIA
                SET @newSALDOFIDUCIA = 0;
                DECLARE @stlBLNCEFIDUCIA FLOAT = 0;
              BEGIN
                IF @cREMAINDERPAGO >= @billing__SALDOFIDUCIA BEGIN
                  SET @newSALDOFIDUCIA = 0;
                  SET @stlBLNCEFIDUCIA = @billing__SALDOFIDUCIA;
                  SET @cREMAINDERPAGO = @cREMAINDERPAGO - @billing__SALDOFIDUCIA;
                END
                ELSE BEGIN
                  SET @newSALDOFIDUCIA = @billing__SALDOFIDUCIA - @cREMAINDERPAGO;
                  SET @stlBLNCEFIDUCIA = @cREMAINDERPAGO;
                  SET @cREMAINDERPAGO = 0;
                END 
                UPDATE WSXML_SFG.DETALLESALDOPDV SET SALDOCONTRAFIDUCIA = CASE WHEN @newSALDOFIDUCIA >= 0 THEN ABS(@newSALDOFIDUCIA) ELSE 0 END,
                                           SALDOAFAVORFIDUCIA = CASE WHEN @newSALDOFIDUCIA < 0 THEN ABS(@newSALDOFIDUCIA) ELSE 0 END
                                       WHERE CODMAESTROFACTURACIONPDV = @billing__CODMAESTROFACTURACIONPDV;
                EXEC WSXML_SFG.SFGPAGOFACTURACIONPDV_AddRecord 
												@codDETALLEPAGO,
                                                @billing__CODMAESTROFACTURACIONPDV,
                                                @stlBLNCEFIDUCIA,
                                                @p_CODUSUARIOMODIFICACION,
                                                @coutPAGOFACTURACIONDISTRBD OUT
              END;

            END 
          END 
        FETCH NEXT FROM billing INTO @billing__CODMAESTROFACTURACIONPDV, @billing__SALDOGTECH, @billing__SALDOFIDUCIA;
        END;

         CLOSE billing;
		 DEALLOCATE billing;

        -- Remainder still exists. Add to head of chain (Obtain balance again). Works on negative also.
        IF @cREMAINDERPAGO <> 0 BEGIN
            DECLARE @headMAESTROFACTURACIONPDV NUMERIC(22,0);
            DECLARE @headSALDOGTECH            FLOAT = 0;
            DECLARE @headSALDOFIDUCIA          FLOAT = 0;
            DECLARE @coutPAGOFACTURAC          NUMERIC(22,0);
          BEGIN
            SELECT @headMAESTROFACTURACIONPDV = DSP.CODMAESTROFACTURACIONPDV,
                   @headSALDOGTECH = (DSP.SALDOCONTRAGTECH - DSP.SALDOAFAVORGTECH),
                   @headSALDOFIDUCIA = (DSP.SALDOCONTRAFIDUCIA - DSP.SALDOAFAVORFIDUCIA)
            FROM WSXML_SFG.DETALLESALDOPDV DSP
            INNER JOIN WSXML_SFG.MAESTROFACTURACIONPDV MFP ON (MFP.ID_MAESTROFACTURACIONPDV = DSP.CODMAESTROFACTURACIONPDV)
            WHERE MFP.CODCICLOFACTURACIONPDV = @cCODCICLOFACTURACIONPDV
              AND MFP.CODPUNTODEVENTA        = @cCODPUNTODEVENTA
              AND MFP.CODLINEADENEGOCIO      = @p_CODLINEADENEGOCIO;
            -- Settle
            IF @p_FIDUCIA = 0 BEGIN -- Caso GTECH
                SET  @newSALDOGTECH = 0;
              BEGIN
                SET @newSALDOGTECH = @headSALDOGTECH - @p_VALORPAGO;
                UPDATE WSXML_SFG.DETALLESALDOPDV SET SALDOCONTRAGTECH = CASE WHEN @newSALDOGTECH >= 0 THEN ABS(@newSALDOGTECH) ELSE 0 END,
                                           SALDOAFAVORGTECH = CASE WHEN @newSALDOGTECH < 0 THEN ABS(@newSALDOGTECH) ELSE 0 END
                                       WHERE CODMAESTROFACTURACIONPDV = @headMAESTROFACTURACIONPDV;
                EXEC WSXML_SFG.SFGPAGOFACTURACIONPDV_AddRecord @codDETALLEPAGO, @headMAESTROFACTURACIONPDV, @p_VALORPAGO, @p_CODUSUARIOMODIFICACION, @coutPAGOFACTURAC OUT
              END;

            END
            ELSE BEGIN -- Caso FIDUCIA --
                SET @newSALDOFIDUCIA = 0;
              BEGIN
                SET @newSALDOFIDUCIA = @headSALDOFIDUCIA - @p_VALORPAGO;
                UPDATE WSXML_SFG.DETALLESALDOPDV SET SALDOCONTRAFIDUCIA = CASE WHEN @newSALDOFIDUCIA >= 0 THEN ABS(@newSALDOFIDUCIA) ELSE 0 END,
                                           SALDOAFAVORFIDUCIA = CASE WHEN @newSALDOFIDUCIA < 0 THEN ABS(@newSALDOFIDUCIA) ELSE 0 END
                                       WHERE CODMAESTROFACTURACIONPDV = @headMAESTROFACTURACIONPDV;
                EXEC WSXML_SFG.SFGPAGOFACTURACIONPDV_AddRecord @codDETALLEPAGO, @headMAESTROFACTURACIONPDV, @p_VALORPAGO, @p_CODUSUARIOMODIFICACION, @coutPAGOFACTURAC OUT
              END;

            END 
          END;

        END 
      END;


		-- Registro de pago referenciado, si se encuentra la referencia
		INSERT INTO WSXML_SFG.MEDIOPAGOREF (
                                CODDETALLEPAGO,
                                NUMEROREFERENCIA,
                                CODUSUARIOMODIFICACION)
		VALUES (
              @codDETALLEPAGO,
              @p_NUMEROREFERENCIA,
              @p_CODUSUARIOMODIFICACION);
		SET @codREFERENCIAN = SCOPE_IDENTITY();

	
	  END TRY
	
	  BEGIN CATCH
		SET @debugmsg = ERROR_MESSAGE ( ) ;
		EXEC WSXML_SFG.SFGTMPTRACE_TraceLog_1  @debugmsg, 'VINCULACIONPAGOS'
		EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @p_TIPOERROR, 'VINCULAPAGOS', @debugmsg, @p_CODUSUARIOMODIFICACION
	  END CATCH
    
	END;


    -- Devolver identificador de pago creado
    SET @p_ID_DETALLEPAGO_out = @codDETALLEPAGO;
  END;
GO




  IF OBJECT_ID('WSXML_SFG.SFGDETALLEPAGO_VincularPagos', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGDETALLEPAGO_VincularPagos;
GO


  CREATE PROCEDURE WSXML_SFG.SFGDETALLEPAGO_VincularPagos(@p_DETALLETAREAEJECUTADA NUMERIC(22,0), @p_RETVALUE_out NUMERIC(22,0) OUT) AS
 BEGIN
 
   SET NOCOUNT ON;
    DECLARE @xCODORIGENFIDUCIA        NUMERIC(22,0) = 15;
    DECLARE @xCODTIPOPAGOREFERENCIADO NUMERIC(22,0) = 1;
    DECLARE @xCODTIPOPAGONOREFRNCIADO NUMERIC(22,0) = 2;

    DECLARE @lstPAYMENTS WSXML_SFG.LONGNUMBERARRAY;
    DECLARE @countUNLINKEDPAYMENTS NUMERIC(22,0) = 0;

    DECLARE @totalrecords NUMERIC(22,0) = 0;
    DECLARE @countrecords NUMERIC(22,0) = 0;
    DECLARE @waitnrecords NUMERIC(22,0) = 50;
    DECLARE @cCODUSUARIOMODIFICACION NUMERIC(22,0) = 1;
    DECLARE @msg NVARCHAR(2000);
   

    -- 1. Par metros de la busqueda
    BEGIN
		BEGIN TRY
		  EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'CodOrigenFiducia', @xCODORIGENFIDUCIA OUT
		  EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'CodTipoPagoReferenciado', @xCODTIPOPAGOREFERENCIADO OUT
		  EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'CodTipoPagoNoRefrnciado', @xCODTIPOPAGONOREFRNCIADO OUT
		END TRY
		BEGIN CATCH
			SELECT NULL; -- Do Nothing
		END CATCH

    END;

	BEGIN TRY


	DECLARE @p_REGISTRADA TINYINT ,
                    @p_INICIADA TINYINT ,
                    @p_FINALIZADAOK TINYINT ,
                    @p_FINALIZADAFALLO TINYINT ,
					@p_ABORTADA  	TINYINT ,
					@p_NOINICIADA  	TINYINT ,
					@p_FINALIZADAADVERTENCIA  TINYINT
	EXEC WSXML_SFG.SFGESTADOTAREAEJECUTADA_CONSTANT 
					@p_REGISTRADA      	 OUT,
                    @p_INICIADA   OUT,
                    @p_FINALIZADAOK  OUT,
                    @p_FINALIZADAFALLO  OUT,
					@p_ABORTADA   OUT,
					@p_NOINICIADA  	OUT,
					@p_FINALIZADAADVERTENCIA OUT

    -- 2. Obtener la lista de pagos a considerar.
    /* Verificaciones adicionales, para los pagos en el sistema que se puedan vincular,
       como fecha del pago, o pagos historicos, deben ir ac  */
    INSERT INTO @lstPAYMENTS 
	SELECT DP.ID_DETALLEPAGO FROM WSXML_SFG.DETALLEPAGO DP
     WHERE DP.VINCULADO = 0;

	DECLARE @p_TIPOINFORMATIVO TINYINT,
	@p_TIPOERROR TINYINT,
	@p_TIPOADVERTENCIA TINYINT,
	@p_TIPOCUALQUIERA TINYINT,
	@p_PROCESONOTIFICACION TINYINT,
	@p_ESTADOABIERTA TINYINT,
	@p_ESTADOCERRADA TINYINT

	EXEC WSXML_SFG.SFGALERTA_CONSTANT
	@p_TIPOINFORMATIVO OUT,
	@p_TIPOERROR OUT,
	@p_TIPOADVERTENCIA OUT,
	@p_TIPOCUALQUIERA OUT,
	@p_PROCESONOTIFICACION OUT,
	@p_ESTADOABIERTA OUT,
	@p_ESTADOCERRADA OUT

    IF @@ROWCOUNT > 0 BEGIN
      SET @totalrecords = @@ROWCOUNT;
      
	  EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_SetTotalRecords @p_DETALLETAREAEJECUTADA, @totalrecords

      DECLARE ixpayment CURSOR FOR SELECT IDVALUE FROM @lstPAYMENTS--.First..lstPAYMENTS.Last LOOP
	  OPEN ixpayment

	  DECLARE @ixpayment__IDVALUE NUMERIC(38,0)

	 

	  FETCH NEXT FROM ixpaymentROWS INTO @ixpayment__IDVALUE

	  WHILE @@FETCH_STATUS=0 BEGIN
          DECLARE @cCODDETALLEPAGO   NUMERIC(22,0) = @ixpayment__IDVALUE;
          DECLARE @cNUMEROREFERENCIA VARCHAR(4000) /* Use -meta option MEDIOPAGOREF.NUMEROREFERENCIA%TYPE */;
          DECLARE @cFECHAPAGO VARCHAR(4000)        /* Use -meta option DETALLEPAGO.FECHAPAGO%TYPE */;
          DECLARE @cVALORPAGO VARCHAR(4000)        /* Use -meta option DETALLEPAGO.VALORPAGO%TYPE */;
          DECLARE @cCODORIGENPAGO VARCHAR(4000)    /* Use -meta option CTRLPAGO.CODORIGENPAGO%TYPE */;
          DECLARE @cCODTIPOPAGO VARCHAR(4000)      /* Use -meta option ORIGENPAGO.CODTIPOPAGO%TYPE */;
          DECLARE @cCODPUNTODEVENTA VARCHAR(4000)  /* Use -meta option DETALLEPAGO.CODPUNTODEVENTA%TYPE */;

		   DECLARE @cPAGOFACTURACION_out  NUMERIC(22,0);
		   DECLARE @lstMAESTROSFACT WSXML_SFG.NUMBERARRAY;
		   DECLARE @ixFACTURACION__IDVALUE NUMERIC(38,0)

        BEGIN
          -- Obtencion del registro de la lista
          SELECT @cNUMEROREFERENCIA = MR.NUMEROREFERENCIA, @cFECHAPAGO = DP.FECHAPAGO, @cVALORPAGO = DP.VALORPAGO, @cCODORIGENPAGO = CT.CODORIGENPAGO, @cCODTIPOPAGO = OG.CODTIPOPAGO, @cCODPUNTODEVENTA = DP.CODPUNTODEVENTA
          FROM WSXML_SFG.DETALLEPAGO DP
          INNER JOIN WSXML_SFG.CTRLPAGO CT ON (CT.ID_CTRLPAGO = DP.CODCTRLPAGO)
          INNER JOIN WSXML_SFG.ORIGENPAGO OG ON (OG.ID_ORIGENPAGO = CT.CODORIGENPAGO)
          -- Pagos no referenciados (globales) no tienen registro en MedioPagoRef
          LEFT OUTER JOIN WSXML_SFG.MEDIOPAGOREF MR ON (MR.CODDETALLEPAGO = DP.ID_DETALLEPAGO)
          WHERE DP.ID_DETALLEPAGO = @cCODDETALLEPAGO;

          IF @cCODTIPOPAGO = @xCODTIPOPAGOREFERENCIADO BEGIN
            -- 3. Pagos Referenciados:
            /* Se realiza la busqueda por el numero de referencia, y se vincula en la tabla contra el numero de facturaciones posibles
               si es un pago adelantado, igual se vincula. ConsolidaSaldos se encarga de verificar el estado de adelantado */
              --DECLARE @lstMAESTROSFACT WSXML_SFG.NUMBERARRAY;
            BEGIN
			  INSERT INTO @lstMAESTROSFACT
              SELECT ID_MAESTROFACTURACIONPDV 
			  FROM WSXML_SFG.MAESTROFACTURACIONCOMPCONSIG MFC
              INNER JOIN WSXML_SFG.MAESTROFACTURACIONPDV MFP ON (MFP.CODMAESTROFACTURACIONCOMPCONSI = MFC.ID_MAESTROFACTCOMPCONSIG)
              WHERE MFC.REFERENCIAGTECH = @cNUMEROREFERENCIA --OR MFC.REFERENCIAFIDUCIA = cNUMEROREFERENCIA
              AND MFC.ACTIVE = 1 AND MFP.ACTIVE = 1;

              IF @@ROWCOUNT > 0 BEGIN
                DECLARE ixFACTURACION CURSOR FOR SELECT IDVALUE FROM @lstMAESTROSFACT--.First..lstMAESTROSFACT.Last LOOP
				OPEN ixFACTURACION

				--DECLARE @ixFACTURACION__IDVALUE NUMERIC(38,0)

				FETCH NEXT FROM ixFACTURACION INTO @ixFACTURACION__IDVALUE

				WHILE @@FETCH_STATUS=0 BEGIN

                    DECLARE @cCODMAESTROFACTURACION NUMERIC(22,0) = @ixFACTURACION__IDVALUE;
                    --DECLARE @cCODPUNTODEVENTA       NUMERIC(22,0);
                    DECLARE @cCODPAGOFACTURACIONPDV NUMERIC(22,0);
                  BEGIN
                    SELECT @cCODPUNTODEVENTA = CODPUNTODEVENTA FROM WSXML_SFG.MAESTROFACTURACIONPDV
                    WHERE ID_MAESTROFACTURACIONPDV = @ixFACTURACION__IDVALUE

                    -- 3.1 Extraer el punto de venta de la referencia
                    EXEC WSXML_SFG.SFGDETALLEPAGO_VincularPuntoDeVenta @cCODDETALLEPAGO, @cCODPUNTODEVENTA

                    -- 3.2 Vincular a la factura
                    EXEC WSXML_SFG.SFGPAGOFACTURACIONPDV_AddRecord 
													@cCODDETALLEPAGO,
                                                    @cCODMAESTROFACTURACION,
                                                    @cVALORPAGO,
                                                    @cCODUSUARIOMODIFICACION,
                                                    @cCODPAGOFACTURACIONPDV OUT
                  END;

					FETCH NEXT FROM ixFACTURACION INTO @ixFACTURACION__IDVALUE
                END;

                CLOSE ixFACTURACION;
                DEALLOCATE ixFACTURACION;
                -- Marcar el pago como vinculado
                --SFGDETALLEPAGO.MarkPaymentAsLinked(cCODDETALLEPAGO);
              END
              ELSE BEGIN
                SET @countUNLINKEDPAYMENTS = @countUNLINKEDPAYMENTS + 1;
				SET @msg = 'No se ha encontrado facturaci?n para el pago sin vincular con referencia ' + ISNULL(@cNUMEROREFERENCIA, '')
				
                EXEC WSXML_SFG.SFGALERTA_GenerarAlerta  @p_TIPOINFORMATIVO, 'VINCULAPAGOS', @msg, @cCODUSUARIOMODIFICACION
              END 
            END;

          END
          ELSE IF @cCODTIPOPAGO = @xCODTIPOPAGONOREFRNCIADO BEGIN
            -- 4. Pago no referenciado. El punto de venta debe haber sido asignado
            IF @cCODPUNTODEVENTA IS NOT NULL BEGIN
                DECLARE @rmPAGO FLOAT = @cVALORPAGO;
                --DECLARE @lstMAESTROSFACT WSXML_SFG.NUMBERARRAY;
                DECLARE @lstBILLINGSTOLINK WSXML_SFG.NUMBERARRAY;
              BEGIN
                --SET @lstBILLINGSTOLINK = NUMBERARRAY();
                -- 4.1 Obtener la facturacion del punto de venta:
                /* Se obtiene de acuerdo a fecha, facturacion no considerada, y prioridad en linea de negocio
                   Cubre estrictamente la deuda, y el resto lo asigna a pago adelantado */

				INSERT INTO @lstMAESTROSFACT 
                SELECT ID_MAESTROFACTURACIONPDV FROM WSXML_SFG.MAESTROFACTURACIONPDV MFP
                INNER JOIN WSXML_SFG.LINEADENEGOCIO LDN ON (MFP.CODLINEADENEGOCIO = LDN.ID_LINEADENEGOCIO)
                WHERE MFP.CODPUNTODEVENTA = @cCODPUNTODEVENTA
                  AND MFP.PAGOCOMPLETO = 0
                  AND MFP.ACTIVE = 1
                  AND (MFP.NUEVOSALDOENCONTRAGTECH > 0 OR MFP.NUEVOSALDOENCONTRAFIDUCIA > 0)
                ORDER BY PRIORIDADPAGO ASC, CODCICLOFACTURACIONPDV DESC, NUEVOSALDOENCONTRAGTECH DESC, NUEVOSALDOENCONTRAFIDUCIA;

                IF @@ROWCOUNT > 0 BEGIN
                  DECLARE ixFACTURACION CURSOR FOR SELECT IDVALUE FROM @lstMAESTROSFACT
				  --.First..lstMAESTROSFACT.Last LOOP
				  OPEN ixFACTURACION

				  FETCH NEXT FROM ixFACTURACION INTO @ixFACTURACION__IDVALUE
				  WHILE @@FETCH_STATUS=0 BEGIN

                    IF @rmPAGO <= 0 BEGIN -- Si no hay restante para distribuir, no iterar mas
						BREAK;
					END 

                      SET @cCODMAESTROFACTURACION = @ixFACTURACION__IDVALUE
                      DECLARE @thisBILLINGDEBTGTECH FLOAT;
                      DECLARE @thisBILLINGDEBTFDCIA FLOAT;
                      DECLARE @thisBILLINGPLUSGTECH FLOAT;
                      DECLARE @thisBILLINGPLUSFDCIA FLOAT;
                    BEGIN
                      SELECT @thisBILLINGDEBTGTECH = NUEVOSALDOENCONTRAGTECH, @thisBILLINGDEBTFDCIA = NUEVOSALDOENCONTRAFIDUCIA, @thisBILLINGPLUSGTECH = NUEVOSALDOAFAVORGTECH, @thisBILLINGPLUSFDCIA = NUEVOSALDOAFAVORFIDUCIA
                      FROM WSXML_SFG.MAESTROFACTURACIONPDV
                      WHERE ID_MAESTROFACTURACIONPDV = @cCODMAESTROFACTURACION;

                      IF @thisBILLINGPLUSGTECH > 0 OR @thisBILLINGPLUSFDCIA > 0 BEGIN
                        -- 4.1 Si la facturacion tiene saldo a favor, se acaba de iterar y se considera pago adelantado
                        --lstBILLINGSTOLINK.Extend(1);
                        INSERT INTO @lstBILLINGSTOLINK VALUES (@cCODMAESTROFACTURACION)
                        SET @rmPAGO = 0;
                      END
                      ELSE IF (@thisBILLINGDEBTGTECH + @thisBILLINGDEBTFDCIA) > 0 AND (@thisBILLINGDEBTGTECH + @thisBILLINGDEBTFDCIA) <= @rmPAGO BEGIN
                        -- 4.2 Si el pago es mayor al valor adeudado, probablemente el pago cubrir  mas de una deuda
                        --lstBILLINGSTOLINK.Extend(1);
                        INSERT INTO @lstBILLINGSTOLINK VALUES (@cCODMAESTROFACTURACION)
                        -- Verificar por cada fiducia
                        IF @thisBILLINGDEBTGTECH > 0 AND @rmPAGO > 0 BEGIN
                          SET @rmPAGO = @rmPAGO - @thisBILLINGDEBTGTECH;
                        END 
                        IF @thisBILLINGDEBTFDCIA > 0 AND @rmPAGO > 0 BEGIN
                          SET @rmPAGO = @rmPAGO - @thisBILLINGDEBTFDCIA;
                        END 
                      END
                      ELSE IF (@thisBILLINGDEBTGTECH + @thisBILLINGDEBTFDCIA) > 0
                        AND (@thisBILLINGDEBTGTECH + @thisBILLINGDEBTFDCIA) > @rmPAGO BEGIN
                        -- 4.3 El valor del pago no alcanza a cubrir la deuda
                        --lstBILLINGSTOLINK.Extend(1);
                        INSERT INTO @lstBILLINGSTOLINK VALUES ( @cCODMAESTROFACTURACION )
                        SET @rmPAGO = 0;
                      END 
                    END;

                  FETCH NEXT FROM ixFACTURACION INTO @ixFACTURACION__IDVALUE
                  END;

                  CLOSE ixFACTURACION;
                  DEALLOCATE ixFACTURACION;

                  -- Por cada una de las facturaciones a vincular
                  IF (SELECT COUNT(*) FROM @lstBILLINGSTOLINK) > 0 BEGIN
                    DECLARE ixBILLING CURSOR FOR SELECT IDVALUE FROM @lstBILLINGSTOLINK--.First..lstBILLINGSTOLINK.Last LOOP
                        ---DECLARE @cPAGOFACTURACION_out NUMERIC(22,0);
					OPEN ixBILLING
					DECLARE @ixBILLING__IDVALUE NUMERIC(38,0)
					
					FETCH NEXT FROM ixBILLING INTO @ixBILLING__IDVALUE
					
					WHILE @@FETCH_STATUS=0 BEGIN
                        DECLARE @cCODMAESTROAVINCULAR NUMERIC(22,0) = @ixBILLING__IDVALUE;
                      BEGIN
							BEGIN TRY
								EXEC WSXML_SFG.SFGPAGOFACTURACIONPDV_AddRecord 
															@cCODDETALLEPAGO,
															@cCODMAESTROAVINCULAR,
															@cVALORPAGO,
															@cCODUSUARIOMODIFICACION,
															@cPAGOFACTURACION_out OUT
							END TRY
							BEGIN CATCH
								SET @msg = '-20054 Error durante la vinculaci?n del pago no referenciado ' + ISNULL(WSXML_SFG.ORIGENPAGO_NOMBRE_F(@cCODORIGENPAGO), '') + ' por el valor de ' + ISNULL(@cVALORPAGO, '') + ' no se pudo vincular: ' + isnull(ERROR_MESSAGE ( ), '')
								RAISERROR(@msg, 16, 1);
							END CATCH
                      END;

                    FETCH NEXT FROM ixBILLING INTO @ixBILLING__IDVALUE
                    END;

                    CLOSE ixBILLING;
                    DEALLOCATE ixBILLING;
                  END 

                  -- 5. Si el valor del pago sigue siendo mayor a 0, es un pago adelantado, y se considera para la ultima facturacion
                  IF @rmPAGO > 0 BEGIN
						DECLARE @cCODMAESTROADELANTADO NUMERIC(22,0);
						--DECLARE @cPAGOFACTURACION_out  NUMERIC(22,0);
						BEGIN
						BEGIN TRY
						  SELECT @cCODMAESTROADELANTADO = ID_MAESTROFACTURACIONPDV
						  FROM (
								SELECT ID_MAESTROFACTURACIONPDV, ROW_NUMBER() OVER(ORDER BY CFP.FECHAEJECUCION DESC, LDN.PRIORIDADPAGO) AS "Row Number" 
								FROM WSXML_SFG.MAESTROFACTURACIONPDV MFP
									INNER JOIN WSXML_SFG.CICLOFACTURACIONPDV CFP ON (MFP.CODCICLOFACTURACIONPDV = CFP.ID_CICLOFACTURACIONPDV)
									INNER JOIN WSXML_SFG.LINEADENEGOCIO LDN ON (MFP.CODLINEADENEGOCIO = LDN.ID_LINEADENEGOCIO)
								WHERE MFP.CODPUNTODEVENTA = @cCODPUNTODEVENTA AND CFP.ACTIVE = 1 AND MFP.ACTIVE = 1
								--ORDER BY CFP.FECHAEJECUCION DESC, LDN.PRIORIDADPAGO
								) s
                     

						  EXEC WSXML_SFG.SFGPAGOFACTURACIONPDV_AddRecord @cCODDETALLEPAGO,
														  @cCODMAESTROADELANTADO,
														  @cVALORPAGO,
														  @cCODUSUARIOMODIFICACION,
														  @cPAGOFACTURACION_out OUT
						  IF @@ROWCOUNT = 0 BEGIN
							SET @msg = '-20054 No se encontró facturación v lida para vincular el pago adelantado del punto ' + ISNULL(WSXML_SFG.PUNTODEVENTA_CODIGO_F(@cCODPUNTODEVENTA), '') + ' de tipo ' + ISNULL(WSXML_SFG.ORIGENPAGO_NOMBRE_F(@cCODORIGENPAGO), '') + ' por el valor de ' + ISNULL(@cVALORPAGO, '') + ': ' + isnull(@msg, '') 
							RAISERROR(@msg, 16, 1);
						  END
                    
						END TRY
						BEGIN CATCH
						  -- Esa platica se perdio
						  SET @msg = '-20054 Ocurrió un error buscando una facturación para vincular el pago adelantado del punto ' + ISNULL(WSXML_SFG.PUNTODEVENTA_CODIGO_F(@cCODPUNTODEVENTA), '') + ' de tipo ' + ISNULL(WSXML_SFG.ORIGENPAGO_NOMBRE_F(@cCODORIGENPAGO), '') + ' por el valor de ' + ISNULL(@cVALORPAGO, '') + ': ' + isnull(ERROR_MESSAGE ( ), '') 
						  RAISERROR(@msg, 16, 1);
						END CATCH
                    END;

                  END 
                END
                ELSE BEGIN
                  --EL PAGO ES ADELANTADO, YA QUE NO HAY FACTURACION SIN CONSIDERAR PARA EL PUNTO DE VENTA
                    --DECLARE @cCODMAESTROADELANTADO NUMERIC(22,0);
                    --DECLARE @cPAGOFACTURACION_out  NUMERIC(22,0);
                  BEGIN
					BEGIN TRY
						SELECT @cCODMAESTROADELANTADO = ID_MAESTROFACTURACIONPDV
						FROM (SELECT ID_MAESTROFACTURACIONPDV, ROW_NUMBER() OVER(ORDER BY CFP.FECHAEJECUCION DESC, LDN.PRIORIDADPAGO) AS "Row Number"
						FROM WSXML_SFG.MAESTROFACTURACIONPDV MFP
							  INNER JOIN WSXML_SFG.CICLOFACTURACIONPDV CFP ON (MFP.CODCICLOFACTURACIONPDV = CFP.ID_CICLOFACTURACIONPDV)
							  INNER JOIN WSXML_SFG.LINEADENEGOCIO LDN ON (MFP.CODLINEADENEGOCIO = LDN.ID_LINEADENEGOCIO)
							  WHERE MFP.CODPUNTODEVENTA = @cCODPUNTODEVENTA AND CFP.ACTIVE = 1 AND MFP.ACTIVE = 1
							  --ORDER BY CFP.FECHAEJECUCION DESC, LDN.PRIORIDADPAGO
							  ) s
					   ;

						EXEC WSXML_SFG.SFGPAGOFACTURACIONPDV_AddRecord @cCODDETALLEPAGO,
														@cCODMAESTROADELANTADO,
														@cVALORPAGO,
														@cCODUSUARIOMODIFICACION,
														@cPAGOFACTURACION_out OUT
						IF @@ROWCOUNT = 0 BEGIN
							SET @msg = '-20054 No se encontr? facturaci?n v lida para vincular el pago adelantado del punto ' + ISNULL(WSXML_SFG.PUNTODEVENTA_CODIGO_F(@cCODPUNTODEVENTA), '') + ' de tipo ' + ISNULL(WSXML_SFG.ORIGENPAGO_NOMBRE_F(@cCODORIGENPAGO), '') + ' por el valor de ' + ISNULL(@cVALORPAGO, '') + ': ' + isnull(@msg, '') 
							RAISERROR(@msg, 16, 1);
						END
					END TRY
					BEGIN CATCH
						-- Esa platica se perdio
						SET @msg = '-20054 Ocurri? un error buscando una facturaci?n para vincular el pago adelantado del punto ' + ISNULL(WSXML_SFG.PUNTODEVENTA_CODIGO_F(@cCODPUNTODEVENTA), '') + ' de tipo ' + ISNULL(WSXML_SFG.ORIGENPAGO_NOMBRE_F(@cCODORIGENPAGO), '') + ' por el valor de ' + ISNULL(@cVALORPAGO, '') + ': ' + isnull(@msg, '') 
						RAISERROR(@msg, 16, 1);
					END CATCH
                  END;

                END 
                -- Marcar el pago como vinculado
                --SFGDETALLEPAGO.MarkPaymentAsLinked(cCODDETALLEPAGO);
              END;

            END
            ELSE BEGIN
				SET @msg = 'El pago de tipo ' + ISNULL(WSXML_SFG.ORIGENPAGO_NOMBRE_F(@cCODORIGENPAGO), '') + ' por el valor de ' + ISNULL(@cVALORPAGO, '') + ' no se puede vincular, ya que no tiene un punto de venta asociado'
              EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @p_TIPOADVERTENCIA, 'VINCULAPAGOS', @msg , 1
              SET @countUNLINKEDPAYMENTS = @countUNLINKEDPAYMENTS + 1;
            END 
          END 

          SET @countrecords = @countrecords + 1;
          IF (@countrecords % @waitnrecords) = 0 BEGIN
            EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_UpdateCountRecords @p_DETALLETAREAEJECUTADA, @countrecords
            --COMMIT;
          END 

        END;

      FETCH NEXT FROM ixpaymentROWS INTO @ixpayment__IDVALUE
      END;

      CLOSE ixpayment;
      DEALLOCATE ixpayment;
    END 

    IF @countUNLINKEDPAYMENTS > 0 BEGIN
		SET @msg = 'Se ha terminado de vincular los pagos correctamente. Sin embargo, no se pudo encontrar vinculo para ' + ISNULL(@countUNLINKEDPAYMENTS, '') + ' pagos.'
      EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_FinalizeExecution @p_DETALLETAREAEJECUTADA,  @msg 
      SET @p_RETVALUE_out = @p_FINALIZADAADVERTENCIA;
    END
    ELSE BEGIN
		EXEC  WSXML_SFG.SFGDETALLETAREAEJECUTADA_FinalizeExecution @p_DETALLETAREAEJECUTADA, 'Se ha terminado de vincular los pagos correctamente. Se logr? encontrar un v!nculo para todos los pagos cargados.'
		SET @p_RETVALUE_out = @p_FINALIZADAOK;
    END 
  END TRY
  BEGIN CATCH
  
    SET @msg = ERROR_MESSAGE()  ;
    EXEC WSXML_SFG.SFGDETALLETAREAEJECUTADA_FinalizeExecution @p_DETALLETAREAEJECUTADA, @msg
    SET @p_RETVALUE_out = @p_FINALIZADAFALLO;
  END CATCH
  END;
GO