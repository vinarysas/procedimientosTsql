USE SFGPRODU;
--  DDL for Package Body SFGALERTA
--------------------------------------------------------

  /* PACKAGE BODY WSXML_SFG.SFGALERTA */ 

IF OBJECT_ID('WSXML_SFG.SFGALERTA_CONSTANT', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGALERTA_CONSTANT;
GO

  CREATE PROCEDURE WSXML_SFG.SFGALERTA_CONSTANT(
	@p_TIPOINFORMATIVO TINYINT OUT,
	@p_TIPOERROR TINYINT OUT,
	@p_TIPOADVERTENCIA TINYINT OUT,
	@p_TIPOCUALQUIERA TINYINT OUT,
	@p_PROCESONOTIFICACION TINYINT OUT,
	@p_ESTADOABIERTA TINYINT OUT,
	@p_ESTADOCERRADA TINYINT OUT
    )
AS
BEGIN
SET NOCOUNT ON;
    
    -- Return the number output parameter
	SET @p_TIPOINFORMATIVO = 1;
	SET @p_TIPOERROR = 2;
	SET @p_TIPOADVERTENCIA = 3;
	SET @p_TIPOCUALQUIERA = 4;
	SET @p_PROCESONOTIFICACION = 1;

	SET @p_ESTADOABIERTA = 2;
	SET @p_ESTADOCERRADA = 3;

END;
GO

IF OBJECT_ID('WSXML_SFG.SFGALERTA_AddRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGALERTA_AddRecord;
GO

CREATE     PROCEDURE WSXML_SFG.SFGALERTA_AddRecord(@p_CODTIPOALERTA          NUMERIC(22,0),
                      @p_CONTENIDO              NVARCHAR(2000),
                      @p_MENSAJEDETALLADO       NVARCHAR(2000),
                      @p_CODPROCESO             NUMERIC(22,0),
                      @p_CODUSUARIOMODIFICACION NUMERIC(22,0),
                      @p_CODESTADOALERTA        NUMERIC(22,0),
                      @p_CODUSUARIODESTINO      NUMERIC(22,0),
                      @p_ID_ALERTA_out          NUMERIC(22,0) OUT) AS
  BEGIN
  SET NOCOUNT ON;
    INSERT INTO WSXML_SFG.ALERTA 
		(CODTIPOALERTA,CONTENIDO,MENSAJEDETALLADO,CODPROCESO,CODUSUARIOMODIFICACION,CODESTADOALERTA,CODUSUARIODESTINO)
		
    VALUES (@p_CODTIPOALERTA,@p_CONTENIDO,@p_MENSAJEDETALLADO,@p_CODPROCESO,@p_CODUSUARIOMODIFICACION,@p_CODESTADOALERTA,@p_CODUSUARIODESTINO);
    SET @p_ID_ALERTA_out = SCOPE_IDENTITY();
  END;
GO

IF OBJECT_ID('WSXML_SFG.SFGALERTA_UpdateRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGALERTA_UpdateRecord;
GO

CREATE     PROCEDURE WSXML_SFG.SFGALERTA_UpdateRecord(@pk_ID_ALERTA             NUMERIC(22,0),
                         @p_CODTIPOALERTA          NUMERIC(22,0),
                         @p_CONTENIDO              NVARCHAR(2000),
                         @p_CODPROCESO             NUMERIC(22,0),
                         @p_CODUSUARIOMODIFICACION NUMERIC(22,0),
                         @p_ACTIVE                 NUMERIC(22,0),
                         @p_CODESTADOALERTA        NUMERIC(22,0),
                         @p_CODUSUARIODESTINO      NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
    -- Update the record with the passed parameters
    UPDATE WSXML_SFG.ALERTA
       SET CODTIPOALERTA          = @p_CODTIPOALERTA,
           CONTENIDO              = @p_CONTENIDO,
           CODPROCESO             = @p_CODPROCESO,
           CODUSUARIOMODIFICACION = @p_CODUSUARIOMODIFICACION,
           ACTIVE                 = @p_ACTIVE,
           CODESTADOALERTA        = @p_CODESTADOALERTA,
           CODUSUARIODESTINO      = @p_CODUSUARIODESTINO
     WHERE ID_ALERTA = @pk_ID_ALERTA;

    IF @@rowcount = 0 BEGIN
      RAISERROR('-20054 The record no longer exists.', 16, 1);
    END 
    IF @@rowcount > 1 BEGIN
      RAISERROR('-20053 Duplicate object instances.', 16, 1);
    END 
  END;
GO

IF OBJECT_ID('WSXML_SFG.SFGALERTA_GetRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGALERTA_GetRecord;
GO
CREATE     PROCEDURE WSXML_SFG.SFGALERTA_GetRecord(@pk_ID_ALERTA NUMERIC(22,0)) AS
 BEGIN
    DECLARE @l_count INTEGER;
   
  SET NOCOUNT ON;
    SELECT @l_count = COUNT(*) FROM WSXML_SFG.ALERTA WHERE ID_ALERTA = @pk_ID_ALERTA;
    IF @l_count = 0 BEGIN
      RAISERROR('-20054 The record no longer exists.', 16, 1);
    END 
    IF @l_count > 1 BEGIN
      RAISERROR('-20053 Duplicate object instances.', 16, 1);
    END 

     
	SELECT A.ID_ALERTA,
             A.CODTIPOALERTA,
             TA.NOMTIPOALERTA,
             A.CONTENIDO,
             A.CODPROCESO,
             P.NOMPROCESO,
             A.FECHAHORAMODIFICACION,
             A.CODUSUARIOMODIFICACION,
             A.ACTIVE,
             A.CODESTADOALERTA,
             E.NOMESTADOALERTA,
             A.CODUSUARIODESTINO
      FROM WSXML_SFG.ALERTA A
      LEFT OUTER JOIN WSXML_SFG.TIPOALERTA TA
        ON (TA.ID_TIPOALERTA = A.CODTIPOALERTA)
      LEFT OUTER JOIN WSXML_SFG.PROCESO P
        ON (P.ID_PROCESO = A.CODPROCESO)
      LEFT OUTER JOIN WSXML_SFG.ESTADOALERTA E
        ON (E.ID_ESTADOALERTA = A.CODESTADOALERTA)
      WHERE A.ID_ALERTA = @pk_ID_ALERTA;
	  
  END;
GO

IF OBJECT_ID('WSXML_SFG.SFGALERTA_GetList', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGALERTA_GetList;
GO
CREATE     PROCEDURE WSXML_SFG.SFGALERTA_GetList(@p_active NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
     
	  SELECT ID_ALERTA,
             CODTIPOALERTA,
             CONTENIDO,
             CODPROCESO,
             FECHAHORAMODIFICACION,
             CODUSUARIOMODIFICACION,
             ACTIVE,
             CODESTADOALERTA,
             CODUSUARIODESTINO
        FROM WSXML_SFG.ALERTA
       WHERE ACTIVE = CASE WHEN @p_active = -1 THEN ACTIVE ELSE @p_active END;
	   
  END;
GO

IF OBJECT_ID('WSXML_SFG.SFGALERTA_GetListByUsuario', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGALERTA_GetListByUsuario;
GO
CREATE     PROCEDURE WSXML_SFG.SFGALERTA_GetListByUsuario(@p_active NUMERIC(22,0), @p_CODUSUARIODESTINO NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
	 
      SELECT A.ID_ALERTA,
             A.CODTIPOALERTA,
             TA.NOMTIPOALERTA,
             A.CONTENIDO,
             A.CODPROCESO,
             P.NOMPROCESO,
             A.FECHAHORAMODIFICACION,
             A.CODUSUARIOMODIFICACION,
             A.ACTIVE,
             A.CODESTADOALERTA,
             E.NOMESTADOALERTA,
             A.CODUSUARIODESTINO
      FROM WSXML_SFG.ALERTA A
      LEFT OUTER JOIN WSXML_SFG.TIPOALERTA TA
        ON (TA.ID_TIPOALERTA = A.CODTIPOALERTA)
      LEFT OUTER JOIN WSXML_SFG.PROCESO P
        ON (P.ID_PROCESO = A.CODPROCESO)
      LEFT OUTER JOIN WSXML_SFG.ESTADOALERTA E
        ON (E.ID_ESTADOALERTA = A.CODESTADOALERTA)
      WHERE A.CODUSUARIODESTINO = @p_CODUSUARIODESTINO
        AND A.ACTIVE = CASE WHEN @p_active = -1 THEN A.ACTIVE ELSE @p_active END
      ORDER BY CODESTADOALERTA;
	
  END;
GO

IF OBJECT_ID('WSXML_SFG.SFGALERTA_GetListByUsuarioEstado', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGALERTA_GetListByUsuarioEstado;
GO
CREATE     PROCEDURE WSXML_SFG.SFGALERTA_GetListByUsuarioEstado(@p_active NUMERIC(22,0), @p_CODUSUARIODESTINO NUMERIC(22,0), @p_CODESTADOALERTA NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
	 
      SELECT A.ID_ALERTA,
             A.CODTIPOALERTA,
             TA.NOMTIPOALERTA,
             A.CONTENIDO,
             A.CODPROCESO,
             P.NOMPROCESO,
             A.FECHAHORAMODIFICACION,
             A.CODUSUARIOMODIFICACION,
             A.ACTIVE,
             A.CODESTADOALERTA,
             E.NOMESTADOALERTA,
             A.CODUSUARIODESTINO
      FROM WSXML_SFG.ALERTA A
      LEFT OUTER JOIN WSXML_SFG.TIPOALERTA TA
        ON (TA.ID_TIPOALERTA = A.CODTIPOALERTA)
      LEFT OUTER JOIN WSXML_SFG.PROCESO P
        ON (P.ID_PROCESO = A.CODPROCESO)
      LEFT OUTER JOIN WSXML_SFG.ESTADOALERTA E
        ON (E.ID_ESTADOALERTA = A.CODESTADOALERTA)
      WHERE A.CODUSUARIODESTINO = @p_CODUSUARIODESTINO
        AND A.CODESTADOALERTA = CASE WHEN @p_CODESTADOALERTA = -1 THEN A.CODESTADOALERTA ELSE @p_CODESTADOALERTA END
        AND A.ACTIVE = CASE WHEN @p_active = -1 THEN A.ACTIVE ELSE @p_active END;
	

  END;
GO


  IF OBJECT_ID('WSXML_SFG.SFGALERTA_GenerarAlerta', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGALERTA_GenerarAlerta;
GO

CREATE     PROCEDURE WSXML_SFG.SFGALERTA_GenerarAlerta(@p_CODTIPOALERTA          NUMERIC(22,0),
                          @p_NOMPROCESO             NVARCHAR(2000),
                          @p_CONTENIDO              NVARCHAR(2000),
                          @p_CODUSUARIOMODIFICACION NUMERIC(22,0)) AS
 BEGIN

	SET NOCOUNT ON;
	EXEC WSXML_SFG.SFGALERTA_GenerarAlerta_1 @p_CODTIPOALERTA, @p_NOMPROCESO, @p_CONTENIDO, NULL, @p_CODUSUARIOMODIFICACION
  END;
GO

IF OBJECT_ID('WSXML_SFG.SFGALERTA_GenerarAlerta_1', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGALERTA_GenerarAlerta_1;
GO

CREATE     PROCEDURE WSXML_SFG.SFGALERTA_GenerarAlerta_1(@p_CODTIPOALERTA          NUMERIC(22,0),
                          @p_NOMPROCESO             NVARCHAR(2000),
                          @p_CONTENIDO              NVARCHAR(2000),
                          @p_DETALLE                NVARCHAR(2000),
                          @p_CODUSUARIOMODIFICACION NUMERIC(22,0)
) AS
 BEGIN
    DECLARE @cCODPROCESO       NUMERIC(22,0);
    DECLARE @cDSCPROCESO       NVARCHAR(1000);
    DECLARE @cCODUSUARIO       NUMERIC(22,0);
    DECLARE @cCODALERTA        NUMERIC(22,0);
    DECLARE @msgprefix NVARCHAR(100) = '';
	
	DECLARE @c_TIPOINFORMATIVO NUMERIC(22,0);
	DECLARE @c_TIPOERROR NUMERIC(22,0);
	DECLARE @c_TIPOADVERTENCIA NUMERIC(22,0);
	DECLARE @c_TIPOCUALQUIERA NUMERIC(22,0);
	DECLARE @c_PROCESONOTIFICACION NUMERIC(22,0);
	DECLARE @c_ESTADOABIERTA NUMERIC(22,0);
	DECLARE @c_ESTADOCERRADA NUMERIC(22,0);
   
  SET NOCOUNT ON;
  
	EXEC WSXML_SFG.SFGALERTA_CONSTANT 
		@c_TIPOINFORMATIVO OUTPUT, @c_TIPOERROR OUTPUT, @c_TIPOADVERTENCIA OUTPUT, @c_TIPOCUALQUIERA OUTPUT, @c_PROCESONOTIFICACION OUTPUT,
		@c_ESTADOABIERTA OUTPUT, @c_ESTADOCERRADA OUTPUT
	
    -- Prefijo
    IF @p_CODTIPOALERTA = @c_TIPOINFORMATIVO BEGIN
      SET @msgprefix = 'Mensaje informativo de ';
    END
    ELSE IF @p_CODTIPOALERTA = @c_TIPOERROR BEGIN
      SET @msgprefix = 'Error durante la ejecucion de ';
    END
    ELSE IF @p_CODTIPOALERTA = @c_TIPOADVERTENCIA BEGIN
      SET @msgprefix = 'Advertencia durante la ejecucion de ';
    END

    -- Generacion del registro
    BEGIN
		SELECT @cCODPROCESO = ID_PROCESO, @cDSCPROCESO = DESCRIPCION FROM WSXML_SFG.PROCESO WHERE NOMPROCESO = @p_NOMPROCESO;
		IF @cCODPROCESO > 0 BEGIN

        -- Obtener usuario para asignar alerta
			DECLARE @cUSERNAME NVARCHAR(1000);
	
			SELECT @cCODUSUARIO = (SELECT ISNULL(CODUSUARIORESPONSABLE,0) FROM WSXML_SFG.PROCESO WHERE ID_PROCESO = @cCODPROCESO)
			IF(@cCODUSUARIO = 0)
			BEGIN
				EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'UsuarioAlerta', @cUSERNAME OUTPUT;
				EXEC WSXML_SFG.SFGUSUARIO_GetCodigoByNomUsuario @cUSERNAME, @cCODUSUARIO OUTPUT;
			END;
		
		SET @p_DETALLE =  ISNULL(@p_DETALLE, 'N/A')
		SET @cCODUSUARIO = ISNULL(@cCODUSUARIO, 1)
        -- Registro de alerta
			EXEC WSXML_SFG.SFGALERTA_AddRecord 
				@p_CODTIPOALERTA, @p_CONTENIDO, @p_DETALLE, @cCODPROCESO, @p_CODUSUARIOMODIFICACION, @c_ESTADOABIERTA, @cCODUSUARIO, @cCODALERTA OUTPUT
		END
    END;

    -- Verificar las notificaciones que genera
	DECLARE @SUCCESS NUMERIC(38,0) = -1;
	DECLARE @cCODALERTANOTIFICACIONDETALLE NUMERIC(22,0);
	DECLARE @ID_ALERTANOTIFICACION INT;
	DECLARE @CODTIPONOTIFICACION INT;
	DECLARE @NOMTIPONOTIFICACION NVARCHAR(255);
	DECLARE @DESTINO NVARCHAR(1024);
    BEGIN

		DECLARE tNOTIFICACION CURSOR FOR 
			SELECT ID_ALERTANOTIFICACION, CODTIPONOTIFICACION, NOMTIPONOTIFICACION, DESTINO 
			FROM WSXML_SFG.ALERTANOTIFICACION AN
				LEFT OUTER JOIN WSXML_SFG.TIPONOTIFICACION ON CODTIPONOTIFICACION = ID_TIPONOTIFICACION
			WHERE CODPROCESO = @cCODPROCESO
				AND (CODTIPOALERTA = @p_CODTIPOALERTA OR CODTIPOALERTA = @c_TIPOCUALQUIERA)
				AND AN.ACTIVE = 1; 
		OPEN tNOTIFICACION;



		FETCH tNOTIFICACION INTO @ID_ALERTANOTIFICACION, @CODTIPONOTIFICACION, @NOMTIPONOTIFICACION, @DESTINO
			WHILE @@FETCH_STATUS=0
				BEGIN
					DECLARE @c_EMAIL TINYINT;
					DECLARE @c_SMS TINYINT

					EXEC WSXML_SFG.SFGTIPONOTIFICACION_CONSTANT @c_EMAIL OUTPUT, @c_SMS OUTPUT
					-- Notificar
					SET @msgprefix = isnull(@msgprefix, '') + ISNULL(@cDSCPROCESO, '');

					IF @CODTIPONOTIFICACION = @c_EMAIL BEGIN
						EXEC WSXML_SFG.SFGENVIOCORREO_AddCorreo @cCODALERTA, @DESTINO, @msgprefix, @p_CONTENIDO, NULL, @p_CODUSUARIOMODIFICACION, @SUCCESS OUT
					END
					ELSE IF @CODTIPONOTIFICACION = @c_SMS BEGIN
						EXEC WSXML_SFG.SFGENVIOCORREO_AddSMS @cCODALERTA, @DESTINO, @msgprefix, @p_CONTENIDO, NULL, @p_CODUSUARIOMODIFICACION, @SUCCESS OUT
					END
					ELSE BEGIN
						SELECT NULL; -- No sabemos como mas notificar
					END 
					
					IF @SUCCESS >= 0 AND @cCODALERTA > 0 BEGIN
						EXEC WSXML_SFG.SFGALERTANOTIFICACIONDETALLE_AddRecord 
							@ID_ALERTANOTIFICACION,@cCODALERTA,@p_CODUSUARIOMODIFICACION, @p_ID_ALERTANOTIFICACIONDET_out = @cCODALERTANOTIFICACIONDETALLE OUTPUT
					END 
		FETCH tNOTIFICACION INTO @ID_ALERTANOTIFICACION, @CODTIPONOTIFICACION, @NOMTIPONOTIFICACION, @DESTINO
		END;

		CLOSE tNOTIFICACION;
		DEALLOCATE tNOTIFICACION;
    END


    -- Notificar por correo al responsable del proceso, dependiendo de parametros
	DECLARE @NOTIFICARINFORMATIVO VARCHAR(4000) -- Use -meta option PARAMETRO.VALOR%TYPE  = '0';
    DECLARE @NOTIFICARADVERTENCIA VARCHAR(4000) -- Use -meta option PARAMETRO.VALOR%TYPE  = '0';
    DECLARE @EMAILRESPONSABLE NVARCHAR(1000);
    --DECLARE @SUCCESS NUMERIC(22,0);
    BEGIN TRY
	
		BEGIN TRY

		  -- Obtener parametros
			BEGIN
				BEGIN TRY
					EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'NotificarResponsableInformativo', @NOTIFICARINFORMATIVO;
					EXEC WSXML_SFG.SFGPARAMETRO_GetValorByKey 'NotificarResponsableAdvertencia', @NOTIFICARADVERTENCIA;
				END TRY
				BEGIN CATCH 
					SET @NOTIFICARINFORMATIVO = '0';
					SET @NOTIFICARADVERTENCIA = '0';
				END CATCH
			END

			SELECT @EMAILRESPONSABLE = U.EMAIL 
			FROM WSXML_SFG.PROCESO
				LEFT OUTER JOIN WSXML_SFG.USUARIO U ON CODUSUARIORESPONSABLE = ID_USUARIO
			WHERE ID_PROCESO = @cCODPROCESO;

			IF (@p_CODTIPOALERTA = @c_TIPOINFORMATIVO AND @NOTIFICARINFORMATIVO = '1')
				OR (@p_CODTIPOALERTA = @c_TIPOADVERTENCIA AND @NOTIFICARADVERTENCIA = '1')
				OR (@p_CODTIPOALERTA = @c_TIPOERROR) 
			BEGIN
				
				SET  @msgprefix = isnull(@msgprefix, '') + ISNULL(@cDSCPROCESO, '')
				EXEC WSXML_SFG.SFGENVIOCORREO_AddCorreo @cCODALERTA, @EMAILRESPONSABLE, @msgprefix, @p_CONTENIDO, NULL, @p_CODUSUARIOMODIFICACION, @SUCCESS OUT
			END 

			IF @SUCCESS >= 0 AND @cCODALERTA > 0 BEGIN
				SELECT NULL; -- Success! Guardar exito?
			END 
		END TRY
		BEGIN CATCH SELECT NULL END CATCH
    END TRY
	BEGIN CATCH
		DECLARE @msg NVARCHAR(2000);
		BEGIN
			SET @msg = 'Error in GenerarAlerta: ' + isnull(ERROR_MESSAGE(),'');
			EXEC WSXML_SFG.SFGTMPTRACE_TraceLog @msg;
		END;
	END CATCH
END;
GO

IF OBJECT_ID('WSXML_SFG.SFGALERTA_GetListByUsuarioEstadoPager', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGALERTA_GetListByUsuarioEstadoPager;
GO

CREATE     PROCEDURE WSXML_SFG.SFGALERTA_GetListByUsuarioEstadoPager(@p_active NUMERIC(22,0), @p_CODUSUARIODESTINO NUMERIC(22,0), @p_CODESTADOALERTA NUMERIC(22,0), @start_row NUMERIC(22,0), @end_row NUMERIC(22,0), @p_cur CURSOR VARYING  OUTPUT) AS
  BEGIN
  SET NOCOUNT ON;
	
      SELECT ID_ALERTA,
             CODTIPOALERTA,
             NOMTIPOALERTA,
             CONTENIDO,
             CODPROCESO,
             NOMPROCESO,
             FECHAHORAMODIFICACION,
             CODUSUARIOMODIFICACION,
             ACTIVE,
             CODESTADOALERTA,
             NOMESTADOALERTA,
             CODUSUARIODESTINO,
             total_rows,
             row_counter
		FROM (
			SELECT ID_ALERTA,
				CODTIPOALERTA,
				NOMTIPOALERTA,
				CONTENIDO,
				CODPROCESO,
				NOMPROCESO,
				FECHAHORAMODIFICACION,
				CODUSUARIOMODIFICACION,
				ACTIVE,
				CODESTADOALERTA,
				NOMESTADOALERTA,
				CODUSUARIODESTINO,
				total_rows,
				--rownum row_counter
				ROW_NUMBER() OVER(ORDER BY ID_ESTADOALERTA ASC, ORDEN ASC) row_counter
            FROM (
				SELECT A.ID_ALERTA,
					A.CODTIPOALERTA,
					TA.NOMTIPOALERTA,
					A.CONTENIDO,
					A.CODPROCESO,
					P.NOMPROCESO,
					A.FECHAHORAMODIFICACION,
					A.CODUSUARIOMODIFICACION,
					A.ACTIVE,
					A.CODESTADOALERTA,
					E.NOMESTADOALERTA,
					A.CODUSUARIODESTINO,
					E.ID_ESTADOALERTA, 
					TA.ORDEN,
					count(*) OVER() total_rows
                FROM WSXML_SFG.ALERTA A
                    LEFT OUTER JOIN WSXML_SFG.TIPOALERTA TA ON (TA.ID_TIPOALERTA = A.CODTIPOALERTA)
                    LEFT OUTER JOIN WSXML_SFG.PROCESO P ON (P.ID_PROCESO = A.CODPROCESO)
                    LEFT OUTER JOIN WSXML_SFG.ESTADOALERTA E ON (E.ID_ESTADOALERTA = A.CODESTADOALERTA)
                WHERE A.CODUSUARIODESTINO = @p_CODUSUARIODESTINO
                      AND A.CODESTADOALERTA = CASE WHEN @p_CODESTADOALERTA = -1 THEN A.CODESTADOALERTA ELSE @p_CODESTADOALERTA END
                      AND A.ACTIVE = CASE WHEN @p_active = -1 THEN A.ACTIVE ELSE @p_active END
                --ORDER BY E.ID_ESTADOALERTA, TA.ORDEN
			) s
		) s
    WHERE row_counter between @start_row and @end_row;

  END;
GO