USE SFGPRODU;
--  DDL for Package Body SFGPLANTILLAPRODUCTO
--------------------------------------------------------

  /* PACKAGE BODY WSXML_SFG.SFGPLANTILLAPRODUCTO */ 

  IF OBJECT_ID('WSXML_SFG.SFGPLANTILLAPRODUCTO_AddRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGPLANTILLAPRODUCTO_AddRecord;
GO

CREATE     PROCEDURE WSXML_SFG.SFGPLANTILLAPRODUCTO_AddRecord(@p_NOMPLANTILLAPRODUCTO     NVARCHAR(2000),
                      @p_CODUSUARIOMODIFICACION   NUMERIC(22,0),
                      @p_ID_PLANTILLAPRODUCTO_out NUMERIC(22,0) OUT) AS
  BEGIN
  SET NOCOUNT ON;
    INSERT INTO WSXML_SFG.PLANTILLAPRODUCTO
      (
       NOMPLANTILLAPRODUCTO,
       CODUSUARIOMODIFICACION)
    VALUES
      (
       @p_NOMPLANTILLAPRODUCTO,
       @p_CODUSUARIOMODIFICACION);
    SET @p_ID_PLANTILLAPRODUCTO_out = SCOPE_IDENTITY();

  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGPLANTILLAPRODUCTO_UpdateRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGPLANTILLAPRODUCTO_UpdateRecord;
GO

CREATE     PROCEDURE WSXML_SFG.SFGPLANTILLAPRODUCTO_UpdateRecord(@pk_ID_PLANTILLAPRODUCTO  NUMERIC(22,0),
                         @p_NOMPLANTILLAPRODUCTO   NVARCHAR(2000),
                         @p_CODUSUARIOMODIFICACION NUMERIC(22,0),
                         @p_ACTIVE                 NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
    -- Update the record with the given parameters
    UPDATE WSXML_SFG.PLANTILLAPRODUCTO
       SET NOMPLANTILLAPRODUCTO   = @p_NOMPLANTILLAPRODUCTO,
           CODUSUARIOMODIFICACION = @p_CODUSUARIOMODIFICACION,
           ACTIVE                 = @p_ACTIVE
     WHERE ID_PLANTILLAPRODUCTO = @pk_ID_PLANTILLAPRODUCTO;

    -- Make sure only one record is affected
    IF @@rowcount = 0 BEGIN
      RAISERROR('-20054 The record no longer exists.', 16, 1);
    END 
    IF @@rowcount > 1 BEGIN
      RAISERROR('-20053 Duplicate object instances.', 16, 1);
    END 

  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGPLANTILLAPRODUCTO_GetRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGPLANTILLAPRODUCTO_GetRecord;
GO

CREATE     PROCEDURE WSXML_SFG.SFGPLANTILLAPRODUCTO_GetRecord(@pk_ID_PLANTILLAPRODUCTO NUMERIC(22,0)
                                           ) AS
 BEGIN
    DECLARE @l_count INTEGER;
   
  SET NOCOUNT ON;

    -- Get the rowcount first and make sure
    -- only one row is returned
    SELECT @l_count = count(*)
      FROM WSXML_SFG.PLANTILLAPRODUCTO
     WHERE ID_PLANTILLAPRODUCTO = @pk_ID_PLANTILLAPRODUCTO;

    IF @l_count = 0 BEGIN
      RAISERROR('-20054 The record no longer exists.', 16, 1);
    END 

    IF @l_count > 1 BEGIN
      RAISERROR('-20053 Duplicate object instances.', 16, 1);
    END 

    -- Get the row from the query.  Checksum value will be
    -- returned along the row data to support concurrency.
  	
      SELECT ID_PLANTILLAPRODUCTO,
             NOMPLANTILLAPRODUCTO,
             FECHAHORAMODIFICACION,
             CODUSUARIOMODIFICACION,
             ACTIVE
        FROM WSXML_SFG.PLANTILLAPRODUCTO
       WHERE ID_PLANTILLAPRODUCTO = @pk_ID_PLANTILLAPRODUCTO;
	;	   
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGPLANTILLAPRODUCTO_GetRecordWithData', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGPLANTILLAPRODUCTO_GetRecordWithData;
GO

CREATE     PROCEDURE WSXML_SFG.SFGPLANTILLAPRODUCTO_GetRecordWithData(@pk_ID_PLANTILLAPRODUCTO NUMERIC(22,0)
                                                   ) AS
 BEGIN
    DECLARE @l_count INTEGER;
   
  SET NOCOUNT ON;

    -- Get the rowcount first and make sure
    -- only one row is returned
    SELECT @l_count = count(*)
      FROM WSXML_SFG.PLANTILLAPRODUCTO
     WHERE ID_PLANTILLAPRODUCTO = @pk_ID_PLANTILLAPRODUCTO;

    IF @l_count = 0 BEGIN
      RAISERROR('-20054 The record no longer exists.', 16, 1);
    END 

    IF @l_count > 1 BEGIN
      RAISERROR('-20053 Duplicate object instances.', 16, 1);
    END 

    -- Get the row from the query.  Checksum value will be
    -- returned along the row data to support concurrency.
  		
      SELECT PLANTILLAPRODUCTO.ID_PLANTILLAPRODUCTO,
             PLANTILLAPRODUCTO.NOMPLANTILLAPRODUCTO,
             PLANTILLAPRODUCTO.FECHAHORAMODIFICACION,
             PLANTILLAPRODUCTO.CODUSUARIOMODIFICACION,
             USUARIO.NOMUSUARIO,
             PLANTILLAPRODUCTO.ACTIVE
        FROM WSXML_SFG.PLANTILLAPRODUCTO
        LEFT OUTER JOIN SXML_SFG.USUARIO
          ON (USUARIO.ID_USUARIO =
             PLANTILLAPRODUCTO.CODUSUARIOMODIFICACION)
       WHERE PLANTILLAPRODUCTO.ID_PLANTILLAPRODUCTO =
             @pk_ID_PLANTILLAPRODUCTO;
	;				 
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGPLANTILLAPRODUCTO_GetList', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGPLANTILLAPRODUCTO_GetList;
GO
CREATE     PROCEDURE WSXML_SFG.SFGPLANTILLAPRODUCTO_GetList(@p_active NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;


    -- Get the rows from the query.  Checksum value will be
    -- returned along the row data to support concurrency.
		
      SELECT P.ID_PLANTILLAPRODUCTO,
             P.NOMPLANTILLAPRODUCTO,
             COUNT(D.ID_PLANTILLAPRODUCTODETALLE) NUMDETALLES,
             P.FECHAHORAMODIFICACION,
             P.CODUSUARIOMODIFICACION,
             P.ACTIVE
        FROM WSXML_SFG.PLANTILLAPRODUCTO P
        LEFT OUTER JOIN WSXML_SFG.PLANTILLAPRODUCTODETALLE D
          ON (D.CODPLANTILLAPRODUCTO = P.ID_PLANTILLAPRODUCTO)
       WHERE P.ACTIVE = CASE
               WHEN @p_active = -1 THEN
                P.ACTIVE
               ELSE
                @p_active
             END
         AND (D.ACTIVE = 1 OR D.ACTIVE IS NULL)
       GROUP BY P.ID_PLANTILLAPRODUCTO,
                P.NOMPLANTILLAPRODUCTO,
                P.FECHAHORAMODIFICACION,
                P.CODUSUARIOMODIFICACION,
                P.ACTIVE;
		;	
  END;
GO

  -- Copiar plantilla (Guardar Como)
  IF OBJECT_ID('WSXML_SFG.SFGPLANTILLAPRODUCTO_Copiar', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGPLANTILLAPRODUCTO_Copiar;
GO

CREATE     PROCEDURE WSXML_SFG.SFGPLANTILLAPRODUCTO_Copiar(@p_ID_PLANTILLAPRODUCTO     NUMERIC(22,0),
                   @p_NOMPLANTILLAPRODUCTO     NVARCHAR(2000),
                   @p_CODUSUARIOMODIFICACION   NUMERIC(22,0),
                   @p_ID_PLANTILLAPRODUCTO_out NUMERIC(22,0) OUT) AS
 BEGIN
	SET NOCOUNT ON;
    DECLARE @cPlantillaProductoDetalle_pc_CODPLANTILLAPRODUCTO FLOAT;

	BEGIN TRY

		DECLARE cPlantillaProductoDetalle CURSOR LOCAL FOR
		  SELECT ID_PLANTILLAPRODUCTODETALLE,
				 CODPLANTILLAPRODUCTO,
				 CODPRODUCTO,
				 CODRANGOCOMISION,
				 FECHAHORAMODIFICACION,
				 CODUSUARIOMODIFICACION,
				 ACTIVE
			FROM WSXML_SFG.PLANTILLAPRODUCTODETALLE
		   WHERE CODPLANTILLAPRODUCTO = @cPlantillaProductoDetalle_pc_CODPLANTILLAPRODUCTO;

			DECLARE @ID_PLANTILLAPRODUCTODETALLE NUMERIC(38,0), 
				@CODPLANTILLAPRODUCTO NUMERIC(38,0),
				@CODPRODUCTO NUMERIC(38,0),
				@CODRANGOCOMISION NUMERIC(38,0),
				@FECHAHORAMODIFICACION DATETIME,
				@CODUSUARIOMODIFICACION NUMERIC(38,0),
				@ACTIVE NUMERIC(22,0);


   


			INSERT INTO WSXML_SFG.PLANTILLAPRODUCTO
			  ( NOMPLANTILLAPRODUCTO, CODUSUARIOMODIFICACION)
			VALUES
			  ( @p_NOMPLANTILLAPRODUCTO, @p_CODUSUARIOMODIFICACION);

			SET @p_ID_PLANTILLAPRODUCTO_out = SCOPE_IDENTITY();

			SET @CODPLANTILLAPRODUCTO = @p_ID_PLANTILLAPRODUCTO;
    
			OPEN cPlantillaProductoDetalle;

			FETCH NEXT FROM cPlantillaProductoDetalle INTO @ID_PLANTILLAPRODUCTODETALLE, @CODPLANTILLAPRODUCTO, @CODPRODUCTO, @CODRANGOCOMISION, @FECHAHORAMODIFICACION, @CODUSUARIOMODIFICACION, @ACTIVE;

			WHILE (@@FETCH_STATUS = 0) 
			BEGIN 
		
			  INSERT INTO WSXML_SFG.PLANTILLAPRODUCTODETALLE
				(
				 CODPLANTILLAPRODUCTO,
				 CODPRODUCTO,
				 CODRANGOCOMISION,
				 CODUSUARIOMODIFICACION)
			  VALUES
				(
				 @p_ID_PLANTILLAPRODUCTO_out,
				 @CODPRODUCTO,
				 @CODRANGOCOMISION,
				 @p_CODUSUARIOMODIFICACION);

				 FETCH NEXT FROM cPlantillaProductoDetalle INTO @ID_PLANTILLAPRODUCTODETALLE, @CODPLANTILLAPRODUCTO, @CODPRODUCTO, @CODRANGOCOMISION, @FECHAHORAMODIFICACION, @CODUSUARIOMODIFICACION, @ACTIVE;
			END;

			CLOSE cPlantillaProductoDetalle;
			DEALLOCATE cPlantillaProductoDetalle;

    COMMIT;
  END TRY
  BEGIN CATCH
      ROLLBACK;
	END CATCH
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGPLANTILLAPRODUCTO_GetPlantillaMaster', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFGPLANTILLAPRODUCTO_GetPlantillaMaster;
GO

CREATE     FUNCTION WSXML_SFG.SFGPLANTILLAPRODUCTO_GetPlantillaMaster(@p_CODLINEADENEGOCIO NUMERIC(22,0)) RETURNS NUMERIC(22,0) AS
 BEGIN
    DECLARE @cCODPLANTILLAPRODUCTO NUMERIC(22,0);
   
    SELECT @cCODPLANTILLAPRODUCTO = ID_PLANTILLAPRODUCTO
      FROM WSXML_SFG.PLANTILLAPRODUCTO
     WHERE CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO
       AND MASTERPLANTILLA = 1;

	IF @@ROWCOUNT  = 0
		RETURN 0
    RETURN @cCODPLANTILLAPRODUCTO;
  --EXCEPTION
  --  WHEN OTHERS THEN
  --    RETURN NULL;
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGPLANTILLAPRODUCTO_GetComissionValuesForProduct', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGPLANTILLAPRODUCTO_GetComissionValuesForProduct;
GO

CREATE     PROCEDURE WSXML_SFG.SFGPLANTILLAPRODUCTO_GetComissionValuesForProduct(@p_CODPUNTODEVENTA      NUMERIC(22,0),
                                         @p_CODPRODUCTO          NUMERIC(22,0),
                                         @p_CODRANGOCOMISION_out NUMERIC(22,0) OUT,
                                         @p_CODTIPOCOMISION_out  NUMERIC(22,0) OUT,
                                         @p_VALCALCUCOMISION_out FLOAT OUT) AS
 BEGIN
	SET NOCOUNT ON;
    DECLARE @tmpmsg NVARCHAR(2000);
   
   BEGIN TRY

		-- Busqueda por plantilla asignada
		SELECT @p_CODRANGOCOMISION_out = RC.ID_RANGOCOMISION,
			   @p_CODTIPOCOMISION_out = RC.CODTIPOCOMISION,
			   @p_VALCALCUCOMISION_out = CASE
				 WHEN RC.CODTIPOCOMISION = 1 THEN
				  RCDT.VALORPORCENTUAL
				 ELSE
				  RCDT.VALORTRANSACCIONAL
			   END
			   FROM WSXML_SFG.PUNTODEVENTAPLANTILLA    PDVP,
			   WSXML_SFG.PLANTILLAPRODUCTODETALLE PLDT,
			   WSXML_SFG.RANGOCOMISION            RC,
			   WSXML_SFG.RANGOCOMISIONDETALLE     RCDT
		 WHERE PDVP.CODPLANTILLAPRODUCTO = PLDT.CODPLANTILLAPRODUCTO
		   AND PDVP.CODPUNTODEVENTA = @p_CODPUNTODEVENTA
		   AND PDVP.ACTIVE = 1
		   AND PLDT.CODPRODUCTO = @p_CODPRODUCTO
		   AND PLDT.CODRANGOCOMISION = RC.ID_RANGOCOMISION
		   AND PLDT.ACTIVE = 1
		   AND RC.ID_RANGOCOMISION = RCDT.CODRANGOCOMISION
		   AND RC.ACTIVE = 1
		   AND RCDT.ACTIVE = 1;
	END TRY
	BEGIN CATCH
 
      BEGIN

		BEGIN TRY
			-- Busqueda de comision mediante plantilla master
			SELECT @p_CODRANGOCOMISION_out = RC.ID_RANGOCOMISION,
				   @p_CODTIPOCOMISION_out = RC.CODTIPOCOMISION,
				   @p_VALCALCUCOMISION_out = CASE
					 WHEN RC.CODTIPOCOMISION = 1 THEN
					  RCDT.VALORPORCENTUAL
					 ELSE
					  RCDT.VALORTRANSACCIONAL
				   END
					   FROM WSXML_SFG.PLANTILLAPRODUCTO PLAN_,
				   WSXML_SFG.PLANTILLAPRODUCTODETALLE PLDT,
				   WSXML_SFG.RANGOCOMISION            RC,
				   WSXML_SFG.RANGOCOMISIONDETALLE     RCDT
			 WHERE PLAN_.ID_PLANTILLAPRODUCTO = PLDT.CODPLANTILLAPRODUCTO
			   AND PLAN_.MASTERPLANTILLA = 1
			   AND PLAN_.ACTIVE = 1
			   AND PLDT.CODPRODUCTO = @p_CODPRODUCTO
			   AND PLDT.CODRANGOCOMISION = RC.ID_RANGOCOMISION
			   AND PLDT.ACTIVE = 1
			   AND RC.ID_RANGOCOMISION = RCDT.CODRANGOCOMISION
			   AND RC.ACTIVE = 1
			   AND RCDT.ACTIVE = 1;
		END TRY
		BEGIN CATCH

          SET @tmpmsg = '-20054 No se encontro comision por defecto (MASTER) para el producto: ' +
                                  ISNULL(WSXML_SFG.PRODUCTO_NOMBRE_F(@p_CODPRODUCTO), '') + ' ' +
                                  isnull(ERROR_MESSAGE(), '');
          RAISERROR(@tmpmsg, 16, 1);
		END CATCH
      END

	END CATCH
  END
GO

  IF OBJECT_ID('WSXML_SFG.SFGPLANTILLAPRODUCTO_GetDefaultComissionValuesProd', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGPLANTILLAPRODUCTO_GetDefaultComissionValuesProd;
GO

CREATE     PROCEDURE WSXML_SFG.SFGPLANTILLAPRODUCTO_GetDefaultComissionValuesProd(@p_CODPRODUCTO          NUMERIC(22,0),
                                          @p_CODRANGOCOMISION_out NUMERIC(22,0) OUT,
                                          @p_CODTIPOCOMISION_out  NUMERIC(22,0) OUT,
                                          @p_VALCALCUCOMISION_out FLOAT OUT) AS
  BEGIN
  SET NOCOUNT ON;

	BEGIN TRY
			-- Busqueda por plantilla asignada
			SELECT @p_CODRANGOCOMISION_out = RC.ID_RANGOCOMISION,
				   @p_CODTIPOCOMISION_out = RC.CODTIPOCOMISION,
				   @p_VALCALCUCOMISION_out = CASE
					 WHEN RC.CODTIPOCOMISION = 1 THEN
					  RCDT.VALORPORCENTUAL
					 ELSE
					  RCDT.VALORTRANSACCIONAL
				   END
				   FROM WSXML_SFG.PLANTILLAPRODUCTO        PLAN_,
				   WSXML_SFG.PLANTILLAPRODUCTODETALLE PLDT,
				   WSXML_SFG.RANGOCOMISION            RC,
				   WSXML_SFG.RANGOCOMISIONDETALLE     RCDT
			 WHERE PLAN_.ID_PLANTILLAPRODUCTO = PLDT.CODPLANTILLAPRODUCTO
			   AND PLAN_.MASTERPLANTILLA = 1
			   AND PLAN_.ACTIVE = 1
			   AND PLDT.CODPRODUCTO = @p_CODPRODUCTO
			   AND PLDT.CODRANGOCOMISION = RC.ID_RANGOCOMISION
			   AND PLDT.ACTIVE = 1
			   AND RC.ID_RANGOCOMISION = RCDT.CODRANGOCOMISION
			   AND RC.ACTIVE = 1
			   AND RCDT.ACTIVE = 1;
	END TRY
	BEGIN CATCH

	DECLARE @p_TIPOINFORMATIVO TINYINT, @p_TIPOERROR TINYINT, @p_TIPOADVERTENCIA TINYINT, @p_TIPOCUALQUIERA TINYINT,@p_PROCESONOTIFICACION TINYINT, @p_ESTADOABIERTA TINYINT, @p_ESTADOCERRADA TINYINT

	EXEC WSXML_SFG.SFGALERTA_CONSTANT @p_TIPOINFORMATIVO OUT, @p_TIPOERROR OUT, @p_TIPOADVERTENCIA OUT, @p_TIPOCUALQUIERA OUT, @p_PROCESONOTIFICACION OUT, @p_ESTADOABIERTA OUT, @p_ESTADOCERRADA OUT
		  
			  -- No bota error porque se usa desde facturacion
	DECLARE @msgAlerta varchar(2000) = 'No se encontro comision por defecto (MASTER) para el producto: ' +
									  ISNULL(WSXML_SFG.PRODUCTO_NOMBRE_F(@p_CODPRODUCTO), '') +
									  '. Se procedio con 8%';

	EXEC WSXML_SFG.SFGALERTA_GenerarAlerta @p_TIPOERROR,
									  'DEFAULTCOMISSION',
									  @msgAlerta,
									  1
			  SET @p_CODRANGOCOMISION_out = 0;
			  SET @p_CODTIPOCOMISION_out  = 1;
			  SET @p_VALCALCUCOMISION_out = 8;
	END CATCH
  END;
GO



  IF OBJECT_ID('WSXML_SFG.SFGPLANTILLAPRODUCTO_ExploreTemplateValues', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGPLANTILLAPRODUCTO_ExploreTemplateValues;
GO

CREATE     PROCEDURE WSXML_SFG.SFGPLANTILLAPRODUCTO_ExploreTemplateValues(
	@p_CODLINEADENEGOCIO NUMERIC(22,0)
		                 
) AS
    DECLARE @strMAXCOLMNVAL VARCHAR(MAX) = '';
    DECLARE @strPRODCOLUMNS VARCHAR(MAX) = '';
    DECLARE @strSQLINSTRUCT VARCHAR(MAX) = '';
    DECLARE @strWHERECLAUSE VARCHAR(MAX) = '';
	DECLARE @lstCOLUMNNAMES TABLE (
		COLUMNAMES VARCHAR(300)
	)

BEGIN
    --SET @lstCOLUMNNAMES = COLUMNNAMES();
    DECLARE tPRODUCT CURSOR FOR 
			SELECT ID_PRODUCTO, CODIGOGTECHPRODUCTO, NOMPRODUCTO
			FROM WSXML_SFG.PRODUCTO
				INNER JOIN WSXML_SFG.TIPOPRODUCTO ON (CODTIPOPRODUCTO = ID_TIPOPRODUCTO)
			WHERE CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO
				AND PRODUCTO.ACTIVE = 1
			ORDER BY CODIGOGTECHPRODUCTO; OPEN tPRODUCT;
			
	 DECLARE @ID_PRODUCTO NUMERIC(38,0), @CODIGOGTECHPRODUCTO VARCHAR(50), @NOMPRODUCTO VARCHAR(255)
	 FETCH NEXT FROM tPRODUCT INTO @ID_PRODUCTO, @CODIGOGTECHPRODUCTO, @NOMPRODUCTO

	 WHILE @@FETCH_STATUS=0
	 BEGIN
		DECLARE @thisCOLUMNNAME VARCHAR(50);
        DECLARE @existsINLIST   NUMERIC(22,0) = 0;
		BEGIN
			SET @thisCOLUMNNAME = CONVERT(VARCHAR, '' + ISNULL(@CODIGOGTECHPRODUCTO, '') + '.' + ISNULL(CASE
                                    WHEN LEN(@NOMPRODUCTO) > 24 THEN
                                     dbo.InitCap(SUBSTRING(@NOMPRODUCTO, 0, 24))
                                    ELSE
                                     dbo.InitCap(@NOMPRODUCTO)
                                  END, '') + '');

        IF (SELECT COUNT(*) FROM @lstCOLUMNNAMES)  > 0 BEGIN
			DECLARE ix CURSOR FOR SELECT COLUMNAMES FROM @lstCOLUMNNAMES
			OPEN ix;
			DECLARE @COLUMNAMES VARCHAR(300);
	
			 FETCH NEXT FROM ix INTO @COLUMNAMES

			 WHILE @@FETCH_STATUS=0
			 BEGIN
				IF @COLUMNAMES = @thisCOLUMNNAME BEGIN
				  SET @existsINLIST = 1;
				END 
			FETCH NEXT FROM ix INTO @COLUMNAMES
          END;

          CLOSE ix;
          DEALLOCATE ix;
        END 

        IF @existsINLIST = 0 BEGIN
          
          INSERT INTO @lstCOLUMNNAMES VALUES (@thisCOLUMNNAME);
          SET @strPRODCOLUMNS = ISNULL(@strPRODCOLUMNS, '') +', CASE WHEN PPD.CODPRODUCTO = ' + ISNULL(@ID_PRODUCTO, '') + ' THEN RCM.NOMRANGOCOMISION ELSE NULL END AS ' + ISNULL(@thisCOLUMNNAME, '');
          SET @strMAXCOLMNVAL = ISNULL(@strMAXCOLMNVAL, '') + ', MAX(' + ISNULL(@thisCOLUMNNAME, '') + ') AS ' + ISNULL(@thisCOLUMNNAME, '') + ' ';
        END 
      END;

    FETCH NEXT FROM tPRODUCT INTO @ID_PRODUCTO, @CODIGOGTECHPRODUCTO, @NOMPRODUCTO
    END;

    CLOSE tPRODUCT;
    DEALLOCATE tPRODUCT;

    SET @strSQLINSTRUCT = 'SELECT PPR.CODAGRUPACIONPUNTODEVENTA, PPR.CODREDPDV, PPR.CODCIUDAD, PPR.NOMPLANTILLAPRODUCTO';
    SET @strWHERECLAUSE = 'FROM WSXML_SFG.PLANTILLAPRODUCTO PPR ' +
                      'INNER JOIN WSXML_SFG.PLANTILLAPRODUCTODETALLE PPD ON (PPR.ID_PLANTILLAPRODUCTO = PPD.CODPLANTILLAPRODUCTO) ' +
                      'INNER JOIN WSXML_SFG.RANGOCOMISION RCM ON (PPD.CODRANGOCOMISION = RCM.ID_RANGOCOMISION) ' +
                      'WHERE PPR.CODLINEADENEGOCIO = ' +
                      ISNULL(@p_CODLINEADENEGOCIO, '') + ' ';

    --    DBMS_OUTPUT.put_line(strSQLINSTRUCT || ' ' || strPRODCOLUMNS || strWHERECLAUSE);
	DECLARE @sql NVARCHAR(MAX);
    SET @sql =  '	 SELECT NOMPLANTILLAPRODUCTO AS Plantilla de Comision, NVL(NOMCIUDAD, ''N/A'') AS Ciudad, NVL(NOMREDPDV, ''N/A'') AS Red, NVL(CODIGOAGRUPACIONGTECH, ''N/A'') AS Cadena' + ISNULL(@strMAXCOLMNVAL, '') + ' ' + 'FROM (' + ISNULL(@strSQLINSTRUCT, '') + ' ' + ISNULL(@strPRODCOLUMNS, '') + ISNULL(@strWHERECLAUSE, '') + ') ' + 'LEFT OUTER JOIN AGRUPACIONPUNTODEVENTA ON (CODAGRUPACIONPUNTODEVENTA = ID_AGRUPACIONPUNTODEVENTA) ' + 'LEFT OUTER JOIN REDPDV ON (CODREDPDV = ID_REDPDV) ' + 'LEFT OUTER JOIN CIUDAD ON (CODCIUDAD = ID_CIUDAD) ' + 'GROUP BY NOMPLANTILLAPRODUCTO, NOMCIUDAD, NOMREDPDV, CODIGOAGRUPACIONGTECH; ;';
    EXECUTE sp_executesql @sql,N'@p_cur CURSOR OUTPUT';
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGPLANTILLAPRODUCTO_WebExploreTemplateValues', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGPLANTILLAPRODUCTO_WebExploreTemplateValues;
GO

CREATE     PROCEDURE WSXML_SFG.SFGPLANTILLAPRODUCTO_WebExploreTemplateValues(@p_CODLINEADENEGOCIO NUMERIC(22,0),
                                     @p_page_number       INTEGER,
                                     @p_batch_size        INTEGER,
                                    @p_total_size        INTEGER OUT
                                                      ) AS
    DECLARE @strMAXCOLMNVAL VARCHAR(MAX) = '';
    DECLARE @strPRODCOLUMNS VARCHAR(MAX) = '';
    DECLARE @strSQLINSTRUCT VARCHAR(MAX) = '';
    DECLARE @strWHERECLAUSE VARCHAR(MAX) = '';
    DECLARE @lstCOLUMNNAMES TABLE (
		COLUMNAMES VARCHAR(300)
	)
  BEGIN
  
  
    SELECT @p_total_size = COUNT(1)
      FROM WSXML_SFG.PLANTILLAPRODUCTO
     WHERE CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO;
  
		SELECT PLANTILLAPRODUCTO.NOMPLANTILLAPRODUCTO AS Plantilla,
		   ISNULL(CIUDAD.NOMCIUDAD,'N/A') AS Ciudad,
		   ISNULL(REDPDV.NOMREDPDV,'N/A') AS Red,
		   ISNULL(AGRUPACIONPUNTODEVENTA.CODIGOAGRUPACIONGTECH,'N/A') AS Cadena,
		   PRODUCTO.CODIGOGTECHPRODUCTO AS "Codigo Producto",
		   PRODUCTO.NOMPRODUCTO AS Producto,
		   RANGOCOMISION.NOMRANGOCOMISION as Comision
		FROM WSXML_SFG.PLANTILLAPRODUCTO
			INNER JOIN WSXML_SFG.PLANTILLAPRODUCTODETALLE ON PLANTILLAPRODUCTODETALLE.CODPLANTILLAPRODUCTO = PLANTILLAPRODUCTO.ID_PLANTILLAPRODUCTO
			INNER JOIN WSXML_SFG.PRODUCTO ON PLANTILLAPRODUCTODETALLE.CODPRODUCTO = PRODUCTO.ID_PRODUCTO
			INNER JOIN WSXML_SFG.TIPOPRODUCTO ON PRODUCTO.CODTIPOPRODUCTO = TIPOPRODUCTO.ID_TIPOPRODUCTO
			INNER JOIN WSXML_SFG.RANGOCOMISION ON PLANTILLAPRODUCTODETALLE.CODRANGOCOMISION = RANGOCOMISION.ID_RANGOCOMISION
			LEFT OUTER JOIN WSXML_SFG.AGRUPACIONPUNTODEVENTA ON PLANTILLAPRODUCTO.CODAGRUPACIONPUNTODEVENTA= AGRUPACIONPUNTODEVENTA.ID_AGRUPACIONPUNTODEVENTA
			LEFT OUTER JOIN WSXML_SFG.CIUDAD ON PLANTILLAPRODUCTO.CODCIUDAD = CIUDAD.ID_CIUDAD
			LEFT OUTER JOIN WSXML_SFG.REDPDV ON PLANTILLAPRODUCTO.CODREDPDV = REDPDV.ID_REDPDV
		WHERE TIPOPRODUCTO.CODLINEADENEGOCIO = @p_CODLINEADENEGOCIO;
 	;
    
    
  END;
GO


  IF OBJECT_ID('WSXML_SFG.SFGPLANTILLAPRODUCTO_GetTemplateForAgent', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGPLANTILLAPRODUCTO_GetTemplateForAgent;
GO

CREATE     PROCEDURE WSXML_SFG.SFGPLANTILLAPRODUCTO_GetTemplateForAgent(@p_CODPUNTODEVENTA              NUMERIC(22,0),
                                @p_CODPRODUCTO                  NUMERIC(22,0),
                                @p_CODPLANTILLAPRODUCTO_out     NUMERIC(22,0) OUT,
                                @p_CODPLANTILLAPRODUCTODETA_out NUMERIC(22,0) OUT) AS
 BEGIN
    --DECLARE @exINVALIDASSIGN EXCEPTION;
    DECLARE @cLINEADENEGOCIO NUMERIC(22,0);
    DECLARE @CantCiudad      NUMERIC(22,0);
	DECLARE @msgTrace VARCHAR(2000)
   
  SET NOCOUNT ON;
    SET @cLINEADENEGOCIO = WSXML_SFG.LINEADENEGOCIO_PRODUCTO_F(@p_CODPRODUCTO);
    -- Busqueda por plantilla asignada
    BEGIN
	 BEGIN TRY
	 
      SELECT @p_CODPLANTILLAPRODUCTO_out = CODPLANTILLAPRODUCTO
        FROM WSXML_SFG.PUNTODEVENTAPLANTILLA PDVP
       WHERE CODPUNTODEVENTA = @p_CODPUNTODEVENTA
         AND CODLINEADENEGOCIO = @cLINEADENEGOCIO
         AND ACTIVE = 1;
		 
      IF @p_CODPLANTILLAPRODUCTO_out > 0  BEGIN
        SELECT @p_CODPLANTILLAPRODUCTODETA_out = ID_PLANTILLAPRODUCTODETALLE
          FROM WSXML_SFG.PLANTILLAPRODUCTODETALLE
         WHERE CODPLANTILLAPRODUCTO = @p_CODPLANTILLAPRODUCTO_out
           AND CODPRODUCTO = @p_CODPRODUCTO;
      END
      ELSE BEGIN

        SET @msgTrace = 'No se encontro comision unica para el punto de venta ' + CONVERT(VARCHAR,WSXML_SFG.PUNTODEVENTA_CODIGO_F(@p_CODPUNTODEVENTA)) +
						', producto ' + WSXML_SFG.PRODUCTO_NOMBRE_F(@p_CODPRODUCTO) + ' (' + WSXML_SFG.PRODUCTO_CODIGO_F(@p_CODPRODUCTO) + ').'
		EXEC WSXML_SFG.SFGTMPTRACE_TraceLog @msgTrace
		RAISERROR (@msgTrace,16, 1);  					
      END
	END TRY
	BEGIN CATCH
        -- Busqueda de comision guiada por reglas (plantillas no master). Criterio 1: Ciudad, Cadena, Red
        BEGIN
          BEGIN TRY
            SELECT @p_CODPLANTILLAPRODUCTO_out = ID_PLANTILLAPRODUCTO
              FROM WSXML_SFG.PLANTILLAPRODUCTO       PLAN_,
                   WSXML_SFG.PUNTODEVENTA            PDV,
                   WSXML_SFG.PLANTILLAPRODUCTOCIUDAD CIU
             WHERE PDV.ID_PUNTODEVENTA = @p_CODPUNTODEVENTA
               AND PLAN_.ID_PLANTILLAPRODUCTO = CIU.CODPLANTILLAPRODUCTO
               AND PLAN_.CODLINEADENEGOCIO = @cLINEADENEGOCIO
               AND CIU.CODCIUDAD = PDV.CODCIUDAD
               AND PLAN_.CODAGRUPACIONPUNTODEVENTA =
                   PDV.CODAGRUPACIONPUNTODEVENTA
               AND PLAN_.CODREDPDV = PDV.CODREDPDV
               AND PLAN_.ACTIVE = 1;
			   
            IF @p_CODPLANTILLAPRODUCTO_out > 0 BEGIN
              SELECT @p_CODPLANTILLAPRODUCTODETA_out = ID_PLANTILLAPRODUCTODETALLE
                FROM WSXML_SFG.PLANTILLAPRODUCTODETALLE
               WHERE CODPLANTILLAPRODUCTO = @p_CODPLANTILLAPRODUCTO_out
                 AND CODPRODUCTO = @p_CODPRODUCTO;

            END  
            ELSE BEGIN
				RAISERROR('No se encontro comision unica para el punto de venta', 16, 1);
            END
		END TRY
		BEGIN CATCH 
              /* -- Criterio 2: Cadena, Red
              BEGIN
                SELECT ID_PLANTILLAPRODUCTO
                  INTO p_CODPLANTILLAPRODUCTO_out
                  FROM PLANTILLAPRODUCTO PLAN, PUNTODEVENTA PDV
                 WHERE PDV.ID_PUNTODEVENTA = p_CODPUNTODEVENTA
                   AND PLAN.CODLINEADENEGOCIO = cLINEADENEGOCIO
                   AND PLAN.CODAGRUPACIONPUNTODEVENTA =
                       PDV.CODAGRUPACIONPUNTODEVENTA
                   AND PLAN.CODREDPDV = PDV.CODREDPDV
                   AND PLAN.ACTIVE = 1;
                IF p_CODPLANTILLAPRODUCTO_out > 0 THEN
                  SELECT ID_PLANTILLAPRODUCTODETALLE
                    INTO p_CODPLANTILLAPRODUCTODETA_out
                    FROM PLANTILLAPRODUCTODETALLE
                   WHERE CODPLANTILLAPRODUCTO = p_CODPLANTILLAPRODUCTO_out
                     AND CODPRODUCTO = p_CODPRODUCTO;
                ELSE
                  RAISE exINVALIDASSIGN;
                END IF;
              EXCEPTION
                WHEN OTHERS THEN*/
              -- Criterio 3. Cadena
              BEGIN
				BEGIN TRY
					SELECT @p_CODPLANTILLAPRODUCTO_out = ID_PLANTILLAPRODUCTO
					  FROM WSXML_SFG.PLANTILLAPRODUCTO PLAN_, WSXML_SFG.PUNTODEVENTA PDV
					 WHERE PDV.ID_PUNTODEVENTA = @p_CODPUNTODEVENTA
					   AND PLAN_.CODLINEADENEGOCIO = @cLINEADENEGOCIO
					   AND PLAN_.CODAGRUPACIONPUNTODEVENTA =
						   PDV.CODAGRUPACIONPUNTODEVENTA
					   AND PLAN_.ACTIVE = 1;
					   
					IF @p_CODPLANTILLAPRODUCTO_out > 0 BEGIN
					
					  SELECT @CANTCIUDAD = COUNT(*)
						FROM WSXML_SFG.PLANTILLAPRODUCTOCIUDAD C
					   WHERE C.CODPLANTILLAPRODUCTO =
							 @p_CODPLANTILLAPRODUCTO_out;
							 
					  IF @CantCiudad > 0 BEGIN
						RAISERROR('No se encontro comision unica para el punto de venta', 16, 1);
					  END 

					  SELECT @p_CODPLANTILLAPRODUCTODETA_out = ID_PLANTILLAPRODUCTODETALLE
						FROM WSXML_SFG.PLANTILLAPRODUCTODETALLE
					   WHERE CODPLANTILLAPRODUCTO = @p_CODPLANTILLAPRODUCTO_out
						 AND CODPRODUCTO = @p_CODPRODUCTO;
					END
					ELSE BEGIN
					  RAISERROR('No se encontro comision unica para el punto de venta', 16, 1);
					END 
				END TRY
				BEGIN CATCH
						/*-- Criterio 4. Red
					  BEGIN
						SELECT ID_PLANTILLAPRODUCTO
						  INTO p_CODPLANTILLAPRODUCTO_out
						  FROM PLANTILLAPRODUCTO PLAN, PUNTODEVENTA PDV
						 WHERE PDV.ID_PUNTODEVENTA = p_CODPUNTODEVENTA
						   AND PLAN.CODLINEADENEGOCIO = cLINEADENEGOCIO
						   AND PLAN.CODREDPDV = PDV.CODREDPDV
						   AND PLAN.ACTIVE = 1;
						IF p_CODPLANTILLAPRODUCTO_out > 0 THEN
						  SELECT ID_PLANTILLAPRODUCTODETALLE
							INTO p_CODPLANTILLAPRODUCTODETA_out
							FROM PLANTILLAPRODUCTODETALLE
						   WHERE CODPLANTILLAPRODUCTO =
								 p_CODPLANTILLAPRODUCTO_out
							 AND CODPRODUCTO = p_CODPRODUCTO;
						ELSE
						  RAISE exINVALIDASSIGN;
						END IF;
					  EXCEPTION
						WHEN OTHERS THEN*/
					  -- Busqueda de comision mediante plantilla master
					  BEGIN
							BEGIN TRY
								SELECT @p_CODPLANTILLAPRODUCTO_out = ID_PLANTILLAPRODUCTO
								  FROM WSXML_SFG.PLANTILLAPRODUCTO PLAN_
								 WHERE PLAN_.CODLINEADENEGOCIO = @cLINEADENEGOCIO
								   AND PLAN_.MASTERPLANTILLA = 1
								   AND PLAN_.ACTIVE = 1;
								IF @p_CODPLANTILLAPRODUCTO_out > 0 BEGIN
								  SELECT @p_CODPLANTILLAPRODUCTODETA_out = ID_PLANTILLAPRODUCTODETALLE
									FROM WSXML_SFG.PLANTILLAPRODUCTODETALLE
								   WHERE CODPLANTILLAPRODUCTO =
										 @p_CODPLANTILLAPRODUCTO_out
									 AND CODPRODUCTO = @p_CODPRODUCTO;
								END
								ELSE BEGIN
									RAISERROR('No se encontro comision unica para el punto de venta', 16, 1);
								END 
							END TRY
							BEGIN CATCH
								SET @msgTrace = 'No se encontro comision unica para el punto de venta ' +
												   ISNULL(CONVERT(VARCHAR,WSXML_SFG.PUNTODEVENTA_CODIGO_F(@p_CODPUNTODEVENTA)),'') +
												   ', producto ' +
												   ISNULL(WSXML_SFG.PRODUCTO_NOMBRE_F(@p_CODPRODUCTO), '') + ' (' +
												   ISNULL(WSXML_SFG.PRODUCTO_CODIGO_F(@p_CODPRODUCTO), '') + ').'  
								--EXEC WSXML_SFG.SFGTMPTRACE_TraceLog @msgTrace
								RAISERROR(@msgTrace, 16, 1);
							END CATCH
						END;
				END CATCH
                  /* END;
*/
              END

              /* END;
*/
          END CATCH

        END

	END CATCH
    END

  END
GO

IF OBJECT_ID('WSXML_SFG.SFGPLANTILLAPRODUCTO_GetPinpointComissionValues', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGPLANTILLAPRODUCTO_GetPinpointComissionValues;
GO


CREATE     PROCEDURE WSXML_SFG.SFGPLANTILLAPRODUCTO_GetPinpointComissionValues(
			@p_CODPUNTODEVENTA            NUMERIC(22,0),
			@p_CODPRODUCTO                NUMERIC(22,0),
			@p_CODRANGOCOMISION_out       NUMERIC(22,0) OUT,
			@p_CODTIPOCOMISION_out        NUMERIC(22,0) OUT,
			@p_COMISIONANTICIPO_out       NUMERIC(22,0) OUT,
			@p_VALORPORCENTUAL_out        FLOAT OUT,
			@p_VALORTRANSACCIONAL_out     FLOAT OUT,
			@p_CODPLANTILLAPRODUCTO_out   NUMERIC(22,0) OUT,
		   @p_FLAGADVANCEDCOMMISSION_out NUMERIC(22,0) OUT
) AS
 BEGIN
    DECLARE @xPLANTILLAPRODUCTODETALLE NUMERIC(22,0);
   
  SET NOCOUNT ON;
    EXEC WSXML_SFG.SFGPLANTILLAPRODUCTO_GetTemplateForAgent @p_CODPUNTODEVENTA,
                                             @p_CODPRODUCTO,
                                             @p_CODPLANTILLAPRODUCTO_out OUT,
                                             @xPLANTILLAPRODUCTODETALLE OUT
    IF @p_CODPLANTILLAPRODUCTO_out IS NOT NULL
      BEGIN
		
        --Setear variable de salida a CERO. Cambio en citibank retiros Junio 1 de 2013
        SET @p_FLAGADVANCEDCOMMISSION_out =0;
        /*SELECT COUNT(1)
          INTO p_FLAGADVANCEDCOMMISSION_out
          FROM PLANTILLAPRODUCTODETALLEAVANZA
         WHERE CODPLANTILLAPRODUCTODETALLE = xPLANTILLAPRODUCTODETALLE;*/
        SELECT @p_CODRANGOCOMISION_out = PDT.CODRANGOCOMISION,
               @p_CODTIPOCOMISION_out = CODTIPOCOMISION,
               @p_COMISIONANTICIPO_out = ANTICIPO,
               @p_VALORPORCENTUAL_out = VALORPORCENTUAL,
               @p_VALORTRANSACCIONAL_out = VALORTRANSACCIONAL
        FROM WSXML_SFG.PLANTILLAPRODUCTODETALLE PDT
			INNER JOIN WSXML_SFG.RANGOCOMISION RCM
				ON (PDT.CODRANGOCOMISION = RCM.ID_RANGOCOMISION)
			INNER JOIN WSXML_SFG.RANGOCOMISIONDETALLE RCT
				ON (RCT.CODRANGOCOMISION = RCM.ID_RANGOCOMISION)
         WHERE PDT.ID_PLANTILLAPRODUCTODETALLE = @xPLANTILLAPRODUCTODETALLE;

		IF @@ROWCOUNT > 1 BEGIN
          -- Rangos is null. Set empty but mark with commission
          SELECT @p_CODRANGOCOMISION_out = CODRANGOCOMISION
            FROM WSXML_SFG.PLANTILLAPRODUCTODETALLE
           WHERE ID_PLANTILLAPRODUCTODETALLE = @xPLANTILLAPRODUCTODETALLE;
          SET @p_CODTIPOCOMISION_out    = 1;
          SET @p_COMISIONANTICIPO_out   = 0;
          SET @p_VALORPORCENTUAL_out    = 0;
          SET @p_VALORTRANSACCIONAL_out = 0;
		END 
      END;

  END;
GO


IF OBJECT_ID('WSXML_SFG.SFGPLANTILLAPRODUCTO_GetAdvancedComissionValues', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGPLANTILLAPRODUCTO_GetAdvancedComissionValues;
GO

CREATE     PROCEDURE WSXML_SFG.SFGPLANTILLAPRODUCTO_GetAdvancedComissionValues(@p_CODPUNTODEVENTA             NUMERIC(22,0),
                                       @p_CODPRODUCTO                 NUMERIC(22,0),
                                       @p_ADVANCEDLISTCOMMISSIONS_out CURSOR VARYING OUT) AS
 BEGIN

	DECLARE @p_cur_ADVANCEDLISTCOMMISSIONS WSXML_SFG.ADVANCEDCOMMISSION

    DECLARE @xPLANTILLAPRODUCTO        NUMERIC(22,0);
    DECLARE @xPLANTILLAPRODUCTODETALLE NUMERIC(22,0);
    DECLARE @transaccionesavanzadas    WSXML_SFG.NUMBERARRAY;
    DECLARE @defaultCODRANGOCOMISION   NUMERIC(22,0);
    DECLARE @defaultCODTIPOCOMISION    NUMERIC(22,0);
    DECLARE @defaultCOMISIONANTICIPO   NUMERIC(22,0);
    DECLARE @defaultVALORPORCENTUAL    NUMERIC(22,0);
    DECLARE @defaultVALORTRANSACCIONAL NUMERIC(22,0);
   
  SET NOCOUNT ON;
    EXEC WSXML_SFG.SFGPLANTILLAPRODUCTO_GetTemplateForAgent @p_CODPUNTODEVENTA,
                                             @p_CODPRODUCTO,
                                             @xPLANTILLAPRODUCTO OUT,
                                             @xPLANTILLAPRODUCTODETALLE OUT
	
    IF @xPLANTILLAPRODUCTO IS NOT NULL BEGIN
      -- Exception will be raised when this parameter is null, and set orphan
      INSERT INTO @transaccionesavanzadas
	  SELECT ID_TIPOTRANSAVANZADO  
        FROM WSXML_SFG.TIPOTRANSAVANZADO
       ORDER BY ID_TIPOTRANSAVANZADO; -- Check goes against index
      --SET @p_ADVANCEDLISTCOMMISSIONS_out = ADVANCEDCOMMISSIONLIST();
      -- Obtain default values
	  
      BEGIN
        SELECT @defaultCODRANGOCOMISION = PDT.CODRANGOCOMISION,
               @defaultCODTIPOCOMISION = CODTIPOCOMISION,
               @defaultCOMISIONANTICIPO = ANTICIPO,
               @defaultVALORPORCENTUAL = VALORPORCENTUAL,
               @defaultVALORTRANSACCIONAL = VALORTRANSACCIONAL
                   FROM WSXML_SFG.PLANTILLAPRODUCTODETALLE PDT
         INNER JOIN WSXML_SFG.RANGOCOMISION RCM
            ON (PDT.CODRANGOCOMISION = RCM.ID_RANGOCOMISION)
         INNER JOIN WSXML_SFG.RANGOCOMISIONDETALLE RCT
            ON (RCT.CODRANGOCOMISION = RCM.ID_RANGOCOMISION)
         WHERE PDT.ID_PLANTILLAPRODUCTODETALLE = @xPLANTILLAPRODUCTODETALLE;
		 
		 IF @@ROWCOUNT > 1 BEGIN
		    -- Rangos is null. Set empty but mark with commission ID
			  SELECT @defaultCODRANGOCOMISION = CODRANGOCOMISION
				FROM WSXML_SFG.PLANTILLAPRODUCTODETALLE
			   WHERE ID_PLANTILLAPRODUCTODETALLE = @xPLANTILLAPRODUCTODETALLE;
			  SET @defaultCODTIPOCOMISION    = 1;
			  SET @defaultCOMISIONANTICIPO   = 0;
			  SET @defaultVALORPORCENTUAL    = 0;
			  SET @defaultVALORTRANSACCIONAL = 0;
		  END 
      END;

      -- Loop through configuration
      IF (SELECT COUNT(*) FROM @transaccionesavanzadas) > 0 BEGIN
	 
        --p_ADVANCEDLISTCOMMISSIONS_out.Extend(transaccionesavanzadas.Count);
        DECLARE itx CURSOR FOR SELECT IDValue FROM @transaccionesavanzadas
		OPEN itx;
		
		DECLARE @IDValue NUMERIC(38,0), @flag BIT, @_INDEX NUMERIC(38,0) = 1
		FETCH NEXT FROM itx INTO @IDValue

		 WHILE @@FETCH_STATUS=0
		 BEGIN
				SET @flag = 0;
				
				DECLARE @thisADVANCEDCOMMISSION ADVANCEDCOMMISSION;
				DECLARE @thisRANGOCOMISION      NUMERIC(22,0);
				BEGIN
					SELECT @thisRANGOCOMISION = CODRANGOCOMISION
					  FROM WSXML_SFG.PLANTILLAPRODUCTODETALLEAVANZA
					 WHERE CODPLANTILLAPRODUCTODETALLE = @xPLANTILLAPRODUCTODETALLE
					   AND CODTIPOTRANSAVANZADO = @IDValue;
					BEGIN

						
						SELECT @thisRANGOCOMISION,
							CODTIPOCOMISION,
							ANTICIPO,
							VALORPORCENTUAL,
							VALORTRANSACCIONAL
						FROM WSXML_SFG.RANGOCOMISION
						INNER JOIN WSXML_SFG.RANGOCOMISIONDETALLE
						  ON (CODRANGOCOMISION = ID_RANGOCOMISION)
					   WHERE ID_RANGOCOMISION = @thisRANGOCOMISION;

					   
						IF @@ROWCOUNT > 1 BEGIN
							-- Do zeros
							SET @flag = 1
							INSERT INTO @p_cur_ADVANCEDLISTCOMMISSIONS VALUES (
														@_INDEX, 
														@thisRANGOCOMISION,
														@defaultCODTIPOCOMISION,
														@defaultCOMISIONANTICIPO,
														@defaultVALORPORCENTUAL,
														@defaultVALORTRANSACCIONAL)
							 ;
						END
					END;
					
					
					IF @@ROWCOUNT = 0 BEGIN
					
						-- Do default
						INSERT INTO @p_cur_ADVANCEDLISTCOMMISSIONS VALUES (
												@_INDEX,
												@defaultCODRANGOCOMISION,
												@defaultCODTIPOCOMISION,
												@defaultCOMISIONANTICIPO,
												@defaultVALORPORCENTUAL,
												@defaultVALORTRANSACCIONAL);
					  

					END
					ELSE BEGIN  
					
						IF @flag = 0 
						INSERT INTO @p_cur_ADVANCEDLISTCOMMISSIONS VALUES (
														@_INDEX,
														@thisRANGOCOMISION,
														@defaultCODTIPOCOMISION,
														@defaultCOMISIONANTICIPO,
														@defaultVALORPORCENTUAL,
														@defaultVALORTRANSACCIONAL
														)
					END

					--p_ADVANCEDLISTCOMMISSIONS_out(itx) := @thisADVANCEDCOMMISSION;

				END;

				SET @_INDEX = @_INDEX + 1
			FETCH NEXT FROM itx INTO @IDValue
			END;

        CLOSE itx;
        DEALLOCATE itx;
      END
      ELSE BEGIN
        RAISERROR('-20054 No existe informacion de comisiones avanzadas en el sistema. No se puede solicitar la informacion', 16, 1);
      END 
    END 

	SET  @p_ADVANCEDLISTCOMMISSIONS_out = CURSOR FORWARD_ONLY STATIC FOR
		SELECT * FROM @p_cur_ADVANCEDLISTCOMMISSIONS
	OPEN @p_ADVANCEDLISTCOMMISSIONS_out;
  END
GO

IF OBJECT_ID('WSXML_SFG.SFGPLANTILLAPRODUCTO_AppendAdvancedTemplateDependen', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGPLANTILLAPRODUCTO_AppendAdvancedTemplateDependen;
GO

CREATE     PROCEDURE WSXML_SFG.SFGPLANTILLAPRODUCTO_AppendAdvancedTemplateDependen(@p_CODPLANTILLAPRODUCTODETALLE NUMERIC(22,0),
                                           @p_STRUCTURE                   NVARCHAR(2000)) AS
  BEGIN
  SET NOCOUNT ON;
    
	/*
	DECLARE tlevel CURSOR FOR 
	SELECT RTRIM(LTRIM(COLUMN_VALUE)) AS DATA
    FROM TABLE (SELECT SFG_PACKAGE.SPLIT(@p_STRUCTURE, '|')FROM DUAL))
	*/		 
	SELECT value from string_split(@p_STRUCTURE, '|')
	DECLARE tlevel CURSOR FOR SELECT value AS tlevel_value from string_split(@p_STRUCTURE, '|')
	OPEN tlevel;

	DECLARE @tlevel_value VARCHAR(2000); 
	FETCH NEXT FROM tlevel INTO @tlevel_value

		WHILE (@@FETCH_STATUS = 0) 
		BEGIN
			DECLARE @leveldata                      WSXML_SFG.STRINGARRAY;
			DECLARE @thisCODRANGOCOMISION           NUMERIC(22,0);
			DECLARE @thisCODTIPOTRANSAVANZADO       NUMERIC(22,0);
			DECLARE @xCODPLANTILLAPRODUCTODETALLEAV NUMERIC(22,0);

			  BEGIN
				/*
				SELECT DATA BULK COLLECT
				  INTO @leveldata
				  FROM (SELECT RTRIM(LTRIM(COLUMN_VALUE)) AS DATA
						  FROM TABLE (SELECT SFG_PACKAGE.SPLIT(tlevel.DATA, '-')
										FROM DUAL));
				*/
				INSERT INTO @leveldata
				SELECT value AS leveldata_value from string_split(@tlevel_value, '-')

				IF (SELECT COUNT(*) FROM @leveldata) <> 4 BEGIN
				  RAISERROR('-20054 Invalid number of parameters for advanced template dependence', 16, 1);
				END 
        
				DECLARE @thisCODTIPOCOMISION    NUMERIC(22,0);
				DECLARE @thisVALORPORCENTUAL    FLOAT;
				DECLARE @thisVALORTRANSACCIONAL FLOAT;

				BEGIN

					BEGIN TRY
					  SET @thisCODTIPOTRANSAVANZADO = cast(dbo.SEPARAR_COLUMNAS_F(@tlevel_value,1,'-') as numeric(38,0))-- TO_NUMBER(leveldata(1));
					  SET @thisCODTIPOCOMISION      = cast(dbo.SEPARAR_COLUMNAS_F(@tlevel_value,2,'-') as numeric(38,0))--TO_NUMBER(leveldata(2));
					  SET @thisVALORPORCENTUAL      = cast(dbo.SEPARAR_COLUMNAS_F(@tlevel_value,3,'-') as numeric(38,0))--TO_NUMBER(leveldata(3));
					  SET @thisVALORTRANSACCIONAL   = cast(dbo.SEPARAR_COLUMNAS_F(@tlevel_value,4,'-') as numeric(38,0))--TO_NUMBER(leveldata(4));
					  EXEC WSXML_SFG.COMISIONSIMPLE_F @thisCODTIPOCOMISION,@thisVALORPORCENTUAL, @thisVALORTRANSACCIONAL, @thisCODRANGOCOMISION OUT
					END TRY
					BEGIN CATCH
						RAISERROR('-20054 Cannot read level data for definition', 16, 1);
					END CATCH
				END;

				BEGIN
				  SELECT @xCODPLANTILLAPRODUCTODETALLEAV = ID_PLANTILLAPRODUCTODETALLEAVA
					FROM WSXML_SFG.PLANTILLAPRODUCTODETALLEAVANZA
				   WHERE CODPLANTILLAPRODUCTODETALLE =
						 @p_CODPLANTILLAPRODUCTODETALLE
					 AND CODTIPOTRANSAVANZADO = @thisCODTIPOTRANSAVANZADO;

				  UPDATE WSXML_SFG.PLANTILLAPRODUCTODETALLEAVANZA
					 SET CODRANGOCOMISION = @thisCODRANGOCOMISION
				   WHERE ID_PLANTILLAPRODUCTODETALLEAVA =
						 @xCODPLANTILLAPRODUCTODETALLEAV;
			
					IF @@ROWCOUNT = 0 BEGIN
						INSERT INTO WSXML_SFG.PLANTILLAPRODUCTODETALLEAVANZA
						  (
						   CODPLANTILLAPRODUCTODETALLE,
						   CODTIPOTRANSAVANZADO,
						   CODRANGOCOMISION)
						VALUES
						  (
						   @p_CODPLANTILLAPRODUCTODETALLE,
						   @thisCODTIPOTRANSAVANZADO,
						   @thisCODRANGOCOMISION);
					END 
				END;

			  END;

		  FETCH NEXT FROM tlevel INTO @tlevel_value
		  END;

	  CLOSE tlevel;
	  DEALLOCATE tlevel;
END
GO

IF OBJECT_ID('WSXML_SFG.SFGPLANTILLAPRODUCTO_UpdateAdvanceTableChanges', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGPLANTILLAPRODUCTO_UpdateAdvanceTableChanges;
GO

CREATE     PROCEDURE WSXML_SFG.SFGPLANTILLAPRODUCTO_UpdateAdvanceTableChanges AS

  BEGIN
  SET NOCOUNT ON;

    DECLARE UI CURSOR FOR 
		SELECT P.CODRANGOCOMISION AS CODRANGOCOMISION_CORRECTO,
				--T.*,
				T.ID_PLANTILLAPRODUCTODETALLEAVA    AS FILA
		FROM WSXML_SFG.PLANTILLAPRODUCTODETALLEAVANZA T,
				WSXML_SFG.PLANTILLAPRODUCTODETALLE       P
		WHERE P.ID_PLANTILLAPRODUCTODETALLE =
				T.CODPLANTILLAPRODUCTODETALLE
			AND P.CODPRODUCTO = 935
			AND P.CODRANGOCOMISION <> T.CODRANGOCOMISION
			AND T.CODTIPOTRANSAVANZADO = 2; 
		OPEN UI;
		DECLARE @FILA NUMERIC(38,0), @CODRANGOCOMISION_CORRECTO NUMERIC(38,0)

		FETCH NEXT FROM UI INTO @FILA, @CODRANGOCOMISION_CORRECTO
		WHILE @@FETCH_STATUS=0
		BEGIN

			UPDATE WSXML_SFG.PLANTILLAPRODUCTODETALLEAVANZA
				SET CODRANGOCOMISION = @CODRANGOCOMISION_CORRECTO
			WHERE ID_PLANTILLAPRODUCTODETALLEAVA = @FILA;

			COMMIT;

		FETCH NEXT FROM UI INTO @FILA, @CODRANGOCOMISION_CORRECTO
		END;

		CLOSE UI;
		DEALLOCATE UI;

		DECLARE LP CURSOR FOR 
				SELECT --G.*, G.ROWID
				ID_PLANTILLAPRODUCTODETALLE
				, CODRANGOCOMISION
                FROM WSXML_SFG.PLANTILLAPRODUCTODETALLE G
                WHERE G.CODPRODUCTO = 935
                  AND G.ID_PLANTILLAPRODUCTODETALLE NOT IN
                      (SELECT T.CODPLANTILLAPRODUCTODETALLE
                         FROM WSXML_SFG.PLANTILLAPRODUCTODETALLEAVANZA T
                        WHERE T.CODTIPOTRANSAVANZADO = 2); 
		OPEN LP;

		DECLARE @LP_ID_PLANTILLAPRODUCTODETALLE NUMERIC(38,0), @LP_CODRANGOCOMISION NUMERIC(38,0)
		FETCH NEXT FROM LP INTO @LP_ID_PLANTILLAPRODUCTODETALLE, @LP_CODRANGOCOMISION
		--FETCH LP INTO;
		 WHILE @@FETCH_STATUS=0
		 BEGIN

		  INSERT INTO WSXML_SFG.PLANTILLAPRODUCTODETALLEAVANZA
			(--ID_PLANTILLAPRODUCTODETALLEAVA,
			 CODPLANTILLAPRODUCTODETALLE,
			 CODTIPOTRANSAVANZADO,
			 CODRANGOCOMISION)
		    SELECT
			--WSXML_SFG.PLANTILLAPRODUCTODETALLEAV_SEQ.NEXTVAL,
			 @LP_ID_PLANTILLAPRODUCTODETALLE,
			 2,
			 @LP_CODRANGOCOMISION

		FETCH NEXT FROM LP INTO @LP_ID_PLANTILLAPRODUCTODETALLE, @LP_CODRANGOCOMISION
		END;

		CLOSE LP;
		DEALLOCATE LP;

		DECLARE LP2 CURSOR FOR 
				SELECT --G.*, G.ROWID
					ID_PLANTILLAPRODUCTODETALLE
                 FROM WSXML_SFG.PLANTILLAPRODUCTODETALLE G
                WHERE G.CODPRODUCTO = 935  
                  AND G.ID_PLANTILLAPRODUCTODETALLE NOT IN
                      (SELECT T.CODPLANTILLAPRODUCTODETALLE
                         FROM WSXML_SFG.PLANTILLAPRODUCTODETALLEAVANZA T
                        WHERE T.CODTIPOTRANSAVANZADO = 1); 
		OPEN LP2;
		
		declare @LP2_ID_PLANTILLAPRODUCTODETALLE numeric(38,0)
		FETCH NEXT FROM LP2 INTO @LP2_ID_PLANTILLAPRODUCTODETALLE
		
		WHILE @@FETCH_STATUS=0
			BEGIN

			  INSERT INTO WSXML_SFG.PLANTILLAPRODUCTODETALLEAVANZA
				(--T.ID_PLANTILLAPRODUCTODETALLEAVA,
				 CODPLANTILLAPRODUCTODETALLE,
				 CODTIPOTRANSAVANZADO,
				 CODRANGOCOMISION)
			  SELECT
				--WSXML_SFG.PLANTILLAPRODUCTODETALLEAV_SEQ.NEXTVAL,
				 @LP2_ID_PLANTILLAPRODUCTODETALLE,
				 1,
				 73

			FETCH NEXT FROM LP2 INTO @LP2_ID_PLANTILLAPRODUCTODETALLE
			END;

			CLOSE LP2;
			DEALLOCATE LP2;

  END;

GO



