USE SFGPRODU;
--  DDL for Package Body SFGINF_CIERRESEMANAL
--------------------------------------------------------

  /* PACKAGE BODY WSXML_SFG.SFGINF_CIERRESEMANAL */ 

  /* Configuracion mensual facturacion de cierre */
  IF OBJECT_ID('WSXML_SFG.SFGINF_CIERRESEMANAL_GetWeeklyHeaders', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGINF_CIERRESEMANAL_GetWeeklyHeaders;
GO

CREATE     PROCEDURE WSXML_SFG.SFGINF_CIERRESEMANAL_GetWeeklyHeaders(@p_CODCICLOFACTURACIONPDV NUMERIC(22,0)) AS
 BEGIN
    DECLARE @lstCICLOSFACTURACION WSXML_SFG.CICLOINFO;
   
  SET NOCOUNT ON;
	INSERT INTO @lstCICLOSFACTURACION
    SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, NULL AS FECHAINICIO, FECHAEJECUCION 
	FROM WSXML_SFG.CICLOFACTURACIONPDV WHERE ID_CICLOFACTURACIONPDV = @p_CODCICLOFACTURACIONPDV AND ACTIVE = 1 
	ORDER BY SECUENCIA
    IF (SELECT COUNT(*) FROM @lstCICLOSFACTURACION) = 0 BEGIN
      RAISERROR('-20085 No existen ciclos de facturaci√≥n a la fecha estipulada', 16, 1);
    END 
    /* Sobreescribir fechas para cada ciclo, y obtener fechas generales de lista */
    DECLARE ix CURSOR FOR 
		SELECT ID_CICLOFACTURACIONPDV, SECUENCIA, FECHAINICIO, FECHAFIN FROM @lstCICLOSFACTURACION
		OPEN ix

		DECLARE @ID_CICLOFACTURACIONPDV NUMERIC(38,0), @SECUENCIA NUMERIC(38,0), @FECHAINICIO DATETIME, @FECHAFIN DATETIME
        DECLARE @iniDATE DATETIME;
        DECLARE @endDATE DATETIME;

		FETCH NEXT FROM ix INTO @ID_CICLOFACTURACIONPDV , @SECUENCIA , @FECHAINICIO, @FECHAFIN
        
        WHILE (@@FETCH_STATUS = 0)
		BEGIN
			EXEC WSXML_SFG.SFGCICLOFACTURACIONPDV_GetCicloDateRangeFromID @ID_CICLOFACTURACIONPDV, @iniDATE OUT, @endDATE OUT

			UPDATE @lstCICLOSFACTURACION SET FECHAINICIO = @iniDATE, FECHAFIN = @endDATE WHERE ID_CICLOFACTURACIONPDV = @ID_CICLOFACTURACIONPDV
      
		FETCH NEXT FROM ix INTO @ID_CICLOFACTURACIONPDV , @SECUENCIA , @FECHAINICIO, @FECHAFIN
		END;
		CLOSE ix;
		DEALLOCATE ix;

		SELECT SECUENCIA AS ORDEN,
             '(' + ISNULL(WSXML_SFG.SFG_PACKAGE_GetYearNumber(FECHAFIN), '') + '-' + ISNULL(WSXML_SFG.SFG_PACKAGE_GetWeekNumber(FECHAFIN), '') + ') ' +
             ISNULL(WSXML_SFG.SFG_PACKAGE_StringShortRangoDeFechas(FECHAINICIO, FECHAFIN), '') AS NOMBRE,
             'SFGINF_CIERREMENSUAL.GetWeeklyData'                   AS PROCEDURENAME,
             ID_CICLOFACTURACIONPDV                                 AS ID_CICLOFACTURACIONPDV
      FROM @lstCICLOSFACTURACION
  END;
GO

  /* Valores de Facturaci?n para cuadre semanal */
  IF OBJECT_ID('WSXML_SFG.SFGINF_CIERRESEMANAL_GetWeeklyData', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGINF_CIERRESEMANAL_GetWeeklyData;
GO

CREATE     PROCEDURE WSXML_SFG.SFGINF_CIERRESEMANAL_GetWeeklyData(@p_CODCICLOFACTURACIONPDV NUMERIC(22,0),
                          @p_CODLINEADENEGOCIO      NUMERIC(22,0),
                          @pg_CADENA                NVARCHAR(2000),
                          @pg_ALIADOESTRATEGICO     NVARCHAR(2000),
                         @pg_PRODUCTO              NVARCHAR(2000)) AS
  BEGIN
  SET NOCOUNT ON;
      SELECT TPR.NOMTIPOPRODUCTO       AS TIPOPRODUCTO,
             AGP.NOMAGRUPACIONPRODUCTO AS PRODUCTO,
             SUM(ISNULL(CANTIDADVENTA - CANTIDADANULACION, 0))   AS CANTIDADVENTASBUENAS,
             SUM(ISNULL(VALORVENTA - VALORANULACION, 0))         AS VALORVENTASBUENAS,
             SUM(ISNULL(IMPUESTO_IVA, 0))                        AS IVAPRODUCTO,
             SUM(ISNULL(DESCUENTOS, 0))                          AS DESCUENTOS,
             SUM(ISNULL(VALORVENTABRUTA, 0))                     AS INGRESOSBRUTOS,
             SUM(ISNULL(VALORCOMISION, 0))                       AS COMISION,
             SUM(ISNULL(VATCOMISION, 0))                         AS IVACOMISION,
             SUM(ISNULL(VALORCOMISIONBRUTA, 0))                  AS COMISIONBRUTA,
             SUM(ISNULL(RETENCION_RENTA, 0))                     AS RETEFUENTE,
             SUM(ISNULL(RETENCION_RETEIVA, 0))                   AS RETEIVA,
             SUM(ISNULL(RETENCION_RETEICA, 0))                   AS RETEICA,
             SUM(ISNULL(RETENCION_RETECREE, 0))                  AS RETECREE,
             SUM(ISNULL(VALORCOMISIONNETA, 0))                   AS COMISIONNETA,
             SUM(ISNULL(VALORPREMIOPAGO, 0))                     AS PREMIOSPAGADOS,
             SUM(ISNULL(FACTURADOENCONTRAGTECH - FACTURADOAFAVORGTECH, 0))     AS TOTALAPAGARGTECH,
             SUM(ISNULL(FACTURADOENCONTRAFIDUCIA - FACTURADOAFAVORFIDUCIA, 0)) AS TOTALAPAGARFIDUCIA
      FROM WSXML_SFG.TIPOPRODUCTO TPR
      INNER JOIN WSXML_SFG.AGRUPACIONPRODUCTO AGP          ON (TPR.ID_TIPOPRODUCTO = AGP.CODTIPOPRODUCTO)
      INNER JOIN WSXML_SFG.PRODUCTO PRD                    ON (AGP.ID_AGRUPACIONPRODUCTO = PRD.CODAGRUPACIONPRODUCTO)
      LEFT OUTER JOIN WSXML_SFG.VW_SHOW_PRDFACTURACION PRF ON (PRD.ID_PRODUCTO = PRF.CODPRODUCTO AND PRF.ID_CICLOFACTURACIONPDV = @p_CODCICLOFACTURACIONPDV)
      WHERE TPR.CODLINEADENEGOCIO    = @p_CODLINEADENEGOCIO
        AND PRD.CODALIADOESTRATEGICO = CASE WHEN @pg_ALIADOESTRATEGICO = '-1' THEN PRD.CODALIADOESTRATEGICO ELSE WSXML_SFG.ALIADOESTRATEGICO_F(@pg_ALIADOESTRATEGICO) END
        AND PRD.ID_PRODUCTO          = CASE WHEN @pg_PRODUCTO = '-1' THEN PRD.ID_PRODUCTO ELSE WSXML_SFG.PRODUCTO_F(@pg_PRODUCTO) END
        /* NULL Filters */
        AND @pg_CADENA = @pg_CADENA
      GROUP BY TPR.NOMTIPOPRODUCTO, AGP.CODTIPOPRODUCTO, AGP.NOMAGRUPACIONPRODUCTO
      ORDER BY AGP.CODTIPOPRODUCTO, AGP.NOMAGRUPACIONPRODUCTO;
  END;



GO

