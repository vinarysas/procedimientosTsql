USE SFGPRODU;
--  DDL for Package Body SFGESTADODETALLETAREAEJECUTADA
--------------------------------------------------------

  /* PACKAGE BODY WSXML_SFG.SFGESTADODETALLETAREAEJECUTADA */ 

  IF OBJECT_ID('WSXML_SFG.SFGESTADODETALLETAREAEJECUTADA_AddRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGESTADODETALLETAREAEJECUTADA_AddRecord;
GO

CREATE     PROCEDURE WSXML_SFG.SFGESTADODETALLETAREAEJECUTADA_AddRecord(@p_CODDETALLETAREAEJECUTADA     NUMERIC(22,0),
                      @p_CODESTADOTAREA               NUMERIC(22,0),
                      @p_CODUSUARIOMODIFICACION       NUMERIC(22,0),
                      @p_ID_ESTADODETALLETAREAEJE_out NUMERIC(22,0) OUT) AS
  BEGIN
  SET NOCOUNT ON;
    INSERT INTO WSXML_SFG.ESTADODETALLETAREAEJECUTADA ( CODDETALLETAREAEJECUTADA, CODESTADOTAREA, CODUSUARIOMODIFICACION)
    VALUES ( @p_CODDETALLETAREAEJECUTADA, @p_CODESTADOTAREA, @p_CODUSUARIOMODIFICACION);
    SET @p_ID_ESTADODETALLETAREAEJE_out = SCOPE_IDENTITY();
    UPDATE WSXML_SFG.DETALLETAREAEJECUTADA SET CODESTADOTAREAACTIVO = @p_CODESTADOTAREA WHERE ID_DETALLETAREAEJECUTADA = @p_CODDETALLETAREAEJECUTADA;
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGESTADODETALLETAREAEJECUTADA_UpdateRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGESTADODETALLETAREAEJECUTADA_UpdateRecord;
GO

CREATE     PROCEDURE WSXML_SFG.SFGESTADODETALLETAREAEJECUTADA_UpdateRecord(@pk_ID_ESTADODETALLETAREAEJECUT NUMERIC(22,0),
                         @p_CODDETALLETAREAEJECUTADA     NUMERIC(22,0),
                         @p_CODESTADOTAREA               NUMERIC(22,0),
                         @p_ACTIVE                       NUMERIC(22,0),
                         @p_CODUSUARIOMODIFICACION       NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
    UPDATE WSXML_SFG.ESTADODETALLETAREAEJECUTADA
       SET CODDETALLETAREAEJECUTADA = @p_CODDETALLETAREAEJECUTADA,
           CODESTADOTAREA           = @p_CODESTADOTAREA,
           FECHAHORAMODIFICACION    = GETDATE(),
           CODUSUARIOMODIFICACION   = @p_CODUSUARIOMODIFICACION,
           ACTIVE                   = @p_ACTIVE
     WHERE ID_ESTADODETALLETAREAEJECUTADA = @pk_ID_ESTADODETALLETAREAEJECUT;
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGESTADODETALLETAREAEJECUTADA_DisableByDetalle', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGESTADODETALLETAREAEJECUTADA_DisableByDetalle;
GO

CREATE     PROCEDURE WSXML_SFG.SFGESTADODETALLETAREAEJECUTADA_DisableByDetalle(@p_CODDETALLETAREAEJECUTADA NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
    UPDATE WSXML_SFG.ESTADODETALLETAREAEJECUTADA SET ACTIVE = 0 WHERE CODDETALLETAREAEJECUTADA = @p_CODDETALLETAREAEJECUTADA AND ACTIVE = 1;
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGESTADODETALLETAREAEJECUTADA_ResetEstadoDetalle', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGESTADODETALLETAREAEJECUTADA_ResetEstadoDetalle;
GO

CREATE     PROCEDURE WSXML_SFG.SFGESTADODETALLETAREAEJECUTADA_ResetEstadoDetalle(@p_CODDETALLETAREAEJECUTADA NUMERIC(22,0), @p_CODUSUARIOMODIFICACION NUMERIC(22,0), @p_ID_ESTADODETALLETAREAEJE_out NUMERIC(22,0) OUT) AS
  BEGIN
  SET NOCOUNT ON;

  DECLARE 	@p_REGISTRADA      			TINYINT,
                    @p_INICIADA         		TINYINT,
                    @p_FINALIZADAOK 			TINYINT,
                    @p_FINALIZADAFALLO  		TINYINT,
					@p_ABORTADA  				TINYINT,
					@p_NOINICIADA  				TINYINT,
					@p_FINALIZADAADVERTENCIA  	TINYINT

  EXEC WSXML_SFG.SFGESTADOTAREAEJECUTADA_CONSTANT
					@p_REGISTRADA      			OUT,
                    @p_INICIADA         		OUT,
                    @p_FINALIZADAOK 			OUT,
                    @p_FINALIZADAFALLO  		OUT,
					@p_ABORTADA  				OUT,
					@p_NOINICIADA  				OUT,
					@p_FINALIZADAADVERTENCIA  	OUT

    EXEC WSXML_SFG.SFGESTADODETALLETAREAEJECUTADA_DisableByDetalle @p_CODDETALLETAREAEJECUTADA
    EXEC WSXML_SFG.SFGESTADODETALLETAREAEJECUTADA_AddRecord @p_CODDETALLETAREAEJECUTADA, @p_REGISTRADA, @p_CODUSUARIOMODIFICACION, @p_ID_ESTADODETALLETAREAEJE_out OUT
  END;
GO

  /* Establece el estado de un detalle de tarea. No debe abortar las sucesoras, pero si cuidar el estado final de la tarea */
  IF OBJECT_ID('WSXML_SFG.SFGESTADODETALLETAREAEJECUTADA_SetEstado', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGESTADODETALLETAREAEJECUTADA_SetEstado;
GO

CREATE     PROCEDURE WSXML_SFG.SFGESTADODETALLETAREAEJECUTADA_SetEstado(@p_CODDETALLETAREAEJECUTADA NUMERIC(22,0),
                      @p_CODESTADOTAREA           NUMERIC(22,0),
                      @p_CODUSUARIOMODIFICACION   NUMERIC(22,0)) AS
 BEGIN
    DECLARE @cOUTESTADO NUMERIC(22,0);
   
  SET NOCOUNT ON;

    DECLARE 	@p_REGISTRADA      			TINYINT,
                    @p_INICIADA         		TINYINT,
                    @p_FINALIZADAOK 			TINYINT,
                    @p_FINALIZADAFALLO  		TINYINT,
					@p_ABORTADA  				TINYINT,
					@p_NOINICIADA  				TINYINT,
					@p_FINALIZADAADVERTENCIA  	TINYINT

  EXEC WSXML_SFG.SFGESTADOTAREAEJECUTADA_CONSTANT
					@p_REGISTRADA      			OUT,
                    @p_INICIADA         		OUT,
                    @p_FINALIZADAOK 			OUT,
                    @p_FINALIZADAFALLO  		OUT,
					@p_ABORTADA  				OUT,
					@p_NOINICIADA  				OUT,
					@p_FINALIZADAADVERTENCIA  	OUT


    -- Desactivar los otros estados de esta ejecucion e insertar / Solo abortar cuando en 1 y 2
    IF @p_CODESTADOTAREA = @p_ABORTADA BEGIN
        DECLARE @cESTADOACTUAL NUMERIC(22,0);
      BEGIN
		BEGIN TRY
        SELECT @cESTADOACTUAL = CODESTADOTAREA FROM WSXML_SFG.ESTADODETALLETAREAEJECUTADA
        WHERE CODDETALLETAREAEJECUTADA = @p_CODDETALLETAREAEJECUTADA AND ACTIVE = 1;
        IF @cESTADOACTUAL IN (1, 2) BEGIN
          -- Abortar
          EXEC WSXML_SFG.SFGESTADODETALLETAREAEJECUTADA_DisableByDetalle @p_CODDETALLETAREAEJECUTADA
          EXEC WSXML_SFG.SFGESTADODETALLETAREAEJECUTADA_AddRecord @p_CODDETALLETAREAEJECUTADA, @p_CODESTADOTAREA, @p_CODUSUARIOMODIFICACION, @cOUTESTADO
        END 
		END TRY
		BEGIN CATCH
			SELECT NULL;
		END CATCH
      END;

    END
    ELSE BEGIN
      EXEC WSXML_SFG.SFGESTADODETALLETAREAEJECUTADA_DisableByDetalle @p_CODDETALLETAREAEJECUTADA
      EXEC WSXML_SFG.SFGESTADODETALLETAREAEJECUTADA_AddRecord @p_CODDETALLETAREAEJECUTADA, @p_CODESTADOTAREA, @p_CODUSUARIOMODIFICACION, @cOUTESTADO
    END 
    -- Calcular de acuerdo a las reglas el mas actual de los estados de la subtarea
      DECLARE @cCODTAREAEJECUTADA NUMERIC(22,0);       -- Identificador macrotarea
      DECLARE @lstESTADOSTAREAEJECUTADA WSXML_SFG.NUMBERARRAY; -- Estados de la tarea
      DECLARE @cTOTALDETALLES NUMERIC(22,0) = 0;
      DECLARE @cDETALLESREGISTRA NUMERIC(22,0) = 0;
      DECLARE @cDETALLESINICIADO NUMERIC(22,0) = 0;
      DECLARE @cDETALLESABORTADO NUMERIC(22,0) = 0;
      DECLARE @cDETALLESFINALZOK NUMERIC(22,0) = 0;
      DECLARE @cDETALLESFINALWRN NUMERIC(22,0) = 0;
      DECLARE @cDETALLESFINALFAL NUMERIC(22,0) = 0;
    BEGIN
      -- Obtener identificador y estado actual macrotarea
      SELECT @cCODTAREAEJECUTADA = D.CODTAREAEJECUTADA FROM WSXML_SFG.DETALLETAREAEJECUTADA D WHERE D.ID_DETALLETAREAEJECUTADA = @p_CODDETALLETAREAEJECUTADA;
      
	  INSERT INTO @lstESTADOSTAREAEJECUTADA
	  SELECT CODESTADOTAREA FROM ESTADOTAREAEJECUTADA WHERE CODTAREAEJECUTADA = @cCODTAREAEJECUTADA;

      -- Contar numero de detalles
      SELECT @cTOTALDETALLES = COUNT(1) FROM WSXML_SFG.DETALLETAREAEJECUTADA WHERE CODTAREAEJECUTADA = @cCODTAREAEJECUTADA;
      SELECT @cDETALLESREGISTRA = ISNULL(SUM(CASE WHEN E.CODESTADOTAREA = @p_REGISTRADA THEN 1 ELSE 0 END), 0),
             @cDETALLESINICIADO = ISNULL(SUM(CASE WHEN E.CODESTADOTAREA = @p_INICIADA THEN 1 ELSE 0 END), 0),
             @cDETALLESABORTADO = ISNULL(SUM(CASE WHEN E.CODESTADOTAREA = @p_ABORTADA THEN 1 ELSE 0 END), 0),
             @cDETALLESFINALZOK = ISNULL(SUM(CASE WHEN E.CODESTADOTAREA = @p_FINALIZADAOK THEN 1 ELSE 0 END), 0),
             @cDETALLESFINALWRN = ISNULL(SUM(CASE WHEN E.CODESTADOTAREA = @p_FINALIZADAADVERTENCIA THEN 1 ELSE 0 END), 0),
             @cDETALLESFINALFAL = ISNULL(SUM(CASE WHEN E.CODESTADOTAREA = @p_FINALIZADAFALLO THEN 1 ELSE 0 END), 0)
      FROM WSXML_SFG.TAREAEJECUTADA T
      LEFT OUTER JOIN WSXML_SFG.DETALLETAREAEJECUTADA D ON (D.CODTAREAEJECUTADA = T.ID_TAREAEJECUTADA)
      LEFT OUTER JOIN (SELECT CODDETALLETAREAEJECUTADA, MAX(CODESTADOTAREA) AS CODESTADOTAREA FROM WSXML_SFG.ESTADODETALLETAREAEJECUTADA WHERE ACTIVE = 1
                       GROUP BY CODDETALLETAREAEJECUTADA) E ON (D.ID_DETALLETAREAEJECUTADA = E.CODDETALLETAREAEJECUTADA)
      WHERE D.CODTAREAEJECUTADA = @cCODTAREAEJECUTADA AND D.ID_DETALLETAREAEJECUTADA <> @p_CODDETALLETAREAEJECUTADA;

      IF @p_CODESTADOTAREA = @p_REGISTRADA BEGIN
        IF NOT EXISTS (SELECT * FROM @lstESTADOSTAREAEJECUTADA WHERE IDVALUE = @p_CODESTADOTAREA)
			EXEC WSXML_SFG.SFGESTADOTAREAEJECUTADA_SETESTADO @cCODTAREAEJECUTADA, @p_CODESTADOTAREA, @p_CODUSUARIOMODIFICACION
      END 
      ELSe IF @p_CODESTADOTAREA = @p_INICIADA BEGIN
        IF NOT EXISTS (SELECT * FROM @lstESTADOSTAREAEJECUTADA WHERE IDVALUE = @p_CODESTADOTAREA)
          EXEC SFGESTADOTAREAEJECUTADA_SETESTADO @cCODTAREAEJECUTADA, @p_CODESTADOTAREA, @p_CODUSUARIOMODIFICACION
      END
      ELSe IF @p_CODESTADOTAREA = @p_FINALIZADAFALLO OR @p_CODESTADOTAREA = @p_FINALIZADAOK OR @p_CODESTADOTAREA = @p_FINALIZADAADVERTENCIA BEGIN
        -- Actualizar el numero de registros as 100
        IF @p_CODESTADOTAREA = @p_FINALIZADAOK OR @p_CODESTADOTAREA = @p_FINALIZADAADVERTENCIA BEGIN
          UPDATE WSXML_SFG.DETALLETAREAEJECUTADA SET COUNTREGISTROS = TOTALREGISTROS WHERE ID_DETALLETAREAEJECUTADA = @p_CODDETALLETAREAEJECUTADA;
        END 
      END;

	  DECLARE @msg VARCHAR(2000)

      -- Controlar el estado de macrotarea. Prioridades
      IF @cDETALLESREGISTRA > 0 OR @cDETALLESINICIADO > 0 OR @p_CODESTADOTAREA =@p_REGISTRADA OR @p_CODESTADOTAREA = @p_INICIADA
			SELECT NULL; -- Not trying to finalize
      ELSe IF @cTOTALDETALLES = (@cDETALLESFINALZOK + @cDETALLESFINALWRN + @cDETALLESFINALFAL + @cDETALLESABORTADO) + 1 
        IF @cDETALLESABORTADO > 0 OR @p_CODESTADOTAREA = @p_ABORTADA BEGIN
          EXEC WSXML_SFG.SFGESTADOTAREAEJECUTADA_SetEstado @cCODTAREAEJECUTADA, @p_ABORTADA, p_CODUSUARIOMODIFICACION
        END
        ELSE IF @cDETALLESFINALFAL > 0 OR @p_CODESTADOTAREA = @p_FINALIZADAFALLO BEGIN
			EXEC  WSXML_SFG.SFGESTADOTAREAEJECUTADA_SetEstado @cCODTAREAEJECUTADA, @p_FINALIZADAFALLO, p_CODUSUARIOMODIFICACION
        END
        ELSE IF @cDETALLESFINALWRN > 0 OR @p_CODESTADOTAREA = @p_FINALIZADAADVERTENCIA BEGIN
          EXEC WSXML_SFG.SFGESTADOTAREAEJECUTADA_SetEstado @cCODTAREAEJECUTADA, @p_FINALIZADAADVERTENCIA, p_CODUSUARIOMODIFICACION
        END
        ELSE IF @cDETALLESFINALZOK > 0 OR @p_CODESTADOTAREA = @p_FINALIZADAOK BEGIN
          EXEC WSXML_SFG.SFGESTADOTAREAEJECUTADA_SetEstado  cCODTAREAEJECUTADA, @p_FINALIZADAOK, p_CODUSUARIOMODIFICACION
        END
        ELSE BEGIN
			SET @msg = 'Failed subtask count check for task execution: ' + ISNULL(@cCODTAREAEJECUTADA, '') + '. Current state is ' + ISNULL(@p_CODESTADOTAREA, '')
          EXEC WSXML_SFG.SFGTMPTRACE_TraceLog  @msg 
        END 
      ELSE IF EXISTS (SELECT * FROM @lstESTADOSTAREAEJECUTADA WHERE IDVALUE = @p_REGISTRADA)
			OR EXISTS (SELECT * FROM @lstESTADOSTAREAEJECUTADA WHERE IDVALUE = @p_INICIADA)
			SELECT NULL;
      ELSE BEGIN
		SET  @msg = 'Failed finalization check for task ' + ISNULL(@cCODTAREAEJECUTADA, '') + '. Counted ' + ISNULL(@cTOTALDETALLES, '') + ' but retrieved only ' + ISNULL((@cDETALLESFINALZOK + @cDETALLESFINALWRN + @cDETALLESFINALFAL + @cDETALLESABORTADO),'')
        EXEC WSXML_SFG.SFGTMPTRACE_TraceLog @msg
      END

    END

	--EXCEPTION WHEN OTHERS THEN
	--	NULL;
  END
GO

   IF OBJECT_ID('WSXML_SFG.SFGESTADODETALLETAREAEJECUTADA_GetRecord', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGESTADODETALLETAREAEJECUTADA_GetRecord;
GO

CREATE     PROCEDURE WSXML_SFG.SFGESTADODETALLETAREAEJECUTADA_GetRecord(@pk_ID_ESTADODETALLETAREAEJECUT NUMERIC(22,0)) AS
 BEGIN
    DECLARE @l_count INTEGER;
   
  SET NOCOUNT ON;
    SELECT @l_count = COUNT(*) FROM WSXML_SFG.ESTADODETALLETAREAEJECUTADA WHERE ID_ESTADODETALLETAREAEJECUTADA = @pk_ID_ESTADODETALLETAREAEJECUT;
    IF @l_count = 0 BEGIN
      RAISERROR('-20054 THE RECORD NO LONGER EXISTS.', 16, 1);
    END 
    IF @l_count > 1 BEGIN
      RAISERROR('-20053 DUPLICATE OBJECT INSTANCES.', 16, 1);
    END 
      SELECT DTE.ID_ESTADODETALLETAREAEJECUTADA, DTE.CODDETALLETAREAEJECUTADA, DTE.CODESTADOTAREA, DTE.ACTIVE, DTE.FECHAHORAMODIFICACION, DTE.CODUSUARIOMODIFICACION, DTE.FECHAHORAESTADO
      FROM WSXML_SFG.ESTADODETALLETAREAEJECUTADA DTE WHERE DTE.ID_ESTADODETALLETAREAEJECUTADA = @pk_ID_ESTADODETALLETAREAEJECUT;
  END;
GO


   IF OBJECT_ID('WSXML_SFG.SFGESTADODETALLETAREAEJECUTADA_GetList', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGESTADODETALLETAREAEJECUTADA_GetList;
GO

CREATE     PROCEDURE WSXML_SFG.SFGESTADODETALLETAREAEJECUTADA_GetList(@p_ACTIVE NUMERIC(22,0)) AS
  BEGIN
  SET NOCOUNT ON;
      SELECT ID_ESTADODETALLETAREAEJECUTADA, CODDETALLETAREAEJECUTADA, CODESTADOTAREA, ACTIVE, FECHAHORAMODIFICACION, CODUSUARIOMODIFICACION, FECHAHORAESTADO FROM WSXML_SFG.ESTADODETALLETAREAEJECUTADA
      WHERE ACTIVE = CASE WHEN @p_ACTIVE = -1 THEN ACTIVE ELSE @p_ACTIVE END;
  END;
GO


   IF OBJECT_ID('WSXML_SFG.SFGESTADODETALLETAREAEJECUTADA_GetListNotFinalize', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGESTADODETALLETAREAEJECUTADA_GetListNotFinalize;
GO

CREATE     PROCEDURE WSXML_SFG.SFGESTADODETALLETAREAEJECUTADA_GetListNotFinalize AS
  BEGIN
  SET NOCOUNT ON;
    SELECT ID_ESTADODETALLETAREAEJECUTADA FROM WSXML_SFG.ESTADODETALLETAREAEJECUTADA WHERE (CODESTADOTAREA = 1 OR CODESTADOTAREA = 2) AND ACTIVE = 1;
  END;
GO





