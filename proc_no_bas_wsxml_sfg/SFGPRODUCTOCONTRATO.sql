USE SFGPRODU;
--  DDL for Package Body SFGPRODUCTOCONTRATO
--------------------------------------------------------

  /* PACKAGE BODY WSXML_SFG.SFGPRODUCTOCONTRATO */ 

  IF OBJECT_ID('WSXML_SFG.SFGPRODUCTOCONTRATO_CONSTANT', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGPRODUCTOCONTRATO_CONSTANT;
GO

CREATE     PROCEDURE WSXML_SFG.SFGPRODUCTOCONTRATO_CONSTANT(
						@COMPRAYVENTA			SMALLINT OUT,
						@CONSIGNACION			SMALLINT OUT,
						@PARTICIPACION 			SMALLINT OUT,
						@SERVICIOS     			SMALLINT OUT,
						@CONCESION     			SMALLINT OUT
	) AS
BEGIN
	SET NOCOUNT ON;

	SET @COMPRAYVENTA  = 1;
	SET @CONSIGNACION  = 2;
	SET @PARTICIPACION = 3;
	SET @SERVICIOS     = 4;
	SET @CONCESION     = 5;
  
END;
GO
  
  
IF OBJECT_ID('WSXML_SFG.SFGPRODUCTOCONTRATO_SetContrato', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGPRODUCTOCONTRATO_SetContrato;
GO

CREATE     PROCEDURE WSXML_SFG.SFGPRODUCTOCONTRATO_SetContrato(@p_CODPRODUCTO             NUMERIC(22,0),
                        @p_CODTIPOCONTRATOPRODUCTO NUMERIC(22,0),
                        @p_CODRANGOCOMISION        NUMERIC(22,0),
                        @p_CODUSUARIOMODIFICACION  NUMERIC(22,0),
                        @p_ID_PRODUCTOCONTRATO_out NUMERIC(22,0) OUT) AS
BEGIN
	SET NOCOUNT ON;
    SELECT @p_ID_PRODUCTOCONTRATO_out = ID_PRODUCTOCONTRATO FROM WSXML_SFG.PRODUCTOCONTRATO WHERE CODPRODUCTO = @p_CODPRODUCTO;
	
	IF @@ROWCOUNT > 0 BEGIN
	
		UPDATE WSXML_SFG.PRODUCTOCONTRATO SET CODTIPOCONTRATOPRODUCTO = @p_CODTIPOCONTRATOPRODUCTO,
									CODRANGOCOMISION        = @p_CODRANGOCOMISION,
									FECHAHORAMODIFICACION   = GETDATE(),
									CODUSUARIOMODIFICACION  = @p_CODUSUARIOMODIFICACION
		WHERE ID_PRODUCTOCONTRATO = @p_ID_PRODUCTOCONTRATO_out;

	END ELSE BEGIN
    -- Agent Standard Commission comes from another type of input
		  DECLARE @cCODRANGOCOMISIONESTANDAR NUMERIC(22,0);

		  EXEC WSXML_SFG.COMISIONSIMPLE_F 1, 0, 0, @cCODRANGOCOMISIONESTANDAR OUT
		  INSERT INTO WSXML_SFG.PRODUCTOCONTRATO (
										CODPRODUCTO,
										CODTIPOCONTRATOPRODUCTO,
										CODRANGOCOMISION,
										CODRANGOCOMISIONESTANDAR,
										CODUSUARIOMODIFICACION)
		  VALUES (
				  @p_CODPRODUCTO,
				  @p_CODTIPOCONTRATOPRODUCTO,
				  @p_CODRANGOCOMISION,
				  @cCODRANGOCOMISIONESTANDAR,
				  @p_CODUSUARIOMODIFICACION);
		  SET @p_ID_PRODUCTOCONTRATO_out = SCOPE_IDENTITY();

	END
END;
GO

IF OBJECT_ID('WSXML_SFG.SFGPRODUCTOCONTRATO_SetContratoComisionDiferencial', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGPRODUCTOCONTRATO_SetContratoComisionDiferencial;
GO

CREATE     PROCEDURE WSXML_SFG.SFGPRODUCTOCONTRATO_SetContratoComisionDiferencial(@p_CODPRODUCTO                  NUMERIC(22,0),
                                           @p_CODREDPDV                    NUMERIC(22,0),
                                           @p_CODAGRUPACIONPUNTODEVENTA    NUMERIC(22,0),
                                           @p_CODRANGOCOMISION             NUMERIC(22,0),
                                           @p_CODUSUARIOMODIFICACION       NUMERIC(22,0),
                                           @p_ID_PRODUCTOCONTRATOCOMDI_out NUMERIC(22,0) OUT) AS
 BEGIN
	SET NOCOUNT ON;
    DECLARE @cCODPRODUCTOCONTRATO NUMERIC(22,0);
	DECLARE @countCOMDIFS NUMERIC(22,0) = 0;
  
    SELECT @cCODPRODUCTOCONTRATO = ID_PRODUCTOCONTRATO FROM WSXML_SFG.PRODUCTOCONTRATO WHERE CODPRODUCTO = @p_CODPRODUCTO;
	
	IF @@ROWCOUNT = 0 BEGIN
		RAISERROR('-20080 No se encontro la comision general (contrato) para el producto', 16, 1);
		RETURN 0
	END
    IF @p_CODREDPDV IS NULL
      BEGIN
        SELECT @p_ID_PRODUCTOCONTRATOCOMDI_out = ID_PRODUCTOCONTRATOCOMDIF FROM WSXML_SFG.PRODUCTOCONTRATOCOMDIF
        WHERE CODPRODUCTOCONTRATO       = @cCODPRODUCTOCONTRATO
          AND CODAGRUPACIONPUNTODEVENTA = @p_CODAGRUPACIONPUNTODEVENTA;
		  
		IF @@ROWCOUNT > 0 BEGIN
			UPDATE WSXML_SFG.PRODUCTOCONTRATOCOMDIF SET CODRANGOCOMISION       = @p_CODRANGOCOMISION,
											  FECHAHORAMODIFICACION  = GETDATE(),
											  CODUSUARIOMODIFICACION = @p_CODUSUARIOMODIFICACION
			WHERE ID_PRODUCTOCONTRATOCOMDIF = @p_ID_PRODUCTOCONTRATOCOMDI_out;
		
		END ELSE BEGIN
			--DECLARE @countCOMDIFS NUMERIC(22,0) = 0;
			  SELECT @countCOMDIFS = COUNT(1) FROM WSXML_SFG.PRODUCTOCONTRATOCOMDIF
			  WHERE CODPRODUCTOCONTRATO = @cCODPRODUCTOCONTRATO
				AND CODREDPDV           IS NOT NULL;
			  IF @countCOMDIFS > 0 BEGIN
				RAISERROR('-20090 Ya existen comisiones diferenciales asignadas al producto con otro tipo de regla', 16, 1);
			  END
			  ELSE BEGIN
				INSERT INTO WSXML_SFG.PRODUCTOCONTRATOCOMDIF (
													CODPRODUCTOCONTRATO,
													CODREDPDV,
													CODAGRUPACIONPUNTODEVENTA,
													CODRANGOCOMISION,
													CODUSUARIOMODIFICACION)
				VALUES (
						@cCODPRODUCTOCONTRATO,
						@p_CODREDPDV,
						@p_CODAGRUPACIONPUNTODEVENTA,
						@p_CODRANGOCOMISION,
						@p_CODUSUARIOMODIFICACION);
				SET @p_ID_PRODUCTOCONTRATOCOMDI_out = SCOPE_IDENTITY();
			  END 
		END	
      END;
    ELSE IF @p_CODAGRUPACIONPUNTODEVENTA IS NULL
      BEGIN
        SELECT @p_ID_PRODUCTOCONTRATOCOMDI_out = ID_PRODUCTOCONTRATOCOMDIF FROM WSXML_SFG.PRODUCTOCONTRATOCOMDIF
        WHERE CODPRODUCTOCONTRATO = @cCODPRODUCTOCONTRATO
          AND CODREDPDV           = @p_CODREDPDV;
		  
		IF @@ROWCOUNT >  0 BEGIN
			UPDATE WSXML_SFG.PRODUCTOCONTRATOCOMDIF SET CODRANGOCOMISION       = @p_CODRANGOCOMISION,
											  FECHAHORAMODIFICACION  = GETDATE(),
											  CODUSUARIOMODIFICACION = @p_CODUSUARIOMODIFICACION
			WHERE ID_PRODUCTOCONTRATOCOMDIF = @p_ID_PRODUCTOCONTRATOCOMDI_out;
		
		END ELSE BEGIN
			--DECLARE @countCOMDIFS NUMERIC(22,0) = 0;

			  SELECT @countCOMDIFS = COUNT(1) FROM WSXML_SFG.PRODUCTOCONTRATOCOMDIF
			  WHERE CODPRODUCTOCONTRATO       = @cCODPRODUCTOCONTRATO
				AND CODAGRUPACIONPUNTODEVENTA IS NOT NULL;
			  IF @countCOMDIFS > 0 BEGIN
				RAISERROR('-20090 Ya existen comisiones diferenciales asignadas al producto con otro tipo de regla', 16, 1);
			  END
			  ELSE BEGIN
				INSERT INTO WSXML_SFG.PRODUCTOCONTRATOCOMDIF (
													CODPRODUCTOCONTRATO,
													CODREDPDV,
													CODAGRUPACIONPUNTODEVENTA,
													CODRANGOCOMISION,
													CODUSUARIOMODIFICACION)
				VALUES (
						@cCODPRODUCTOCONTRATO,
						@p_CODREDPDV,
						@p_CODAGRUPACIONPUNTODEVENTA,
						@p_CODRANGOCOMISION,
						@p_CODUSUARIOMODIFICACION);
				SET @p_ID_PRODUCTOCONTRATOCOMDI_out = SCOPE_IDENTITY();
			  END 

		END
      END;
    ELSE
      RAISERROR('-20085 No es posible asignar dos reglas de comision diferencial al mismo producto', 16, 1);
    
  END;
GO

IF OBJECT_ID('WSXML_SFG.SFGPRODUCTOCONTRATO_SetContratoTarifa', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGPRODUCTOCONTRATO_SetContratoTarifa;
GO

CREATE     PROCEDURE WSXML_SFG.SFGPRODUCTOCONTRATO_SetContratoTarifa(@p_CODPRODUCTO                  NUMERIC(22,0),
                              @p_CODTARIFAVALOR               NUMERIC(22,0),
                              @p_VALOR                        FLOAT,
                              @p_CODUSUARIOMODIFICACION       NUMERIC(22,0),
                              @p_UPDATEVALUEFLAG              NUMERIC(22,0) = 1,
                              @p_ID_PRODUCTOCONTRATOTARIF_out NUMERIC(22,0) OUT) AS
 BEGIN
	SET NOCOUNT ON;
    DECLARE @cCODPRODUCTOCONTRATO NUMERIC(22,0);

    SELECT @cCODPRODUCTOCONTRATO = ID_PRODUCTOCONTRATO FROM WSXML_SFG.PRODUCTOCONTRATO WHERE CODPRODUCTO = @p_CODPRODUCTO;
	
	--EXCEPTION WHEN NO_DATA_FOUND THEN
	IF @@ROWCOUNT = 0 BEGIN
		RAISERROR('-20080 No se encontro la comision general (contrato) para el producto', 16, 1);
		RETURN 0
	END
	
    BEGIN
		
		SELECT @p_ID_PRODUCTOCONTRATOTARIF_out = ID_PRODUCTOCONTRATOTARIFA FROM WSXML_SFG.PRODUCTOCONTRATOTARIFA
		WHERE CODPRODUCTOCONTRATO = @cCODPRODUCTOCONTRATO
			AND CODTARIFAVALOR      = @p_CODTARIFAVALOR;
		
		
		IF @@ROWCOUNT > 0 
		BEGIN
			IF @p_UPDATEVALUEFLAG = 1 BEGIN
				UPDATE WSXML_SFG.PRODUCTOCONTRATOTARIFA SET VALOR                  = @p_VALOR,
												  FECHAHORAMODIFICACION  = GETDATE(),
												  CODUSUARIOMODIFICACION = @p_CODUSUARIOMODIFICACION
				WHERE ID_PRODUCTOCONTRATOTARIFA = @p_ID_PRODUCTOCONTRATOTARIF_out;
			END 


		--EXCEPTION WHEN NO_DATA_FOUND THEN
		END ELSE 
		BEGIN
			INSERT INTO WSXML_SFG.PRODUCTOCONTRATOTARIFA (
											  CODPRODUCTOCONTRATO,
											  CODTARIFAVALOR,
											  VALOR,
											  CODUSUARIOMODIFICACION)
			VALUES (
				  @cCODPRODUCTOCONTRATO,
				  @p_CODTARIFAVALOR,
				  @p_VALOR,
				  @p_CODUSUARIOMODIFICACION);
			SET @p_ID_PRODUCTOCONTRATOTARIF_out = SCOPE_IDENTITY();
		END
    END;
	
END;
GO


IF OBJECT_ID('WSXML_SFG.SFGPRODUCTOCONTRATO_SetContratoTarifaCto', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGPRODUCTOCONTRATO_SetContratoTarifaCto;
GO

CREATE     PROCEDURE WSXML_SFG.SFGPRODUCTOCONTRATO_SetContratoTarifaCto(@p_CODPRODUCTOCONTRATO          NUMERIC(22,0),
                                 @p_CODTARIFAVALOR               NUMERIC(22,0),
                                 @p_VALOR                        FLOAT,
                                 @p_CODUSUARIOMODIFICACION       NUMERIC(22,0),
                                 @p_ID_PRODUCTOCONTRATOTARIF_out NUMERIC(22,0) OUT) AS
  BEGIN
  SET NOCOUNT ON;
    SELECT @p_ID_PRODUCTOCONTRATOTARIF_out = ID_PRODUCTOCONTRATOTARIFA FROM WSXML_SFG.PRODUCTOCONTRATOTARIFA
    WHERE CODPRODUCTOCONTRATO = @p_CODPRODUCTOCONTRATO
      AND CODTARIFAVALOR      = @p_CODTARIFAVALOR;
	  
	IF @@ROWCOUNT > 0 
	BEGIN
		UPDATE WSXML_SFG.PRODUCTOCONTRATOTARIFA SET VALOR                  = @p_VALOR,
										  FECHAHORAMODIFICACION  = GETDATE(),
										  CODUSUARIOMODIFICACION = @p_CODUSUARIOMODIFICACION
		WHERE ID_PRODUCTOCONTRATOTARIFA = @p_ID_PRODUCTOCONTRATOTARIF_out;
	END ELSE 
	BEGIN
	
		INSERT INTO WSXML_SFG.PRODUCTOCONTRATOTARIFA (
											CODPRODUCTOCONTRATO,
											CODTARIFAVALOR,
											VALOR,
											CODUSUARIOMODIFICACION)
		VALUES (
				@p_CODPRODUCTOCONTRATO,
				@p_CODTARIFAVALOR,
				@p_VALOR,
				@p_CODUSUARIOMODIFICACION);
		SET @p_ID_PRODUCTOCONTRATOTARIF_out = SCOPE_IDENTITY();
	END
  END;
GO

IF OBJECT_ID('WSXML_SFG.SFGPRODUCTOCONTRATO_SetContratoTarifaDependence', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGPRODUCTOCONTRATO_SetContratoTarifaDependence;
GO

CREATE     PROCEDURE WSXML_SFG.SFGPRODUCTOCONTRATO_SetContratoTarifaDependence(@p_CODPRODUCTO                  NUMERIC(22,0),
                                        @p_CODTARIFAVALOR               NUMERIC(22,0),
                                        @p_FECHAINICIOVALIDEZ           DATETIME,
                                        @p_VALOR                        FLOAT,
                                        @p_CODUSUARIOMODIFICACION       NUMERIC(22,0),
                                        @p_PRODCONTRATOCOMDTARIFHST_out NUMERIC(22,0) OUT) AS
 BEGIN
    DECLARE @cCODPRODUCTOCONTRATOTARIFA NUMERIC(22,0);
    DECLARE @countdependences           NUMERIC(22,0);
    DECLARE @cFECHA DATETIME = CONVERT(DATETIME, CONVERT(DATE,@p_FECHAINICIOVALIDEZ));
   
  SET NOCOUNT ON;
    EXEC WSXML_SFG.SFGPRODUCTOCONTRATO_SetContratoTarifa @p_CODPRODUCTO, @p_CODTARIFAVALOR, @p_VALOR, @p_CODUSUARIOMODIFICACION, 0, @cCODPRODUCTOCONTRATOTARIFA OUT
    -- Update only if no dependences are found
    SELECT @countdependences = COUNT(1) FROM WSXML_SFG.PRODCONTRATOTARIFAHISTORICO WHERE CODPRODUCTOCONTRATOTARIFA = @cCODPRODUCTOCONTRATOTARIFA;
    IF @countdependences = 0 BEGIN
      -- Overwrite values
      UPDATE WSXML_SFG.PRODUCTOCONTRATOTARIFA SET VALOR = @p_VALOR WHERE ID_PRODUCTOCONTRATOTARIFA = @cCODPRODUCTOCONTRATOTARIFA;
    END 
    -- Append dependence only if combination does not exist
    BEGIN
      SELECT @p_PRODCONTRATOCOMDTARIFHST_out = ID_PRODCONTRATOTARIFAHISTORICO FROM WSXML_SFG.PRODCONTRATOTARIFAHISTORICO
      WHERE CODPRODUCTOCONTRATOTARIFA = @cCODPRODUCTOCONTRATOTARIFA AND CODTARIFAVALOR = @p_CODTARIFAVALOR AND FECHAINICIOVALIDEZ = @cFECHA;
      
	  IF @@ROWCOUNT > 0 
	  BEGIN
	  
		  UPDATE WSXML_SFG.PRODCONTRATOTARIFAHISTORICO SET VALOR                  = @p_VALOR,
												 FECHAHORAMODIFICACION  = GETDATE(),
												 CODUSUARIOMODIFICACION = @p_CODUSUARIOMODIFICACION
		  WHERE ID_PRODCONTRATOTARIFAHISTORICO = @p_PRODCONTRATOCOMDTARIFHST_out;
	  END ELSE 
		BEGIN
		  INSERT INTO WSXML_SFG.PRODCONTRATOTARIFAHISTORICO (
												   CODPRODUCTOCONTRATOTARIFA,
												   CODTARIFAVALOR,
												   FECHAINICIOVALIDEZ,
												   VALOR,
												   CODUSUARIOMODIFICACION)
		  VALUES (
				  @cCODPRODUCTOCONTRATOTARIFA,
				  @p_CODTARIFAVALOR,
				  @cFECHA,
				  @p_VALOR,
				  @p_CODUSUARIOMODIFICACION);
		  SET @p_PRODCONTRATOCOMDTARIFHST_out = SCOPE_IDENTITY();
		END
    END;
  END;
GO

IF OBJECT_ID('WSXML_SFG.SFGPRODUCTOCONTRATO_SetContratoTarifaDiferencial', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGPRODUCTOCONTRATO_SetContratoTarifaDiferencial;
GO

CREATE     PROCEDURE WSXML_SFG.SFGPRODUCTOCONTRATO_SetContratoTarifaDiferencial(@p_CODPRODUCTO                  NUMERIC(22,0),
                                         @p_CODREDPDV                    NUMERIC(22,0),
                                         @p_CODAGRUPACIONPUNTODEVENTA    NUMERIC(22,0),
                                         @p_CODTARIFAVALOR               NUMERIC(22,0),
                                         @p_VALOR                        FLOAT,
                                         @p_CODUSUARIOMODIFICACION       NUMERIC(22,0),
                                         @p_UPDATEVALUEFLAG              NUMERIC(22,0) = 1,
                                         @p_ID_PRODUCCONTCOMDIFTARIF_out NUMERIC(22,0) OUT) AS
 BEGIN
    DECLARE @cCODPRODUCTOCONTRATO       NUMERIC(22,0);
    DECLARE @cCODPRODUCTOCONTRATOCOMDIF NUMERIC(22,0);
   
  SET NOCOUNT ON;
    SELECT @cCODPRODUCTOCONTRATO = ID_PRODUCTOCONTRATO FROM WSXML_SFG.PRODUCTOCONTRATO WHERE CODPRODUCTO = @p_CODPRODUCTO;
	IF @@ROWCOUNT = 0 BEGIN
		RAISERROR('-20080 No se encontro la comision general (contrato) para el producto', 16, 1);
		RETURN 0
	END
    IF @p_CODREDPDV IS NULL
      BEGIN
        SELECT @cCODPRODUCTOCONTRATOCOMDIF = ID_PRODUCTOCONTRATOCOMDIF FROM WSXML_SFG.PRODUCTOCONTRATOCOMDIF
        WHERE CODPRODUCTOCONTRATO       = @cCODPRODUCTOCONTRATO
          AND CODAGRUPACIONPUNTODEVENTA = @p_CODAGRUPACIONPUNTODEVENTA;
		
		IF @@ROWCOUNT > 0 BEGIN
			RAISERROR('-20095 No existe comision diferencial para asignar tarifas', 16, 1);
			RETURN 0
		END
			
        BEGIN
          SELECT @p_ID_PRODUCCONTCOMDIFTARIF_out = ID_PRODUCTOCONTRATOCOMDIFTARIF FROM WSXML_SFG.PRODUCTOCONTRATOCOMDIFTARIFA
          WHERE CODPRODUCTOCONTRATOCOMDIF = @cCODPRODUCTOCONTRATOCOMDIF
            AND CODTARIFAVALOR            = @p_CODTARIFAVALOR;
		  
		  IF @@ROWCOUNT > 0 
		  BEGIN
			  IF @p_UPDATEVALUEFLAG = 1 
			  BEGIN
				UPDATE WSXML_SFG.PRODUCTOCONTRATOCOMDIFTARIFA SET VALOR                  = @p_VALOR,
														FECHAHORAMODIFICACION  = GETDATE(),
														CODUSUARIOMODIFICACION = @p_CODUSUARIOMODIFICACION
				WHERE ID_PRODUCTOCONTRATOCOMDIFTARIF = @p_ID_PRODUCCONTCOMDIFTARIF_out;
			  END 
		  END ELSE
		  BEGIN
			  INSERT INTO WSXML_SFG.PRODUCTOCONTRATOCOMDIFTARIFA (
														CODPRODUCTOCONTRATOCOMDIF,
														CODTARIFAVALOR,
														VALOR,
														CODUSUARIOMODIFICACION)
			  VALUES (
					  @cCODPRODUCTOCONTRATOCOMDIF,
					  @p_CODTARIFAVALOR,
					  @p_VALOR,
					  @p_CODUSUARIOMODIFICACION);
			  SET @p_ID_PRODUCCONTCOMDIFTARIF_out = SCOPE_IDENTITY();
		  END
        END;
		
		
      END;
    ELSE IF @p_CODAGRUPACIONPUNTODEVENTA IS NULL
      BEGIN
        SELECT @cCODPRODUCTOCONTRATOCOMDIF = ID_PRODUCTOCONTRATOCOMDIF FROM WSXML_SFG.PRODUCTOCONTRATOCOMDIF
        WHERE CODPRODUCTOCONTRATO = @cCODPRODUCTOCONTRATO
          AND CODREDPDV           = @p_CODREDPDV;
		  
		IF @@ROWCOUNT = 0 BEGIN
			RAISERROR('-20095 No existe comision diferencial para asignar tarifas', 16, 1);
			RETURN 0
		END
			
        BEGIN
          SELECT @p_ID_PRODUCCONTCOMDIFTARIF_out = ID_PRODUCTOCONTRATOCOMDIFTARIF FROM WSXML_SFG.PRODUCTOCONTRATOCOMDIFTARIFA
          WHERE CODPRODUCTOCONTRATOCOMDIF = @cCODPRODUCTOCONTRATOCOMDIF
            AND CODTARIFAVALOR            = @p_CODTARIFAVALOR;
		
		  IF @@ROWCOUNT > 0 
		  BEGIN
			  IF @p_UPDATEVALUEFLAG = 1 BEGIN
				UPDATE WSXML_SFG.PRODUCTOCONTRATOCOMDIFTARIFA SET VALOR                  = @p_VALOR,
														FECHAHORAMODIFICACION  = GETDATE(),
														CODUSUARIOMODIFICACION = @p_CODUSUARIOMODIFICACION
				WHERE ID_PRODUCTOCONTRATOCOMDIFTARIF = @p_ID_PRODUCCONTCOMDIFTARIF_out;
			  END 
		  END ELSE 
		  BEGIN
			  INSERT INTO WSXML_SFG.PRODUCTOCONTRATOCOMDIFTARIFA (
														CODPRODUCTOCONTRATOCOMDIF,
														CODTARIFAVALOR,
														VALOR,
														CODUSUARIOMODIFICACION)
			  VALUES (
					  @cCODPRODUCTOCONTRATOCOMDIF,
					  @p_CODTARIFAVALOR,
					  @p_VALOR,
					  @p_CODUSUARIOMODIFICACION);
			  SET @p_ID_PRODUCCONTCOMDIFTARIF_out = SCOPE_IDENTITY();
		  END 
        END;
		
      END;
    ELSE
      RAISERROR('-20085 No es posible asignar dos reglas de comision diferencial al mismo producto', 16, 1);
    
	
  END;
GO

IF OBJECT_ID('WSXML_SFG.SFGPRODUCTOCONTRATO_SetContratoTarifaDifDependence', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGPRODUCTOCONTRATO_SetContratoTarifaDifDependence;
GO

CREATE     PROCEDURE WSXML_SFG.SFGPRODUCTOCONTRATO_SetContratoTarifaDifDependence(@p_CODPRODUCTO                  NUMERIC(22,0),
                                           @p_CODREDPDV                    NUMERIC(22,0),
                                           @p_CODAGRUPACIONPUNTODEVENTA    NUMERIC(22,0),
                                           @p_CODTARIFAVALOR               NUMERIC(22,0),
                                           @p_FECHAINICIOVALIDEZ           DATETIME,
                                           @p_VALOR                        FLOAT,
                                           @p_CODUSUARIOMODIFICACION       NUMERIC(22,0),
                                           @p_ID_PRODUCCONTCOMDIFTARIF_out NUMERIC(22,0) OUT) AS
 BEGIN
    DECLARE @cCODPRODUCTOCONTCOMDIFTARIFA NUMERIC(22,0);
    DECLARE @countdependences             NUMERIC(22,0);
    DECLARE @cFECHA DATETIME = CONVERT(DATETIME, CONVERT(DATE,@p_FECHAINICIOVALIDEZ));
   
  SET NOCOUNT ON;
    EXEC SFGPRODUCTOCONTRATO_SetContratoTarifaDiferencial @p_CODPRODUCTO, @p_CODREDPDV, @p_CODAGRUPACIONPUNTODEVENTA, @p_CODTARIFAVALOR, @p_VALOR, @p_CODUSUARIOMODIFICACION, 0, @cCODPRODUCTOCONTCOMDIFTARIFA OUT
    -- Update only if no dependences are found
    SELECT @countdependences = COUNT(1) FROM WSXML_SFG.PRODCONTRATOCOMDIFTARIFAHISTOR WHERE CODPRODUCTOCONTRATOCOMDIFTARIF = @cCODPRODUCTOCONTCOMDIFTARIFA;
    IF @countdependences = 0 BEGIN
      -- Overwrite values
      UPDATE WSXML_SFG.PRODUCTOCONTRATOCOMDIFTARIFA SET VALOR = @p_VALOR WHERE ID_PRODUCTOCONTRATOCOMDIFTARIF = @cCODPRODUCTOCONTCOMDIFTARIFA;
    END 
    -- Append dependence only if combination does not exist
    BEGIN
      SELECT @p_ID_PRODUCCONTCOMDIFTARIF_out = ID_PRODCONTRATOCOMDIFTARIFAHST FROM WSXML_SFG.PRODCONTRATOCOMDIFTARIFAHISTOR
      WHERE CODPRODUCTOCONTRATOCOMDIFTARIF = @cCODPRODUCTOCONTCOMDIFTARIFA 
		AND CODTARIFAVALOR = @p_CODTARIFAVALOR AND FECHAINICIOVALIDEZ = @cFECHA;
	  IF @@ROWCOUNT > 0 BEGIN
	  
		  UPDATE WSXML_SFG.PRODCONTRATOCOMDIFTARIFAHISTOR SET VALOR                  = @p_VALOR,
													FECHAHORAMODIFICACION  = GETDATE(),
													CODUSUARIOMODIFICACION = @p_CODUSUARIOMODIFICACION
		  WHERE ID_PRODCONTRATOCOMDIFTARIFAHST = @p_ID_PRODUCCONTCOMDIFTARIF_out;
	  END ELSE
	  BEGIN
		  INSERT INTO WSXML_SFG.PRODCONTRATOCOMDIFTARIFAHISTOR (
													  CODPRODUCTOCONTRATOCOMDIFTARIF,
													  CODTARIFAVALOR,
													  FECHAINICIOVALIDEZ,
													  VALOR,
													  CODUSUARIOMODIFICACION)
		  VALUES (
				  @cCODPRODUCTOCONTCOMDIFTARIFA,
				  @p_CODTARIFAVALOR,
				  @cFECHA,
				  @p_VALOR,
				  @p_CODUSUARIOMODIFICACION);
		  SET @p_ID_PRODUCCONTCOMDIFTARIF_out = SCOPE_IDENTITY();
	  END
    END;
  END;
GO

IF OBJECT_ID('WSXML_SFG.SFGPRODUCTOCONTRATO_GetTarifasProductoMaster', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGPRODUCTOCONTRATO_GetTarifasProductoMaster;
GO

CREATE     PROCEDURE WSXML_SFG.SFGPRODUCTOCONTRATO_GetTarifasProductoMaster(@p_CODPRODUCTO               NUMERIC(22,0),
                                     @p_CODREDPDV                 NUMERIC(22,0),
                                     @p_CODAGRUPACIONPUNTODEVENTA NUMERIC(22,0),
                                     @p_CODCIUDAD                 NUMERIC(22,0),
                                     @p_CODPRODUCTOCONTRATO       NUMERIC(22,0) OUT,
                                     @p_CODPRODUCTOCONTRATOCOMDIF NUMERIC(22,0) OUT) AS
 BEGIN
    DECLARE @V_DepartamentoDiferencial NUMERIC(22,0);

    DECLARE @v_CODRANGOCOMISIONDIFRED NUMERIC(22,0);
    DECLARE @v_CODRANGOCOMISIONDIFAGR NUMERIC(22,0);
    DECLARE @v_CODRANGOCOMISIONDIFDTO NUMERIC(22,0);
   
  SET NOCOUNT ON;
    SELECT @p_CODPRODUCTOCONTRATO = PCT.ID_PRODUCTOCONTRATO, @p_CODPRODUCTOCONTRATOCOMDIF = PCD.ID_PRODUCTOCONTRATOCOMDIF
      FROM WSXML_SFG.PRODUCTOCONTRATO PCT
      LEFT OUTER JOIN PRODUCTOCONTRATOCOMDIF PCD
        ON (PCT.ID_PRODUCTOCONTRATO = PCD.CODPRODUCTOCONTRATO AND
           (PCD.CODREDPDV = @p_CODREDPDV OR
           PCD.CODAGRUPACIONPUNTODEVENTA = @p_CODAGRUPACIONPUNTODEVENTA))
     WHERE PCT.CODPRODUCTO = @p_CODPRODUCTO
       --AND;

    BEGIN

      SELECT @V_DepartamentoDiferencial = D.CODDEPARTAMENTO
        FROM WSXML_SFG.PRODUCTOCONTRATOCOMDIFCIUDAD C, WSXML_SFG.PRODUCTOCONTRATOCOMDIF D
       WHERE C.CODPRODUCTOCONTRATOCOMDIF = D.ID_PRODUCTOCONTRATOCOMDIF
         AND C.ACTIVE = 1
         and C.CODCIUDAD = @p_CODCIUDAD
         AND D.CODPRODUCTOCONTRATO = @p_CODPRODUCTOCONTRATO
         --AND ;

		IF @@ROWCOUNT = 0 BEGIN
			SET @V_DepartamentoDiferencial = 0;
		END;
	END
    --Setea comisiones diferenciales multiples, dejando valida solo la de menor prioridad

    BEGIN
      SET @p_CODPRODUCTOCONTRATOCOMDIF = 0;
      SET @v_CODRANGOCOMISIONDIFRED    = 0;
      SET @v_CODRANGOCOMISIONDIFAGR    = 0;
      SET @v_CODRANGOCOMISIONDIFDTO    = 0;

      SELECT @v_CODRANGOCOMISIONDIFRED = CASE
               WHEN ISNULL(CD1.CODREDPDV, 0) = 0 THEN
                0
               ELSE
                CODRANGOCOMISION
             END,
             @v_CODRANGOCOMISIONDIFAGR = CASE
               WHEN ISNULL(CD1.CODAGRUPACIONPUNTODEVENTA, 0) = 0 THEN
                0
               ELSE
                CODRANGOCOMISION
             END,
             @v_CODRANGOCOMISIONDIFDTO = CASE
               WHEN ISNULL(CD1.CODDEPARTAMENTO, 0) = 0 THEN
                0
               ELSE
                CODRANGOCOMISION
             END
               FROM WSXML_SFG.PRODUCTOCONTRATOCOMDIF CD1
       WHERE CD1.PRIORIDAD =
             (SELECT MIN(CD.PRIORIDAD)
                FROM WSXML_SFG.PRODUCTOCONTRATOCOMDIF CD
               WHERE CD.CODPRODUCTOCONTRATO = CD1.CODPRODUCTOCONTRATO
                 AND (CD.CODREDPDV = @p_CODREDPDV OR
                     CD.CODAGRUPACIONPUNTODEVENTA =
                     @p_CODAGRUPACIONPUNTODEVENTA OR
                     CD.CODDEPARTAMENTO = @V_DepartamentoDiferencial)
                 AND CD.CODPRODUCTOCONTRATO = @p_CODPRODUCTOCONTRATO
                 AND CD.PRIORIDAD > 0)
         AND (CD1.CODREDPDV = @p_CODREDPDV OR
             CD1.CODAGRUPACIONPUNTODEVENTA = @p_CODAGRUPACIONPUNTODEVENTA OR
             CD1.CODDEPARTAMENTO = @V_DepartamentoDiferencial)
         AND CD1.CODPRODUCTOCONTRATO = @p_CODPRODUCTOCONTRATO
         --AND ;
	  IF @@ROWCOUNT = 0 BEGIN
	    SET @p_CODPRODUCTOCONTRATOCOMDIF = 0;
	  END;
	
      if @v_CODRANGOCOMISIONDIFRED > 0 begin
        SET @p_CODPRODUCTOCONTRATOCOMDIF = @v_CODRANGOCOMISIONDIFRED;
      end
      else if @v_CODRANGOCOMISIONDIFAGR > 0 begin
        SET @p_CODPRODUCTOCONTRATOCOMDIF = @v_CODRANGOCOMISIONDIFAGR;
      end
      else if @v_CODRANGOCOMISIONDIFDTO > 0 begin
        SET @p_CODPRODUCTOCONTRATOCOMDIF = @v_CODRANGOCOMISIONDIFDTO;
      end 
    
	
	
  END
END
GO

  IF OBJECT_ID('WSXML_SFG.SFGPRODUCTOCONTRATO_GetTarifaCacheList', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGPRODUCTOCONTRATO_GetTarifaCacheList;
GO

CREATE     PROCEDURE WSXML_SFG.SFGPRODUCTOCONTRATO_GetTarifaCacheList(@p_FECHA DATETIME,@p_CODPRODUCTO NUMERIC(22,0) = -1)
    AS
  BEGIN
  SET NOCOUNT ON;
/*    -- Actualizar cabeceras y eliminar
    UPDATE PRODUCTOCONTRATOTARIFA PCT
       SET VALOR = COALESCE((SELECT PTH.VALOR FROM PRODCONTRATOTARIFAHISTORICO PTH
                              WHERE PTH.CODPRODUCTOCONTRATOTARIFA = PCT.ID_PRODUCTOCONTRATOTARIFA
                                AND PTH.CODTARIFAVALOR            = PCT.CODTARIFAVALOR
                                AND PTH.FECHAINICIOVALIDEZ        = TRUNC(p_FECHA, 'DD')), PCT.VALOR);
    --DELETE FROM PRODCONTRATOTARIFAHISTORICO WHERE FECHAINICIOVALIDEZ = TRUNC(p_FECHA, 'DD');
    -- Devolver Cache
    SELECT PRODUCTTARIFA(PCT.CODPRODUCTOCONTRATO, PCT.CODTARIFAVALOR, COALESCE(PTH.VALOR, PCT.VALOR))
    BULK COLLECT INTO tarifalist FROM PRODUCTOCONTRATOTARIFA PCT
    LEFT OUTER JOIN PRODCONTRATOTARIFAHISTORICO PTH ON (PTH.CODPRODUCTOCONTRATOTARIFA = PCT.ID_PRODUCTOCONTRATOTARIFA
                                                    AND PTH.CODTARIFAVALOR            = PCT.CODTARIFAVALOR
                                                    AND PTH.FECHAINICIOVALIDEZ        = TRUNC(p_FECHA, 'DD'))
    WHERE  COALESCE(PTH.VALOR, PCT.VALOR)<>0; ---Guillermo ni?o  11/08/2014 modificacion para acelerar proceso de calculo de revneue
    
    */
    
/*     SELECT PRODUCTTARIFA(PCT.CODPRODUCTOCONTRATO, PCT.CODTARIFAVALOR,  SFGPRODUCTOCONTRATO.ResolverRangoComision(PCT.CODRANGOCOMISION,p_FECHA,PCT.CODTARIFAVALOR))
     BULK COLLECT INTO tarifalist 
     FROM PRODUCTOCONTRATOTARIFA PCT
     INNER JOIN PRODUCTOCONTRATO PC ON PCT.CODPRODUCTOCONTRATO = PC.ID_PRODUCTOCONTRATO
     WHERE  SFGPRODUCTOCONTRATO.ResolverRangoComision(PCT.CODRANGOCOMISION,p_FECHA,PCT.CODTARIFAVALOR)<>0
     AND PC.CODPRODUCTO = CASE WHEN p_CODPRODUCTO= -1 THEN PC.CODPRODUCTO ELSE p_CODPRODUCTO END;
     
    RETURN tarifalist;*/

    DELETE FROM WSXML_SFG.TEMPTBLPRODUCTOTARIFALIST;
    
     INSERT INTO WSXML_SFG.TEMPTBLPRODUCTOTARIFALIST (PARENT, CODTARIFAVALOR, VALOR)
     SELECT PCT.CODPRODUCTOCONTRATO, PCT.CODTARIFAVALOR,  WSXML_SFG.SFGPRODUCTOCONTRATO_ResolverRangoComision(PCT.CODRANGOCOMISION,@p_FECHA,PCT.CODTARIFAVALOR)
     FROM WSXML_SFG.PRODUCTOCONTRATOTARIFA PCT
		INNER JOIN WSXML_SFG.PRODUCTOCONTRATO PC ON PCT.CODPRODUCTOCONTRATO = PC.ID_PRODUCTOCONTRATO     
     WHERE  WSXML_SFG.SFGPRODUCTOCONTRATO_ResolverRangoComision(PCT.CODRANGOCOMISION,@p_FECHA,PCT.CODTARIFAVALOR)<>0
		AND PC.CODPRODUCTO = CASE WHEN @p_CODPRODUCTO= -1 THEN PC.CODPRODUCTO ELSE @p_CODPRODUCTO END;
     
    
  END;
GO

IF EXISTS (
    SELECT * FROM sys.objects WHERE OBJECT_NAME(object_id) = N'SFGPRODUCTOCONTRATO_GetTarifaDiferencialCacheList'
    AND type IN (N'FN', N'IF', N'TF')
)
     DROP FUNCTION WSXML_SFG.SFGPRODUCTOCONTRATO_GetTarifaDiferencialCacheList;
GO

CREATE     FUNCTION WSXML_SFG.SFGPRODUCTOCONTRATO_GetTarifaDiferencialCacheList(@p_FECHA DATETIME) 
RETURNS @tarifalist TABLE  (
	PARENT numeric(38,0),
	CODTARIFAVALOR NUMERIC(38,0),
	VALOR FLOAT
) AS
 BEGIN
   
    -- Actualizar cabeceras y eliminar
	/*
	-- Se extrae porque la funcion no la soporta, se coloca en cada llamamiento del procedimiento
    UPDATE WSXML_SFG.PRODUCTOCONTRATOCOMDIFTARIFA
       SET VALOR = COALESCE((SELECT PTH.VALOR FROM WSXML_SFG.PRODCONTRATOCOMDIFTARIFAHISTOR PTH
                              WHERE PTH.CODPRODUCTOCONTRATOCOMDIFTARIF = ID_PRODUCTOCONTRATOCOMDIFTARIF
                                AND PTH.CODTARIFAVALOR                 = CODTARIFAVALOR
                                AND PTH.FECHAINICIOVALIDEZ             = CONVERT(DATETIME, CONVERT(DATE,@p_FECHA))), VALOR);
	*/
    -- DELETE FROM PRODCONTRATOCOMDIFTARIFAHISTOR WHERE FECHAINICIOVALIDEZ = TRUNC(p_FECHA, 'DD');
    -- Devolver Cache
	INSERT INTO @tarifalist
    SELECT PCD.CODPRODUCTOCONTRATOCOMDIF, PCD.CODTARIFAVALOR, COALESCE(PTH.VALOR, PCD.VALOR)
    FROM WSXML_SFG.PRODUCTOCONTRATOCOMDIFTARIFA PCD
		LEFT OUTER JOIN WSXML_SFG.PRODCONTRATOCOMDIFTARIFAHISTOR PTH ON (PTH.CODPRODUCTOCONTRATOCOMDIFTARIF = PCD.ID_PRODUCTOCONTRATOCOMDIFTARIF
                                                       AND PTH.CODTARIFAVALOR                 = PCD.CODTARIFAVALOR
                                                       AND PTH.FECHAINICIOVALIDEZ             = CONVERT(DATETIME, CONVERT(DATE,@p_FECHA)))
	WHERE  COALESCE(PTH.VALOR, PCD.VALOR)<>0; ---Guillermo ni?o  11/08/2014 modificacion para acelerar proceso de calculo de revneue;
    RETURN
  END;
GO


  IF OBJECT_ID('WSXML_SFG.SFGPRODUCTOCONTRATO_TranslateTarifaFromMaster', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFGPRODUCTOCONTRATO_TranslateTarifaFromMaster;
GO

CREATE     FUNCTION WSXML_SFG.SFGPRODUCTOCONTRATO_TranslateTarifaFromMaster(--p_CACHETARIFA               PRODUCTTARIFALIST,
                                     @p_CACHETARIFADIFERENCIAL    WSXML_SFG.PRODUCTTARIFA READONLY,
                                     @p_CODPRODUCTOCONTRATO       NUMERIC(22,0),
                                     @p_CODPRODUCTOCONTRATOCOMDIF NUMERIC(22,0),
                                     @p_CODTARIFAVALOR            NUMERIC(22,0)) RETURNS FLOAT AS
 BEGIN
    DECLARE @p_VALOR_out FLOAT;
   
    IF @p_CODPRODUCTOCONTRATOCOMDIF IS NOT NULL
      BEGIN
        SELECT /*+ FIRST_ROWS(1) */ @p_VALOR_out = VALOR FROM @p_CACHETARIFADIFERENCIAL
        WHERE PARENT = @p_CODPRODUCTOCONTRATOCOMDIF AND CODTARIFAVALOR = @p_CODTARIFAVALOR;

			IF @@ROWCOUNT = 0
			-- If value was not found within differential; retreve regular
			BEGIN
			   SELECT @p_VALOR_out = VALOR FROM WSXML_SFG.temptblPRODUCTOTARIFALIST
			   WHERE PARENT = @p_CODPRODUCTOCONTRATO AND CODTARIFAVALOR = @p_CODTARIFAVALOR;

				IF @@ROWCOUNT = 0 --EXCEPTION WHEN NO_DATA_FOUND THEN
					SET @p_VALOR_out = 0;

			END;
      END;
    ELSE
      BEGIN
           SELECT @p_VALOR_out = VALOR FROM WSXML_SFG.temptblPRODUCTOTARIFALIST
           WHERE PARENT = @p_CODPRODUCTOCONTRATO AND CODTARIFAVALOR = @p_CODTARIFAVALOR;
		IF @@ROWCOUNT = 0
			SET @p_VALOR_out = 0;

      END;
    
    RETURN @p_VALOR_out;
  END;
GO

  IF OBJECT_ID('WSXML_SFG.SFGPRODUCTOCONTRATO_SetTipoContrato', 'P') IS NOT NULL
  DROP PROCEDURE WSXML_SFG.SFGPRODUCTOCONTRATO_SetTipoContrato;
GO

CREATE     PROCEDURE WSXML_SFG.SFGPRODUCTOCONTRATO_SetTipoContrato(@p_CODPRODUCTO             NUMERIC(22,0), 
                            @p_CODTIPOCONTRATOPRODUCTO NUMERIC(22,0),
                            @p_CODUSUARIOMODIFICACION  NUMERIC(22,0),
                            @p_ID_PRODUCTOCONTRATO_out NUMERIC(22,0) OUT) AS
  BEGIN
  SET NOCOUNT ON;
    SELECT @p_ID_PRODUCTOCONTRATO_out = ID_PRODUCTOCONTRATO FROM WSXML_SFG.PRODUCTOCONTRATO WHERE CODPRODUCTO = @p_CODPRODUCTO;
	
	IF @@ROWCOUNT > 0 BEGIN
		UPDATE WSXML_SFG.PRODUCTOCONTRATO SET CODTIPOCONTRATOPRODUCTO = @p_CODTIPOCONTRATOPRODUCTO,
									FECHAHORAMODIFICACION   = GETDATE(),
									CODUSUARIOMODIFICACION  = @p_CODUSUARIOMODIFICACION
		WHERE ID_PRODUCTOCONTRATO = @p_ID_PRODUCTOCONTRATO_out;
	END ELSE BEGIN
		--RAISERROR('-20054 No se puede actualizar el tipo de contrato a un contrato no existente', 16, 1);
		  DECLARE @cCODRANGOCOMISION NUMERIC(22,0);
		BEGIN
			BEGIN TRY
				EXEC WSXML_SFG.COMISIONSIMPLE_F 1, 0, 0, @cCODRANGOCOMISION OUT
				INSERT INTO WSXML_SFG.PRODUCTOCONTRATO (
											CODPRODUCTO,
											CODTIPOCONTRATOPRODUCTO,
											CODRANGOCOMISION,
											CODRANGOCOMISIONESTANDAR,
											CODUSUARIOMODIFICACION)
				VALUES (
					  @p_CODPRODUCTO,
					  @p_CODTIPOCONTRATOPRODUCTO,
					  @cCODRANGOCOMISION,
					  @cCODRANGOCOMISION,
					  @p_CODUSUARIOMODIFICACION);
				SET @p_ID_PRODUCTOCONTRATO_out = SCOPE_IDENTITY();
				DECLARE @cCODLINEADENEGOCIO NUMERIC(22,0);
				DECLARE @errormsg NVARCHAR(2000);
				
				BEGIN
					SELECT @cCODLINEADENEGOCIO = CODLINEADENEGOCIO FROM WSXML_SFG.PRODUCTO, WSXML_SFG.TIPOPRODUCTO WHERE CODTIPOPRODUCTO = ID_TIPOPRODUCTO AND ID_PRODUCTO = @p_CODPRODUCTO;
					DECLARE @lsttarifas WSXML_SFG.NUMBERARRAY;
					BEGIN
						INSERT INTO @lsttarifas
						SELECT ID_TARIFAVALOR from TARIFAVALOR;
						DECLARE ix CURSOR FOR SELECT IDValue FROM @lsttarifas
						
						DECLARE @cout NUMERIC(22,0);
						DECLARE @xVALORDEFECTO FLOAT = 0;

						DECLARE @IDValue NUMERIC(38,0)

						FETCH NEXT FROM ix INTO @IDValue
						WHILE (@@FETCH_STATUS = 0)
						BEGIN
							SELECT @xVALORDEFECTO = VALOR FROM WSXML_SFG.PRODCONTRATOTARIFADEFECTO WHERE CODLINEADENEGOCIO = @cCODLINEADENEGOCIO AND CODTARIFAVALOR = @IDValue;
							EXEC WSXML_SFG.SFGPRODUCTOCONTRATO_SetContratoTarifa @p_CODPRODUCTO, @IDValue, @xVALORDEFECTO, @p_CODUSUARIOMODIFICACION, 1, @cout OUT
							
							IF @@ROWCOUNT = 0 BEGIN
								-- Default value has not been configured. Do not mind
								SELECT NULL;
							END
						FETCH NEXT FROM ix INTO @IDValue
						END;
						
						CLOSE ix;
						DEALLOCATE ix;
					END;
					
				END;
			
			END TRY
			BEGIN CATCH
				SET @errormsg = '-20080 Cannot retrieve values for product. Contract creation cannot continue: ' + isnull(ERROR_MESSAGE() , '');
				RAISERROR(@errormsg, 16, 1);
			END CATCH
		END;
	END

  END
GO  
  
  IF OBJECT_ID('WSXML_SFG.SFGPRODUCTOCONTRATO_ResolverRangoComision', 'FN') IS NOT NULL
  DROP FUNCTION WSXML_SFG.SFGPRODUCTOCONTRATO_ResolverRangoComision;
GO

CREATE     FUNCTION WSXML_SFG.SFGPRODUCTOCONTRATO_ResolverRangoComision(@p_CODRANGOCOMISION NUMERIC(22,0), @p_FECHA DATETIME,@p_CODTARIFAVALOR NUMERIC(22,0)) 
    RETURNS FLOAT
    AS
    BEGIN
    DECLARE @v_CODTIPOCOMISION NUMERIC(22,0);
    DECLARE @v_COUNT INT;
    DECLARE @v_VALUE FLOAT;
    DECLARE @errormsg NVARCHAR(2000);
     
	BEGIN
      
        SELECT @v_CODTIPOCOMISION = RANGOCOMISION.CODTIPOCOMISION
          FROM WSXML_SFG.RANGOCOMISION
         WHERE ID_RANGOCOMISION = @p_CODRANGOCOMISION;
      

	  IF @@ROWCOUNT = 0 BEGIN
          SET @errormsg = '-20080 No se encontro informacion del rango comision : ' + isnull(convert(varchar, @p_CODRANGOCOMISION), '') +'.  Detalle del error : ' + isnull(ERROR_MESSAGE(), '')
          RETURN CAST(@errormsg AS INT);
	  END
        
	END
    
      --Validar si existe alguna comision de rangos de tiempo asociada a este rango comision
    
	SELECT @v_COUNT = COUNT(1)
	FROM WSXML_SFG.COMISIONRANGOTIEMPO
	WHERE CODRANGOCOMISION = @p_CODRANGOCOMISION;
    
     
	IF @v_CODTIPOCOMISION = 1 BEGIN
        /*Porcentual*/
        SELECT @v_VALUE = RANGOCOMISIONDETALLE.VALORPORCENTUAL-- / 100
        FROM WSXML_SFG.RANGOCOMISIONDETALLE
        WHERE CODRANGOCOMISION = @p_CODRANGOCOMISION;
          
    END
    ELSE IF @v_CODTIPOCOMISION = 2 BEGIN
        /*Transaccional*/
          
        SELECT @v_VALUE = RANGOCOMISIONDETALLE.VALORTRANSACCIONAL
          FROM WSXML_SFG.RANGOCOMISIONDETALLE
         WHERE CODRANGOCOMISION = @p_CODRANGOCOMISION;
          
    END
    ELSE BEGIN
		SET @errormsg = '-20080 No se puede resolver el rango comision : ' + isnull(convert(varchar, @p_CODRANGOCOMISION), '') +' por que esta no es transaccional o porcentual'
        --RAISERROR(@errormsg, 16, 1);
		RETURN CAST(@errormsg AS INT);
    END 
    IF @v_COUNT > 0 BEGIN
          DECLARE @v_CODCOMISIONRANGOTIEMPO     NUMERIC(22,0);
          DECLARE @v_EVALUARVENTASPORAGRUPACION NUMERIC(22,0);
          DECLARE @v_PERMITERANGOSPORTIEMPO     NUMERIC(22,0);
        BEGIN
        
          SELECT @v_PERMITERANGOSPORTIEMPO = TARIFAVALOR.ACEPTACOMISIONESRANGOTIEMPO
            FROM WSXML_SFG.TARIFAVALOR
           WHERE ID_TARIFAVALOR = @p_CODTARIFAVALOR;
        
          IF @v_PERMITERANGOSPORTIEMPO = 1 BEGIN
            --La tarifa permite evalucaciones por rangos, lo que quiere decir que hay un algoritmo para la tarifa
            
              --DECLARE @v_CODCOMISIONRANGOTIEMPO NUMERIC(22,0);
              DECLARE @v_CODPERIODICIDAD        NUMERIC(22,0);
              DECLARE @v_FRECUENCIA             NUMERIC(22,0);
              DECLARE @v_FECHAINICIO            DATETIME;
              DECLARE @v_CALENDARIO             NUMERIC(22,0);
              DECLARE @v_EVALUARVENTASPORGRUPO  NUMERIC(22,0);
            
            BEGIN
            
               SELECT @v_CODCOMISIONRANGOTIEMPO = COMISIONRANGOTIEMPO.ID_COMISIONRANGOTIEMPO,
                     @v_CODPERIODICIDAD = COMISIONRANGOTIEMPO.CODPERIODICIDAD,
                     @v_FRECUENCIA = COMISIONRANGOTIEMPO.FRECUENCIA,
                     @v_FECHAINICIO = COMISIONRANGOTIEMPO.FECHAINICIO,
                     @v_CALENDARIO = COMISIONRANGOTIEMPO.FECHACALENDARIO,
                     @v_EVALUARVENTASPORGRUPO = COMISIONRANGOTIEMPO.EVALUARVENTASPORAGRUPACION
			   FROM WSXML_SFG.COMISIONRANGOTIEMPO
               WHERE CODRANGOCOMISION = @p_CODRANGOCOMISION;
            
              /*Si se cumple la periodicidad -*/
              IF WSXML_SFG.SFGREVENUERANGOTIEMPO_CumplePeriodicidad(@p_FECHA,
                                                          @v_CODPERIODICIDAD,
                                                          @v_FRECUENCIA,
                                                          @v_FECHAINICIO,
                                                          @v_CALENDARIO) = 1 BEGIN
              
                  --DECLARE @v_FECHAINICIO               DATETIME;
                  DECLARE @v_FECHAFIN                  DATETIME;
                  --DECLARE @v_COUNT                     NUMERIC(22,0);
                  DECLARE @v_ID_COSTOASOCIADO          NUMERIC(22,0);
                  DECLARE @v_ID_ARUPACIONCOSTOASOCIADO NUMERIC(22,0);
                
                  DECLARE @v_TRXDIA                    FLOAT;

                  --Almacenamiento de los valores por el periodo de tiempo                
                  DECLARE @v_TRX                       FLOAT;
                  DECLARE @v_MONTO                     FLOAT;
                  DECLARE @v_TRXGRUPO                  FLOAT;
                  DECLARE @v_MONTOGRUPO                FLOAT;
                  
                  
                  DECLARE @v_VALORPREVIO               FLOAT;
                  DECLARE @v_VALORREVENUE              FLOAT;
                BEGIN
                
                  /*EXEC WSXML_SFG.SFGREVENUERANGOTIEMPO_GetPeriodicidadRango @p_FECHA,
                                                             @v_CODPERIODICIDAD,
                                                             @v_FRECUENCIA,
                                                             @v_CALENDARIO,
                                                             @v_FECHAINICIO OUT,
                                                             @v_FECHAFIN OUT*/
                  
				  SELECT @v_FECHAINICIO = FECHAINICIO,  @v_FECHAFIN = FECHAFIN 
				  FROM WSXML_SFG.SFGREVENUERANGOTIEMPO_GetPeriodicidadRango_F(@p_FECHA,@v_CODPERIODICIDAD, @v_FRECUENCIA, @v_CALENDARIO)
															 
                  SELECT @v_COUNT = COUNT(1)
                    FROM WSXML_SFG.COSTOASOCIADO
                   WHERE COSTOASOCIADO.CODTARIFAVALORASOCIADA =
                         @p_CODTARIFAVALOR;
                
                  IF @v_COUNT > 0
                    --  Hay costos asociados que dependen de esta tarifa
                    BEGIN
                    
						SELECT @v_ID_COSTOASOCIADO = COSTOASOCIADO.ID_COSTOASOCIADO,
                             @v_ID_ARUPACIONCOSTOASOCIADO = COSTOASOCIADO.CODAGRUPACIONCOSTOASOCIADO
						FROM WSXML_SFG.COSTOASOCIADO
						WHERE COSTOASOCIADO.CODTARIFAVALORASOCIADA =
                             @p_CODTARIFAVALOR;
                    
                      --obtener los valores para el grupo
                    
						SELECT @v_TRXGRUPO = SUM(CASE
                                   WHEN REGISTROFACTURACION.CODTIPOREGISTRO = 1 THEN
                                    COSTOASOCIADOREGFACTURACION.VALORTRANSACCIONES
                                   WHEN REGISTROFACTURACION.CODTIPOREGISTRO = 2 THEN
                                    COSTOASOCIADOREGFACTURACION.VALORTRANSACCIONES
                                   ELSE
                                    0
                                 END),
                             @v_MONTOGRUPO = SUM(CASE
                                   WHEN REGISTROFACTURACION.CODTIPOREGISTRO = 1 THEN
                                    COSTOASOCIADOREGFACTURACION.VALORTRANSACCIONES
                                   WHEN REGISTROFACTURACION.CODTIPOREGISTRO = 2 THEN
                                    COSTOASOCIADOREGFACTURACION.VALORTRANSACCIONES
                                   ELSE
                                    0
                                 END)
                        FROM WSXML_SFG.COSTOASOCIADOREGFACTURACION
                       INNER JOIN WSXML_SFG.REGISTROFACTURACION
                          ON COSTOASOCIADOREGFACTURACION.CODREGISTROFACTURACION =
                             REGISTROFACTURACION.ID_REGISTROFACTURACION
                       INNER JOIN WSXML_SFG.ENTRADAARCHIVOCONTROL
                          ON REGISTROFACTURACION.CODENTRADAARCHIVOCONTROL =
                             ENTRADAARCHIVOCONTROL.ID_ENTRADAARCHIVOCONTROL
                       INNER JOIN WSXML_SFG.COSTOASOCIADO
                          ON COSTOASOCIADOREGFACTURACION.CODCOSTOASOCIADO =
                             COSTOASOCIADO.ID_COSTOASOCIADO
                       WHERE COSTOASOCIADO.CODAGRUPACIONCOSTOASOCIADO =
                             @v_ID_ARUPACIONCOSTOASOCIADO
                         AND ENTRADAARCHIVOCONTROL.FECHAARCHIVO BETWEEN
                             @v_FECHAINICIO AND @v_FECHAFIN;
                    
                      --Obtener los valores para el costo unicamente
                    
                      SELECT @v_TRX = SUM(CASE
                                   WHEN REGISTROFACTURACION.CODTIPOREGISTRO = 1 THEN
                                    COSTOASOCIADOREGFACTURACION.VALORTRANSACCIONES
                                   WHEN REGISTROFACTURACION.CODTIPOREGISTRO = 2 THEN
                                    COSTOASOCIADOREGFACTURACION.VALORTRANSACCIONES
                                   ELSE
                                    0
                                 END),
                             @v_MONTO = SUM(CASE
                                   WHEN REGISTROFACTURACION.CODTIPOREGISTRO = 1 THEN
                                    COSTOASOCIADOREGFACTURACION.VALORTRANSACCIONES
                                   WHEN REGISTROFACTURACION.CODTIPOREGISTRO = 2 THEN
                                    COSTOASOCIADOREGFACTURACION.VALORTRANSACCIONES
                                   ELSE
                                    0
                                 END)
                        FROM WSXML_SFG.COSTOASOCIADOREGFACTURACION
                       INNER JOIN WSXML_SFG.REGISTROFACTURACION
                          ON COSTOASOCIADOREGFACTURACION.CODREGISTROFACTURACION =
                             REGISTROFACTURACION.ID_REGISTROFACTURACION
                       INNER JOIN WSXML_SFG.ENTRADAARCHIVOCONTROL
                          ON REGISTROFACTURACION.CODENTRADAARCHIVOCONTROL =
                             ENTRADAARCHIVOCONTROL.ID_ENTRADAARCHIVOCONTROL
                       INNER JOIN WSXML_SFG.COSTOASOCIADO
                          ON COSTOASOCIADOREGFACTURACION.CODCOSTOASOCIADO =
                             COSTOASOCIADO.ID_COSTOASOCIADO
                       WHERE COSTOASOCIADO.ID_COSTOASOCIADO =
                             @v_ID_COSTOASOCIADO
                         AND ENTRADAARCHIVOCONTROL.FECHAARCHIVO BETWEEN
                             @v_FECHAINICIO AND @v_FECHAFIN;
                    
                      -- Obtener los valores para el costo solo para la fecha solicitada
                      
                      SELECT @v_TRXDIA = SUM(CASE
                                   WHEN REGISTROFACTURACION.CODTIPOREGISTRO = 1 THEN
                                    COSTOASOCIADOREGFACTURACION.VALORTRANSACCIONES
                                   WHEN REGISTROFACTURACION.CODTIPOREGISTRO = 2 THEN
                                    COSTOASOCIADOREGFACTURACION.VALORTRANSACCIONES
                                   ELSE
                                    0
                                 END)
                        FROM WSXML_SFG.COSTOASOCIADOREGFACTURACION
                       INNER JOIN WSXML_SFG.REGISTROFACTURACION
                          ON COSTOASOCIADOREGFACTURACION.CODREGISTROFACTURACION =
                             REGISTROFACTURACION.ID_REGISTROFACTURACION
                       INNER JOIN WSXML_SFG.ENTRADAARCHIVOCONTROL
                          ON REGISTROFACTURACION.CODENTRADAARCHIVOCONTROL =
                             ENTRADAARCHIVOCONTROL.ID_ENTRADAARCHIVOCONTROL
                       INNER JOIN WSXML_SFG.COSTOASOCIADO
                          ON COSTOASOCIADOREGFACTURACION.CODCOSTOASOCIADO =
                             COSTOASOCIADO.ID_COSTOASOCIADO
                       WHERE COSTOASOCIADO.ID_COSTOASOCIADO =
                             @v_ID_COSTOASOCIADO
                         AND ENTRADAARCHIVOCONTROL.FECHAARCHIVO =@p_FECHA;
                      
                      
                      --Obtener el valor del revenue que debe tener para todo el periodo
                    
                      SET @v_VALORREVENUE = WSXML_SFG.SFGREVENUERANGOTIEMPO_GetValorRevenueParaCostos(@v_CODCOMISIONRANGOTIEMPO,
                                                                                        @v_MONTO,
                                                                                        @v_TRX,
                                                                                        @v_MONTOGRUPO,
                                                                                        @v_TRXGRUPO);
                    
                                          
                     /* SELECT \*+ FIRST_ROWS(1) *\  Sum(registrorevcostocalculado.valorcosto)
                        INTO v_VALORPREVIO
                        FROM registrorevcostocalculado
                       INNER JOIN registrorevenue
                          ON registrorevcostocalculado.codregistrorevenue =
                             registrorevenue.id_registrorevenue
                       INNER JOIN registrofacturacion
                          ON registrorevenue.codregistrofacturacion =
                             registrofacturacion.Id_Registrofacturacion
                       INNER JOIN entradaarchivocontrol
                          ON registrofacturacion.codentradaarchivocontrol =
                             entradaarchivocontrol.id_entradaarchivocontrol
                       WHERE entradaarchivocontrol.fechaarchivo BETWEEN
                             v_FECHAINICIO AND TRUNC(v_FECHAFIN, 'dd') - 1
                         AND registrorevcostocalculado.codcostocalculado IN
                             (SELECT codcostocalculado
                              FROM costocalculadodetalle
                              WHERE codcostoasociado = v_ID_COSTOASOCIADO
                              GROUP BY codcostocalculado);*/

                       SELECT /*+ index (r DETERMINSTC_REGREVCOSTOCALC_IX) index (registrorevenue REGISTROREVENUE_ARCHIVO_IX)  */  
                              @v_VALORPREVIO = sum(r.valorcosto)
                       FROM WSXML_SFG.registrorevcostocalculado r
                       inner join registrorevenue on r.codregistrorevenue = registrorevenue.id_registrorevenue 
                       INNER JOIN entradaarchivocontrol   ON registrorevenue.codentradaarchivocontrol =  entradaarchivocontrol.id_entradaarchivocontrol
                       WHERE entradaarchivocontrol.fechaarchivo BETWEEN @v_FECHAINICIO AND CONVERT(DATETIME, CONVERT(DATE,@v_FECHAFIN)) - 1
                       AND R.CODCOSTOCALCULADO          in  (SELECT   /*+ FIRST_ROWS(1) */  codcostocalculado
                                                       FROM WSXML_SFG.costocalculadodetalle c
                                                       WHERE codcostoasociado = @v_ID_COSTOASOCIADO );                            
                              
                              
                              
                       --Obtener el valor de la transacciones del dia y dividir el valor del revenue en las transacciones
                      SET @v_VALUE = (@v_VALORREVENUE-@v_VALORPREVIO) / @v_TRXDIA;
                       
                    END;
                  
                END;
              
              END 
            END;
          END
          ELSE BEGIN
				declare @msgError VARCHAR(2000) = '-20080 No hay algoritmos disponibles para calcular una comision por rangos de tiempo para la tarifa numerio : ' +
                                      isnull(convert(varchar, @p_CODTARIFAVALOR), '')
              return cast(@msgError as INT);
            
          END 
        END;
      END 
      
      RETURN @v_VALUE;
      
    END;

GO

